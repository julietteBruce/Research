-- -*- M2-comint -*- hash: 310262007

i1 : programPaths#"gfan" = "/directory/to/gfan/"

o1 = /directory/to/gfan/

i2 : loadPackage("gfanInterface", Reload => true)

o2 = gfanInterface

o2 : Package

i3 : gfanInterface#"source file"

o3 = /private/tmp/macaulay2-20230205-25510-hsiem6/M2-release-1.21/M2/
     Macaulay2/packages/gfanInterface.m2

i4 : prefixDirectory | currentLayout#"programs"

o4 = /private/tmp/macaulay2-20230205-25510-hsiem6/M2-release-1.21/M2/BUILD/
     build-brew/usr-dist/x86_64-Darwin-macOS-12.6.3/libexec/Macaulay2/bin/

i5 : loadPackage("gfanInterface", Configuration => { "keepfiles" => true, "verbose" => true}, Reload => true);
using temporary file /private/tmp/M2-35084-0/172
running: /usr/local/opt/gfan/bin/gfan gfan --help < /private/tmp/M2-35084-0/172
This is a program for computing all reduced Groebner bases of a polynomial ideal. It takes the ring and a generating set for the ideal as input. By default the enumeration is done by an almost memoryless reverse search. If the ideal is symmetric the symmetry option is useful and enumeration will be done up to symmetry using a breadth first search. The program needs a starting Groebner basis to do its computations. If the -g option is not specified it will compute one using Buchberger's algorithm.
Options:
-g:
 Tells the program that the input is already a Groebner basis (with the initial term of each polynomial being the first ones listed). Use this option if it takes too much time to compute the starting (standard degree lexicographic) Groebner basis and the input is already a Groebner basis.

--symmetry:
 Tells the program to read in generators for a group of symmetries (subgroup of $S_n$) after having read in the ideal. The program checks that the ideal stays fixed when permuting the variables with respect to elements in the group. The program uses breadth first search to compute the set of reduced Groebner bases up to symmetry with respect to the specified subgroup.

-e:
 Echo. Output the generators for the symmetry group.

--disableSymmetryTest:
 When using --symmetry this option will disable the check that the group read off from the input actually is a symmetry group with respect to the input ideal.

--parameters value:
 With this option you can specify how many variables to treat as parameters instead of variables. This makes it possible to do computations where the coefficient field is the field of rational functions in the parameters.
--interrupt value:
 Interrupt the enumeration after a specified number of facets have been computed (works for usual symmetric traversals, but may not work in general for non-symmetric traversals or for traversals restricted to fans).

using temporary file /private/tmp/M2-35084-0/174
running: /usr/local/opt/gfan/bin/gfan _buchberger --help < /private/tmp/M2-35084-0/174
This program computes a reduced lexicographic Groebner basis of the polynomial ideal given as input. The default behavior is to use Buchberger's algorithm. The ordering of the variables is $a>b>c...$ (assuming that the ring is Q[a,b,c,...]).
Options:
-w:
 Compute a Groebner basis with respect to a degree lexicographic order with $a>b>c...$ instead. The degrees are given by a weight vector which is read from the input after the generating set has been read.

-r:
 Use the reverse lexicographic order (or the reverse lexicographic order as a tie breaker if -w is used). The input must be homogeneous if the pure reverse lexicographic order is chosen. Ignored if -W is used.

-W:
 Do a Groebner walk. The input must be a minimal Groebner basis. If -W is used -w is ignored.

-g:
 Do a generic Groebner walk. The input must be homogeneous and must be a minimal Groebner basis with respect to the reverse lexicographic term order. The target term order is always lexicographic. The -W option must be used.

--parameters value:
 With this option you can specify how many variables to treat as parameters instead of variables. This makes it possible to do computations where the coefficient field is the field of rational functions in the parameters.

using temporary file /private/tmp/M2-35084-0/176
running: /usr/local/opt/gfan/bin/gfan _doesidealcontain --help < /private/tmp/M2-35084-0/176
This program takes a marked Groebner basis of an ideal I and a set of polynomials on its input and tests if the polynomial set is contained in I by applying the division algorithm for each element. The output is 1 for true and 0 for false.
Options:
--remainder:
 Tell the program to output the remainders of the divisions rather than outputting 0 or 1.
--multiplier:
 Reads in a polynomial that will be multiplied to the polynomial to be divided before doing the division.

using temporary file /private/tmp/M2-35084-0/178
running: /usr/local/opt/gfan/bin/gfan _fancommonrefinement --help < /private/tmp/M2-35084-0/178
This program takes two polyhedral fans and computes their common refinement.
Options:
-i1 value:
 Specify the name of the first input file.
-i2 value:
 Specify the name of the second input file.
--stable:
 Compute the stable intersection.

using temporary file /private/tmp/M2-35084-0/180
running: /usr/local/opt/gfan/bin/gfan _fanlink --help < /private/tmp/M2-35084-0/180
This program takes a polyhedral fan and a vector and computes the link of the polyhedral fan around that vertex. The link will have lineality space dimension equal to the dimension of the relative open polyhedral cone of the original fan containing the vector.
Options:
-i value:
 Specify the name of the input file.
--symmetry:
 Reads in a fan stored with symmetry. The generators of the symmetry group must be given on the standard input.

--star:
 Computes the star instead. The star is defined as the smallest polyhedral fan containing all cones of the original fan containing the vector.

using temporary file /private/tmp/M2-35084-0/182
running: /usr/local/opt/gfan/bin/gfan _fanproduct --help < /private/tmp/M2-35084-0/182
This program takes two polyhedral fans and computes their product.
Options:
-i1 value:
 Specify the name of the first input file.
-i2 value:
 Specify the name of the second input file.

using temporary file /private/tmp/M2-35084-0/184
running: /usr/local/opt/gfan/bin/gfan _groebnercone --help < /private/tmp/M2-35084-0/184
This program computes a Groebner cone. Three different cases are handled. The input may be a marked reduced Groebner basis in which case its Groebner cone is computed. The input may be just a marked minimal basis in which case the cone computed is not a Groebner cone in the usual sense but smaller. (These cones are described in [Fukuda, Jensen, Lauritzen, Thomas]). The third possible case is that the Groebner cone is possibly lower dimensional and given by a pair of Groebner bases as it is useful to do for tropical varieties, see option --pair. The facets of the cone can be read off in section FACETS and the equations in section IMPLIED_EQUATIONS.
Options:
--restrict:
 Add an inequality for each coordinate, so that the the cone is restricted to the non-negative orthant.
--pair:
 The Groebner cone is given by a pair of compatible Groebner bases. The first basis is for the initial ideal and the second for the ideal itself. See the tropical section of the manual.
--asfan:
 Writes the cone as a polyhedral fan with all its faces instead. In this way the extreme rays of the cone are also computed.
--vectorinput:
 Compute a cone given list of inequalities rather than a Groebner cone. The input is an integer which specifies the dimension of the ambient space, a list of inequalities given as vectors and a list of equations.

using temporary file /private/tmp/M2-35084-0/186
running: /usr/local/opt/gfan/bin/gfan _homogeneityspace --help < /private/tmp/M2-35084-0/186
This program computes the homogeneity space of a list of polynomials - as a cone. Thus generators for the homogeneity space are found in the section LINEALITY_SPACE. If you wish the homogeneity space of an ideal you should first compute a set of homogeneous generators and call the program on these. A reduced Groebner basis will always suffice for this purpose.
Options:

using temporary file /private/tmp/M2-35084-0/188
running: /usr/local/opt/gfan/bin/gfan _homogenize --help < /private/tmp/M2-35084-0/188
This program homogenises a list of polynomials by introducing an extra variable. The name of the variable to be introduced is read from the input after the list of polynomials. Without the -w option the homogenisation is done with respect to total degree.
Example:
Input:
Q[x,y]{y-1}
z
Output:
Q[x,y,z]{y-z}
Options:
-i:
 Treat input as an ideal. This will make the program compute the homogenisation of the input ideal. This is done by computing a degree Groebner basis and homogenising it.
-w:
 Specify a homogenisation vector. The length of the vector must be the same as the number of variables in the ring. The vector is read from the input after the list of polynomials.

-H:
 Let the name of the new variable be H rather than reading in a name from the input.

using temporary file /private/tmp/M2-35084-0/190
running: /usr/local/opt/gfan/bin/gfan _initialforms --help < /private/tmp/M2-35084-0/190
This program converts a list of polynomials to a list of their initial forms with respect to the vector given after the list.
Options:
--ideal:
 Treat input as an ideal. This will make the program compute the initial ideal of the ideal generated by the input polynomials. The computation is done by computing a Groebner basis with respect to the given vector. The vector must be positive or the input polynomials must be homogeneous in a positive grading. None of these conditions are checked by the program.

--pair:
 Produce a pair of polynomial lists. Used together with --ideal this option will also write a compatible reduced Groebner basis for the input ideal to the output. This is useful for finding the Groebner cone of a non-monomial initial ideal.

--mark:
 If the --pair option is and the --ideal option is not used this option will still make sure that the second output basis is marked consistently with the vector.
--list:
 Read in a list of vectors instead of a single vector and produce a list of polynomial sets as output.

using temporary file /private/tmp/M2-35084-0/192
running: /usr/local/opt/gfan/bin/gfan _interactive --help < /private/tmp/M2-35084-0/192
This is a program for doing interactive walks in the Groebner fan of an ideal. The input is a Groebner basis defining the starting Groebner cone of the walk. The program will list all flippable facets of the Groebner cone and ask the user to choose one. The user types in the index (number) of the facet in the list. The program will walk through the selected facet and display the new Groebner basis and a list of new facet normals for the user to choose from. Since the program reads the user's choices through the the standard input it is recommended not to redirect the standard input for this program.
Options:
-L:
 Latex mode. The program will try to show the current Groebner basis in a readable form by invoking LaTeX and xdvi.

-x:
 Exit immediately.

-f:
 Tell the program to list the flipped reduced Groebner basis of the initial ideal for each flippable wall in the current Groebner cone.

-w:
 Tell the program to list (a Groebner basis with respect to the current term order for) the initial ideal for each flippable wall in the current Groebner cone.

-i:
 Tell the program to list the defining set of inequalities of the non-restricted Groebner cone as a set of vectors after having listed the current Groebner basis.

-W:
 Print weight vector. This will make the program print an interior vector of the current Groebner cone and a relative interior point for each flippable facet of the current Groebner cone.

--tropical:
 Traverse a tropical variety interactively.

using temporary file /private/tmp/M2-35084-0/194
running: /usr/local/opt/gfan/bin/gfan _ismarkedgroebnerbasis --help < /private/tmp/M2-35084-0/194
This program checks if a set of marked polynomials is a Groebner basis with respect to its marking. First it is checked if the markings are consistent with respect to a positive vector. Then Buchberger's S-criterion is checked. The output is boolean value.
Options:

using temporary file /private/tmp/M2-35084-0/196
running: /usr/local/opt/gfan/bin/gfan _krulldimension --help < /private/tmp/M2-35084-0/196
Takes an ideal $I$ and computes the Krull dimension of R/I where R is the polynomial ring. This is done by first computing a Groebner basis.
Options:
-g:
 Tell the program that the input is already a reduced Groebner basis.

using temporary file /private/tmp/M2-35084-0/198
running: /usr/local/opt/gfan/bin/gfan _latticeideal --help < /private/tmp/M2-35084-0/198
This program computes the lattice ideal of a lattice. The input is a list of generators for the lattice.
Options:
-t:
 Compute the toric ideal of the matrix whose rows are given on the input instead.
--convert:
 Does not do any computation, but just converts the vectors to binomials.

using temporary file /private/tmp/M2-35084-0/200
running: /usr/local/opt/gfan/bin/gfan _leadingterms --help < /private/tmp/M2-35084-0/200
This program converts a list of polynomials to a list of their leading terms.
Options:
-m:
 Do the same thing for a list of polynomial sets. That is, output the set of sets of leading terms.


using temporary file /private/tmp/M2-35084-0/202
running: /usr/local/opt/gfan/bin/gfan _markpolynomialset --help < /private/tmp/M2-35084-0/202
This program marks a set of polynomials with respect to the vector given at the end of the input, meaning that the largest terms are moved to the front. In case of a tie the lexicographic term order with $a>b>c...$ is used to break it.
Options:

using temporary file /private/tmp/M2-35084-0/204
running: /usr/local/opt/gfan/bin/gfan _minkowskisum --help < /private/tmp/M2-35084-0/204
This is a program for computing the normal fan of the Minkowski sum of the Newton polytopes of a list of polynomials.
Options:
--symmetry:
 Tells the program to read in generators for a group of symmetries (subgroup of $S_n$) after having read in the ideal. The program checks that the ideal stays fixed when permuting the variables with respect to elements in the group. The program uses breadth first search to compute the set of reduced Groebner bases up to symmetry with respect to the specified subgroup.

--disableSymmetryTest:
 When using --symmetry this option will disable the check that the group read off from the input actually is a symmetry group with respect to the input ideal.

--nocones:
 Tell the program to not list cones in the output.

using temporary file /private/tmp/M2-35084-0/206
running: /usr/local/opt/gfan/bin/gfan _minors --help < /private/tmp/M2-35084-0/206
This program will generate the r*r minors of a d*n matrix of indeterminates.
Options:
-r value:
 Specify r.
-d value:
 Specify d.
-n value:
 Specify n.
-M2:
 Use Macaulay2 conventions for order of variables.
--names:
 Assign names to the minors.
--dressian:
 Produce tropical defining the Dressian(3,n) instead. (The signs may not be correct, that is the equations may not be Pluecker relations.)
--pluckersymmetries:
 Do nothing but produce symmetry generators for the Pluecker ideal.
--symmetry:
 Produces a list of generators for the group of symmetries keeping the set of minors fixed. (Only without --names).
--parametrize:
 Parametrize the set of d times n matrices of Barvinok rank less than or equal to r-1 by a list of tropical polynomials.

using temporary file /private/tmp/M2-35084-0/208
running: /usr/local/opt/gfan/bin/gfan _mixedvolume --help < /private/tmp/M2-35084-0/208
This program computes the mixed volume of the Newton polytopes of a list of polynomials. The ring is specified on the input. After this follows the list of polynomials.
Options:
--vectorinput:
 Read in a list of point configurations instead of a polynomial ring and a list of polynomials.
--cyclic value:
 Use cyclic-n example instead of reading input.
--noon value:
 Use Noonburg-n example instead of reading input.
--chandra value:
 Use Chandrasekhar-n example instead of reading input.
--katsura value:
 Use Katsura-n example instead of reading input.
--gaukwa value:
 Use Gaukwa-n example instead of reading input.
--eco value:
 Use Eco-n example instead of reading input.
-j value:
 Number of threads

using temporary file /private/tmp/M2-35084-0/210
running: /usr/local/opt/gfan/bin/gfan _polynomialsetunion --help < /private/tmp/M2-35084-0/210
This program computes the union of a list of polynomial sets given as input. The polynomials must all belong to the same ring. The ring is specified on the input. After this follows the list of polynomial sets.
Options:
-s:
 Sort output by degree.


using temporary file /private/tmp/M2-35084-0/212
running: /usr/local/opt/gfan/bin/gfan _render --help < /private/tmp/M2-35084-0/212
This program renders a Groebner fan as an xfig file. To be more precise, the input is the list of all reduced Groebner bases of an ideal. The output is a drawing of the Groebner fan intersected with a triangle. The corners of the triangle are (1,0,0) to the right, (0,1,0) to the left and (0,0,1) at the top. If there are more than three variables in the ring these coordinates are extended with zeros. It is possible to shift the 1 entry cyclic with the option --shiftVariables.
Options:
-L:
 Make the triangle larger so that the shape of the Groebner region appears.
--shiftVariables value:
 Shift the positions of the variables in the drawing. For example with the value equal to 1 the corners will be right: (0,1,0,0,...), left: (0,0,1,0,...) and top: (0,0,0,1,...). The shifting is done modulo the number of variables in the polynomial ring. The default value is 0.

using temporary file /private/tmp/M2-35084-0/214
running: /usr/local/opt/gfan/bin/gfan _renderstaircase --help < /private/tmp/M2-35084-0/214
This program renders a staircase diagram of a monomial initial ideal to an xfig file. The input is a Groebner basis of a (not necessarily monomial) polynomial ideal. The initial ideal is given by the leading terms in the Groebner basis. Using the -m option it is possible to render more than one staircase diagram. The program only works for ideals in a polynomial ring with three variables.
Options:
-m:
 Read multiple ideals from the input. The ideals are given as a list of lists of polynomials. For each polynomial list in the list a staircase diagram is drawn.

-d value:
 Specifies the number of boxes being shown along each axis. Be sure that this number is large enough to give a correct picture of the standard monomials. The default value is 8.

-w value:
 Width. Specifies the number of staircase diagrams per row in the xfig file. The default value is 5.


using temporary file /private/tmp/M2-35084-0/216
running: /usr/local/opt/gfan/bin/gfan _resultantfan --help < /private/tmp/M2-35084-0/216
This program computes the resultant fan as defined in "Computing Tropical Resultants" by Jensen and Yu. The input is a polynomial ring followed by polynomials, whose coefficients are ignored. The output is the fan of coefficients such that the input system has a tropical solution.
Options:
--codimension:
 Compute only the codimension of the resultant fan and return.

--symmetry:
 Tells the program to read in generators for a group of symmetries (subgroup of $S_n$) after having read in the vector configuration. The program DOES NOT checks that the configuration stays fixed when permuting the variables with respect to elements in the group. The output is grouped according to the symmetry.

--nocones:
 Tells the program not to output the CONES and MAXIMAL_CONES sections, but still output CONES_COMPRESSED and MAXIMAL_CONES_COMPRESSED if --symmetry is used.

--special:
 Read in a zero-one vector from the standard input and specialize all variables with a one. That is, compute the stable intersection of the resultant fan with the subspace where the variables with a one in the vector are forced to zero. AT THE MOMENT ALSO A RELATIVE INTERIOR POINT OF A STARTING CONE IS READ.

--vectorinput:
 Read in a list of point configurations instead of a polynomial ring and a list of polynomials.

--projection:
 Use the projection method to compute the resultant fan. This works only if the resultant fan is a hypersurface. If this option is combined with --special, then the output fan lives in the subspace of the non-specialized coordinates.


using temporary file /private/tmp/M2-35084-0/218
running: /usr/local/opt/gfan/bin/gfan _saturation --help < /private/tmp/M2-35084-0/218
This program computes the saturation of the input ideal with the product of the variables x_1,...,x_n. The ideal does not have to be homogeneous.
Options:
-h:
 Tell the program that the input is a homogeneous ideal (with homogeneous generators).

--noideal:
 Do not treat input as an ideal but just factor out common monomial factors of the input polynomials.

using temporary file /private/tmp/M2-35084-0/220
running: /usr/local/opt/gfan/bin/gfan _secondaryfan --help < /private/tmp/M2-35084-0/220
This program computes the secondary fan of a vector configuration. The configuration is given as an ordered list of vectors. In order to compute the secondary fan of a point configuration an additional coordinate of ones must be added. For example {(1,0),(1,1),(1,2),(1,3)}.
Options:
--unimodular:
 Use heuristics to search for unimodular triangulation rather than computing the complete secondary fan
--scale value:
 Assuming that the first coordinate of each vector is 1, this option will take the polytope in the 1 plane and scale it. The point configuration will be all lattice points in that scaled polytope. The polytope must have maximal dimension. When this option is used the vector configuration must have full rank. This option may be removed in the future.
--restrictingfan value:
 Specify the name of a file containing a polyhedral fan in Polymake format. The computation of the Secondary fan will be restricted to this fan. If the --symmetry option is used then this restricting fan must be invariant under the symmetry and the orbits in the file must be with respect to the specified group of symmetries. The orbits of maximal cones of the file are then read in rather than the maximal cones.

--symmetry:
 Tells the program to read in generators for a group of symmetries (subgroup of $S_n$) after having read in the vector configuration. The program checks that the configuration stays fixed when permuting the variables with respect to elements in the group. The output is grouped according to the symmetry.

--nocones:
 Tells the program not to output the CONES and MAXIMAL_CONES sections, but still output CONES_COMPRESSED and MAXIMAL_CONES_COMPRESSED if --symmetry is used.
--interrupt value:
 Interrupt the enumeration after a specified number of facets have been computed (works for usual symmetric traversals, but may not work in general for non-symmetric traversals or for traversals restricted to fans).

using temporary file /private/tmp/M2-35084-0/222
running: /usr/local/opt/gfan/bin/gfan _stats --help < /private/tmp/M2-35084-0/222
This program takes a list of reduced Groebner bases for the same ideal and computes various statistics. The following information is listed: the number of bases in the input, the number of variables, the dimension of the homogeneity space, the maximal total degree of any polynomial in the input and the minimal total degree of any basis in the input, the maximal number of polynomials and terms in a basis in the input.
Options:

using temporary file /private/tmp/M2-35084-0/224
running: /usr/local/opt/gfan/bin/gfan _substitute --help < /private/tmp/M2-35084-0/224
This program changes the variable names of a polynomial ring. The input is a polynomial ring, a polynomial set in the ring and a new polynomial ring with the same coefficient field but different variable names. The output is the polynomial set written with the variable names of the second polynomial ring.
Example:
Input:
Q[a,b,c,d]{2a-3b,c+d}Q[b,a,c,x]
Output:
Q[b,a,c,x]{2*b-3*a,c+x}
Options:

using temporary file /private/tmp/M2-35084-0/226
running: /usr/local/opt/gfan/bin/gfan _tolatex --help < /private/tmp/M2-35084-0/226
This program converts ASCII math to TeX math. The data-type is specified by the options.
Options:
-h:
 Add a header to the output. Using this option the output will be LaTeXable right away.
--polynomialset_:
 The data to be converted is a list of polynomials.
--polynomialsetlist_:
 The data to be converted is a list of lists of polynomials.

using temporary file /private/tmp/M2-35084-0/228
running: /usr/local/opt/gfan/bin/gfan _topolyhedralfan --help < /private/tmp/M2-35084-0/228
This program takes a list of reduced Groebner bases and produces the fan of all faces of these. In this way by giving the complete list of reduced Groebner bases, the Groebner fan can be computed as a polyhedral complex. The option --restrict lets the user choose between computing the Groebner fan or the restricted Groebner fan.
Options:
--restrict:
 Add an inequality for each coordinate, so that the the cones are restricted to the non-negative orthant.
--symmetry:
 Tell the program to read in generators for a group of symmetries (subgroup of $S_n$) after having read in the ring. The output is grouped according to these symmetries. Only one representative for each orbit is needed on the input.


using temporary file /private/tmp/M2-35084-0/230
running: /usr/local/opt/gfan/bin/gfan _tropicalbasis --help < /private/tmp/M2-35084-0/230
This program computes a tropical basis for an ideal defining a tropical curve. Defining a tropical curve means that the Krull dimension of R/I is at most 1 + the dimension of the homogeneity space of I where R is the polynomial ring. The input is a generating set for the ideal. If the input is not homogeneous option -h must be used.
Options:
-h:
 Homogenise the input before computing a tropical basis and dehomogenise the output. This is needed if the input generators are not already homogeneous.

using temporary file /private/tmp/M2-35084-0/232
running: /usr/local/opt/gfan/bin/gfan _tropicalbruteforce --help < /private/tmp/M2-35084-0/232
This program takes a marked reduced Groebner basis for a homogeneous ideal and computes the tropical variety of the ideal as a subfan of the Groebner fan. The program is slow but works for any homogeneous ideal. If you know that your ideal is prime over the complex numbers or you simply know that its tropical variety is pure and connected in codimension one then use gfan_tropicalstartingcone and gfan_tropicaltraverse instead.
Options:

using temporary file /private/tmp/M2-35084-0/234
running: /usr/local/opt/gfan/bin/gfan _tropicalevaluation --help < /private/tmp/M2-35084-0/234
This program evaluates a tropical polynomial function in a given set of points.
Options:

using temporary file /private/tmp/M2-35084-0/236
running: /usr/local/opt/gfan/bin/gfan _tropicalfunction --help < /private/tmp/M2-35084-0/236
This program takes a polynomial and tropicalizes it. The output is piecewise linear function represented by a fan whose cones are the linear regions. Each ray of the fan gets the value of the tropical function assigned to it. In other words this program computes the normal fan of the Newton polytope of the input polynomial with additional information.Options:
--exponents:
 Tell program to read a list of exponent vectors instead.

using temporary file /private/tmp/M2-35084-0/238
running: /usr/local/opt/gfan/bin/gfan _tropicalhypersurface --help < /private/tmp/M2-35084-0/238
This program computes the tropical hypersurface defined by a principal ideal. The input is the polynomial ring followed by a set containing just a generator of the ideal.Options:

using temporary file /private/tmp/M2-35084-0/240
running: /usr/local/opt/gfan/bin/gfan _tropicalintersection --help < /private/tmp/M2-35084-0/240
This program computes the set theoretical intersection of a set of tropical hypersurfaces (or to be precise, their common refinement as a fan). The input is a list of polynomials with each polynomial defining a hypersurface. Considering tropical hypersurfaces as fans, the intersection can be computed as the common refinement of these. Thus the output is a fan whose support is the intersection of the tropical hypersurfaces.
Options:
--tropicalbasistest:
 This option will test that the input polynomials for a tropical basis of the ideal they generate by computing the tropical prevariety of the input polynomials and then refine each cone with the Groebner fan and testing whether each cone in the refinement has an associated monomial free initial ideal. If so, then we have a tropical basis and 1 is written as output. If not, then a zero is written to the output together with a vector in the tropical prevariety but not in the variety. The actual check is done on a homogenization of the input ideal, but this does not affect the result. (This option replaces the -t option from earlier gfan versions.)

--tplane:
 This option intersects the resulting fan with the plane x_0=-1, where x_0 is the first variable. To simplify the implementation the output is actually the common refinement with the non-negative half space. This means that "stuff at infinity" (where x_0=0) is not removed.
--symmetryPrinting:
 Parse a group of symmetries after the input has been read. Used when printing with --incidence.
--symmetryExploit:
 Restrict computation to the closed lexicographic fundamental domain of the specified symmetry group. This overwrites --restrict.
--nocones:
 Tells the program not to output the CONES and MAXIMAL_CONES sections, but still output CONES_COMPRESSED and MAXIMAL_CONES_COMPRESSED if --symmetry is used.
--restrict:
 Restrict the computation to a full-dimensional cone given by a list of marked polynomials. The cone is the closure of all weight vectors choosing these marked terms.
--stable:
 Find the stable intersection of the input polynomials using tropical intersection theory. This can be slow. Most other options are ignored.
--parameters value:
 With this option you can specify how many variables to treat as parameters instead of variables. This makes it possible to do computations where the coefficient field is the field of rational functions in the parameters.

using temporary file /private/tmp/M2-35084-0/242
running: /usr/local/opt/gfan/bin/gfan _tropicallifting --help < /private/tmp/M2-35084-0/242
This program is part of the Puiseux lifting algorithm implemented in Gfan and Singular. The Singular part of the implementation can be found in:

Anders Nedergaard Jensen, Hannah Markwig, Thomas Markwig:
 tropical.lib. A SINGULAR 3.0 library for computations in tropical geometry, 2007 

See also

http://www.mathematik.uni-kl.de/~keilen/de/tropical.html

and the paper

 Jensen, Markwig, Markwig: "An algorithm for lifting points in a tropical variety".

Example:

Run Singular from the directory where tropical.lib is located.
Give the following sequence of commands to Singular:

LIB "tropical.lib";
ring R=0,(t,x,y,z),dp;
ideal i=-y2t4+x2,yt3+xz+y;
intvec w=1,-2,0,2;
list L=tropicallifting(i,w,3);
displaytropicallifting(L,"subst");
This produces a Puiseux series solution to i with valuation (2,0,-2)
Options:
--noMult:
 Disable the multiplicity computation.
-n value:
 Number of variables that should have negative weight.
-c:
 Only output a list of vectors being the possible choices.

using temporary file /private/tmp/M2-35084-0/244
running: /usr/local/opt/gfan/bin/gfan _tropicallinearspace --help < /private/tmp/M2-35084-0/244
This program generates tropical equations for a tropical linear space in the Speyer sense given the tropical Pluecker coordinates as input.
Options:
-d value:
 Specify d.
-n value:
 Specify n.
--trees:
 list the boundary trees (assumes d=3)

using temporary file /private/tmp/M2-35084-0/246
running: /usr/local/opt/gfan/bin/gfan _tropicalmultiplicity --help < /private/tmp/M2-35084-0/246
This program computes the multiplicity of a tropical cone given a marked reduced Groebner basis for its initial ideal.
Options:

using temporary file /private/tmp/M2-35084-0/248
running: /usr/local/opt/gfan/bin/gfan _tropicalrank --help < /private/tmp/M2-35084-0/248
This program will compute the tropical rank of matrix given as input. Tropical addition is MAXIMUM.
Options:
--kapranov:
 Compute Kapranov rank instead of tropical rank.
--determinant:
 Compute the tropical determinant instead.

using temporary file /private/tmp/M2-35084-0/250
running: /usr/local/opt/gfan/bin/gfan _tropicalstartingcone --help < /private/tmp/M2-35084-0/250
This program computes a starting pair of marked reduced Groebner bases to be used as input for gfan_tropicaltraverse. The input is a homogeneous ideal whose tropical variety is a pure d-dimensional polyhedral complex.
Options:
-g:
 Tell the program that the input is already a reduced Groebner basis.
-d:
 Output dimension information to standard error.
--stable:
 Find starting cone in the stable intersection or, equivalently, pretend that the coefficients are genereric.

using temporary file /private/tmp/M2-35084-0/252
running: /usr/local/opt/gfan/bin/gfan _tropicaltraverse --help < /private/tmp/M2-35084-0/252
This program computes a polyhedral fan representation of the tropical variety of a homogeneous prime ideal $I$. Let $d$ be the Krull dimension of $I$ and let $\omega$ be a relative interior point of $d$-dimensional Groebner cone contained in the tropical variety. The input for this program is a pair of marked reduced Groebner bases with respect to the term order represented by $\omega$, tie-broken in some way. The first one is for the initial ideal $in_\omega(I)$ the second one for $I$ itself. The pair is the starting point for a traversal of the $d$-dimensional Groebner cones contained in the tropical variety. If the ideal is not prime but with the tropical variety still being pure $d$-dimensional the program will only compute a codimension $1$ connected component of the tropical variety.
Options:
--symmetry:
 Do computations up to symmetry and group the output accordingly. If this option is used the program will read in a list of generators for a symmetry group after the pair of Groebner bases have been read. Two advantages of using this option is that the output is nicely grouped and that the computation can be done faster.
--symsigns:
 Specify for each generator of the symmetry group an element of ${-1,+1}^n$ which by its multiplication on the variables together with the permutation will keep the ideal fixed. The vectors are given as the rows of a matrix.
--nocones:
 Tells the program not to output the CONES and MAXIMAL_CONES sections, but still output CONES_ORBITS and MAXIMAL_CONES_ORBITS if --symmetry is used.
--disableSymmetryTest:
 When using --symmetry this option will disable the check that the group read off from the input actually is a symmetry group with respect to the input ideal.

--stable:
 Traverse the stable intersection or, equivalently, pretend that the coefficients are genereric.
--interrupt value:
 Interrupt the enumeration after a specified number of facets have been computed (works for usual symmetric traversals, but may not work in general for non-symmetric traversals or for traversals restricted to fans).

using temporary file /private/tmp/M2-35084-0/254
running: /usr/local/opt/gfan/bin/gfan _tropicalweildivisor --help < /private/tmp/M2-35084-0/254
This program computes the tropical Weil divisor of piecewise linear (or tropical rational) function on a tropical k-cycle. See the Gfan manual for more information.
Options:
-i1 value:
 Specify the name of the Polymake input file containing the k-cycle.
-i2 value:
 Specify the name of the Polymake input file containing the piecewise linear function.

using temporary file /private/tmp/M2-35084-0/256
running: /usr/local/opt/gfan/bin/gfan _overintegers --help < /private/tmp/M2-35084-0/256
This program is an experimental implementation of Groebner bases for ideals in Z[x_1,...,x_n].
Several operations are supported by specifying the appropriate option:
 (1) computation of the reduced Groebner basis with respect to a given vector (tiebroken lexicographically),
 (2) computation of an initial ideal,
 (3) computation of the Groebner fan,
 (4) computation of a single Groebner cone.
Since Gfan only knows polynomial rings with coefficients being elements of a field, the ideal is specified by giving a set of polynomials in the polynomial ring Q[x_1,...,x_n]. That is, by using Q instead of Z when specifying the ring. The ideal MUST BE HOMOGENEOUS (in a positive grading) for computation of the Groebner fan. Non-homogeneous ideals are allowed for the other computations if the specified weight vectors are positive.
NOTE: This program is experimental and expected to change behaviour in future releases, so don't write your SAGE and M2 interfaces just yet.
Options:
--groebnerBasis:
 Asks the program to compute a marked Groebner basis with respect to a weight vector tie-broken lexicographically.
The input order is: Ring ideal vector.

--initialIdeal:
 Asks the program to compute an initial ideal with respect to a vector. The input order is: Ring ideal vector.

--groebnerFan:
 Asks the program to compute the Groebner fan. 
 The input order is: Ring ideal.

--groebnerCone:
 Asks the program to compute a single Groebner cone containing the specified vector in its relative interior. The output is stored as a fan. The input order is: Ring ideal vector.
-m:
 For the operations taking a vector as input, read in a list of vectors instead, and perform the operation for each vector in the list.
-g:
 Tells the program that the input is already a Groebner basis (with the initial term of each polynomial being the first ones listed). Use this option if the usual --groebnerFan is too slow.



i6 : QQ[x,y];

i7 : gfan {x,y};
using temporary file /private/tmp/M2-35084-0/258
running: /usr/local/opt/gfan/bin/gfan _bases < /private/tmp/M2-35084-0/258
Q[x1,x2]
{{
x2,
x1}
}


i8 : 
