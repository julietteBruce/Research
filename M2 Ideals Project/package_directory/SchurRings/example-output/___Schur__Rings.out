-- -*- M2-comint -*- hash: 936077135

i1 : S = schurRing(QQ,s,4)

o1 = S

o1 : SchurRing

i2 : R = schurRing(r,infinity)

o2 = R

o2 : SchurRing

i3 : numgens S

o3 = 4

i4 : numgens R

o4 = infinity

o4 : InfiniteNumber

i5 : Q = schurRing(q,4,GroupActing => "Sn")

o5 = Q

o5 : SchurRing

i6 : V = s_1

o6 = s
      1

o6 : S

i7 : dim V

o7 = 4

i8 : V * V

o8 = s  + s
      2    1,1

o8 : S

i9 : V^3

o9 = s  + 2s    + s
      3     2,1    1,1,1

o9 : S

i10 : W = s_{3}

o10 = s
       3

o10 : S

i11 : dim W

o11 = 20

i12 : U = s_{1,1,1}

o12 = s
       1,1,1

o12 : S

i13 : dim U

o13 = 4

i14 : W = symmetricPower(3,V)

o14 = s
       3

o14 : S

i15 : U = exteriorPower(3,V)

o15 = s
       1,1,1

o15 : S

i16 : exteriorPower(2,W)

o16 = s    + s
       5,1    3,3

o16 : S

i17 : symmetricPower(2,U)

o17 = s
       2,2,2

o17 : S

i18 : plethysm(W+U,W+U)

o18 = s  + s    + 2s      + 2s    + s      + 2s        + 2s      + 2s      +
       9    7,2     7,1,1     6,3    6,2,1     6,1,1,1     5,3,1     5,2,2  
      -----------------------------------------------------------------------
      3s        + 2s      + 2s        + 2s        + 2s      + 2s
        5,2,1,1     4,4,1     4,3,1,1     4,2,2,1     3,3,3     3,2,2,2

o18 : S

i19 : s_2 @ s_3

o19 = s  + s
       6    4,2

o19 : S

i20 : (W+U) @ (W+U)

o20 = s  + s    + 2s      + 2s    + s      + 2s        + 2s      + 2s      +
       9    7,2     7,1,1     6,3    6,2,1     6,1,1,1     5,3,1     5,2,2  
      -----------------------------------------------------------------------
      3s        + 2s      + 2s        + 2s        + 2s      + 2s
        5,2,1,1     4,4,1     4,3,1,1     4,2,2,1     3,3,3     3,2,2,2

o20 : S

i21 : W' = toS(W,Q)

o21 = q
       3

o21 : Q

i22 : U' = toS(U,Q)

o22 = q
       1,1,1

o22 : Q

i23 : W' * U'

o23 = q
       1,1,1

o23 : Q

i24 : cfW = classFunction(W')

o24 = ClassFunction{{1, 1, 1} => 1}
                    {2, 1} => 1
                    {3} => 1

o24 : ClassFunction

i25 : cfU = classFunction(U')

o25 = ClassFunction{{1, 1, 1} => 1}
                    {2, 1} => -1
                    {3} => 1

o25 : ClassFunction

i26 : cfWU = cfW * cfU

o26 = ClassFunction{{1, 1, 1} => 1}
                    {2, 1} => -1
                    {3} => 1

o26 : ClassFunction

i27 : symmetricFunction(cfWU,Q)

o27 = q
       1,1,1

o27 : Q

i28 : exteriorPower(2,W')

o28 = 0

o28 : Q

i29 : symmetricPower(2,U')

o29 = q
       3

o29 : Q

i30 : toE U

o30 = e
       3

o30 : QQ[e ..e , p ..p , h ..h ]
          1   4   1   4   1   4

i31 : toH U

       3
o31 = h  - 2h h  + h
       1     1 2    3

o31 : QQ[e ..e , p ..p , h ..h ]
          1   4   1   4   1   4

i32 : toP W

      1 3   1       1
o32 = -p  + -p p  + -p
      6 1   2 1 2   3 3

o32 : QQ[e ..e , p ..p , h ..h ]
          1   4   1   4   1   4

i33 : A = symmetricRing S

o33 = A

o33 : PolynomialRing

i34 : schurRing A === S

o34 = true

i35 : T = schurRing(S,t,3)

o35 = T

o35 : SchurRing

i36 : V' = t_1

o36 = t
       1

o36 : T

i37 : schurLevel T

o37 = 2

i38 : schurLevel S

o38 = 1

i39 : schurLevel QQ

o39 = 0

i40 : symmetricPower(3,V*V')

o40 = s t  + s   t    + s     t
       3 3    2,1 2,1    1,1,1 1,1,1

o40 : T

i41 : exteriorPower(3,V*V')

o41 = s     t  + s   t    + s t
       1,1,1 3    2,1 2,1    3 1,1,1

o41 : T

i42 : n = 4

o42 = 4

i43 : M = {1_S}

o43 = {s  }
        ()

o43 : List

i44 : schurResolution(V,M,DegreeLimit => n)

o44 = {{(0, s  )}, {(1, s )}, {(2, s   )}, {(3, s     )}, {(4, s       )}}
             ()          1          1,1          1,1,1          1,1,1,1

o44 : List

i45 : rep = q_n + q_(n-1,1)

o45 = q  + q
       4    3,1

o45 : Q

i46 : M = {q_n}

o46 = {q }
        4

o46 : List

i47 : sR = schurResolution(rep,M,DegreeLimit => n)

o47 = {{(0, q )}, {(1, q  + q   )}, {(2, q    + q     )}, {(3, q      +
             4          4    3,1          3,1    2,1,1          2,1,1  
      -----------------------------------------------------------------------
      q       )}, {(4, q       )}}
       1,1,1,1          1,1,1,1

o47 : List

i48 : eP2rep = exteriorPower(2,rep)

o48 = q    + q
       3,1    2,1,1

o48 : Q

i49 : eP2rep == last sR#2#0

o49 = true

i50 : 
