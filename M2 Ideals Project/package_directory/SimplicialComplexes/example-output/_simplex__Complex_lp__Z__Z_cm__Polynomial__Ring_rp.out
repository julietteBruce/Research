-- -*- M2-comint -*- hash: -490406779

i1 : S = ZZ[a..e];

i2 : irrelevant = simplexComplex (-1, S)

o2 = simplicialComplex | 1 |

o2 : SimplicialComplex

i3 : monomialIdeal irrelevant

o3 = monomialIdeal (a, b, c, d, e)

o3 : MonomialIdeal of S

i4 : dim irrelevant

o4 = -1

i5 : fVector irrelevant

o5 = {1}

o5 : List

i6 : assert(facets irrelevant === {1_S})

i7 : assert(dim irrelevant === -1 and fVector irrelevant === {1})

i8 : Δ0 = simplexComplex (0, S)

o8 = simplicialComplex | a |

o8 : SimplicialComplex

i9 : monomialIdeal Δ0

o9 = monomialIdeal (b, c, d, e)

o9 : MonomialIdeal of S

i10 : dim Δ0

o10 = 0

i11 : fVector Δ0

o11 = {1, 1}

o11 : List

i12 : assert(facets Δ0 === {a} and dim Δ0 === 0)

i13 : assert(fVector Δ0 == {1,1})

i14 : Δ1 = simplexComplex (1, S)

o14 = simplicialComplex | ab |

o14 : SimplicialComplex

i15 : monomialIdeal Δ1

o15 = monomialIdeal (c, d, e)

o15 : MonomialIdeal of S

i16 : dim Δ1

o16 = 1

i17 : fVector Δ1

o17 = {1, 2, 1}

o17 : List

i18 : assert(facets Δ1 === {a*b} and dim Δ1 === 1)

i19 : assert(fVector Δ1 === {1,2,1})

i20 : Δ2 = simplexComplex (2, S)

o20 = simplicialComplex | abc |

o20 : SimplicialComplex

i21 : monomialIdeal Δ2

o21 = monomialIdeal (d, e)

o21 : MonomialIdeal of S

i22 : dim Δ2

o22 = 2

i23 : fVector Δ2

o23 = {1, 3, 3, 1}

o23 : List

i24 : assert(facets Δ2 === {a*b*c} and dim Δ2 === 2)

i25 : assert(fVector Δ2 === {1,3,3,1})

i26 : Δ3 = simplexComplex (3, S)

o26 = simplicialComplex | abcd |

o26 : SimplicialComplex

i27 : monomialIdeal Δ3

o27 = monomialIdeal e

o27 : MonomialIdeal of S

i28 : dim Δ3

o28 = 3

i29 : fVector Δ3

o29 = {1, 4, 6, 4, 1}

o29 : List

i30 : assert(facets Δ3 === {a*b*c*d} and dim Δ3 === 3)

i31 : assert(fVector Δ3 === toList apply(-1..3, i -> binomial(3+1,i+1)))

i32 : Δ4 = simplexComplex (4, S)

o32 = simplicialComplex | abcde |

o32 : SimplicialComplex

i33 : monomialIdeal Δ4

o33 = monomialIdeal ()

o33 : MonomialIdeal of S

i34 : dim Δ4

o34 = 4

i35 : fVector Δ4

o35 = {1, 5, 10, 10, 5, 1}

o35 : List

i36 : assert(facets Δ4 === {a*b*c*d*e} and dim Δ4 === 4)

i37 : assert(fVector Δ4 === toList apply(-1..4, i -> binomial(4+1,i+1)))

i38 : 
