-- -*- M2-comint -*- hash: -1529821785

i1 : L = {a,b,c,d,e}

o1 = {a, b, c, d, e}

o1 : List

i2 : S = (a,b,c,d,e)

o2 = (a, b, c, d, e)

o2 : Sequence

i3 : ()

o3 = ()

o3 : Sequence

i4 : (1,2)

o4 = (1, 2)

o4 : Sequence

i5 : (1)

o5 = 1

i6 : toSequence {1}

o6 = 1 : (1)

o6 : Sequence

i7 : 10000*{3,4,5} + {1,2,3}

o7 = {30001, 40002, 50003}

o7 : List

i8 : v = [1,2,3]

o8 = [1, 2, 3]

o8 : Array

i9 : ZZ[a,b,c]

o9 = ZZ[a..c]

o9 : PolynomialRing

i10 : v = <|1,2,3|>

o10 = <|1, 2, 3|>

o10 : AngleBarList

i11 : v#1

o11 = 2

i12 : Container = new Type of BasicList

o12 = Container

o12 : Type

i13 : t = new Container from {a,b}

o13 = Container{a, b}

o13 : Container

i14 : Container ++ Container := join;

i15 : t ++ t

o15 = Container{a, b, a, b}

o15 : Container

i16 : A = new MutableList from {a,b,c}

o16 = MutableList{...3...}

o16 : MutableList

i17 : peek A

o17 = MutableList{a, b, c}

i18 : A#2 = 1234;

i19 : A

o19 = MutableList{...3...}

o19 : MutableList

i20 : peek A

o20 = MutableList{a, b, 1234}

i21 : r = Bag {100!}; r

o22 = -*a bagged integer*-

o22 : Bag

i23 : q = Bag {1/100!}; q

o24 = -*a bagged rational number*-

o24 : Bag

i25 : unbag q

                                                                             
o25 = -----------------------------------------------------------------------
      93326215443944152681699238856266700490715968264381621468592963895217599
      =======================================================================
              1
      -----------------------------------------------------------------------
      99322991560894146397615651828625369792082722375825118521091686400000000
      =======================================================================
      ----------------
      0000000000000000

o25 : QQ

i26 : showStructure(List,Sequence,Array,Container,MutableList,Bag,BasicList)

o26 = Thing : BasicList : Container
                          MutableList : Bag
                          VisibleList : Array
                                        List
                                        Sequence

o26 : Descent

i27 : L = {926, 621, 429, 67, 594, 904, 264, 18, 35, 961};

i28 : #L

o28 = 10

i29 : length L

o29 = 10

i30 : L#0

o30 = 926

i31 : L#2

o31 = 429

i32 : L#-1

o32 = 961

i33 : L_1

o33 = 621

i34 : L_{3,6}

o34 = {67, 264}

o34 : List

i35 : first L

o35 = 926

i36 : last L

o36 = 961

i37 : A = {3,4,,5}

o37 = {3, 4, , 5}

o37 : List

i38 : peek A

o38 = {3, 4, null, 5}

i39 : A#2

i40 : 1 .. 5, x_1 .. x_5, a .. e

o40 = ((1, 2, 3, 4, 5), (x , x , x , x , x ), (a, b, c, d, e))
                          1   2   3   4   5

o40 : Sequence

i41 : 12:a

o41 = (a, a, a, a, a, a, a, a, a, a, a, a)

o41 : Sequence

i42 : 1:a

o42 = 1 : (a)

o42 : Sequence

i43 : A = {3 .. 6, 9, 3:12}

o43 = {(3, 4, 5, 6), 9, (12, 12, 12)}

o43 : List

i44 : A = splice {3..6, 9, 3:12}

o44 = {3, 4, 5, 6, 9, 12, 12, 12}

o44 : List

i45 : QQ[a..c,x_1..x_4]

o45 = QQ[a..c, x ..x ]
                1   4

o45 : PolynomialRing

i46 : L_{1..3,-3..-1}

o46 = {621, 429, 67, 18, 35, 961}

o46 : List

i47 : A = {{a,b,c},{d,{e,f}}}

o47 = {{a, b, c}, {d, {e, f}}}

o47 : List

i48 : #A

o48 = 2

i49 : #(first A)

o49 = 3

i50 : flatten A

o50 = {a, b, c, d, {e, f}}

o50 : List

i51 : splice (a, (b, c), (d, (e, f, (g, h))) )

o51 = (a, b, c, d, (e, f, (g, h)))

o51 : Sequence

i52 : deepSplice (a, (b, c), (d, (e, f, (g, h))) )

o52 = (a, b, c, d, e, f, g, h)

o52 : Sequence

i53 : T = {{a,1},{b,2},{c,3}}

o53 = {{a, 1}, {b, 2}, {c, 3}}

o53 : List

i54 : isTable T

o54 = true

i55 : MatrixExpression T

o55 = | a 1 |
      | b 2 |
      | c 3 |

o55 : Expression of class MatrixExpression

i56 : table({1,2,3},{7,8},(i,j) -> 1000*i+j)

o56 = {{1007, 1008}, {2007, 2008}, {3007, 3008}}

o56 : List

i57 : pack(1..15, 4)

o57 = {{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15}}

o57 : List

i58 : mingle({{1,2,3,4}, {10,20,30,40}, {100,200,300,400}, {a, b}})

o58 = {1, 10, 100, a, 2, 20, 200, b, 3, 30, 300, 4, 40, 400}

o58 : List

i59 : 
      
      L = {926, 621, 429, 67, 594, 904, 264, 18, 35, 961};

i60 : append(L, -10)

o60 = {926, 621, 429, 67, 594, 904, 264, 18, 35, 961, -10}

o60 : List

i61 : L

o61 = {926, 621, 429, 67, 594, 904, 264, 18, 35, 961}

o61 : List

i62 : L = append(L, -10); L

o63 = {926, 621, 429, 67, 594, 904, 264, 18, 35, 961, -10}

o63 : List

i64 : L = prepend(-20, L)

o64 = {-20, 926, 621, 429, 67, 594, 904, 264, 18, 35, 961, -10}

o64 : List

i65 : L = insert(5, -30, L)

o65 = {-20, 926, 621, 429, 67, -30, 594, 904, 264, 18, 35, 961, -10}

o65 : List

i66 : L = switch(1, 2, L)

o66 = {-20, 621, 926, 429, 67, -30, 594, 904, 264, 18, 35, 961, -10}

o66 : List

i67 : L = delete(-10, L)

o67 = {-20, 621, 926, 429, 67, -30, 594, 904, 264, 18, 35, 961}

o67 : List

i68 : L = drop(L, {1,1})

o68 = {-20, 926, 429, 67, -30, 594, 904, 264, 18, 35, 961}

o68 : List

i69 : L = drop(L, 2)

o69 = {429, 67, -30, 594, 904, 264, 18, 35, 961}

o69 : List

i70 : L = drop(L, -2)

o70 = {429, 67, -30, 594, 904, 264, 18}

o70 : List

i71 : L = take(L, 6)

o71 = {429, 67, -30, 594, 904, 264}

o71 : List

i72 : L = take(L, {1,4})

o72 = {67, -30, 594, 904}

o72 : List

i73 : L = between(-5, L)

o73 = {67, -5, -30, -5, 594, -5, 904}

o73 : List

i74 : L

o74 = {67, -5, -30, -5, 594, -5, 904}

o74 : List

i75 : reverse L

o75 = {904, -5, 594, -5, -30, -5, 67}

o75 : List

i76 : sort L

o76 = {-30, -5, -5, -5, 67, 594, 904}

o76 : List

i77 : rsort L

o77 = {904, 594, 67, -5, -5, -5, -30}

o77 : List

i78 : unique L

o78 = {67, -5, -30, 594, 904}

o78 : List

i79 : join(a..f, 1..6)

o79 = (a, b, c, d, e, f, 1, 2, 3, 4, 5, 6)

o79 : Sequence

i80 : x_1..x_3 | y_1..y_4

o80 = (x , x , x , y , y , y , y )
        1   2   3   1   2   3   4

o80 : Sequence

i81 : scan({a,b,c}, print)
a
b
c

i82 : scan({3,5,7,11,44,55,77}, i -> if even i then break i)

o82 = 44

i83 : apply({1,2,3,4}, i -> i^2)

o83 = {1, 4, 9, 16}

o83 : List

i84 : {1,2,3,4} / (i -> i^2)

o84 = {1, 4, 9, 16}

o84 : List

i85 : (i -> i^2) \ {1,2,3,4}

o85 = {1, 4, 9, 16}

o85 : List

i86 : {1,2,3,4} / (i -> i^2) / (j -> 1000*j)

o86 = {1000, 4000, 9000, 16000}

o86 : List

i87 : (j -> 1000*j) \ (i -> i^2) \ {1,2,3,4}

o87 = {1000, 4000, 9000, 16000}

o87 : List

i88 : (j -> 1000*j) @@ (i -> i^2) \ {1,2,3,4}

o88 = {1000, 4000, 9000, 16000}

o88 : List

i89 : apply({1,2,3}, {7,8,9}, (i,j) -> 1000*i+j)

o89 = {1007, 2008, 3009}

o89 : List

i90 : applyTable( {{1,2,3},{4,5}}, i -> i^2)

o90 = {{1, 4, 9}, {16, 25}}

o90 : List

i91 : fold((i,j) -> i*10+j, {7,3,5,4,2})

o91 = 73542

i92 : accumulate((i,j) -> i*10+j, {7,3,5,4,2})

o92 = {73, 735, 7354, 73542}

o92 : List

i93 : select({12, 3, -10, 42, 7, 6, 53}, even)

o93 = {12, -10, 42, 6}

o93 : List

i94 : select({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

o94 = {-10, 42, 53}

o94 : List

i95 : select(2, {12, 3, -10, 42, 7, 6, 53}, even)

o95 = {12, -10}

o95 : List

i96 : positions({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

o96 = {2, 3, 6}

o96 : List

i97 : position({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

o97 = 2

i98 : position({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40, Reverse => true)

o98 = 6

i99 : number({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

o99 = 3

i100 : R = QQ[x,y,z, MonomialOrder => Lex];

i101 : max {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

        3
o101 = x

o101 : R

i102 : maxPosition {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

o102 = 2

i103 : min {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

o103 = z

o103 : R

i104 : minPosition {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

o104 = 4

i105 : any({3, 6, 7, 8}, even)

o105 = true

i106 : all({3, 6, 7, 8}, even)

o106 = false

i107 : 
