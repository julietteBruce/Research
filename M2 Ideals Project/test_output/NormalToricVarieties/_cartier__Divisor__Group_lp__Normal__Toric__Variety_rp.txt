needsPackage "NormalToricVarieties"

F2E0 =  PP2 = toricProjectiveSpace 2;

F2E1 =  cartierDivisorGroup PP2

F2E2 =  assert (isSmooth PP2 and weilDivisorGroup PP2 === cartierDivisorGroup PP2)

F2E3 =  assert (id_(cartierDivisorGroup PP2) == fromCDivToWDiv PP2)

F2E4 =  FF7 = hirzebruchSurface 7;

F2E5 =  cartierDivisorGroup FF7

F2E6 =  assert (isSmooth FF7 and weilDivisorGroup FF7 === cartierDivisorGroup FF7)

F2E7 =  assert (id_(cartierDivisorGroup FF7) == fromCDivToWDiv FF7)

F2E8 =  U = normalToricVariety ({{4,-1},{0,1}},{{0,1}});

F2E9 =  assert (isSimplicial U and not isSmooth U and not isComplete U)

F2E10 =  cartierDivisorGroup U

F2E11 =  weilDivisorGroup U

F2E12 =  prune coker fromCDivToWDiv U

F2E13 =  assert ( (coker fromCDivToWDiv U) ** QQ == 0)

F2E14 =  X = weightedProjectiveSpace {1,2,2,3,4};

F2E15 =  assert (isSimplicial X and not isSmooth X and isComplete X)

F2E16 =  cartierDivisorGroup X

F2E17 =  weilDivisorGroup X

F2E18 =  prune coker fromCDivToWDiv X

F2E19 =  assert (rank coker fromCDivToWDiv X === 0)

F2E20 =  Q = normalToricVariety ({{1,0,0},{0,1,0},{0,0,1},{1,1,-1}},{{0,1,2,3}});

F2E21 =  assert (not isSimplicial Q and not isComplete Q)

F2E22 =  cartierDivisorGroup Q

F2E23 =  weilDivisorGroup Q

F2E24 =  prune coker fromCDivToWDiv Q

F2E25 =  assert (rank coker fromCDivToWDiv Q === 1)

F2E26 =  Y = normalToricVariety (id_(ZZ^3) | -id_(ZZ^3));

F2E27 =  assert (not isSimplicial Y and isComplete Y)

F2E28 =  cartierDivisorGroup Y

F2E29 =  weilDivisorGroup Y

F2E30 =  prune cokernel fromCDivToWDiv Y

F2E31 =  assert (rank coker fromCDivToWDiv Y === 4)

