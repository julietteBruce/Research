needsPackage "NormalToricVarieties"

F61E0 =  PP2 = toricProjectiveSpace 2;

F61E1 =  A1 = fromWDivToCl PP2

F61E2 =  assert ( (target A1, source A1) === (classGroup PP2, weilDivisorGroup PP2) )

F61E3 =  assert ( A1 * matrix rays PP2 == 0)

F61E4 =  X = weightedProjectiveSpace {1,2,2,3,4};

F61E5 =  A2 = fromWDivToCl X

F61E6 =  assert ( (target A2, source A2) === (classGroup X, weilDivisorGroup X) )

F61E7 =  assert ( A2 * matrix rays X == 0)

F61E8 =  Y = normalToricVariety ( id_(ZZ^3) | - id_(ZZ^3));

F61E9 =  A3 = fromWDivToCl Y

F61E10 =  classGroup Y

F61E11 =  assert ( (target A3, source A3) === (classGroup Y, weilDivisorGroup Y) )

F61E12 =  assert ( A3 * matrix rays Y == 0)

F61E13 =  U = normalToricVariety ({{4,-1},{0,1}},{{0,1}});

F61E14 =  A4 = fromWDivToCl U

F61E15 =  classGroup U

F61E16 =  assert ( (target A4, source A4) === (classGroup U, weilDivisorGroup U) )

F61E17 =  assert ( A4 * matrix rays U == 0)

F61E18 =  assert ( transpose matrix degrees ring PP2 === fromWDivToCl PP2)

F61E19 =  assert ( transpose matrix degrees ring X === fromWDivToCl X)

