needsPackage "NumericalSchubertCalculus"

F0E0 =  R := ZZ

F0E1 =  result := LRtriple(n,m);

F0E2 =  stdio << "the fixed flags :\n" << result_0;

F0E3 =  stdio << "polynomial system solved :\n" << result_1;

F0E4 =  stdio << "solutions :\n" << result_2;

F1E0 =  k = 3;

F1E1 =  n = 6;

F1E2 =  SchPblm = {

         ({2,1}, random(CC^6,CC^6)),

         ({2,1}, random(CC^6,CC^6)),

         ({2,1}, random(CC^6,CC^6))

         };

F1E3 =  resetStatistics()

F1E4 =  solveSchubertProblem(SchPblm, k,n)

F1E5 =  printStatistics()

F2E0 =  R := ZZ;

F2E1 =  n := 6;

F2E2 =  m := matrix{{3, 2, 4, 6}};

F2E3 =  t := LRtriple(n,m);

F2E4 =  w := wrapTriplet(t);

F3E0 =  (ipt, otp) := PieriHomotopies(2,2);

F3E1 =  print ipt

F3E2 =  print otp

F3E3 =  in0 = ipt_0

F3E4 =  out0 = otp_0

F3E5 =  m = in0|out0

F3E6 =  det m

F4E0 =  k = 3;

F4E1 =  n = 6;

F4E2 =  SchPblm = {

         ({2,1}, random(CC^6,CC^6)),

         ({2,1}, random(CC^6,CC^6)),

         ({2,1}, random(CC^6,CC^6))

         };

F4E3 =  solveSchubertProblem(SchPblm, k,n)

F5E0 =  k=3

F5E1 =  l1={2,1};

F5E2 =  l2={2,1};

F5E3 =  l3={2,1};

F5E4 =  F = {(l1, id_(CC^n)), (l2, rsort id_(CC^n)), (l3,random(CC^n,CC^n))}

F5E5 =  G = randomSchubertProblemInstance({l1,l2,l3},k,n);

F5E6 =  S = solveSchubertProblem(F,k,n);

F5E7 =  FlagsF = F/last;

F5E8 =  FlagsG = G/last;

F5E9 =  time S' = changeFlags(S,({l1,l2,l3},FlagsF,FlagsG))

F5E10 =  assert all(S', s-> checkIncidenceSolution(s,G))

F5E11 =  time S' = changeFlags(S,({l1,l2,l3},FlagsF,FlagsG), OneHomotopy=>false)

F5E12 =  assert all(S', s-> checkIncidenceSolution(s,G))

F6E0 =  k = 3

F6E1 =  SchPblm = {

     	 ({2,1}, random(CC^6,CC^6)),

     	 ({2,1}, random(CC^6,CC^6)),

     	 ({2,1}, random(CC^6,CC^6))

     	 };

F6E2 =  solveSchubertProblem(SchPblm, k,n)

F7E0 =  LRnumber({{1},{1},{1},{1}},2,4)

F7E1 =  LRnumber({{2,4},{2,4},{2,4},{2,4}},2,4)

F7E2 =  LRnumber({{1},{1},{1},{1}},2,4,Strategy => "phc")

F8E0 =  r := PieriRootCount(3,2,1);

F8E1 =  print r

F9E0 =  Pblm = {

         ({2,1}, random(RR^6,RR^6)),

         ({2,1}, random(RR^6,RR^6)),

         ({2,1}, random(RR^6,RR^6))

         }

F9E1 =  S = solveSchubertProblem(Pblm, 3,6)

F9E2 =  solutionsToAffineCoords S

F10E0 =  randomSchubertProblemInstance({{1},{1},{1},{1}},2,4)

F10E1 =  randomSchubertProblemInstance({{2,4},{2,4},{2,4},{2,4}},2,4)

F11E0 =  (f, p, s) = LRtriple(6,matrix{{3, 2, 4, 6}});

F11E1 =  (R, pols, sols, fixedFlags, movedFlag, solutionPlanes) = parseTriplet(f, p, s)

F11E2 =  vars(R)

F11E3 =  peek sols

F11E4 =  peek solutionPlanes

F12E0 =  k = 3;

F12E1 =  n = 6;

F12E2 =  SchPblm = {

         ({2,1}, random(CC^6,CC^6)),

         ({2,1}, random(CC^6,CC^6)),

         ({1}, random(CC^6,CC^6)),

         ({1}, random(CC^6,CC^6)),

         ({1}, random(CC^6,CC^6))

         };

F12E3 =  solveSimpleSchubert(SchPblm, k,n)

F13E0 =  R = ZZ;

F13E1 =  n = 7;

F13E2 =  M = matrix{{3, 3, 6, 7},{2, 3, 5, 7}};

F13E3 =  LRrule(n,M)

F13E4 =  LRrule(7, matrix{{2,3,6,7},{1,3,5,7},{1,2,5,7}})

F14E0 =  SchPblm = randomSchubertProblemInstance ({{1},{1},{1},{1}},2,4)

F14E1 =  setVerboseLevel 0;

F14E2 =  S = solveSchubertProblem(SchPblm,2,4)

F14E3 =  assert all(S,s->checkIncidenceSolution(s,SchPblm))

F14E4 =  setVerboseLevel 1;

F14E5 =  S = solveSchubertProblem(SchPblm,2,4)

F14E6 =  assert all(S,s->checkIncidenceSolution(s,SchPblm))

F15E0 =  l = {2,1};

F15E1 =  k = 2;

F15E2 =  n = 4;

F15E3 =  partition2bracket(l,k,n)

F15E4 =  k = 3;

F15E5 =  n = 6;

F15E6 =  partition2bracket(l,k,n)

F16E0 =  k=4;

F16E1 =  n = 8;

F16E2 =  SchubProbP = {{2,2},{2,2},{2,2},{1},{1},{1},{1}}

F16E3 =  NSC2phc(SchubProbP,k,n)

F16E4 =  k=4;

F16E5 =  n = 8;

F16E6 =  SchubProbB = {{3,4,7,8},{3,4,7,8},{3,4,7,8},{4,6,7,8},{4,6,7,8},{4,6,7,8},{4,6,7,8}}

F16E7 =  NSC2phc(SchubProbB,4,8)

F17E0 =  b = {1,3};

F17E1 =  n = 4;

F17E2 =  bracket2partition(b,n)

F17E3 =  n = 6;

F17E4 =  bracket2partition(b,n)

F17E5 =  b = {2,4,6};

F17E6 =  bracket2partition(b,n)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F4E0", "F4E1", "F4E2", "F4E3", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F5E9", "F5E10", "F5E11", "F5E12", "F6E0", "F6E1", "F6E2", "F7E0", "F7E1", "F7E2", "F8E0", "F8E1", "F9E0", "F9E1", "F9E2", "F10E0", "F10E1", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F12E0", "F12E1", "F12E2", "F12E3", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F15E6", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F16E5", "F16E6", "F16E7", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6"}
