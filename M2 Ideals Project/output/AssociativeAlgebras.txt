needsPackage "AssociativeAlgebras"

F0E0 =  toRationalFunction {1,3,6,10,15,21}

F0E1 =  toRationalFunction {1,3,6,10,15,21,28}

F0E2 =  toRationalFunction apply(10, i -> binomial(i+3,3))

F0E3 =  A = QQ[x,y]/ideal{x^2,x*y}

F0E4 =  kRes = res(coker vars A, LengthLimit => 10);

F0E5 =  kBetti = apply(10, i -> numcols kRes.dd_i)

F0E6 =  toRationalFunction kBetti

F1E0 =  C = fourDimSklyanin(ZZ/32003,{a,b,c,d})

F1E1 =  centralElements(C,2)

F1E2 =  apply(8, i -> numgens source ncBasis(i,C))

F1E3 =  apply(8, i -> binomial(i+3,3))

F2E0 =  R = QQ[q]/ideal{q^4+q^3+q^2+q+1}

F2E1 =  A = skewPolynomialRing(R,promote(2,R),{x,y,z,w})

F2E2 =  x*y == 2*y*x

F2E3 =  B = skewPolynomialRing(R,q,{x,y,z,w})

F2E4 =  x*y == q*y*x

F2E5 =  Bop = oppositeRing B

F2E6 =  y*x == q*x*y

F2E7 =  C = skewPolynomialRing(QQ,2_QQ, {x,y,z,w})

F2E8 =  x*y == 2*y*x

F2E9 =  D = skewPolynomialRing(QQ,1_QQ, {x,y,z,w})

F2E10 =  isCommutative C

F2E11 =  isCommutative D

F2E12 =  Cop = oppositeRing C

F2E13 =  y*x == 2*x*y

F3E0 =  A = QQ<|x,y,z|>

F3E1 =  I = ideal{x*z-z*x, y*z, x*y^2-y^2*x, x^3*y-y*x^3}

F3E2 =  J = quadraticClosure I

F4E0 =  R = QQ[a,b,c,d, SkewCommutative=>{2,3}]

F4E1 =  I = ideal(a*d-b*c)

F4E2 =  S = R/I

F4E3 =  S' = toFreeAlgebraQuotient(S)

F4E4 =  ideal S'

F5E0 =  B = skewPolynomialRing(QQ,(-1)_QQ,{x,y,z,w})

F5E1 =  sigma = map(B,B,{y,z,w,x})

F5E2 =  C = oreExtension(B,sigma,a)

F5E3 =  sigmaC = map(C,C,{y,z,w,x,a})

F5E4 =  normalElements(sigmaC,1)

F5E5 =  normalElements(sigmaC,2)

F5E6 =  normalElements(sigmaC * sigmaC,2)

F5E7 =  normalElements(sigmaC * sigmaC * sigmaC, 3)

F6E0 =  A = QQ<|x,y,z|>

F6E1 =  p = y*z + z*y - x^2

F6E2 =  q = x*z + z*x - y^2

F6E3 =  r = z^2 - x*y - y*x

F6E4 =  I = ideal{p,q,r}

F6E5 =  B = A/I

F6E6 =  bas = ncBasis(4,B)

F7E0 =  S = skewPolynomialRing(QQ,1_QQ,{x_1,x_2,x_3,x_4})

F7E1 =  L = lineSchemeFourDim(S,M);

F7E2 =  netList minimalPrimes L

F7E3 =  S = skewPolynomialRing(QQ,(-1)_QQ,{x_1,x_2,x_3,x_4})

F7E4 =  L = lineSchemeFourDim(S,M);

F7E5 =  netList minimalPrimes L

F7E6 =  R = QQ <|x_4,x_1,x_2,x_3|>

F7E7 =  I = ideal {x_3^2 - x_1*x_2, x_4^2 - x_2*x_1, x_1*x_3 - x_2*x_4, x_3*x_1 - x_2*x_3, x_1*x_4 - x_4*x_2, x_4*x_1 - x_3*x_2}

F7E8 =  Igb = NCGB(I, 10);

F7E9 =  S = R/I

F7E10 =  L = lineSchemeFourDim(S,M);

F7E11 =  netList minimalPrimes L

F8E0 =  A = QQ<|x,y,z|>

F8E1 =  I = ideal { x*y + y*x - 2*z^2,

                 y*z + z*y - 2*x^2,

                 z*x + x*z - 2*y^2}

F8E2 =  Igb = NCGB(I,10)

F9E0 =  A = fourDimSklyanin(ZZ/32003, {a,b,c,d}, DegreeLimit => 10)

F9E1 =  k = vars A

F9E2 =  d1 = rightKernel(k, DegreeLimit => 10)

F9E3 =  d2 = rightKernel(d1, DegreeLimit => 10)

F9E4 =  d3 = rightKernel(d2, DegreeLimit => 10)

F9E5 =  d4 = rightKernel(d3, DegreeLimit => 10)

F9E6 =  d1*d2

F9E7 =  ncMatrixMult(d1,d2)

F10E0 =  B = skewPolynomialRing(QQ,(-1)_QQ,{x,y,z,w})

F10E1 =  sigma = map(B,B,{y,z,w,x})

F10E2 =  C = oreExtension(B,sigma,a)

F10E3 =  B = toFreeAlgebraQuotient(QQ[x])

F10E4 =  sigma = map(B,B,{x})

F10E5 =  delta = derivation(B,{1_B})

F10E6 =  C = oreExtension(B,sigma,delta,dx)

F11E0 =  B = threeDimSklyanin(QQ,{1,1,-1},{x,y,z})

F11E1 =  g = z^3 + y*z*x - z*y*x - y^3

F11E2 =  h = x^2 + y^2 + z^2

F11E3 =  isCentral h

F11E4 =  isCentral g

F12E0 =  A = QQ<|x,y|>

F12E1 =  sigma = map(A,A,{y,x})

F12E2 =  delta = derivation(A,{-x*y,y*x},sigma)

F12E3 =  delta y^2

F13E0 =  B = threeDimSklyanin(QQ,{1,1,-1},{x,y,z})

F13E1 =  g = z^3 + y*z*x - z*y*x - y^3

F13E2 =  isLeftRegular(g,6)

F13E3 =  C = QQ<|x,y|>

F13E4 =  D = C/ideal{x^2+x*y,y^2}

F13E5 =  isLeftRegular(x,1)

F13E6 =  isRightRegular(x,1)

F14E0 =  B = threeDimSklyanin(ZZ/101,{1,1,-1},{x,y,z})

F14E1 =  NCGB(ideal B,5)

F14E2 =  C = threeDimSklyanin(ZZ/101,{2,3,5},{a,b,c})

F14E3 =  NCGB(ideal C,5)

F14E4 =  centralElements(B,3)

F14E5 =  centralElements(C,3)

F14E6 =  apply(8, i -> numgens source ncBasis(i,C))

F14E7 =  apply(8, i -> binomial(i+2,2))

F15E0 =  A = QQ<|a,b,c|>

F15E1 =  I = ideal {a*b+b*a,a*c+c*a,b*c+c*b}

F15E2 =  B = A/I

F15E3 =  sigma = map(B,B,{b,c,a})

F15E4 =  C = oreExtension(B,sigma,w)

F15E5 =  isNormal w^2

F15E6 =  phi = normalAutomorphism w^2

F15E7 =  matrix phi

F15E8 =  matrix (sigma * sigma)

F16E0 =  A = QQ<|a,b,c|>

F16E1 =  B = QQ<|x,y|>

F16E2 =  f = map(B,A,{x*y*x,y*x*y,x*y})

F16E3 =  K = ncKernel f

F17E0 =  R = QQ[q]/ideal{q^4+q^3+q^2+q+1}

F17E1 =  A = skewPolynomialRing(R,q,{x,y,z,w})

F17E2 =  x*y == q*y*x

F17E3 =  Aop = oppositeRing A

F17E4 =  y*x == q*x*y

F18E0 =  A = QQ<|x,y,z|>

F18E1 =  f = y*z + z*y - x^2

F18E2 =  g = x*z + z*x - y^2

F18E3 =  h = z^2 - x*y - y*x

F18E4 =  I = ideal {f,g,h}

F18E5 =  Igb = NCGB(I,10)

F18E6 =  NCReductionTwoSided(x^4,I)

F18E7 =  NCReductionTwoSided(x^4,Igb)

F19E0 =  B = threeDimSklyanin(QQ,{1,1,-1},{x,y,z})

F19E1 =  L = leftMultiplicationMap(x,2)

F19E2 =  kernel L

F19E3 =  isRightRegular(x,2)

F19E4 =  C = QQ<|x,y|>

F19E5 =  D = C/ideal{x^2+x*y,y^2}

F19E6 =  isRightRegular(x,1)

F19E7 =  L = leftMultiplicationMap(x,1)

F19E8 =  M=matrix gens kernel L

F19E9 =  ncBasis(1,D)*M

F20E0 =  Q = QQ[a,b,c]

F20E1 =  R = Q/ideal{a*b-c^2}

F20E2 =  kRes = res(coker vars R, LengthLimit=>7)

F20E3 =  M = coker kRes.dd_5

F20E4 =  I = endomorphismRingIdeal(M,X)

F20E5 =  maps = I.cache#"EndomorphismRingIdealGens"

F20E6 =  assert(maps_0*maps_2 == maps_3)

F21E0 =  A = QQ<|x,y|>

F21E1 =  M = matrix {{x}}

F21E2 =  N = matrix {{y}}

F21E3 =  M*N

F21E4 =  assert(ncMatrixMult(M,N) == matrix {{x*y}})

F22E0 =  R = ZZ/32003 <|x_4,x_1,x_2,x_3|>

F22E1 =  I = ideal {x_3^2 - x_1*x_2, x_4^2 - x_2*x_1, x_1*x_3 - x_2*x_4,

                x_3*x_1 - x_2*x_3, x_1*x_4 - x_4*x_2, x_4*x_1 - x_3*x_2}

F22E2 =  lQ = leftQuadraticMatrix I

F22E3 =  rQ = rightQuadraticMatrix I

F22E4 =  d = matrix {{x_4,x_1,x_2,x_3}}

F22E5 =  e = matrix transpose {{x_4,x_1,x_2,x_3}}

F22E6 =  NCReductionTwoSided(ncMatrixMult(d,rQ),I)

F22E7 =  NCReductionTwoSided(ncMatrixMult(lQ,e),I)

F22E8 =  S = R/I

F22E9 =  (lQS,dS) = (sub(lQ,S),sub(d,S));

F22E10 =  (rQS,eS) = (sub(rQ,S),sub(e,S));

F22E11 =  ncMatrixMult(dS,rQS)

F22E12 =  ncMatrixMult(lQS,eS)

F23E0 =  R = ZZ/32003<|a,b,c|>

F23E1 =  I = ideal(2*a*b + 3*b*a + 5*c^2,

         2*b*c + 3*c*b + 5*a^2,

         2*c*a + 3*a*c + 5*b^2)

F23E2 =  gbI = NCGB(I, 6);

F23E3 =  netList (ideal gbI)_*

F23E4 =  A = R/I -- only uses the Groebner basis already constructed, so only valid in degrees <= 6

F23E5 =  ncBasis(3, A)

F24E0 =  A = QQ<|a,b,c|>

F24E1 =  B = QQ<|x,y|>

F24E2 =  f = map(B,A,{x*y*x,y*x*y,x*y})

F24E3 =  I = ncGraphIdeal f

F24E4 =  Igb = NCGB(I,10)

F25E0 =  A = freeAlgebra(QQ,{x,y,z})

F25E1 =  use A

F25E2 =  assert(x == A_0)

F25E3 =  B = freeAlgebra(QQ,{x,y,a,b,c,Weights=>{1,1,0,0,0},Degrees=>{1,1,3,3,2}})

F25E4 =  I = ideal {a - x*y*x, b - y*x*y, c - x*y}

F25E5 =  Igb = NCGB(I,10)

F26E0 =  A = QQ<|a,b,c|>

F26E1 =  I = ideal {a*b+b*a,a*c+c*a,b*c+c*b}

F26E2 =  B = A/I

F26E3 =  sigma = map(B,B,{b,c,a})

F26E4 =  C = oreExtension(B,sigma,w)

F26E5 =  isCentral w

F26E6 =  isNormal w

F27E0 =  A = QQ<|x,y,z|>

F27E1 =  f = y*z + z*y - x^2

F27E2 =  g = x*z + z*x - y^2

F27E3 =  h = z^2 - x*y - y*x

F27E4 =  I = ideal{f,g,h}

F27E5 =  B=A/I

F27E6 =  generators B

F27E7 =  numgens B

F27E8 =  isCommutative B

F27E9 =  coefficientRing B

F27E10 =  x

F27E11 =  C = skewPolynomialRing(QQ,(-1)_QQ,{x,y,z,w})

F27E12 =  x

F27E13 =  use B

F27E14 =  x

F27E15 =  use C

F27E16 =  sigma = map(C,C,{y,z,w,x})

F27E17 =  D = oreExtension(C,sigma,a)

F27E18 =  generators D

F27E19 =  numgens D

F28E0 =  A = QQ<|x,y,z|>

F28E1 =  ncHilbertSeries(A,Order=>10)

F28E2 =  A = QQ<|x,y,z,Degrees=>{1,2,3}|>

F28E3 =  ncHilbertSeries(A,Order=>10)

F28E4 =  B = threeDimSklyanin(QQ,{1,1,-1},{x,y,z})

F28E5 =  ncHilbertSeries(B,Order=>10)

F29E0 =  A = QQ<|x,y,z|>

F29E1 =  f = y*z + z*y - x^2

F29E2 =  g = x*z + z*x - y^2

F29E3 =  h = z^2 - x*y - y*x

F29E4 =  B = A/ideal{f,g,h}

F29E5 =  centralElements(B,3)

F29E6 =  j = z^3+y*z*x-z*y*x-y^3

F29E7 =  isCentral j

F29E8 =  apply(5,i->isLeftRegular(j,i+1))

F29E9 =  normalElements(B,3,n)

F29E10 =  ncBasis(3,B)

F29E11 =  C = skewPolynomialRing(QQ,(-1)_QQ,{x,y,z,w})

F29E12 =  R = QQ[q]/ideal{q^4+q^3+q^2+q+1}

F29E13 =  B = skewPolynomialRing(R,q,{x,y,z,w})

F29E14 =  x*y == q*y*x

F29E15 =  use C

F29E16 =  sigma = map(C,C,{y,z,w,x})

F29E17 =  D = oreExtension(C,sigma,a)

F29E18 =  isNormal a

F29E19 =  apply(5,i-> isLeftRegular(a,i+1))

F29E20 =  sigmaD = normalAutomorphism a

F29E21 =  normalElements(sigmaD,1)

F29E22 =  normalElements(sigmaD,2)

F29E23 =  normalElements(D,2,P)

F29E24 =  ncBasis(2,D)

F29E25 =  isNormal (x^2+z^2-y^2-w^2)

F29E26 =  E' = QQ[x,y,z,w,SkewCommutative=>true]

F29E27 =  E = toFreeAlgebraQuotient E'

F29E28 =  f = map(E,C,gens E)

F29E29 =  use C

F29E30 =  f x^2

F29E31 =  use E

F29E32 =  x^2 == 0

F30E0 =  A = skewPolynomialRing(QQ,(-1)_QQ,{w,x,y,z})

F30E1 =  x*y-y*x

F30E2 =  w^2

F30E3 =  B = toCommRing(A)

F30E4 =  x*y

F30E5 =  w^2

F30E6 =  C = toCommRing(A,SkewCommutative=>true)

F30E7 =  x*y-y*x

F30E8 =  w^2

F31E0 =  A = QQ<|x,y,z|>

F31E1 =  I = ideal{x*z-z*x, y*z, x*y^2-y^2*x, x^3*y-y*x^3}

F31E2 =  J = quadraticClosure I

F31E3 =  J' = homogDual J

F32E0 =  A = QQ<|x,y,z|>

F32E1 =  B = skewPolynomialRing(QQ,(-1)_QQ, {a,b,c})

F32E2 =  C = freeProduct(A,B)

F33E0 =  B = skewPolynomialRing(QQ,(-1)_QQ,{x,y,z,w})

F33E1 =  sigma = map(B,B,{y,z,w,x})

F33E2 =  C = oreIdeal(B,sigma,a)

F34E0 =  R = QQ[q]/ideal{q^4+q^3+q^2+q+1}

F34E1 =  M = matrix{{1,q,q},{q^4,1,1},{q^4,1,1}}

F34E2 =  B = skewPolynomialRing(R,M,{x,y,z})

F34E3 =  x*y == q^4*y*x

F34E4 =  N = matrix{{1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}}

F34E5 =  C = skewPolynomialRing(QQ,promote(N,QQ), {a,b,c,d})

F34E6 =  isCommutative C

F34E7 =  isCommutative B

F34E8 =  Bop = oppositeRing B

F34E9 =  y*x == q^4*x*y

F35E0 =  B = threeDimSklyanin(QQ,{1,1,-1},{x,y,z})

F35E1 =  centralElements(B,2)

F35E2 =  centralElements(B,3)

F36E0 =  A = QQ<|x,y|>

F37E0 =  B = threeDimSklyanin(QQ,{1,1,-1},{x,y,z})

F37E1 =  ncBasis(2,B)

F37E2 =  normalElements(B,2,r)

F37E3 =  normalElements(B,3,t)

F37E4 =  g = -y^3-z*y*x+y*z*x+z^3

F37E5 =  isCentral g

F38E0 =  R = QQ[x,y]/ideal(x^4,x^3*y,x*y^3)

F38E1 =  ER = extAlgebra(R,z,DegreeLimit=>(5,10));

F38E2 =  degrees ER

F38E3 =  ideal ER

F38E4 =  ER.cache#"extMaps"#(z_4)

F39E0 =  A = QQ<|x,y|>

F39E1 =  B = skewPolynomialRing(QQ,(-1)_QQ, {a,b})

F39E2 =  C = qTensorProduct(A,B,-1_QQ)

F39E3 =  ideal C

F39E4 =  D = A ** B

F39E5 =  ideal D

F40E0 =  S = skewPolynomialRing(QQ,(-1)_QQ,{x_1,x_2})

F40E1 =  P = pointScheme(S,a)

F40E2 =  S = skewPolynomialRing(QQ,(-1)_QQ,{x_1..x_4})

F40E3 =  P = pointScheme(S,a)

F40E4 =  netList minimalPrimes P

F40E5 =  S = threeDimSklyanin (frac(QQ[a,b,c]),{a,b,c},{x,y,z}, DegreeLimit => 3)

F40E6 =  P = pointScheme(S,X)

F40E7 =  S = threeDimSklyanin (QQ,{1,1,-2},{x,y,z})

F40E8 =  P = pointScheme(S,X)

F40E9 =  netList minimalPrimes P

F40E10 =  R = QQ[zz,X_1,X_2,X_3]

F40E11 =  PP = sub(P,R) + ideal {zz^2 + zz + 1}

F40E12 =  minPP = minimalPrimes PP; netList minPP

F40E13 =  minPP / degree

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F1E0", "F1E1", "F1E2", "F1E3", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F2E10", "F2E11", "F2E12", "F2E13", "F3E0", "F3E1", "F3E2", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F7E6", "F7E7", "F7E8", "F7E9", "F7E10", "F7E11", "F8E0", "F8E1", "F8E2", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F10E5", "F10E6", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F12E0", "F12E1", "F12E2", "F12E3", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F13E6", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F14E7", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F15E6", "F15E7", "F15E8", "F16E0", "F16E1", "F16E2", "F16E3", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F18E0", "F18E1", "F18E2", "F18E3", "F18E4", "F18E5", "F18E6", "F18E7", "F19E0", "F19E1", "F19E2", "F19E3", "F19E4", "F19E5", "F19E6", "F19E7", "F19E8", "F19E9", "F20E0", "F20E1", "F20E2", "F20E3", "F20E4", "F20E5", "F20E6", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F22E5", "F22E6", "F22E7", "F22E8", "F22E9", "F22E10", "F22E11", "F22E12", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4", "F23E5", "F24E0", "F24E1", "F24E2", "F24E3", "F24E4", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F25E5", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F26E6", "F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F27E5", "F27E6", "F27E7", "F27E8", "F27E9", "F27E10", "F27E11", "F27E12", "F27E13", "F27E14", "F27E15", "F27E16", "F27E17", "F27E18", "F27E19", "F28E0", "F28E1", "F28E2", "F28E3", "F28E4", "F28E5", "F29E0", "F29E1", "F29E2", "F29E3", "F29E4", "F29E5", "F29E6", "F29E7", "F29E8", "F29E9", "F29E10", "F29E11", "F29E12", "F29E13", "F29E14", "F29E15", "F29E16", "F29E17", "F29E18", "F29E19", "F29E20", "F29E21", "F29E22", "F29E23", "F29E24", "F29E25", "F29E26", "F29E27", "F29E28", "F29E29", "F29E30", "F29E31", "F29E32", "F30E0", "F30E1", "F30E2", "F30E3", "F30E4", "F30E5", "F30E6", "F30E7", "F30E8", "F31E0", "F31E1", "F31E2", "F31E3", "F32E0", "F32E1", "F32E2", "F33E0", "F33E1", "F33E2", "F34E0", "F34E1", "F34E2", "F34E3", "F34E4", "F34E5", "F34E6", "F34E7", "F34E8", "F34E9", "F35E0", "F35E1", "F35E2", "F36E0", "F37E0", "F37E1", "F37E2", "F37E3", "F37E4", "F37E5", "F38E0", "F38E1", "F38E2", "F38E3", "F38E4", "F39E0", "F39E1", "F39E2", "F39E3", "F39E4", "F39E5", "F40E0", "F40E1", "F40E2", "F40E3", "F40E4", "F40E5", "F40E6", "F40E7", "F40E8", "F40E9", "F40E10", "F40E11", "F40E12", "F40E13"}
