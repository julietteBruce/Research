needsPackage "AlgebraicSplines"

F0E0 =  V = {{0,0},{1,0},{1,1},{0,1}}

F0E1 =  F = {{0,1,2},{0,2,3}}

F0E2 =  E = {{0,1},{0,2},{0,3},{1,2},{2,3}}

F0E3 =  splineModule(V,F,E,1)

F1E0 =  V={{0,0},{0,1},{-1,-1},{1,0}};

F1E1 =  F={{0,1,2},{0,2,3},{0,1,3}};

F1E2 =  phi=stanleyReisner(V,F)

F1E3 =  ker phi--decone of homogenized simplicial complex is three triangles meeting at a vertex

F1E4 =  R=QQ[x,y];

F1E5 =  phi=stanleyReisner(V,F,BaseRing=>R,Homogenize=>false)

F1E6 =  ker phi--decone of simplicial complex is a three-cycle

F1E7 =  V={{0,0},{0,1},{-1,-1},{1,0}};

F1E8 =  F={{0,1,2},{0,2,3},{0,1,3}};

F1E9 =  R=QQ[x,y];

F1E10 =  CF = courantFunctions(V,F,Homogenize=>false,BaseRing=>R);

F1E11 =  phi=ringStructure(image CF,VariableGens=>false)

F1E12 =  ker phi

F1E13 =  V={{0,1},{-1,-1},{1,-1},{0,10},{-2,-2},{2,-2}};--symmetric triangular prism

F1E14 =  V'={{0,1},{-1,-1},{1,-1},{1,10},{-2,-2},{2,-2}};--asymmetric triangular prism

F1E15 =  F={{0,1,2},{0,1,3,4},{0,2,3,5},{1,2,4,5}};

F1E16 =  S=QQ[x,y,z];

F1E17 =  phi=stanleyReisner(V,F,BaseRing=>S) --four generators in degree one

F1E18 =  phi'=stanleyReisner(V',F,BaseRing=>S) --six generators in degrees one and two

F1E19 =  ker phi --kernel generated by single polynomial of degree four

F1E20 =  mingens ker phi' --kernel has six minimal generators of degree four

F2E0 =  V = {{0,0},{1,0},{1,1},{0,1}}

F2E1 =  F = {{0,1,2},{0,2,3}}

F2E2 =  E = {{0,1},{0,2},{0,3},{1,2},{2,3}}

F2E3 =  hilbertComparisonTable(0,8,splineModule(V,F,E,1))

F2E4 =  V = {{-1,-1},{1,-1},{0,1},{10,10},{-10,10},{0,-10}};

F2E5 =  V'= {{-1,-1},{1,-1},{0,1},{10,10},{-10,10},{1,-10}};

F2E6 =  F = {{0,1,2},{2,3,4},{0,4,5},{1,3,5},{1,2,3},{0,2,4},{0,1,5}};

F2E7 =  M = splineModule(V,F,1);

F2E8 =  hilbertPolynomial(M,Projective=>false)

F2E9 =  M' = splineModule(V',F,1);

F2E10 =  hilbertPolynomial(M',Projective=>false)

F2E11 =  hilbertComparisonTable(0,4,M)

F2E12 =  postulationNumber(M) --final integer for which Hilbert function and polynomial disagree

F2E13 =  hilbertComparisonTable(0,4,M')

F2E14 =  postulationNumber(M')

F2E15 =  V={{0,0,0},{1,0,0},{0,1,0},{0,0,1},{-1,0,0},{0,-1,0},{0,0,-1}}; --most symmetric variant

F2E16 =  V'={{0,0,0},{0,2,-1},{-1,-1,-1},{1,-1,-1},{0,-2,2},{1,1,2},{-1,1,2}}; --somewhat symmetric variant

F2E17 =  V''={{0,0,0},{10,1,1},{-1,10,1},{-1,1,10},{-10,1,-1},{1,-10,1},{-1,-1,-10}}; --asymmetric variant

F2E18 =  F={{0,1,2,3},{0,1,2,6},{0,1,3,5},{0,1,5,6},{0,2,3,4},{0,2,4,6},{0,3,4,5},{0,4,5,6}};

F2E19 =  M=splineModule(V,F,1,Homogenize=>false);

F2E20 =  hilbertPolynomial(M,Projective=>false)

F2E21 =  M'=splineModule(V',F,1,Homogenize=>false);

F2E22 =  hilbertPolynomial(M',Projective=>false)

F2E23 =  M''=splineModule(V'',F,1,Homogenize=>false);

F2E24 =  hilbertPolynomial(M'',Projective=>false)

F2E25 =  hilbertComparisonTable(0,6,M)

F2E26 =  postulationNumber(M) --largest integer for which Hilbert function and polynomial disagree

F2E27 =  hilbertComparisonTable(0,6,M')

F2E28 =  postulationNumber(M')

F2E29 =  hilbertComparisonTable(0,6,M'')

F2E30 =  postulationNumber(M'')

F3E0 =  V = {{0,0},{1,0},{1,1},{0,1}};

F3E1 =  F = {{0,1,2},{0,2,3}};

F3E2 =  E = {{0,1},{0,2},{0,3},{1,2},{2,3}};

F3E3 =  M=splineModule(V,F,E,2);

F3E4 =  splineDimensionTable(0,8,M)

F3E5 =  V = {{0,0},{1,0},{1,1},{0,1}};

F3E6 =  F = {{0,1,2},{0,2,3}};

F3E7 =  L = {V,F,E};

F3E8 =  splineDimensionTable(0,8,L,2)

F3E9 =  V = {{-1,-1},{1,-1},{0,1},{10,10},{-10,10},{0,-10}};

F3E10 =  V'= {{-1,-1},{1,-1},{0,1},{10,10},{-10,10},{1,-10}};

F3E11 =  F = {{0,1,2},{2,3,4},{0,4,5},{1,3,5},{1,2,3},{0,2,4},{0,1,5}};

F3E12 =  M = splineModule(V,F,1);

F3E13 =  M' = splineModule(V',F,1);

F3E14 =  splineDimensionTable(0,4,M)

F3E15 =  splineDimensionTable(0,4,M')

F4E0 =  V = {{0,0},{1,0},{1,1},{0,1}};

F4E1 =  E = {{0,1},{0,2},{0,3},{1,2},{2,3}};

F4E2 =  formsList(V,E,0)

F4E3 =  S=QQ[x,y];--can specify the polynomial ring to use, and whether to homogenize

F4E4 =  formsList(V,E,0,BaseRing=>S,Homogenize=>false)

F5E0 =  V = {{0,0},{1,0},{0,1},{-1,-1}};

F5E1 =  F = {{0,1,2},{0,2,3},{0,1,3}};

F5E2 =  C = cellularComplex(V,F)

F5E3 =  prune HH C

F5E4 =  F = {{0,1,2},{0,1,3},{0,2,3}};

F5E5 =  C = cellularComplex(F,InputType=>"Simplicial")

F5E6 =  V = {{1, 0, 0}, {-1, 0, 0}, {0, 1, 0}, {0, -1, 0}, {0, 0, 1}, {0, 0, -1}, {-2, -2, -2}, {-2, 2, -2}, {2, 2, -2}, {2, -2, -2}, {-2, -2, 2}, {-2, 2, 2}, {2, 2, 2}, {2, -2, 2}};

F5E7 =  F = {{0, 1, 2, 3, 4, 5}, {0, 8, 9, 12, 13}, {1, 6, 7, 10, 11}, {2, 7, 8, 11, 12}, {3, 6, 9, 10, 13}, {4, 10, 11, 12, 13}, {5, 6, 7, 8, 9}, {0, 2, 8, 12}, {0, 3, 9, 13}, {0, 4, 12, 13}, {0, 5, 8, 9}, {1, 2, 7, 11}, {1, 3, 6, 10}, {1, 4, 10, 11}, {1, 5, 6, 7}, {2, 4, 11, 12}, {3, 4, 10, 13}, {3, 5, 6, 9}, {2, 5, 7, 8}, {0, 2, 4, 12}, {0, 2, 5, 8}, {0, 3, 4, 13}, {0, 3, 5, 9}, {1, 2, 4, 11}, {1, 2, 5, 7}, {1, 3, 4, 10}, {1, 3, 5, 6}};

F5E8 =  C = cellularComplex(V,F);

F5E9 =  prune HH C

F6E0 =  S = QQ[x_0,x_1,x_2]; --the underlying ring

F6E1 =  E = {{0,1},{1,2},{0,2}} --edges of the graph (in this case a triangle)

F6E2 =  I = {x_0-x_1,x_1-x_2,x_2-x_0} --ideals of S (elements of S are interpreted as principal ideals)

F6E3 =  generalizedSplines(E,I) --in this case this is the module of derivations on the $A_2$ arrangement

F6E4 =  E={{0,1},{1,2},{2,3},{0,3}};

F6E5 =  I={3,4,5,6};

F6E6 =  generalizedSplines(E,I)

F6E7 =  E={{0,1},{1,2},{2,3},{0,3}};

F6E8 =  I={3,4,5,6};

F6E9 =  generalizedSplines(E,I,RingType=>9) --computes spline module with underlying ring ZZ/9

F6E10 =  S=QQ[x,y,z]

F6E11 =  E={{1,2},{2,3},{3,4}}

F6E12 =  I={ideal(x,y),ideal(y),ideal(z)}

F6E13 =  generalizedSplines(E,I)

F6E14 =  E={{0,1},{1,2},{0,2}};

F6E15 =  S=QQ[x,y];

F6E16 =  I={y-x^2,x+y^2,y-x^3};--these three curves meet at the origin

F6E17 =  generalizedSplines(E,I)--this is the module of C^0 splines on the partition

F7E0 =  V={{0,0},{0,1},{-1,-1},{1,0}};

F7E1 =  F={{0,1,2},{0,2,3},{0,1,3}};

F7E2 =  courantFunctions(V,F)

F7E3 =  S=QQ[x,y];

F7E4 =  courantFunctions(V,F,Homogenize=>false,BaseRing=>S)

F8E0 =  V = {{0,0},{1,0},{0,1},{-1,-1}};

F8E1 =  F = {{0,1,2},{0,2,3},{0,1,3}};

F8E2 =  C = idealsComplex(V,F,1);

F8E3 =  prune HH C

F8E4 =  V = {{-1,-1},{1,-1},{0,1},{-2,-2},{2,-2},{0,2}};

F8E5 =  F = {{0,1,2},{0,1,3,4},{1,2,4,5},{0,2,3,5}};

F8E6 =  C = idealsComplex(V,F,1);

F8E7 =  prune HH C

F9E0 =  V = {{0,0},{1,0},{0,1},{-1,-1}};

F9E1 =  F = {{0,1,2},{0,2,3},{0,1,3}};

F9E2 =  C = splineComplex(V,F,1);

F9E3 =  prune HH C

F9E4 =  V = {{-1,-1},{1,-1},{0,1},{-2,-2},{2,-2},{0,2}};

F9E5 =  F = {{0,1,2},{0,1,3,4},{1,2,4,5},{0,2,3,5}};

F9E6 =  C = splineComplex(V,F,1);

F9E7 =  prune HH C

F9E8 =  R = (ZZ/4021)[x,y,z];

F9E9 =  V = {{-1,-1},{1,-1},{0,1},{10,10},{-10,10},{0,-10}};

F9E10 =  V'= {{-1,-1},{1,-1},{0,1},{10,10},{-10,10},{1,-10}};

F9E11 =  F = {{0,1,2},{2,3,4},{0,4,5},{1,3,5},{1,2,3},{0,2,4},{0,1,5}};

F9E12 =  C = splineComplex(V,F,1,BaseRing=>R);

F9E13 =  C' = splineComplex(V',F,1,BaseRing=>R);

F9E14 =  prune HH C

F9E15 =  prune HH C'

F9E16 =  R = QQ[x,y,z];

F9E17 =  V = {{-1,-1},{1,-1},{0,1},{10,10},{-10,10},{0,-10}};

F9E18 =  F = {{0,1,2},{2,3,4},{0,4,5},{1,3,5},{1,2,3},{0,2,4},{0,1,5}};

F9E19 =  Id = idealsComplex(V,F,1,BaseRing=>R);

F9E20 =  C = cellularComplex(V,F,BaseRing=>R);

F9E21 =  phi = inducedMap(C,Id);

F9E22 =  SC = splineComplex(V,F,1,BaseRing=>R);

F9E23 =  SC == (coker phi)

F9E24 =  V = {{1, 0, 0}, {-1, 0, 0}, {0, 1, 0}, {0, -1, 0}, {0, 0, 1}, {0, 0, -1}, {-2, -2, -2}, {-2, 2, -2}, {2, 2, -2}, {2, -2, -2}, {-2, -2, 2}, {-2, 2, 2}, {2, 2, 2}, {2, -2, 2}};

F9E25 =  F = {{0, 1, 2, 3, 4, 5}, {0, 8, 9, 12, 13}, {1, 6, 7, 10, 11}, {2, 7, 8, 11, 12}, {3, 6, 9, 10, 13}, {4, 10, 11, 12, 13}, {5, 6, 7, 8, 9}, {0, 2, 8, 12}, {0, 3, 9, 13}, {0, 4, 12, 13}, {0, 5, 8, 9}, {1, 2, 7, 11}, {1, 3, 6, 10}, {1, 4, 10, 11}, {1, 5, 6, 7}, {2, 4, 11, 12}, {3, 4, 10, 13}, {3, 5, 6, 9}, {2, 5, 7, 8}, {0, 2, 4, 12}, {0, 2, 5, 8}, {0, 3, 4, 13}, {0, 3, 5, 9}, {1, 2, 4, 11}, {1, 2, 5, 7}, {1, 3, 4, 10}, {1, 3, 5, 6}};

F9E26 =  C = splineComplex(V,F,1);

F9E27 =  associatedPrimes annihilator HH_2 C

F10E0 =  V = {{0,0},{1,0},{1,1},{0,1}};

F10E1 =  F = {{0,1,2},{0,2,3}};

F10E2 =  E = {{0,1},{0,2},{0,3},{1,2},{2,3}};

F10E3 =  M = splineModule(V,F,E,2)

F10E4 =  postulationNumber(M)

F11E0 =  V={{0,0},{0,1},{-1,-1},{1,0}};

F11E1 =  F={{0,1,2},{0,2,3},{0,1,3}};

F11E2 =  R=QQ[x,y];

F11E3 =  phi=stanleyReisnerPresentation(V,F,1,Homogenize=>false,BaseRing=>R)

F11E4 =  H=source phi;

F11E5 =  scan(gens H, g->print phi(g))--see the expression of each generator in the Stanley Reisner ring

F11E6 =  M=splineModule(V,F,1,Homogenize=>false,BaseRing=>R);

F11E7 =  phi1=ringStructure(M);

F11E8 =  H=source phi

F11E9 =  gens H

F11E10 =  gens H1

F11E11 =  psi=map(H,H1,gens H);--phi1 has "same" source as H, but they are viewed as different rings by Macaulay2

F11E12 =  scan(gens H1,g->print {g,phi1(g),phi(psi(g))})--phi expresses generators of M in the Stanley Reisner ring, while phi1 expresses generators in the free module R^3

F11E13 =  (ker phi)==psi(ker phi1)--the kernels are the same

F11E14 =  V={{0,0,0},{1,0,0},{0,1,0},{0,0,1},{-1,0,0},{0,-1,0},{0,0,-1}};

F11E15 =  F={{0,1,2,3},{0,1,2,6},{0,2,3,4},{0,2,4,6},{0,1,3,5},{0,3,4,5},{0,4,5,6},{0,1,5,6}};--centrally triangulated octahedron

F11E16 =  S=QQ[x,y,z];

F11E17 =  stanleyReisnerPresentation(V,F,1,Homogenize=>false,BaseRing=>S)

F11E18 =  stanleyReisnerPresentation(V,F,1,Homogenize=>false,BaseRing=>S,Trim=>true)

F11E19 =  V'={{0,0,0},{1,0,0},{0,1,0},{1,1,1},{-1,0,0},{0,-1,0},{0,0,-1}}; --centrally triangulated octahedron that has been perturbed

F11E20 =  F={{0,1,2,3},{0,1,2,6},{0,2,3,4},{0,2,4,6},{0,1,3,5},{0,3,4,5},{0,4,5,6},{0,1,5,6}};

F11E21 =  stanleyReisnerPresentation(V',F,1,Homogenize=>false,BaseRing=>S,Trim=>true)

F11E22 =  V={{0,1},{-1,-1},{1,-1},{0,2},{-2,-2},{2,-2}};

F11E23 =  F={{0,1,2},{0,1,3,4},{0,2,3,5},{1,2,4,5}}; --symmetric triangular prism--

F11E24 =  S=QQ[x,y,z];

F11E25 =  stanleyReisnerPresentation(V,F,1,BaseRing=>S,Trim=>true)

F12E0 =  V = {{0,0},{1,0},{1,1},{-1,1},{-2,-1},{0,-1}};-- the coordinates of vertices

F12E1 =  F = {{0,2,1},{0,2,3},{0,3,4},{0,4,5},{0,1,5}};  -- a list of facets (pure complex)

F12E2 =  E = {{0,1},{0,2},{0,3},{0,4},{0,5}};   -- list of edges

F12E3 =  splineMatrix(V,F,E,1)

F12E4 =  V = {{0,0},{1,0},{1,1},{-1,1},{-2,-1},{0,-1}};-- the coordinates of vertices

F12E5 =  F = {{0,2,1},{0,2,3},{0,3,4},{0,4,5},{0,1,5}};  -- a list of facets (pure complex)

F12E6 =  splineMatrix(V,F,1)

F12E7 =  V = {{0,0},{1,0},{1,1},{-1,1},{-2,-1},{0,-1}};-- the coordinates of vertices

F12E8 =  F = {{0,2,1},{0,2,3},{0,3,4},{0,4,5},{0,1,5}};  -- a list of facets (pure complex)

F12E9 =  splineMatrix(V,F,1,Homogenize=>false)

F12E10 =  V = {{0,0},{1,0},{1,1},{-1,1},{-2,-1},{0,-1}};-- the coordinates of vertices

F12E11 =  F = {{0,2,1},{0,2,3},{0,3,4},{0,4,5},{0,1,5}};  -- a list of facets (pure complex)

F12E12 =  R = QQ[x,y] --desired polynomial ring

F12E13 =  splineMatrix(V,F,1,Homogenize=>false,BaseRing=>R)

F12E14 =  V = {{0,0},{1,0},{1,1},{-1,1},{-2,-1},{0,-1}};-- the coordinates of vertices

F12E15 =  F = {{0,2,1},{0,2,3},{0,3,4},{0,4,5},{0,1,5}};  -- a list of facets (pure complex)

F12E16 =  R = QQ[x,y,z] --desired polynomial ring

F12E17 =  splineMatrix(V,F,1,BaseRing=>R)

F12E18 =  R = QQ[x,y]

F12E19 =  B = {{0,1},{1,2},{2,3},{3,4},{4,0}}

F12E20 =  H = {x-y,y,x,y-2*x,x+y}

F12E21 =  splineMatrix(B,H,1,InputType=>"ByLinearForms")

F13E0 =  V={{0,1},{1,0},{0,-1},{-1,0}};

F13E1 =  F={{0,1,2},{0,2,3}};--two triangles meeting along an edge

F13E2 =  R=QQ[x,y];

F13E3 =  M=splineModule(V,F,1,BaseRing=>R,Homogenize=>false);--create spline module

F13E4 =  phi=ringStructure(M)

F13E5 =  T=target phi;

F13E6 =  describe T --direct sum of two copies of R, one for each face; e_i corresponds to the face F_i

F13E7 =  H=source phi;

F13E8 =  describe H --polynomial ring in three variables, one for each generator of R and each (non-identity) generator of M

F13E9 =  scan(3,i->print phi(H_i))--these are the splines the variables map to

F13E10 =  degrees H --degrees of variables are same as degrees of generators of M

F13E11 =  I=ker phi--the ideal of relations among generators

F13E12 =  reduceHilbert(hilbertSeries (H/I))--cokernel of phi has the same graded structure as M

F13E13 =  reduceHilbert(hilbertSeries M)

F13E14 =  V={{0,0},{0,1},{-1,-1},{1,0}};

F13E15 =  F={{0,1,2},{0,2,3},{0,1,3}};--three triangles meeting at (and surrounding) a vertex

F13E16 =  R=QQ[x,y];

F13E17 =  M=splineModule(V,F,0,BaseRing=>R,Homogenize=>false);

F13E18 =  phi = ringStructure(M);

F13E19 =  ker phi --notice a generator involves an isolated variable

F13E20 =  phi' = ringStructure(M,Trim=>true);

F13E21 =  ker phi' --now all variables correspond to irredundant generators

F13E22 =  f = (ker phi')_0

F13E23 =  sub(f,{Y_0=>Y_0-Y_1,Y_1=>Y_0-Y_2,Y_2=>Y_0})

F13E24 =  E={{0,1},{1,2},{0,2}};

F13E25 =  S=QQ[x,y];

F13E26 =  I={y-x^2,x+y^2,y-x^3};

F13E27 =  C0=generalizedSplines(E,I);--splines on a non-linear partition

F13E28 =  ringStructure(C0)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F1E10", "F1E11", "F1E12", "F1E13", "F1E14", "F1E15", "F1E16", "F1E17", "F1E18", "F1E19", "F1E20", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F2E10", "F2E11", "F2E12", "F2E13", "F2E14", "F2E15", "F2E16", "F2E17", "F2E18", "F2E19", "F2E20", "F2E21", "F2E22", "F2E23", "F2E24", "F2E25", "F2E26", "F2E27", "F2E28", "F2E29", "F2E30", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F3E10", "F3E11", "F3E12", "F3E13", "F3E14", "F3E15", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F5E9", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F6E9", "F6E10", "F6E11", "F6E12", "F6E13", "F6E14", "F6E15", "F6E16", "F6E17", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F9E8", "F9E9", "F9E10", "F9E11", "F9E12", "F9E13", "F9E14", "F9E15", "F9E16", "F9E17", "F9E18", "F9E19", "F9E20", "F9E21", "F9E22", "F9E23", "F9E24", "F9E25", "F9E26", "F9E27", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F11E5", "F11E6", "F11E7", "F11E8", "F11E9", "F11E10", "F11E11", "F11E12", "F11E13", "F11E14", "F11E15", "F11E16", "F11E17", "F11E18", "F11E19", "F11E20", "F11E21", "F11E22", "F11E23", "F11E24", "F11E25", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F12E6", "F12E7", "F12E8", "F12E9", "F12E10", "F12E11", "F12E12", "F12E13", "F12E14", "F12E15", "F12E16", "F12E17", "F12E18", "F12E19", "F12E20", "F12E21", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F13E6", "F13E7", "F13E8", "F13E9", "F13E10", "F13E11", "F13E12", "F13E13", "F13E14", "F13E15", "F13E16", "F13E17", "F13E18", "F13E19", "F13E20", "F13E21", "F13E22", "F13E23", "F13E24", "F13E25", "F13E26", "F13E27", "F13E28"}
