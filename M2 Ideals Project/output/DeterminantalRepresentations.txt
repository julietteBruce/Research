needsPackage "package_directory/DeterminantalRepresentations/example-output"

F0E0 =  R = RR[x1, x2, x3]

F0E1 =  f = 6*x1^3+36*x1^2*x2+66*x1*x2^2+36*x2^3+11*x1^2*x3+42*x1*x2*x3+36*x2^2*x3+6*x1*x3^2+11*x2*x3^2+x3^3

F0E2 =  repList = detRep f

F0E3 =  all(repList, A -> clean(1e-10, f - det A) == 0)

F0E4 =  g = product gens R -- hyperbolic with respect to (1,1,1)

F0E5 =  B = clean(1e-6, first detRep(g, HyperbolicPt => matrix{{1_RR},{1},{1}}))

F0E6 =  clean(1e-6, g - det B)

F1E0 =  A = randomPSD 5 -- 5x5 PSD of full rank

F1E1 =  L = cholesky A

F1E2 =  clean(1e-12, A - L*transpose L) == 0

F1E3 =  B = randomPSD(7, 3) -- 7x7 PSD matrix of rank 3

F1E4 =  L = cholesky B

F1E5 =  clean(1e-12, B - L*transpose L) == 0

F2E0 =  O = randomOrthogonal 4

F2E1 =  A = hadamard(O, O)

F2E2 =  orthogonalFromOrthostochastic A

F3E0 =  R = RR[x,y]

F3E1 =  detRep(x^2 - 3*y^2)

F3E2 =  detRep(x^5+6*x^4*y-2*x^3*y^2-36*x^2*y^3+x*y^4+30*y^5)

F3E3 =  R = RR[x1, x2]

F3E4 =  f=(1/2)*(x1^4+x2^4-3*x1^2-3*x2^2+x1^2*x2^2)+1

F3E5 =  repList = detRep f;

F3E6 =  #repList

F3E7 =  repList#0

F3E8 =  all(repList, A -> clean(1e-10, f - det A) == 0)

F4E0 =  randomUnipotent 5

F4E1 =  randomUnipotent(3, CC)

F4E2 =  randomUnipotent(3, RR[x,y])

F5E0 =  n = 3

F5E1 =  R = QQ[a_(1,1)..a_(n,n),b_(1,1)..b_(n,n),c_(1,1)..c_(n,n)][x_1..x_n]

F5E2 =  A = sub(transpose genericMatrix(coefficientRing R,n,n), R)

F5E3 =  B = sub(transpose genericMatrix(coefficientRing R,b_(1,1),n,n), R)

F5E4 =  C = sub(transpose genericMatrix(coefficientRing R,c_(1,1),n,n), R)

F5E5 =  P = det(id_(R^n) + x_1*A + x_2*B + x_3*C);

F5E6 =  gmd = generalizedMixedDiscriminant({A,B,C})

F5E7 =  coeff = (last coefficients(P, Monomials => {x_1*x_2*x_3}))_(0,0)

F5E8 =  gmd == coeff

F6E0 =  O = randomOrthogonal 3

F6E1 =  A = hadamard(O, O)

F6E2 =  isDoublyStochastic A

F7E0 =  O1 = randomOrthogonal 5

F7E1 =  isOrthogonal O1

F7E2 =  O2 = randomOrthogonal(5, QQ)

F7E3 =  isOrthogonal O2

F8E0 =  randomPSD 5

F8E1 =  A1 = randomPSD(5, 3)

F8E2 =  A2 = randomPSD(5, 3.0)

F8E3 =  (A1, A2)/eigenvectors -- note the difference!

F8E4 =  A3 = randomPSD(5, 3, 7.0)

F8E5 =  eigenvectors(A3, Hermitian => true)

F9E0 =  R = CC[x]

F9E1 =  eigenvalues companionMatrix(9*x^2 - 1)

F9E2 =  f = x^10 + sum(10, i -> random(i, R))

F9E3 =  C = companionMatrix f

F9E4 =  clean(1e-10, f - det(x*id_(R^10) - C))

F9E5 =  all(eigenvalues C, z -> clean(1e-10, sub(f, R_0 => z)) == 0)

F10E0 =  O1 = randomOrthogonal 5

F10E1 =  isOrthogonal O1

F10E2 =  eigenvalues O1

F10E3 =  det O1

F10E4 =  R = QQ[x,y]

F10E5 =  O2 = randomOrthogonal(5, R)

F10E6 =  isOrthogonal O2

F10E7 =  det(O2), det(O2+id_(R^5))

F11E0 =  randomIntegerSymmetric 5

F11E1 =  randomIntegerSymmetric 20

F11E2 =  R = RR[x,y]

F11E3 =  randomIntegerSymmetric(3, R)

F12E0 =  R = RR[x1, x2]

F12E1 =  f = 15*x1^2 + 20*x1*x2 - 36*x2^2 + 20*x1 + 16*x2 + 1

F12E2 =  bivariateDiagEntries f

F13E0 =  (A1, A2) = (random(ZZ^2, ZZ^3), random(ZZ^2, ZZ^3))

F13E1 =  hadamard(A1, A2)

F14E0 =  R = QQ[x,y,z]

F14E1 =  M = id_(R^3) + random(R^3,R^{3:-1})

F14E2 =  coeffs = coeffMatrices M

F14E3 =  M - sum(#gens R, i -> R_i*coeffs#i)

F15E0 =  A = matrix{{1, 2.5, -13/17}, {2*pi, 4.7, sqrt(2)}}

F15E1 =  roundMatrix(5, A)

F16E0 =  A = random(RR^3,RR^5)

F16E1 =  A == realPartMatrix A

F16E2 =  B = sub(A, CC)

F16E3 =  C = realPartMatrix B

F16E4 =  clean(1e-10, A - C) == 0

F16E5 =  D = random(QQ^3, QQ^1)

F16E6 =  D == realPartMatrix D

F16E7 =  R = CC[x,y]

F16E8 =  f = random(2,R)

F16E9 =  C = last coefficients f

F16E10 =  realPartMatrix sub(C, coefficientRing R)

F17E0 =  R = RR[x1, x2, x3, x4]

F17E1 =  f = 260*x1^2+180*x1*x2-25*x2^2-140*x1*x3-170*x2*x3-121*x3^2+248*x1*x4+94*x2*x4-142*x3*x4+35*x4^2+36*x1+18*x2+2*x3+20*x4+1

F17E2 =  A = first detRep f

F17E3 =  clean(1e-10, f - det A)

F17E4 =  g = -61*x1^2-96*x1*x2-177*x2^2-126*x1*x3-202*x2*x3-86*x3^2-94*x1*x4-190*x2*x4-140*x3*x4-67*x4^2+8*x1+3*x2+5*x3+3*x4+1

F17E5 =  B = first detRep g

F17E6 =  clean(1e-10, g - det B)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F2E0", "F2E1", "F2E2", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F4E0", "F4E1", "F4E2", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F6E0", "F6E1", "F6E2", "F7E0", "F7E1", "F7E2", "F7E3", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F10E5", "F10E6", "F10E7", "F11E0", "F11E1", "F11E2", "F11E3", "F12E0", "F12E1", "F12E2", "F13E0", "F13E1", "F14E0", "F14E1", "F14E2", "F14E3", "F15E0", "F15E1", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F16E5", "F16E6", "F16E7", "F16E8", "F16E9", "F16E10", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6"}
