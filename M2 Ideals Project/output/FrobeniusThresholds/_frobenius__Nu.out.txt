needsPackage "FrobeniusThresholds"

F2E0 =  R = ZZ/11[x,y];

F2E1 =  I = ideal(x^2 + y^3, x*y);

F2E2 =  J = ideal(x^2, y^3);

F2E3 =  frobeniusNu(1, I, J)

F2E4 =  f = x*y*(x^2 + y^2);

F2E5 =  frobeniusNu(3, f, J)

F2E6 =  frobeniusNu(1, 0_R, J)

F2E7 =  frobeniusNu(1, 1_R, J)

F2E8 =  R = ZZ/17[x,y,z];

F2E9 =  f = x^3 + y^4 + z^5;

F2E10 =  frobeniusNu(2, f)

F2E11 =  frobeniusNu(2, f, ideal(x, y, z))

F2E12 =  R = ZZ/17[x,y,z];

F2E13 =  f = x^3 + y^4 + z^5; -- a diagonal polynomial

F2E14 =  time frobeniusNu(3, f)

F2E15 =  time frobeniusNu(3, f, UseSpecialAlgorithms => false)

F2E16 =  R = ZZ/5[x,y,z];

F2E17 =  f = x^3 + y^3 + z^3 + x*y*z;

F2E18 =  time frobeniusNu(4, f) -- ContainmentTest is set to FrobeniusRoot, by default

F2E19 =  time frobeniusNu(4, f, ContainmentTest => StandardPower)

F2E20 =  R = ZZ/3[x,y];

F2E21 =  M = ideal(x, y);

F2E22 =  frobeniusNu(3, M^5)

F2E23 =  frobeniusNu(3, M^5, ContainmentTest => FrobeniusPower)

F2E24 =  R = ZZ/5[x,y,z];

F2E25 =  f = x^2*y^4 + y^2*z^7 + z^2*x^8;

F2E26 =  time frobeniusNu(5, f) -- uses binary search (default)

F2E27 =  time frobeniusNu(5, f, Search => Linear)

F2E28 =  M = ideal(x, y, z);

F2E29 =  time frobeniusNu(2, M, M^2) -- uses binary search (default)

F2E30 =  time frobeniusNu(2, M, M^2, Search => Linear) -- but linear search gets luckier

F2E31 =  R = ZZ/7[x,y];

F2E32 =  f = (x - 1)^3 - (y - 2)^2;

F2E33 =  frobeniusNu(1, f)

F2E34 =  frobeniusNu(1, f, AtOrigin => false)

F2E35 =  R = ZZ/5[x,y,z];

F2E36 =  f = x^2*y^4 + y^2*z^7 + z^2*x^8;

F2E37 =  frobeniusNu(5, f, ReturnList => true)

F2E38 =  frobeniusNu(5, f, Verbose => true)

exampleIDS = {"F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F2E10", "F2E11", "F2E12", "F2E13", "F2E14", "F2E15", "F2E16", "F2E17", "F2E18", "F2E19", "F2E20", "F2E21", "F2E22", "F2E23", "F2E24", "F2E25", "F2E26", "F2E27", "F2E28", "F2E29", "F2E30", "F2E31", "F2E32", "F2E33", "F2E34", "F2E35", "F2E36", "F2E37", "F2E38"}
