needsPackage "package_directory/EquivariantGB/example-output"

F0E0 =  Q = priorityQueue {1,2,3}

F0E1 =  pop Q

F0E2 =  pop Q

F0E3 =  pop Q

F0E4 =  pop Q

F1E0 =  Q = priorityQueue {1,2,3}

F1E1 =  insert(Q,0)

F1E2 =  insert(Q,4)

F1E3 =  min Q

F2E0 =  S = buildERing({symbol z}, {1}, QQ, 4)

F2E1 =  vars S

F2E2 =  coefficientRing S

F2E3 =  R = buildERing({symbol y, symbol x}, {2,1}, QQ, 3)

F2E4 =  vars R

F3E0 =  Q = priorityQueue {3,7,1,5}

F3E1 =  min Q

F3E2 =  deleteMin Q;

F3E3 =  insert(Q,2);

F3E4 =  min Q

F3E5 =  R = priorityQueue {4,6,8};

F3E6 =  QR = mergePQ(Q,R);

F3E7 =  length QR

F4E0 =  Q = priorityQueue {1,2,3}

F4E1 =  deleteMin Q

F4E2 =  min Q

F5E0 =  R = buildERing({symbol x}, {1}, QQ, 2);

F5E1 =  egb {x_0 + x_1}

F6E0 =  R = buildERing({symbol x}, {1}, QQ, 3);

F6E1 =  reduce(x_0^2 + x_0*x_2, {x_1})

F7E0 =  R = buildERing({symbol x}, {1}, QQ, 2);

F7E1 =  egb({x_0+x_1}, Algorithm=>Buchberger)

F7E2 =  use R;

F7E3 =  egb({x_0+x_1}, Algorithm=>Incremental)

F7E4 =  use R;

F7E5 =  egb({x_0+x_1}, Algorithm=>Signature)

F8E0 =  R = buildERing({symbol x,symbol y},{1,1},QQ,4)

F8E1 =  vars R

F9E0 =  Q = priorityQueue {2,4,6}

F9E1 =  R = priorityQueue {1,3,5}

F9E2 =  mergePQ(Q,R)

F9E3 =  pop Q

F9E4 =  pop Q

F10E0 =  Q = priorityQueue {1,5,2,-3,0}

F10E1 =  min Q

F11E0 =  S = buildERing({symbol z}, {1}, QQ, 2)

F11E1 =  vars S

F11E2 =  R = buildERing(S,5)

F11E3 =  vars R

F12E0 =  R = buildERing({symbol x, symbol y}, {1,1}, QQ, 3);

F12E1 =  vars R

F12E2 =  n = buildEMonomialMap(R,R,{x_0,x_0^3})

F12E3 =  n(x_1^3*y_0)

F12E4 =  S = buildERing({symbol z}, {2}, QQ, 3);

F12E5 =  vars S

F12E6 =  m = buildEMonomialMap(R,S,{x_0^2*y_1})

F12E7 =  m(z_(1,2))

F13E0 =  R = buildERing({symbol x, symbol y}, {1,1}, QQ, 4);

F13E1 =  exponentMatrix(x_0^3*y_2)

F13E2 =  exponentMatrix(x_0*x_1*y_0*y_3)

F14E0 =  Q = priorityQueue {1,2,3}

F14E1 =  length Q

F14E2 =  insert(Q,0)

F14E3 =  length Q

F15E0 =  R = buildERing({symbol x}, {1}, QQ, 2);

F15E1 =  O = incOrbit(x_0^2, 4)

F15E2 =  P = incOrbit(x_0 + x_1^2, 3, Symmetrize=>true)

F16E0 =  R = buildERing({symbol x}, {1}, QQ, 2);

F16E1 =  S = buildERing({symbol y}, {2}, QQ, 2);

F16E2 =  m = buildEMonomialMap(R,S,{x_0*x_1})

F16E3 =  G = egbToric(m, OutFile=>stdio)

F17E0 =  Q = priorityQueue {1,5,2,-3,0}

F17E1 =  min Q

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F1E0", "F1E1", "F1E2", "F1E3", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F4E0", "F4E1", "F4E2", "F5E0", "F5E1", "F6E0", "F6E1", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F8E0", "F8E1", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F10E0", "F10E1", "F11E0", "F11E1", "F11E2", "F11E3", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F12E6", "F12E7", "F13E0", "F13E1", "F13E2", "F14E0", "F14E1", "F14E2", "F14E3", "F15E0", "F15E1", "F15E2", "F16E0", "F16E1", "F16E2", "F16E3", "F17E0", "F17E1"}
