needsPackage "AlgebraicSplines"

F13E0 =  V={{0,1},{1,0},{0,-1},{-1,0}};

F13E1 =  F={{0,1,2},{0,2,3}};--two triangles meeting along an edge

F13E2 =  R=QQ[x,y];

F13E3 =  M=splineModule(V,F,1,BaseRing=>R,Homogenize=>false);--create spline module

F13E4 =  phi=ringStructure(M)

F13E5 =  T=target phi;

F13E6 =  describe T --direct sum of two copies of R, one for each face; e_i corresponds to the face F_i

F13E7 =  H=source phi;

F13E8 =  describe H --polynomial ring in three variables, one for each generator of R and each (non-identity) generator of M

F13E9 =  scan(3,i->print phi(H_i))--these are the splines the variables map to

F13E10 =  degrees H --degrees of variables are same as degrees of generators of M

F13E11 =  I=ker phi--the ideal of relations among generators

F13E12 =  reduceHilbert(hilbertSeries (H/I))--cokernel of phi has the same graded structure as M

F13E13 =  reduceHilbert(hilbertSeries M)

F13E14 =  V={{0,0},{0,1},{-1,-1},{1,0}};

F13E15 =  F={{0,1,2},{0,2,3},{0,1,3}};--three triangles meeting at (and surrounding) a vertex

F13E16 =  R=QQ[x,y];

F13E17 =  M=splineModule(V,F,0,BaseRing=>R,Homogenize=>false);

F13E18 =  phi = ringStructure(M);

F13E19 =  ker phi --notice a generator involves an isolated variable

F13E20 =  phi' = ringStructure(M,Trim=>true);

F13E21 =  ker phi' --now all variables correspond to irredundant generators

F13E22 =  f = (ker phi')_0

F13E23 =  sub(f,{Y_0=>Y_0-Y_1,Y_1=>Y_0-Y_2,Y_2=>Y_0})

F13E24 =  E={{0,1},{1,2},{0,2}};

F13E25 =  S=QQ[x,y];

F13E26 =  I={y-x^2,x+y^2,y-x^3};

F13E27 =  C0=generalizedSplines(E,I);--splines on a non-linear partition

F13E28 =  ringStructure(C0)

exampleIDS = {"F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F13E6", "F13E7", "F13E8", "F13E9", "F13E10", "F13E11", "F13E12", "F13E13", "F13E14", "F13E15", "F13E16", "F13E17", "F13E18", "F13E19", "F13E20", "F13E21", "F13E22", "F13E23", "F13E24", "F13E25", "F13E26", "F13E27", "F13E28"}
