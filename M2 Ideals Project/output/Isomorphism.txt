needsPackage "Isomorphism"

F0E0 =  S = ZZ/101[a,b,Degrees => {{1,0},{0,1}}]

F0E1 =  A = S^{{2,1}}

F0E2 =  B = S^{{1,1}}

F0E3 =  B' = S^{{3,3}}**B

F0E4 =  C = S^{{1,1}, {2,3}}

F0E5 =  checkDegrees(A,B)

F0E6 =  checkDegrees(A,C)

F0E7 =  d = checkDegrees(B',B)

F0E8 =  degrees (S^{d_1}**B') == degrees B

F0E9 =  degrees (B') == degrees (S^{-d_1}**B)

F0E10 =  checkDegrees(B',B,Strict=>true)

F1E0 =  setRandomSeed 0

F1E1 =  S = ZZ/32003[x_0..x_3]

F1E2 =  m = random(S^3, S^{4:-2});

F1E3 =  A = random(target m, target m)

F1E4 =  B = random(source m, source m)

F1E5 =  m' = A*m*B;

F1E6 =  isIsomorphic (S^{-3}**coker m, coker m)

F1E7 =  isIsomorphic (S^{-3}**coker m, coker m, Strict => true)

F1E8 =  isIsomorphic (coker m, coker m')

F1E9 =  setRandomSeed 0

F1E10 =  S = ZZ/32003[x_0..x_3]

F1E11 =  I = monomialCurveIdeal(S,{1,3,5})

F1E12 =  codim I

F1E13 =  W = Ext^2(S^1/I, S^1)

F1E14 =  W' = Hom(S^1/I, S^1/(I_0,I_1) )

F1E15 =  isIsomorphic(W,W')

F1E16 =  mm = ideal gens S

F1E17 =  (isIsomorphic(Tor_1(W, S^1/(mm^3)), Tor_1(S^1/(mm^3), W)))_0

F2E0 =  S = ZZ/101[a,b,Degrees => {{1,0},{0,1}}]

F2E1 =  B = S^{{1,1}}

F2E2 =  B' = S^{{3,3}}**B

F2E3 =  d = checkDegrees(B',B)

F2E4 =  degrees (S^{d_1}**B') == degrees B

F2E5 =  degrees (B') == degrees (S^{-d_1}**B)

F2E6 =  checkDegrees(B',B,Strict=>true)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F0E7", "F0E8", "F0E9", "F0E10", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F1E10", "F1E11", "F1E12", "F1E13", "F1E14", "F1E15", "F1E16", "F1E17", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6"}
