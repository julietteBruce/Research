needsPackage "TateOnProducts"

F0E0 =  (S,E) = productOfProjectiveSpaces{1,2}

F0E1 =  P = prune truncate({1,2},E^1)**E^{{1,2}};

F0E2 =  LP = bgg P

F0E3 =  netList apply(toList(min LP..max LP), i-> decompose ann HH_i LP)

F0E4 =  M = prune HH_0 LP

F0E5 =  betti res M

F0E6 =  high = {3,3}

F0E7 =  cohomologyMatrix(M, -high, high)

F0E8 =  M=module ideal vars S

F0E9 =  RM = bgg(M,LengthLimit=>3)

F0E10 =  betti RM

F0E11 =  tallyDegrees RM

F1E0 =  n={1,2};

F1E1 =  (S,E) = productOfProjectiveSpaces n

F1E2 =  F=dual res((ker transpose vars E)**E^{{ 2,3}},LengthLimit=>4)

F1E3 =  betti F

F1E4 =  tallyDegrees F

F1E5 =  deg={2,1}

F1E6 =  m=lowerCorner(F,deg);

F1E7 =  tally degrees target m, tally degrees source m

F1E8 =  Fm=(res(coker m,LengthLimit=>7))[sum deg]

F1E9 =  betti Fm

F1E10 =  cohomologyMatrix(Fm,-{3,3},{4,4})

F2E0 =  S=ZZ/101[x_0..x_1,y_0,z_0,Degrees=>{2:{2,0,0},1:{0,1,0},{0,0,1}}]

F2E1 =  C =res ideal vars S

F2E2 =  betti C

F2E3 =  tallyDegrees C

F3E0 =  (S,E) = productOfProjectiveSpaces{1,2}

F3E1 =  M = S^1

F3E2 =  low = {-3,-3}

F3E3 =  H' = cohomologyHashTable(M, low,high);

F3E4 =  H = eulerPolynomialTable H'

F3E5 =  H = eulerPolynomialTable (M, low, high)

F3E6 =  trimH = hashTable(select(pairs H, p-> p_1!=0))

F3E7 =  cohomologyMatrix(M, low, high)

F4E0 =  (S,E) = productOfProjectiveSpaces {1,1};

F4E1 =  T1= (dual res( trim (ideal vars E)^2,LengthLimit=>8))[1];

F4E2 =  T=trivialHomologicalTruncation(T2=res(coker upperCorner(T1,{4,3}),LengthLimit=>13)[7],-5,6);

F4E3 =  betti T

F4E4 =  cohomologyMatrix(T,-{4,4},{3,2})

F4E5 =  fqT=firstQuadrantComplex(T,-{2,1});

F4E6 =  betti fqT

F4E7 =  cohomologyMatrix(fqT,-{4,4},{3,2})

F4E8 =  cohomologyMatrix(fqT,-{2,1},-{1,0})

F4E9 =  lqT=lastQuadrantComplex(T,-{2,1});

F4E10 =  betti lqT

F4E11 =  cohomologyMatrix(lqT,-{4,4},{3,2})

F4E12 =  cohomologyMatrix(lqT,-{3,2},-{2,1})

F4E13 =  cT=cornerComplex(T,-{2,1});

F4E14 =  betti cT

F4E15 =  cohomologyMatrix(cT,-{4,4},{3,2})

F5E0 =  n={1,1};

F5E1 =  (S,E) = productOfProjectiveSpaces n;

F5E2 =  T1 = (dual res trim (ideal vars E)^2)[1];

F5E3 =  a=-{2,2}

F5E4 =  W=beilinsonWindow T2,cohomologyMatrix(W,-2*n,2*n)

F5E5 =  T=tateExtension W;

F5E6 =  low = -{2,2}

F5E7 =  cohomologyMatrix(T,low,high)

F5E8 =  sT1=strand(T,{-1,0},{1});

F5E9 =  cohomologyMatrix(sT1,low,high)

F5E10 =  sT2=strand(T,{-1,0},{0});

F5E11 =  cohomologyMatrix(sT2,low,high)

F5E12 =  sT3=strand(T,{-1,0},{0,1});

F5E13 =  cohomologyMatrix(sT3, low,high)

F6E0 =  n={1,2};

F6E1 =  (S,E) = productOfProjectiveSpaces n

F6E2 =  F=dual res((ker transpose vars E)**E^{{ 2,3}},LengthLimit=>4)

F6E3 =  cohomologyMatrix(F,-{3,3},{4,4})

F6E4 =  betti F

F6E5 =  tallyDegrees F

F6E6 =  deg={2,1}

F6E7 =  m=upperCorner(F,deg);

F6E8 =  tally degrees target m, tally degrees source m

F6E9 =  Fm=(res(coker m,LengthLimit=>4))[sum deg+1]

F6E10 =  betti Fm

F6E11 =  cohomologyMatrix(Fm,-{3,3},{4,4})

F7E0 =  (S,E) = productOfProjectiveSpaces{1,2}

F7E1 =  T = tateData S

F7E2 =  peek T

F7E3 =  T === S.TateData

F7E4 =  peek E.TateData

F7E5 =  T === E.TateData

F8E0 =  n={1,1};

F8E1 =  (S,E) = productOfProjectiveSpaces n;

F8E2 =  W=(chainComplex {map(E^0,E^1,0),map(E^1,E^0,0)})[1]

F8E3 =  time T=tateExtension W;

F8E4 =  cohomologyMatrix(T,-{3,3},{3,3})

F8E5 =  W=beilinsonWindow T

F8E6 =  cohomologyMatrix(W,-{2,2},{2,2})

F8E7 =  a={2,-3}

F8E8 =  W2=beilinsonWindow (T**E^{a}[sum a])

F8E9 =  cohomologyMatrix(W2,-{2,2},{2,2})

F8E10 =  cohomologyMatrix(tateExtension W2,-{2,2},{2,2})

F9E0 =  t=2

F9E1 =  n={1,2}

F9E2 =  (S,E)=productOfProjectiveSpaces{1,2}

F9E3 =  M=(beilinson E^{{-1,-1}})**S^{{-2,-1}}

F9E4 =  I={1}

F9E5 =  J=select({0,t-1},i-> not member(i,I))

F9E6 =  RpiM=directImageComplex(M,I)

F9E7 =  betti RpiM

F9E8 =  prune HH_0 RpiM

F9E9 =  prune HH^1 RpiM

F9E10 =  prune HH^2 RpiM

F9E11 =  dim HH^2 RpiM

F9E12 =  cohomologyMatrix(M,-3*n,3*n)

F9E13 =  T=tateResolution(M,-2*n,2*n);

F9E14 =  cohomologyMatrix(strand(T,{0,0},J),-2*n,2*n)

F9E15 =  kk=ZZ/101

F9E16 =  R=kk[x_0..x_4]

F9E17 =  m=matrix {{ x_0,x_1,x_3},{x_1,x_2,x_4}}

F9E18 =  J=minors(2,m)

F9E19 =  dim J, degree J

F9E20 =  s=2,d=-2

F9E21 =  N=symmetricPower(s,coker m)**R^{d};

F9E22 =  betti res N

F9E23 =  annihilator N == J

F9E24 =  phi= transpose m

F9E25 =  RphiN = directImageComplex(J,N,phi)

F9E26 =  T= ring RphiN

F9E27 =  HH^1 RphiN

F9E28 =  s=3,d=1

F9E29 =  N=symmetricPower(s,coker m)**R^{d};

F9E30 =  RphiN = directImageComplex(J,N,phi)

F9E31 =  T=ring RphiN

F9E32 =  netList apply(toList(min RphiN.. max RphiN),i->

          {-i, saturate annihilator HH^(-i) RphiN,betti res HH^(-i) RphiN})

F9E33 =  R0=prune HH^0 RphiN

F9E34 =  dim R0, degree R0

F9E35 =  betti (sR0Dual = syz transpose presentation R0)

F9E36 =  saturate annihilator coker transpose sR0Dual

F9E37 =  dual source sR0Dual

F10E0 =  n={1,1};

F10E1 =  (S,E) = productOfProjectiveSpaces n;

F10E2 =  T1 = (dual res trim (ideal vars E)^2)[1];

F10E3 =  a=-{2,2};

F10E4 =  T2=T1**E^{a}[sum a];

F10E5 =  W=beilinsonWindow T2

F10E6 =  cohomologyMatrix(W,-2*n,2*n)

F10E7 =  T=tateExtension W

F10E8 =  cohomologyMatrix(T,-3*n,4*n)

F10E9 =  cohomologyMatrix(beilinsonWindow T,-n,n)

F10E10 =  cohomologyMatrix(T,-5*n,4*n) -- the view including the corner

F11E0 =  (S,E) = productOfProjectiveSpaces{1,1}

F11E1 =  low = {-3,-3}

F11E2 =  T=tateResolution( S^{{1,1}},low, high);

F11E3 =  cohomologyMatrix(T,low,high)

F11E4 =  cohomologyMatrix(T,2*low,2*high)

F11E5 =  betti T

F11E6 =  T'=trivialHomologicalTruncation(T, -sum high,-sum low)

F11E7 =  betti T'

F11E8 =  cohomologyMatrix(T',2*low,2*high)

F11E9 =  (S,E)=productOfProjectiveSpaces {2,1}

F11E10 =  low=-{2,1}

F11E11 =  A=map(S^1, S^{1:{-1,0}}, {{S_0}})

F11E12 =  M=source A

F11E13 =  TA = tateResolution(A, low, high);

F11E14 =  TM = tateResolution(M, low, high);

F11E15 =  TN = tateResolution(N, low, high);

F11E16 =  (source TA == TM, target TA == TN)

F12E0 =  (S,E) = productOfProjectiveSpaces{1,1,2}

F12E1 =  I = ideal(x_(0,0)^2,x_(1,0)^3,x_(2,0)^4)

F12E2 =  R = coarseMultigradedRegularity(S^1/I)

F12E3 =  N = truncate(R,S^1/I);

F12E4 =  betti res N

F12E5 =  netList toList tallyDegrees res N

F13E0 =  n={1,1}, v=n+{1,1}

F13E1 =  high=3*n, low=-high

F13E2 =  (S,E)=productOfProjectiveSpaces n

F13E3 =  P=(image transpose gens trim (ideal vars E)^2)**E^{n}

F13E4 =  betti P

F13E5 =  LP=bgg P

F13E6 =  M = (HH^0 LP)**S^{-n}

F13E7 =  betti res M

F13E8 =  T = tateResolution(M,low,high)

F13E9 =  cohomologyMatrix(T,low,high)

F13E10 =  cohomologyMatrix(T,2*low,2*high)

F13E11 =  B=beilinson T

F13E12 =  M'=prune HH^0 B

F13E13 =  prune HH^1 B

F13E14 =  isIsomorphic(M,M')

F13E15 =  C=cornerComplex(T,{0,0});

F13E16 =  betti C

F13E17 =  cohomologyMatrix(C,low,high)

F13E18 =  betti C.dd_0

F13E19 =  P=ker C.dd_0**E^{v}

F13E20 =  LP=bgg P;

F13E21 =  betti LP

F13E22 =  coLP=apply(toList(min LP..max LP),i->prune HH^(-i) LP);

F13E23 =  apply(coLP,h->dim h)

F13E24 =  M1=HH^0 LP

F13E25 =  betti M1,betti M

F13E26 =  isIsomorphic(M,M1)

F13E27 =  k=1

F13E28 =  P=ker C.dd_(-k)**E^{v}; betti P

F13E29 =  LP=bgg P

F13E30 =  betti LP

F13E31 =  coLP=apply(toList(min LP..max LP),i->prune HH^(-i) LP);

F13E32 =  apply(coLP,h->dim h)

F13E33 =  M1=HH^(-k) LP

F13E34 =  betti M1, betti M

F13E35 =  isIsomorphic(M,M1)

F13E36 =  k=-2

F13E37 =  P=ker C.dd_(-k)**E^{v}; betti P

F13E38 =  LP=bgg P;

F13E39 =  betti LP

F13E40 =  coLP=apply(toList(min LP..max LP),i->prune HH^(-i) LP);

F13E41 =  apply(coLP,h->dim h)

F13E42 =  M1=HH^(-k) LP

F13E43 =  betti M1,betti M

F13E44 =  isIsomorphic(M,M1)

F13E45 =  RM=bgg M

F13E46 =  cohomologyMatrix(RM,low,high)

F13E47 =  betti RM

F13E48 =  uQ=firstQuadrantComplex(T,{0,0});

F13E49 =  cohomologyMatrix(uQ,low,high)

F13E50 =  uQ.dd_(-1)

F13E51 =  T1=tateResolution(M,low,3*high);

F13E52 =  c={2,2}

F13E53 =  CM=cornerComplex(T1,c);

F13E54 =  RMc=firstQuadrantComplex(T1,c);

F13E55 =  cohomologyMatrix(CM,low,3*high)

F13E56 =  coRMc=apply(toList(-10..-4),i-> HH^(-i) RMc==0)

F13E57 =  P1=ker CM.dd_(-sum c)

F13E58 =  LP=bgg (P1**E^{-c+v})

F13E59 =  betti LP

F13E60 =  coLP=apply(toList(min LP..max LP),i->dim HH^(-i) LP)

F13E61 =  Mc=prune truncate(c,M)**S^{c}

F13E62 =  betti (Mc'=HH^0 LP), betti Mc

F13E63 =  isIsomorphic(Mc',Mc)

F13E64 =  c={3,1}

F13E65 =  cohomologyMatrix(T1,low,2*high)

F13E66 =  CM=cornerComplex(T1,c);

F13E67 =  cohomologyMatrix(CM,low,3*high)

F13E68 =  RMc=firstQuadrantComplex(T1,c);

F13E69 =  coRMc=apply(toList(-9..-4),i-> HH^(-i) RMc==0)

F13E70 =  P1=ker CM.dd_(-sum c)

F13E71 =  LP=bgg (P1**E^{-c+v})

F13E72 =  betti LP

F13E73 =  coLP=apply(toList(min LP..max LP),i->dim HH^(-i) LP)

F13E74 =  Mc=prune truncate(c,M)**S^{c}

F13E75 =  betti (Mc'=HH^0 LP), betti Mc

F13E76 =  isIsomorphic(Mc',Mc)

F13E77 =  W=beilinsonWindow T

F13E78 =  T'=tateExtension W

F13E79 =  comT'=cohomologyMatrix(T',low,high)

F13E80 =  comT=cohomologyMatrix(T,low,high)

F13E81 =  assert(sub(comT',vars ring comT)==comT)

F13E82 =  cohomologyMatrix(T,low,high)

F13E83 =  cohomologyMatrix(beilinsonWindow T,low, high)

F13E84 =  B = beilinson T

F13E85 =  d={2,2}

F13E86 =  T1=T**E^{d}[sum d]

F13E87 =  cohomologyMatrix(beilinsonWindow T1,low,high)

F13E88 =  B1 =beilinson T1

F13E89 =  decompose annihilator HH^1 B1

F13E90 =  decompose annihilator HH^2 B1

F13E91 =  M1=HH^0 B1

F13E92 =  dim M1

F13E93 =  betti M1, betti M

F13E94 =  isIsomorphic(M1,M**S^{-d})

F13E95 =  d={-1,-2}

F13E96 =  T2=T**E^{d}[sum d]

F13E97 =  cohomologyMatrix(beilinsonWindow T2,low,high)

F13E98 =  cohomologyMatrix(T,low,high)

F13E99 =  B2 =beilinson T2

F13E100 =  HH^(-1) B2 == 0

F13E101 =  M2=HH^0 B2

F13E102 =  dim M2

F13E103 =  betti M2, betti M, betti truncate(-d,M)

F13E104 =  isIsomorphic(M2,truncate(-d,M)**S^{-d})

F14E0 =  (S,E) = productOfProjectiveSpaces {2,1}

F14E1 =  psi=random(E^{{-1,0}}, E^{{-2,-1}})

F14E2 =  phi=beilinson psi

F14E3 =  beilinson(E^{{-1,0}})

F14E4 =  T = chainComplex(psi)

F14E5 =  C = beilinson T

F14E6 =  betti T

F15E0 =  (S,E) = productOfProjectiveSpaces {1,1};

F15E1 =  T1= (dual res( trim (ideal vars E)^2,LengthLimit=>8))[1];

F15E2 =  T=trivialHomologicalTruncation(T2=res(coker upperCorner(T1,{4,3}),LengthLimit=>13)[7],-5,6);

F15E3 =  betti T

F15E4 =  cohomologyMatrix(T,-{4,4},{3,2})

F15E5 =  fqT=firstQuadrantComplex(T,-{2,1});

F15E6 =  betti fqT

F15E7 =  cohomologyMatrix(fqT,-{4,4},{3,2})

F15E8 =  cohomologyMatrix(fqT,-{2,1},-{1,0})

F15E9 =  lqT=lastQuadrantComplex(T,-{2,1});

F15E10 =  betti lqT

F15E11 =  cohomologyMatrix(lqT,-{4,4},{3,2})

F15E12 =  cohomologyMatrix(lqT,-{3,2},-{2,1})

F15E13 =  cT=cornerComplex(T,-{2,1});

F15E14 =  betti cT

F15E15 =  cohomologyMatrix(cT,-{4,4},{3,2})

F16E0 =  S = ZZ/11[a,b]

F16E1 =  M = coker random(S^{-2,0,1,2}, S^{3:-3})

F16E2 =  N = coker (random(cover M, cover M)*presentation M)

F16E3 =  tally apply(100, j->isIsomorphic(M,N))

F17E0 =  (S,E) = productOfProjectiveSpaces {2,3}

F17E1 =  B1=beilinsonBundle(1,0,E)

F17E2 =  B2=beilinsonBundle(1,1,E)

F17E3 =  B=beilinsonBundle({1,1},E); betti B

F17E4 =  B1**B2 == B

F18E0 =  (S,E) = productOfProjectiveSpaces {2,1}

F18E1 =  gens S, gens E

F18E2 =  f=e_(0,0)*e_(0,1)*e_(1,0)

F18E3 =  beilinsonContraction(f,{0,0},{2,1})

F18E4 =  m=beilinsonContraction(e_(0,0)*e_(1,0),{0,0},{1,1})

F19E0 =  (S,E) = productOfProjectiveSpaces{1,1}

F19E1 =  low = {-4,-4}

F19E2 =  T1= (dual res( trim (ideal vars E)^2,LengthLimit=>8))[1];

F19E3 =  T2=res(coker upperCorner(T1,{4,3}),LengthLimit=>13)[7];

F19E4 =  T=trivialHomologicalTruncation (T2,-5,6);

F19E5 =  cohomologyMatrix(T,low,high)

F19E6 =  c =  -{2,1};

F19E7 =  cT=cornerComplex(T,c);

F19E8 =  betti cT

F19E9 =  cohomologyMatrix(cT,low,high)

F19E10 =  fqT=firstQuadrantComplex(T,c);

F19E11 =  lqT=lastQuadrantComplex(T,c);

F19E12 =  cohomologyMatrix(fqT,low,high)

F19E13 =  cohomologyMatrix(lqT,low,high)

F19E14 =  betti fqT

F19E15 =  betti lqT

F19E16 =  betti cT

F19E17 =  betti (cT.dd_(-sum c-1))

F19E18 =  c = {-1,-1}

F19E19 =  cT=cornerComplex(T,c);

F19E20 =  betti cT

F19E21 =  cohomologyMatrix(cT,low,high)

F19E22 =  fqT=firstQuadrantComplex(T,c);

F19E23 =  lqT=lastQuadrantComplex(T,c);

F19E24 =  cohomologyMatrix(fqT,low,high)

F19E25 =  cohomologyMatrix(lqT,low,high)

F19E26 =  betti fqT

F19E27 =  betti lqT

F19E28 =  betti cT

F19E29 =  betti (cT.dd_1)

F19E30 =  (S,E)=productOfProjectiveSpaces{2,1}

F19E31 =  M=beilinson(E^{-{1,1}})

F19E32 =  c={1,1}

F19E33 =  low={-3,-3},high={4,4}

F19E34 =  cohomologyMatrix(M,low,high)

F19E35 =  C=cornerComplex(M,c,low,high)

F19E36 =  cohomologyMatrix(C,low,high)

F19E37 =  cohomologyMatrix(C,2*low,2*high)

F19E38 =  betti C

F19E39 =  C.dd_(-sum c +1)

F20E0 =  (S,E) = productOfProjectiveSpaces{1,2}

F20E1 =  M = S^1

F20E2 =  low = {-3,-3}

F20E3 =  cohomologyMatrix(M,low,high)

F20E4 =  M = S^1/ideal(x_(0,0), x_(1,0)^3+x_(1,1)^3+x_(1,2)^3)

F20E5 =  low = {-3,-3}

F20E6 =  cohomologyMatrix(M,low,high)

F21E0 =  E=ZZ/101[e_0,e_1,SkewCommutative=>true]

F21E1 =  C=dual res (coker transpose F.dd_3,LengthLimit=>8)[-3]

F21E2 =  C1=trivialHomologicalTruncation(C,-2,2)

F21E3 =  C2=trivialHomologicalTruncation(C1,-3,3)

F21E4 =  C3=trivialHomologicalTruncation(C2,2,2)

F22E0 =  n={1,1};

F22E1 =  (S,E) = productOfProjectiveSpaces n;

F22E2 =  T1 = (dual res trim (ideal vars E)^2)[1];

F22E3 =  a=-{2,2}

F22E4 =  W=beilinsonWindow T2,cohomologyMatrix(W,-2*n,2*n)

F22E5 =  T=tateExtension W;

F22E6 =  cohomologyMatrix(T,-{3,3},{3,3})

F22E7 =  c={1,0}

F22E8 =  rT0=regionComplex(T,c,({},{0,1},{})); --a single position

F22E9 =  cohomologyMatrix(rT0,-{3,3},{3,3})

F22E10 =  rT1=regionComplex(T,c,({0},{1},{})); --a horizontal half line

F22E11 =  cohomologyMatrix(rT1,-{3,3},{3,3})

F22E12 =  rT2=regionComplex(T,c,({},{0},{})); -- a vertical line

F22E13 =  cohomologyMatrix(rT2,-{3,3},{3,3})

F22E14 =  rT3=regionComplex(T,c,({},{},{1})); -- a upper half plane

F22E15 =  cohomologyMatrix(rT3,-{3,3},{3,3})

F22E16 =  rT4=regionComplex(T,c,({0},{},{1})); --a north east quadrant

F22E17 =  cohomologyMatrix(rT4,-{3,3},{3,3})

F22E18 =  rT5=regionComplex(T,c,({1},{},{0})); --a south west quadrant

F22E19 =  cohomologyMatrix(rT5,-{3,3},{3,3})

F23E0 =  kk=ZZ/101

F23E1 =  needsPackage "Resultants";

F23E2 =  vd=veronese(1,d,kk);

F23E3 =  R=target vd

F23E4 =  M=R^{1:-1}

F23E5 =  RM=directImageComplex(I,M,matrix vd);

F23E6 =  for i from min RM to max RM list (rank RM_i)

F23E7 =  retTable=actionOnDirectImage(I,M,matrix vd);

F23E8 =  keys retTable

F23E9 =  isAction(J, apply(dim S, i->prune HH^0 retTable#0#i))

F23E10 =  kk=ZZ/1009;

F23E11 =  (S,E)=productOfProjectiveSpaces({2,2},CoefficientField=>kk);

F23E12 =  f1=S_0^4+S_1^4+S_2^4

F23E13 =  IX=ideal (f1,f2);

F23E14 =  P=matrix{{1,192,0}}

F23E15 =  varX=matrix{{S_0,S_1,S_2}}

F23E16 =  PX=P||varX

F23E17 =  I1=ideal(f2, minors(2,PX)); -- ideal for P*C

F23E18 =  I2=ideal(f2, minors(2,QX)); -- ideal for Q*C

F23E19 =  I3=ideal(f1,f2, minors(2, varX||varY)); -- ideal for the diagonal D

F23E20 =  I=intersect(I1,I2,I3); -- ideal for P*C+Q*C+D

F23E21 =  SX=S/IX

F23E22 =  betti (LX=Hom(Ldual, SX^1))

F23E23 =  phi = map(SX,S,vars SX);

F23E24 =  betti (L=prune pushForward(phi,LX))

F23E25 =  Ltr = (truncate ({2,2},L))**S^{{2,2}};

F23E26 =  betti res Ltr

F23E27 =  Q=symExt(presentation Ltr, E);

F23E28 =  T=(res (coker Q,LengthLimit=>12))**E^{{2,2}}[4];

F23E29 =  cohomologyMatrix (T, -{5,5},{3,3})

F23E30 =  sT=strand(T,{0,0},{0});

F23E31 =  sTFull=new ChainComplex;

F23E32 =  sTFull.ring = ring sT;

F23E33 =  ma=6;

F23E34 =  sTFull=(dual res (coker transpose (sT[ma]).dd_0, LengthLimit=>2*ma))[-ma];

F23E35 =  (S',E')=productOfProjectiveSpaces({2},CoefficientField=>kk);

F23E36 =  projOnE=map(E', E, toList(3:0)|(gens E'));

F23E37 =  mi=min sTFull

F23E38 =  W=new ChainComplex

F23E39 =  apply(toList(mi..ma),i-> W_i = E'^(-apply(degrees sTFull_i,d->d_{1})));

F23E40 =  apply(toList(mi+1..ma),i->W.dd_i = map(W_(i-1),W_i,projOnE sTFull.dd_i));

F23E41 =  betti W

F23E42 =  R0fL = prune HH^0 beilinson W

F23E43 =  R1fL = prune HH^1 beilinson W

F23E44 =  degree R0fL

F23E45 =  primaryDecomposition ann R0fL

F23E46 =  degree R1fL

F23E47 =  primaryDecomposition ann R1fL

F23E48 =  J=ideal (S'_0^4+S'_1^4+S'_2^4);

F23E49 =  retTable=actionOnDirectImage(J,W);

F23E50 =  keys retTable

F23E51 =  prunedActionList = i->apply(dim S',j->prune HH^i retTable#i#j);

F23E52 =  apply(keys retTable, i->isAction(J,prunedActionList(i)))

F23E53 =  M0=source (prunedActionList(0))_0

F23E54 =  (rank M0, degree M0, betti res M0)

F23E55 =  isIsomorphic(truncate(regularity M0, M0), truncate(regularity M0, dual dual M0))

F23E56 =  dual dual M0

F23E57 =  M1=source (prunedActionList(1))_0

F23E58 =  (rank M1, degree M1, betti res M1)

F24E0 =  (S,E) = productOfProjectiveSpaces{1,2}

F24E1 =  M = S^1

F24E2 =  low = {-3,-3}

F24E3 =  H = cohomologyHashTable(M, low,high);

F24E4 =  H' = hashTable(select(pairs H, p-> p_1!=0))

F24E5 =  cohomologyMatrix(M, low, high)

F24E6 =  eulerPolynomialTable H'

F25E0 =  R = ZZ/101[a,b,c]

F25E1 =  kRes = res coker vars R

F25E2 =  multBya = extend(kRes,kRes,matrix{{a}})

F25E3 =  isQuism(multBya)

F25E4 =  F = extend(kRes,kRes,matrix{{1_R}})

F25E5 =  isQuism(F)

F26E0 =  S=QQ[x_0..x_2]

F26E1 =  I=ideal(x_0*x_1-x_2^2);

F26E2 =  M=R^{{1:0},{1:-1}};

F26E3 =  X0=map(M**R^{1},M,{{y_0,0},{0,y_0}})

F26E4 =  X1=map(M**R^{1},M,{{y_1,0},{0,y_1}})

F26E5 =  X2=map(M**R^{1},M,{{0,y_0*y_1},{1,0}})

F26E6 =  isAction(I,{X0,X1,X2})

F27E0 =  (S,E)=productOfProjectiveSpaces{1,2}

F27E1 =  vars S

F27E2 =  vars E

F27E3 =  (S,E) = productOfProjectiveSpaces({1,1},

         Variables =>{getSymbol "u",getSymbol"v"},

         CohomologyVariables =>{getSymbol "p",getSymbol "q"},

         CoefficientField => QQ)

F27E4 =  (coefficientRing S) === (coefficientRing E)

F27E5 =  trim (ideal vars S)^2

F27E6 =  trim (ideal vars E)^2

F27E7 =  peek S.TateData

F28E0 =  n={1,2}

F28E1 =  (S,E) = productOfProjectiveSpaces n

F28E2 =  vars S, vars E

F28E3 =  m=map(S^4,S^{{ -1,0},{0,-1}}, transpose matrix{{S_0,S_1,0,0},{S_2,0,S_3,S_4}})

F28E4 =  mE=symExt(m,E)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F0E7", "F0E8", "F0E9", "F0E10", "F0E11", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F1E10", "F2E0", "F2E1", "F2E2", "F2E3", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F4E7", "F4E8", "F4E9", "F4E10", "F4E11", "F4E12", "F4E13", "F4E14", "F4E15", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F5E9", "F5E10", "F5E11", "F5E12", "F5E13", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F6E9", "F6E10", "F6E11", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F8E8", "F8E9", "F8E10", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F9E8", "F9E9", "F9E10", "F9E11", "F9E12", "F9E13", "F9E14", "F9E15", "F9E16", "F9E17", "F9E18", "F9E19", "F9E20", "F9E21", "F9E22", "F9E23", "F9E24", "F9E25", "F9E26", "F9E27", "F9E28", "F9E29", "F9E30", "F9E31", "F9E32", "F9E33", "F9E34", "F9E35", "F9E36", "F9E37", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F10E5", "F10E6", "F10E7", "F10E8", "F10E9", "F10E10", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F11E5", "F11E6", "F11E7", "F11E8", "F11E9", "F11E10", "F11E11", "F11E12", "F11E13", "F11E14", "F11E15", "F11E16", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F13E6", "F13E7", "F13E8", "F13E9", "F13E10", "F13E11", "F13E12", "F13E13", "F13E14", "F13E15", "F13E16", "F13E17", "F13E18", "F13E19", "F13E20", "F13E21", "F13E22", "F13E23", "F13E24", "F13E25", "F13E26", "F13E27", "F13E28", "F13E29", "F13E30", "F13E31", "F13E32", "F13E33", "F13E34", "F13E35", "F13E36", "F13E37", "F13E38", "F13E39", "F13E40", "F13E41", "F13E42", "F13E43", "F13E44", "F13E45", "F13E46", "F13E47", "F13E48", "F13E49", "F13E50", "F13E51", "F13E52", "F13E53", "F13E54", "F13E55", "F13E56", "F13E57", "F13E58", "F13E59", "F13E60", "F13E61", "F13E62", "F13E63", "F13E64", "F13E65", "F13E66", "F13E67", "F13E68", "F13E69", "F13E70", "F13E71", "F13E72", "F13E73", "F13E74", "F13E75", "F13E76", "F13E77", "F13E78", "F13E79", "F13E80", "F13E81", "F13E82", "F13E83", "F13E84", "F13E85", "F13E86", "F13E87", "F13E88", "F13E89", "F13E90", "F13E91", "F13E92", "F13E93", "F13E94", "F13E95", "F13E96", "F13E97", "F13E98", "F13E99", "F13E100", "F13E101", "F13E102", "F13E103", "F13E104", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F15E6", "F15E7", "F15E8", "F15E9", "F15E10", "F15E11", "F15E12", "F15E13", "F15E14", "F15E15", "F16E0", "F16E1", "F16E2", "F16E3", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F18E0", "F18E1", "F18E2", "F18E3", "F18E4", "F19E0", "F19E1", "F19E2", "F19E3", "F19E4", "F19E5", "F19E6", "F19E7", "F19E8", "F19E9", "F19E10", "F19E11", "F19E12", "F19E13", "F19E14", "F19E15", "F19E16", "F19E17", "F19E18", "F19E19", "F19E20", "F19E21", "F19E22", "F19E23", "F19E24", "F19E25", "F19E26", "F19E27", "F19E28", "F19E29", "F19E30", "F19E31", "F19E32", "F19E33", "F19E34", "F19E35", "F19E36", "F19E37", "F19E38", "F19E39", "F20E0", "F20E1", "F20E2", "F20E3", "F20E4", "F20E5", "F20E6", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F22E5", "F22E6", "F22E7", "F22E8", "F22E9", "F22E10", "F22E11", "F22E12", "F22E13", "F22E14", "F22E15", "F22E16", "F22E17", "F22E18", "F22E19", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4", "F23E5", "F23E6", "F23E7", "F23E8", "F23E9", "F23E10", "F23E11", "F23E12", "F23E13", "F23E14", "F23E15", "F23E16", "F23E17", "F23E18", "F23E19", "F23E20", "F23E21", "F23E22", "F23E23", "F23E24", "F23E25", "F23E26", "F23E27", "F23E28", "F23E29", "F23E30", "F23E31", "F23E32", "F23E33", "F23E34", "F23E35", "F23E36", "F23E37", "F23E38", "F23E39", "F23E40", "F23E41", "F23E42", "F23E43", "F23E44", "F23E45", "F23E46", "F23E47", "F23E48", "F23E49", "F23E50", "F23E51", "F23E52", "F23E53", "F23E54", "F23E55", "F23E56", "F23E57", "F23E58", "F24E0", "F24E1", "F24E2", "F24E3", "F24E4", "F24E5", "F24E6", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F25E5", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F26E6", "F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F27E5", "F27E6", "F27E7", "F28E0", "F28E1", "F28E2", "F28E3", "F28E4"}
