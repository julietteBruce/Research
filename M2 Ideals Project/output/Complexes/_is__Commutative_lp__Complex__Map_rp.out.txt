needsPackage "Complexes"

F28E0 =  S = ZZ/101[a,b,c];

F28E1 =  C = freeResolution coker vars S

F28E2 =  D = C ** C

F28E3 =  f1 = randomComplexMap(D, C, Boundary => true, InternalDegree => 1)

F28E4 =  isCommutative f1

F28E5 =  assert(degree f1 == 0)

F28E6 =  assert isNullHomotopic f1

F28E7 =  assert(source f1 == C and target f1 == D)

F28E8 =  f2 = randomComplexMap(D, C, Cycle => true)

F28E9 =  isCommutative f2

F28E10 =  assert(degree f2 == 0)

F28E11 =  assert isComplexMorphism f2

F28E12 =  f3 = randomComplexMap(D, C, Cycle => true, Degree=>1, InternalDegree => 1)

F28E13 =  isCommutative f3

F28E14 =  assert(degree f3 == 1)

F28E15 =  part1 = dd^D_3 * f3_2

F28E16 =  part2 = f3_1 * dd^C_2

F28E17 =  assert(part1 + part2 == 0)

F28E18 =  f4 = randomComplexMap(D, C)

F28E19 =  isCommutative f4

F28E20 =  debugLevel = 1

F28E21 =  isCommutative f4

exampleIDS = {"F28E0", "F28E1", "F28E2", "F28E3", "F28E4", "F28E5", "F28E6", "F28E7", "F28E8", "F28E9", "F28E10", "F28E11", "F28E12", "F28E13", "F28E14", "F28E15", "F28E16", "F28E17", "F28E18", "F28E19", "F28E20", "F28E21"}
