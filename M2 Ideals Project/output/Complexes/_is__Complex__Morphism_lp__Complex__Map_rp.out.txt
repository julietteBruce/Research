needsPackage "Complexes"

F15E0 =  S = ZZ/101[a,b,c];

F15E1 =  C = freeResolution coker vars S

F15E2 =  D = C ** C

F15E3 =  f1 = randomComplexMap(D, C, Boundary => true, InternalDegree => 1)

F15E4 =  isComplexMorphism f1

F15E5 =  assert(degree f1 == 0)

F15E6 =  assert isNullHomotopic f1

F15E7 =  assert(source f1 == C and target f1 == D)

F15E8 =  f2 = randomComplexMap(D, C, Cycle => true)

F15E9 =  isComplexMorphism f2

F15E10 =  assert(degree f2 == 0)

F15E11 =  assert isComplexMorphism f2

F15E12 =  f3 = randomComplexMap(D, C, Cycle => true, Degree=>1, InternalDegree => 1)

F15E13 =  assert(degree f3 == 1)

F15E14 =  isComplexMorphism f3

F15E15 =  debugLevel = 1

F15E16 =  isComplexMorphism f3

F15E17 =  assert isCommutative f3

F15E18 =  f4 = randomComplexMap(D, C)

F15E19 =  assert(degree f4 == 0)

F15E20 =  debugLevel = 0

F15E21 =  isComplexMorphism f4

F15E22 =  debugLevel = 1

F15E23 =  isComplexMorphism f4

exampleIDS = {"F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F15E6", "F15E7", "F15E8", "F15E9", "F15E10", "F15E11", "F15E12", "F15E13", "F15E14", "F15E15", "F15E16", "F15E17", "F15E18", "F15E19", "F15E20", "F15E21", "F15E22", "F15E23"}
