needsPackage "Complexes"

F27E0 =  S = ZZ/32003[a,b];

F27E1 =  I = ideal(a^2-b^2, a*b)

F27E2 =  C = freeResolution(I, FastNonminimal=>true)

F27E3 =  betti C

F27E4 =  D = minimize C

F27E5 =  assert(isWellDefined D and isHomogeneous D)

F27E6 =  betti D

F27E7 =  g = D.cache.minimizingMap

F27E8 =  assert isWellDefined g

F27E9 =  assert(isComplexMorphism g and isQuasiIsomorphism g)

F27E10 =  assert(source g == C)

F27E11 =  assert(target g == D)

F27E12 =  assert(coker g == 0)

F27E13 =  f = liftMapAlongQuasiIsomorphism(id_D, g)

F27E14 =  g*f == id_D

F27E15 =  assert(source f == D)

F27E16 =  assert(target f == C)

F27E17 =  assert(ker f == 0)

F27E18 =  f*g

F27E19 =  h = prune canonicalMap(C, ker g)

F27E20 =  assert isShortExactSequence(g, h)

F27E21 =  S = ZZ/32003[a..d]

F27E22 =  J = ideal(a*b*c-b*c, a*d-c, a^3-d^2*c)

F27E23 =  CJ = freeResolution J

F27E24 =  assert not isHomogeneous CJ

F27E25 =  D = minimize CJ

F27E26 =  isWellDefined D

F27E27 =  prune HH D == prune HH CJ

exampleIDS = {"F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F27E5", "F27E6", "F27E7", "F27E8", "F27E9", "F27E10", "F27E11", "F27E12", "F27E13", "F27E14", "F27E15", "F27E16", "F27E17", "F27E18", "F27E19", "F27E20", "F27E21", "F27E22", "F27E23", "F27E24", "F27E25", "F27E26", "F27E27"}
