needsPackage "Complexes"

F8E0 =  S = ZZ/101[a..c]

F8E1 =  C = freeResolution coker vars S

F8E2 =  f = id_C

F8E3 =  assert(f == 1)

F8E4 =  f === id_C[-1][1]

F8E5 =  f == id_C[-1][1]

F8E6 =  assert(0 * id_C == 0)

F8E7 =  g = randomComplexMap(C, C)

F8E8 =  h = canonicalMap(coker g, target g)

F8E9 =  assert(h == 0)

F8E10 =  g = randomComplexMap(C, C, InternalDegree=>1, Cycle=>true)

F8E11 =  h = canonicalMap(coker g, target g)

F8E12 =  assert(h != 1)

F8E13 =  D = prune image g

F8E14 =  p = D.cache.pruningMap

F8E15 =  p == 1

F8E16 =  assert(coker p == 0 and ker p == 0)

F8E17 =  assert(prune p == 1)

exampleIDS = {"F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F8E8", "F8E9", "F8E10", "F8E11", "F8E12", "F8E13", "F8E14", "F8E15", "F8E16", "F8E17"}
