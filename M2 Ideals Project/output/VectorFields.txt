needsPackage "VectorFields"

F0E0 =  R=QQ[a,b,c];

F0E1 =  D=derlog(a*c-b^2)

F0E2 =  lcs=lowerCentralSeries(2,gens D)

F0E3 =  apply(lcs,f->gens trim image f)

F0E4 =  lowerCentralSeries(2,D)

F0E5 =  trim((image commutator(gens D))+(ideal (a,b,c))*D)

F0E6 =  D=image matrix {{0},{a},{2*b}};

F0E7 =  lowerCentralSeries(5,gens D)

F0E8 =  lowerCentralSeries(5,D)

F1E0 =  R=QQ[x,y];

F1E1 =  M=matrix {{x^2,1,0,x^2,x*y},{y^2,0,0,y^4,y^2}}

F1E2 =  homogeneousVectorFieldDegree(M)

F1E3 =  homogeneousVectorFieldDegree(image M)

F1E4 =  R=QQ[x,y,Degrees=>{{3},{1}}];

F1E5 =  M=matrix {{x^2,1,0,x^2,x*y},{y^2,0,0,y^4,y^2}}

F1E6 =  homogeneousVectorFieldDegree(M)

F1E7 =  R=QQ[x,y,Degrees=>{{3,1},{1,1}}];

F1E8 =  M=matrix {{x^2,1,0,x^2,x*y},{y^2,0,0,y^4,y^2}}

F1E9 =  homogeneousVectorFieldDegree(M)

F2E0 =  R=QQ[x,y];

F2E1 =  D=gens derlog(ideal (x*y))

F2E2 =  bracket(D,D)

F2E3 =  commutator(D)

F2E4 =  co1=commutator(D|x*D|y*D)

F2E5 =  commutator(D|x*D|y*D|x^2*D|x*y*D|y^2*D)

F2E6 =  bracket(image D,image D)

F2E7 =  commutator(image D)

F2E8 =  bracket(image D,image D)==image co1

F2E9 =  commutator(image D)==image co1

F3E0 =  R=QQ[a,b,c,d];

F3E1 =  e=matrix {{c},{d},{0},{0}};

F3E2 =  f=matrix {{0},{0},{a},{b}};

F3E3 =  h=matrix {{-a},{-b},{c},{d}};

F3E4 =  bracket(e,f)-h==0

F3E5 =  bracket(h,f)+2*f==0

F3E6 =  bracket(h,e)-2*e==0

F3E7 =  isLieAlgebra(image (e|f|h))

F4E0 =  R=QQ[x,y];

F4E1 =  A=matrix {{0},{x}};

F4E2 =  B=matrix {{x^2},{y}};

F4E3 =  C=matrix {{1},{x}};

F4E4 =  bracket(A,B)

F4E5 =  bracket(B,A)==-bracket(A,B)

F4E6 =  bracket(A,C)

F4E7 =  bracket(A_0,C_0)

F4E8 =  bracket(A,B|C)

F4E9 =  bracket(A|C,B|C,{(0,0),(1,1)})===bracket(A,B)|bracket(C,C)

F4E10 =  bracket(A|C,B|C,{{0,1}})===bracket(A,C)

F4E11 =  trim bracket(image(A),image(B))

F4E12 =  (2*x+1)*bracket(A,B)-bracket(x*A,B)

F4E13 =  R=QQ[a,b,c,d];

F4E14 =  e=matrix {{c},{d},{0},{0}};

F4E15 =  f=matrix {{0},{0},{a},{b}};

F4E16 =  h=matrix {{-a},{-b},{c},{d}};

F4E17 =  L=e|f|h;

F4E18 =  bracket(e,f)-h==0

F4E19 =  bracket(h,f)+2*f==0

F4E20 =  bracket(h,e)-2*e==0

F4E21 =  bracket(L,L)

F4E22 =  image bracket(L,L)==image L

F5E0 =  R=QQ[x,y,z];

F5E1 =  A=matrix {{x},{y},{0}};

F5E2 =  B=matrix {{0},{0},{z}};

F5E3 =  f=x*y-z^2;

F5E4 =  applyVectorField(A,f)

F5E5 =  applyVectorField(A,{f,x*f})

F5E6 =  applyVectorField(A|B,{f,x*f})

F5E7 =  applyVectorField(image A,f)

F5E8 =  applyVectorField(image A,ideal (f))

F5E9 =  trim(ideal(applyVectorField(A,f))+ideal(f)*minors(1,A))

F6E0 =  R=QQ[a,b,c];

F6E1 =  f=a*c-b^2;

F6E2 =  M=derlog(ideal (f))

F6E3 =  isFreeDivisor(gens M)

F6E4 =  isFreeDivisor(M)

F6E5 =  isFreeDivisor(f)

F6E6 =  f=a*(a*c-b^2);

F6E7 =  M=derlog(ideal (f))

F6E8 =  isFreeDivisor(gens M)

F6E9 =  isFreeDivisor(M)

F6E10 =  isFreeDivisor(f)

F6E11 =  f=a;

F6E12 =  D=derlog(ideal (f))

F6E13 =  isFreeDivisor(f)

F6E14 =  isFreeDivisor(D)

F6E15 =  M=matrix {{a,0,0},{0,a,0},{0,0,1}};

F6E16 =  isSubset(image M,D)

F6E17 =  isFreeDivisor(M)

F6E18 =  isFreeDivisor((gens D)|M)

F6E19 =  isFreeDivisor(trim image ((gens D)|M))

F7E0 =  R=QQ[x,y];

F7E1 =  D=derlog(ideal (x*y*(x-y)))

F7E2 =  commutator(gens D)

F7E3 =  bracket(gens D,gens D)

F7E4 =  commutator(D)

F7E5 =  bracket(D,D)

F8E0 =  R=QQ[x,y,z];

F8E1 =  vars(R)

F8E2 =  M=matrix {{0},{2*y},{z}}

F8E3 =  commutator(M)

F8E4 =  bracket(M,M)

F8E5 =  commutator(image M)

F8E6 =  bracket(M,y*M)

F8E7 =  applyVectorField(M,x*y-z^2)

F8E8 =  applyVectorField(image M,x*y-z^2)

F8E9 =  D=derlog(ideal (x*y-z^2))

F8E10 =  isSubset(image M,D)

F8E11 =  isVectorField(gens D)

F8E12 =  isVectorField(D)

F8E13 =  isLieAlgebra(D)

F9E0 =  R=QQ[a,b,c];

F9E1 =  D=derlog(a*c-b^2)

F9E2 =  ds=derivedSeries(3,gens D)

F9E3 =  apply(ds,f->gens trim image f)

F9E4 =  derivedSeries(3,D)

F9E5 =  trim((image commutator(gens D))+(ideal (a,b,c))*D)

F9E6 =  D=derlog(a*(a*c-b^2))

F9E7 =  derivedSeries(3,gens D)

F9E8 =  derivedSeries(3,D)

F10E0 =  R=QQ[x,y];

F10E1 =  isVectorField(image matrix {{x,y^2}})

F10E2 =  isVectorField(image matrix {{x,y^2},{0,0}})

F10E3 =  isVectorField(matrix {{x,y^2}})

F10E4 =  isVectorField(matrix {{x,y^2},{0,0}})

F11E0 =  R=QQ[a,b,c];

F11E1 =  f=a*b*(a-b)*(a-c*b)

F11E2 =  D=derlog(ideal (f))

F11E3 =  S=stratifyByRank(D);

F11E4 =  S#1

F11E5 =  isFiniteStratification(S)

F11E6 =  D=derlog(ideal (a*b*c))

F11E7 =  isFiniteStratification(stratifyByRank(D))

F12E0 =  R=QQ[x,y,z];

F12E1 =  f=x*y-z^2;

F12E2 =  I=ideal (f);

F12E3 =  M=matrix {{x,2*z,2*z},{y,0,0},{z,y,x}};

F12E4 =  applyVectorField(M,{f})

F12E5 =  isLogarithmic(M,I)

F12E6 =  isLogarithmic(M_{0,1},I)

F12E7 =  isLogarithmic(derlog(I),I)

F13E0 =  R=QQ[x,y];

F13E1 =  M1=derlog(ideal (x^2-y))

F13E2 =  isHomogeneousVectorField(gens M1)

F13E3 =  M2=gens derlog(ideal (x))

F13E4 =  homogeneousVectorFieldDegree(M2)

F13E5 =  isHomogeneousVectorField(M2)

F13E6 =  isHomogeneousVectorField(M2,{{-1},{0}})

F13E7 =  M3=matrix {{x,0,0},{0,y^2,0}}

F13E8 =  homogeneousVectorFieldDegree(M3)

F13E9 =  isHomogeneousVectorField(M3)

F13E10 =  isHomogeneousVectorField(M3,{{1},{0}})

F13E11 =  isHomogeneousVectorField(M3,{-infinity,{1},{0}})

F13E12 =  m=matrix {{0,0},{x,x^3+x}}

F13E13 =  isHomogeneousVectorField(image m)

F13E14 =  isHomogeneousVectorField(trim image m)

F14E0 =  R=QQ[a,b,c];

F14E1 =  f=a*b*(a-b)*(a-c*b);

F14E2 =  D=derlog(ideal (f))

F14E3 =  isHolonomic(f)

F14E4 =  f=a*c-b^2;

F14E5 =  D=derlog(ideal (f))

F14E6 =  isHolonomic(f)

F14E7 =  S=stratifyByRank(D);

F14E8 =  S#1

F14E9 =  S#2

F14E10 =  S#3

F14E11 =  f=a^2-b^2*c;

F14E12 =  D=derlog(ideal (f));

F14E13 =  isHolonomic(f)

F14E14 =  S=stratifyByRank(D);

F14E15 =  S#1

F14E16 =  S#2

F14E17 =  S#3

F15E0 =  R=QQ[a,b,c];

F15E1 =  f=a*b*(a-b)*(a-c*b);

F15E2 =  derlog(ideal (f))

F15E3 =  derlogH(f)

F15E4 =  isHHolonomic(f)

F15E5 =  isHolonomic(f)

F15E6 =  f=a*c-b^2;

F15E7 =  D=gens derlogH(f)

F15E8 =  det(D)

F15E9 =  isHHolonomic(f)

F15E10 =  S=stratifyByRank(D)

F15E11 =  S#1

F15E12 =  S#2

F15E13 =  S#3

F15E14 =  f=a^2-b^2*c;

F15E15 =  isHHolonomic(f)

F16E0 =  R=QQ[a,b,c];

F16E1 =  f=a*b*(a-b)*(a-c*b)

F16E2 =  D=derlog(ideal (f))

F16E3 =  S=stratifyByRank(D);

F16E4 =  S#1

F16E5 =  S#3

F16E6 =  Df=derlogH(f)

F16E7 =  isSubset(Df,D)

F16E8 =  S=stratifyByRank(Df);

F16E9 =  S#3

F17E0 =  R=QQ[x,y,z];

F17E1 =  f=x*y-z^2;

F17E2 =  derlog(ideal (f))

F17E3 =  derlogH(f)

F17E4 =  dH=derlogH({f})

F17E5 =  applyVectorField(dH,f)

F17E6 =  applyVectorField(dH,ideal(f))

F18E0 =  R=QQ[x,y];

F18E1 =  I=ideal (x*y);

F18E2 =  J=ideal (0_R);

F18E3 =  K=ideal (x,y);

F18E4 =  der(J,I)

F18E5 =  der(J,K)

F18E6 =  D=der(I,I)

F18E7 =  applyVectorField(D,I)

F18E8 =  D=der({x*y},J)

F18E9 =  der(I,J)

F18E10 =  applyVectorField(gens D,x^2*y)

F18E11 =  der({x},ideal (y))

F18E12 =  der(ideal (x),ideal (y))

F18E13 =  intersect(der(ideal (x),K),der(ideal (y),K))==der(K,K)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F0E7", "F0E8", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F4E7", "F4E8", "F4E9", "F4E10", "F4E11", "F4E12", "F4E13", "F4E14", "F4E15", "F4E16", "F4E17", "F4E18", "F4E19", "F4E20", "F4E21", "F4E22", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F5E9", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F6E9", "F6E10", "F6E11", "F6E12", "F6E13", "F6E14", "F6E15", "F6E16", "F6E17", "F6E18", "F6E19", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F8E8", "F8E9", "F8E10", "F8E11", "F8E12", "F8E13", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F9E8", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F11E5", "F11E6", "F11E7", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F12E6", "F12E7", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F13E6", "F13E7", "F13E8", "F13E9", "F13E10", "F13E11", "F13E12", "F13E13", "F13E14", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F14E7", "F14E8", "F14E9", "F14E10", "F14E11", "F14E12", "F14E13", "F14E14", "F14E15", "F14E16", "F14E17", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F15E6", "F15E7", "F15E8", "F15E9", "F15E10", "F15E11", "F15E12", "F15E13", "F15E14", "F15E15", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F16E5", "F16E6", "F16E7", "F16E8", "F16E9", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F18E0", "F18E1", "F18E2", "F18E3", "F18E4", "F18E5", "F18E6", "F18E7", "F18E8", "F18E9", "F18E10", "F18E11", "F18E12", "F18E13"}
