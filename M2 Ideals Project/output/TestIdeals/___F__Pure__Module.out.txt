needsPackage "TestIdeals"

F2E0 =  R = ZZ/7[x,y,z]/(x^5 + y^5 + z^5);

F2E1 =  (FPMod, canMod, frobTrace, count) = FPureModule(R);

F2E2 =  canMod --the ambient canonical module

F2E3 =  FPMod --the F-pure submodule of the canonical module

F2E4 =  frobTrace --the element representing trace of Frobenius

F2E5 =  count --how many times it took until the image stabilized

F2E6 =  T = ZZ/7[a,b];

F2E7 =  S = ZZ/7[x,y,z,w];

F2E8 =  f = map(T, S, {a^3, a^2*b, a*b^2, b^3});

F2E9 =  R = S/(ker f);

F2E10 =  J = ideal 1_R;

F2E11 =  u = QGorensteinGenerator(1, R);

F2E12 =  FPureModule(CanonicalIdeal => J, GeneratorList => {u})

F2E13 =  R = ZZ/7[x,y];

F2E14 =  M = FPureModule(5/6, y^2 - x^3);

F2E15 =  M#1 -- the canonical module

F2E16 =  M#0 -- the F-pure submodule

F2E17 =  N = FPureModule(9/10, y^2 - x^3);

F2E18 =  N#0 -- the F-pure submodule

F2E19 =  R = ZZ/3[x,y,z]/(x^2 - y*z);

F2E20 =  f = y;

F2E21 =  g = z;

F2E22 =  FPureModule({1/2, 1/2, 1/2}, {y, z, y + z})

exampleIDS = {"F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F2E10", "F2E11", "F2E12", "F2E13", "F2E14", "F2E15", "F2E16", "F2E17", "F2E18", "F2E19", "F2E20", "F2E21", "F2E22"}
