needsPackage "SVDComplexes"

F0E0 =  needsPackage "RandomComplexes"

F0E1 =  setRandomSeed "a good example";

F0E2 =  h={2,3,5,2}

F0E3 =  r={4,3,3}

F0E4 =  elapsedTime C=randomChainComplex(h,r,Height=>5,ZeroMean=>true)

F0E5 =  C.dd^2

F0E6 =  CR=(C**RR_53)

F0E7 =  h=(SVDHomology CR)_0

F0E8 =  D=disturb(C,1e-2,Strategy=>Discrete)

F0E9 =  C.dd_1

F0E10 =  D.dd_1

F0E11 =  D.dd^2

F0E12 =  C'=projectToComplex(D,h)

F0E13 =  C'.dd^2

F0E14 =  euclideanDistance(C',D)

F0E15 =  euclideanDistance(CR,D)

F0E16 =  euclideanDistance(C',CR)

F0E17 =  Dd=dual D

F0E18 =  Dd[1]

F0E19 =  hd=(SVDHomology((dual CR)[1]))_0

F0E20 =  C''=(dual projectToComplex(Dd[1],hd))[1]

F0E21 =  C''.dd_1,C'.dd_1

F0E22 =  euclideanDistance(CR,D), euclideanDistance(C'',D), euclideanDistance(C',D)

F1E0 =  needsPackage "RandomComplexes"

F1E1 =  h={1,3,5,2}

F1E2 =  r={4,3,3}

F1E3 =  elapsedTime C=randomChainComplex(h,r,Height=>5,ZeroMean=>true)

F1E4 =  C.dd^2

F1E5 =  CR=(C**RR_53)

F1E6 =  elapsedTime (h,h1)=SVDHomology CR

F1E7 =  elapsedTime (hL,hL1)=SVDHomology(CR,Strategy=>Laplacian)

F1E8 =  hL === h

F1E9 =  (h1#1_1)^2, hL1#1_0, (h1#1_1)^2-hL1#1_0

F1E10 =  (h1#2_1)^2, hL1#2_0, (h1#2_1)^2-hL1#2_0

F1E11 =  (h1#3_1)^2, hL1#3_0, (h1#3_1)^2-hL1#3_0

F1E12 =  D=disturb(C,1e-3,Strategy=>Discrete)

F1E13 =  C.dd_1

F1E14 =  D.dd_1

F1E15 =  (hd,hd1)=SVDHomology(CR,D,Threshold=>1e-2)

F1E16 =  hd === h

F1E17 =  hd1 === h1

F2E0 =  B = random(RR^30, RR^5);

F2E1 =  C = random(RR^5, RR^30);

F2E2 =  A = B*C;

F2E3 =  numericRank A

F2E4 =  first SVD A

F2E5 =  B = mutableMatrix random(RR^100, RR^50);

F2E6 =  C = mutableMatrix random(RR^50, RR^100);

F2E7 =  A = B*C;

F2E8 =  numericRank A

F2E9 =  B = mutableMatrix random(CC^100, CC^50);

F2E10 =  C = mutableMatrix random(CC^50, CC^100);

F2E11 =  A = B*C;

F2E12 =  numericRank A

F3E0 =  needsPackage "RandomComplexes"

F3E1 =  setRandomSeed "a pretty good example";

F3E2 =  h={2,2}

F3E3 =  r={3}

F3E4 =  C=randomChainComplex(h,r,Height=>100,ZeroMean=>true)

F3E5 =  C.dd

F3E6 =  CQ=C**QQ

F3E7 =  CR=C**RR

F3E8 =  CRplus = pseudoInverse CR

F3E9 =  arePseudoInverses(CR,CRplus,Threshold=>1e-10)

F3E10 =  arePseudoInverses(CR,CRplus,Threshold=>1e-1000)

F3E11 =  CQplus = pseudoInverse CQ

F3E12 =  CRplus.dd

F3E13 =  CQplus.dd

F3E14 =  (CQplus**RR_53).dd

F3E15 =  arePseudoInverses(CQ,CQplus)

F3E16 =  Fp=ZZ/nextPrime 10^3

F3E17 =  Cp=C**Fp

F3E18 =  Cpplus=pseudoInverse Cp

F3E19 =  Cpplus.dd

F3E20 =  arePseudoInverses(CQ,CQplus)

F3E21 =  arePseudoInverses(Cp,Cpplus)

F4E0 =  needsPackage "RandomComplexes"

F4E1 =  setRandomSeed "a good example";

F4E2 =  h={2,3,5,2}

F4E3 =  r={4,3,3}

F4E4 =  elapsedTime C=randomChainComplex(h,r,Height=>5,ZeroMean=>true)

F4E5 =  C.dd^2

F4E6 =  CR=(C**RR_53)

F4E7 =  h=(SVDHomology CR)_0

F4E8 =  D=disturb(C,1e-2,Strategy=>Discrete)

F4E9 =  C.dd_1

F4E10 =  D.dd_1

F4E11 =  D.dd^2

F4E12 =  C'=projectToComplex(D,h)

F4E13 =  C'.dd^2

F4E14 =  euclideanDistance(C',D)

F4E15 =  euclideanDistance(CR,D)

F4E16 =  euclideanDistance(C',CR)

F5E0 =  needsPackage "RandomComplexes"

F5E1 =  setRandomSeed "a pretty good example";

F5E2 =  h={2,3,1}

F5E3 =  r={2,3}

F5E4 =  C=randomChainComplex(h,r,Height=>11,ZeroMean=>true)

F5E5 =  C.dd

F5E6 =  CQ=C**QQ

F5E7 =  CR=C**RR_53

F5E8 =  CRplus = pseudoInverse CR

F5E9 =  CQplus = pseudoInverse CQ

F5E10 =  CRplus.dd

F5E11 =  CQplus.dd

F5E12 =  (CQplus**RR_53).dd

F5E13 =  CRplus.dd^2

F5E14 =  CQplus.dd^2

F5E15 =  Fp=ZZ/nextPrime 10^3

F5E16 =  Cp=C**Fp

F5E17 =  Cpplus=pseudoInverse Cp

F5E18 =  Cpplus.dd

F5E19 =  Cpplus.dd^2

F5E20 =  arePseudoInverses(Cp,Cpplus)

F6E0 =  needsPackage "RandomComplexes"

F6E1 =  setRandomSeed "a good example";

F6E2 =  h={2,3,5,3}

F6E3 =  r={4,3,5}

F6E4 =  C=randomChainComplex(h,r,Height=>100,ZeroMean=>true)

F6E5 =  C.dd^2

F6E6 =  D=disturb(C**RR_53,1e-4)

F6E7 =  delta=laplacians D

F6E8 =  L0=(SVD delta#0)_0, L1=(SVD delta#1)_0,L2=(SVD delta#2)_0,L3=(SVD delta#3)_0

F6E9 =  commonEntries(L0,L1)

F6E10 =  commonEntries(L1,L2)

F6E11 =  commonEntries(L2,L3)

F7E0 =  needsPackage "RandomComplexes"

F7E1 =  h={1,3,5,2,1}

F7E2 =  r={5,11,3,2}

F7E3 =  elapsedTime C=randomChainComplex(h,r,Height=>4)

F7E4 =  C.dd^2

F7E5 =  CR=(C**RR_53)[1]

F7E6 =  elapsedTime (h,U)=SVDComplex CR;

F7E7 =  h

F7E8 =  Sigma =source U

F7E9 =  Sigma.dd_0

F7E10 =  errors=apply(toList(min CR+1..max CR),ell->CR.dd_ell-U_(ell-1)*Sigma.dd_ell*transpose U_ell);

F7E11 =  maximalEntry chainComplex errors

F7E12 =  elapsedTime (hL,U)=SVDComplex(CR,Strategy=>Laplacian);

F7E13 =  hL === h

F7E14 =  SigmaL =source U;

F7E15 =  for i from min CR+1 to max CR list maximalEntry(SigmaL.dd_i -Sigma.dd_i)

F7E16 =  errors=apply(toList(min C+1..max C),ell->CR.dd_ell-U_(ell-1)*SigmaL.dd_ell*transpose U_ell);

F7E17 =  maximalEntry chainComplex errors

F8E0 =  needsPackage "RandomComplexes"

F8E1 =  h = {1,4,6,5,1}

F8E2 =  r = {1,3,3,4}

F8E3 =  C = randomChainComplex(h,r)

F8E4 =  CQ = C ** QQ

F8E5 =  prune HH CQ

F8E6 =  CR = C ** RR_53

F8E7 =  (h,U) = SVDComplex CR

F8E8 =  source U

F8E9 =  (source U).dd

F9E0 =  needsPackage "RandomComplexes"

F9E1 =  setRandomSeed "a good example";

F9E2 =  h={2,3,5,3}

F9E3 =  r={4,3,5}

F9E4 =  elapsedTime C=randomChainComplex(h,r,Height=>100,ZeroMean=>true)

F9E5 =  C.dd^2

F9E6 =  D=disturb(C**RR_53,1e-4)

F9E7 =  Delta=laplacians D;

F9E8 =  L0=(SVD Delta#0)_0, L1=(SVD Delta#1)_0,L2=(SVD Delta#2)_0,L3=(SVD Delta#3)_0

F9E9 =  commonEntries(L0,L1)

F9E10 =  commonEntries(L1,L2)

F9E11 =  commonEntries(L2,L3)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F0E7", "F0E8", "F0E9", "F0E10", "F0E11", "F0E12", "F0E13", "F0E14", "F0E15", "F0E16", "F0E17", "F0E18", "F0E19", "F0E20", "F0E21", "F0E22", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F1E10", "F1E11", "F1E12", "F1E13", "F1E14", "F1E15", "F1E16", "F1E17", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F2E10", "F2E11", "F2E12", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F3E10", "F3E11", "F3E12", "F3E13", "F3E14", "F3E15", "F3E16", "F3E17", "F3E18", "F3E19", "F3E20", "F3E21", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F4E7", "F4E8", "F4E9", "F4E10", "F4E11", "F4E12", "F4E13", "F4E14", "F4E15", "F4E16", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F5E9", "F5E10", "F5E11", "F5E12", "F5E13", "F5E14", "F5E15", "F5E16", "F5E17", "F5E18", "F5E19", "F5E20", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F6E9", "F6E10", "F6E11", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F7E6", "F7E7", "F7E8", "F7E9", "F7E10", "F7E11", "F7E12", "F7E13", "F7E14", "F7E15", "F7E16", "F7E17", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F8E8", "F8E9", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F9E8", "F9E9", "F9E10", "F9E11"}
