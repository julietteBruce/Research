needsPackage "Graphs"

F0E0 =  G = cycleGraph 4

F0E1 =  complementGraph G

F1E0 =  D = digraph({a,b,c,d,e},{{a,b},{b,c},{b,d},{e,b}});

F1E1 =  isSource (D,c)

F1E2 =  isSource (D,e)

F2E0 =  G = graph({1,2,3,4},{{2,3},{3,4}});

F2E1 =  nonneighbors(G,2)

F3E0 =  G = graph({1,2,3,4,5},{{1,3},{3,4},{4,5}});

F3E1 =  indexLabelGraph G

F3E2 =  D = digraph({1,2,3,4,5},{{1,2},{2,3},{3,1},{4,5},{5,4}})

F3E3 =  indexLabelGraph D

F4E0 =  G = graph({{1, 2}, {1, 3}, {2, 3}, {3, 4}},EntryMode=>"edges");

F4E1 =  coverIdeal G

F5E0 =  G = graph({{1,2},{2,3},{3,4},{4,5}},EntryMode=>"edges");

F5E1 =  independenceNumber G

F6E0 =  G = graph digraph({{1,2},{2,1},{3,1}}, EntryMode => "edges")

F6E1 =  G = graph digraph(matrix {{0,1,1},{1,0,0},{1,0,0}})

F7E0 =  barycenter pathGraph 6

F7E1 =  barycenter completeGraph 6

F8E0 =  G = completeMultipartiteGraph {1,2,3}

F9E0 =  G = cycleGraph 4;

F9E1 =  isRigid G

F9E2 =  G' = addEdges' (G, {{1,1},{3,1}})

F9E3 =  isRigid G'

F10E0 =  cocktailParty 4

F11E0 =  G = barbellGraph 6

F12E0 =  radius completeGraph 5

F12E1 =  radius pathGraph 5

F12E2 =  radius graphLibrary "dart"

F13E0 =  G = circularLadder 5

F14E0 =  G = digraph{{5,2},{5,0},{4,0},{4,1},{2,3},{3,1}}

F14E1 =  H = topSort G

F14E2 =  keys H

F15E0 =  G = graph({{1,2},{2,3},{3,4}},EntryMode=>"edges");

F15E1 =  d = diameter G

F15E2 =  G = graph({1,2,3,4},{{2,3},{3,4}});

F15E3 =  d = diameter G

F16E0 =  G = graph({{1,2},{1,3},{1,4},{2,5},{5,3},{3,2}},EntryMode=>"edges");

F16E1 =  isCM G

F17E0 =  D = digraph({{1,2},{2,1},{3,1}},EntryMode=>"edges");

F17E1 =  vertexSet D;

F17E2 =  G = completeGraph 4;

F17E3 =  vertexSet G

F17E4 =  A = adjacencyMatrix G;

F17E5 =  graph({a,b,c,d}, A)

F18E0 =  G = cycleGraph 5;

F18E1 =  chromaticNumber G

F19E0 =  G = windmillGraph(4,5)

F20E0 =  L = {1,0,0,1,0,1}

F20E1 =  thresholdGraph L

F21E0 =  G = cycleGraph 4;

F21E1 =  G' = deleteVertex(G,1);

F22E0 =  G = graph({1,2},{{1,2}});

F22E1 =  H = graph({3,4,5},{{3,4},{4,5}});

F22E2 =  G' = cartesianProduct(G,H)

F23E0 =  G = graph({{1, 2}, {1, 3}, {2, 3}, {3, 4}},EntryMode=>"edges");

F23E1 =  cliqueNumber G

F24E0 =  G = graph({{1,2},{2,3},{3,4}})

F24E1 =  G = graph({{1,2},{2,3},{3,4}}, Singletons => {5,6,7})

F24E2 =  G = graph ({{a,{b,c,d,e}}, {b,{d,e}}, {e,{a}}})

F24E3 =  G = graph hashTable {{1,{2}},{2,{1,3}},{3,{2,4}},{4,{3}}}

F24E4 =  G = graph(matrix {{0,1,1},{1,0,0},{1,0,0}})

F24E5 =  G = graph({a,b,c}, matrix {{0,1,1},{1,0,0},{1,0,0}})

F25E0 =  D = digraph({a,b,c,d,e},{{a,b},{b,c},{b,d},{e,b}});

F25E1 =  sinks D

F26E0 =  G = graph({{1,2},{2,3},{3,4},{4,1},{1,3},{4,2}},EntryMode=>"edges")

F26E1 =  lineGraph G

F27E0 =  G = graph({{1, 2}, {1, 3}, {2, 3}, {3, 4}},EntryMode=>"edges");

F27E1 =  edgeIdeal G

F28E0 =  G = cycleGraph 4;

F28E1 =  closedNeighborhood(G,2)

F29E0 =  G = cycleGraph 5;

F29E1 =  spanningForest G

F30E0 =  D = digraph({a,b,c,d,e},{{a,b},{b,c},{b,d},{e,b}});

F30E1 =  isReachable(D, e, a)

F30E2 =  isReachable(D, d, e)

F31E0 =  G = graph({{0,1},{1,2},{2,4},{3,4},{4,5}},EntryMode=>"edges");

F31E1 =  isBipartite G

F32E0 =  clusteringCoefficient cycleGraph 4

F32E1 =  clusteringCoefficient completeGraph 4

F33E0 =  G = graph({1,2,3,4,5},{{1,2},{2,3},{3,4},{3,5},{4,5}});

F33E1 =  degreeMatrix G

F34E0 =  G = graph({{1,2},{2,3},{3,4},{4,2},{1,4}},EntryMode=>"edges");

F34E1 =  density G

F35E0 =  G = graph({{1,2},{1,3},{1,4},{2,3}},EntryMode=>"edges");

F35E1 =  vertexCoverNumber G

F36E0 =  G = graph({{1,2},{2,3},{3,1},{3,4},{4,5},{5,3}},EntryMode=>"edges");

F36E1 =  minimalVertexCuts G

F37E0 =  G = completeGraph 5

F37E1 =  H = vertexMultiplication(G, 0, 6)

F38E0 =  D = digraph({a,b,c,d,e},{{a,b},{b,c},{b,d},{e,b}});

F38E1 =  nondescendants (D, d)

F39E0 =  G = graph({{1,2},{2,3},{3,4},{4,5}},EntryMode=>"edges");

F39E1 =  independenceComplex G

F40E0 =  G = digraph{{5,2},{5,0},{4,0},{4,1},{2,3},{3,1}}

F40E1 =  H = topSort G

F40E2 =  class H

F41E0 =  G = graph({1,2,3,4,5},{{1,2},{2,3},{3,4},{3,5},{4,5}});

F41E1 =  laplacianMatrix G

F42E0 =  D = digraph({a,b,c,d,e},{{a,b},{b,c},{b,d},{e,b}});

F42E1 =  parents (D, b)

F43E0 =  eccentricity(pathGraph 5, 2)

F43E1 =  eccentricity(pathGraph 5, 1)

F43E2 =  eccentricity(pathGraph 5, 0)

F44E0 =  lollipopGraph (6,2)

F45E0 =  G = cycleGraph 5;

F45E1 =  isSimple G

F45E2 =  G' = addEdge (G, set {1,1});

F45E3 =  isSimple G'

F46E0 =  D = digraph({a,b,c,d,e},{{a,b},{b,c},{b,d},{e,b}});

F46E1 =  sources D

F47E0 =  G = graph({{0,1},{1,2},{2,4},{3,4},{4,5}},EntryMode=>"edges");

F47E1 =  bipartiteColoring G

F48E0 =  G = graph({{1,2},{2,3},{3,1},{3,4},{4,1},{4,2},{4,5}},EntryMode=>"edges");

F48E1 =  criticalEdges G

F49E0 =  D = digraph hashTable{1 => {2,3}, 2 => {1,3}, 3 => {}};

F49E1 =  underlyingGraph D

F50E0 =  G = graph({{1,2},{2,3},{3,4}},EntryMode=>"edges");

F50E1 =  d = distanceMatrix G

F50E2 =  G = digraph({1,2,3,4},{{2,3},{3,4}},EntryMode=>"edges");

F50E3 =  d = distanceMatrix G

F51E0 =  D = digraph({a,b,c,d,e},{{a,b},{b,c},{b,d},{e,b}});

F51E1 =  descendants (D, a)

F52E0 =  R = QQ[x,y];

F52E1 =  I = monomialIdeal (x^3, y^2*x);

F52E2 =  monomialGraph (I, 3)

F53E0 =  D = digraph(toList(1..5), {{1,2},{1,3},{2,5},{2,4}})

F53E1 =  F = findPaths(D,1,2)

F53E2 =  D = digraph(toList(a..d), {{a,c},{a,b},{b,b},{b,d}})

F53E3 =  F = findPaths(D,a,100)

F54E0 =  D = digraph({a,b,c,d,e},{{a,b},{b,c},{b,d},{e,b}});

F54E1 =  forefathers (D, d)

F55E0 =  D = digraph ({{1,2},{2,3},{3,4},{4,1},{1,3},{4,2}},EntryMode=>"edges")

F55E1 =  D' = digraphTranspose D

F55E2 =  D'' = digraphTranspose D'

F56E0 =  A = graph({{1,2},{2,3}},EntryMode=>"edges");

F56E1 =  B = graph({1,2,3,4,5},{{1,2},{4,5}});

F56E2 =  disjointUnion {A,B}

F57E0 =  starGraph 5

F58E0 =  G = doubleStar(4,5)

F59E0 =  D = digraph({{1,2},{2,3},{3,4},{4,3}},EntryMode=>"edges");

F59E1 =  adjacencyMatrix D

F59E2 =  G = graph({1,2,3,4}, {{1,2},{2,3},{3,4},{4,3}})

F59E3 =  adjacencyMatrix G

F60E0 =  G = completeGraph 5

F60E1 =  S = {3,4}

F60E2 =  inducedSubgraph(G,S)

F60E3 =  D = digraph ({{1,2},{2,3},{3,4},{4,1},{2,4}},EntryMode=>"edges");

F60E4 =  D' = inducedSubgraph(D,{1,2,4})

F61E0 =  G = graph(toList(1..8),{{1,2},{2,3},{3,4},{5,6}});

F61E1 =  numberOfComponents G;

F62E0 =  G = cycleGraph 6;

F62E1 =  graphPower(G,2)

F63E0 =  crownGraph 4

F64E0 =  G = graph({{1,2},{2,3},{3,4}},EntryMode=>"edges");

F64E1 =  d = distance (G,1,4)

F64E2 =  G = graph({1,2,3,4},{{2,3},{3,4}});

F64E3 =  d = distance(G, 1, 4)

F65E0 =  D = digraph({a,b,c,d,e},{{a,b},{b,c},{b,d},{e,b}});

F65E1 =  children(D, b)

F66E0 =  G = graphLibrary("petersen")

F66E1 =  G = graphLibrary("f26a")

F66E2 =  G = graphLibrary("chvatal")

F67E0 =  D = digraph({{0,1},{0,2},{2,3},{3,4},{4,2}},EntryMode=>"edges");

F67E1 =  A = lowestCommonAncestors(D,1,3)

F68E0 =  H = cycleGraph 4;

F68E1 =  G = addEdge(H, set {0,2})

F68E2 =  G = addEdges'(H, {{0,2},{3,1}})

F69E0 =  G = graph({{1,2},{1,3},{3,4},{3,5}},EntryMode=>"edges");

F69E1 =  isLeaf(G,2)

F70E0 =  G = graph({1,2},{{1,2}});

F70E1 =  H = graph({3,4,5},{{3,4},{4,5}});

F70E2 =  strongProduct(G,H)

F71E0 =  ladderGraph 5

F72E0 =  G = graph({{1, 2}, {1, 3}, {2, 3}, {3, 4}},EntryMode=>"edges");

F72E1 =  expansion G

F72E2 =  expansion pathGraph 7

F73E0 =  G = graph({1,2},{{1,2}});

F73E1 =  H = graph({3,4,5},{{3,4},{4,5}})

F73E2 =  GH = graphComposition(G,H)

F73E3 =  HG = graphComposition(H,G)

F74E0 =  spectrum completeGraph 6

F74E1 =  spectrum graphLibrary "petersen"

F75E0 =  G = cycleGraph 5;

F75E1 =  vertexCuts G

F76E0 =  G = graph({{1,2},{2,3},{3,1},{3,4},{4,5},{5,3}},EntryMode=>"edges");

F76E1 =  edgeConnectivity G

F77E0 =  G = graph({{1,2},{2,3},{3,4},{4,5}},EntryMode=>"edges");

F77E1 =  hasOddHole G

F78E0 =  G = graph({{1,2},{1,3},{3,4},{3,5}},EntryMode=>"edges");

F78E1 =  leaves G;

F79E0 =  K = completeGraph 5

F80E0 =  G = graph({{1,2},{2,3},{3,1},{3,4},{4,5},{5,3}},EntryMode=>"edges");

F80E1 =  vertexConnectivity G

F81E0 =  G = graph({{1,2},{2,3},{3,1},{3,4},{4,5},{5,3}},EntryMode=>"edges");

F81E1 =  edgeCuts G

F82E0 =  G = cycleGraph 5;

F82E1 =  hasEulerianTrail G

F82E2 =  D = digraph(toList(1..4), {{1,2},{2,3},{3,4}});

F82E3 =  hasEulerianTrail D

F83E0 =  G = graph({1,2},{{1,2}});

F83E1 =  H = graph({3,4,5},{{3,4},{4,5}});

F83E2 =  G'= directProduct(G,H)

F84E0 =  G = cycleGraph 10;

F84E1 =  deleteEdges(G,{{1,2},{3,4},{7,8}})

F85E0 =  D = digraph({1,2,3,4},{{1,2},{2,3},{3,4},{4,2},{2,4}});

F85E1 =  degree(D, 3)

F85E2 =  degree(D, 2)

F86E0 =  G = graph({{1,2},{2,3},{3,1}},EntryMode=>"edges");

F86E1 =  isCyclic G

F86E2 =  G = graph({{1,2},{2,3},{3,4}},EntryMode=>"edges");

F86E3 =  isCyclic G

F87E0 =  G = graph({{1,2},{1,3},{6,4},{4,5}},EntryMode=>"edges");

F87E1 =  isForest G

F88E0 =  G = graph(toList(1..8),{{1,2},{2,3},{3,4},{5,6}});

F88E1 =  connectedComponents G

F89E0 =  G = friendshipGraph 4

F89E1 =  H = windmillGraph (3,4)

F90E0 =  G = wheelGraph 6

F91E0 =  G = graph({1,2,3,4},{{2,3},{3,4}});

F91E1 =  neighbors(G,3)

F92E0 =  G = graph({{1,2},{2,3},{3,4},{5,6}},EntryMode=>"edges");

F92E1 =  isConnected G;

F93E0 =  D = digraph({a,b,c,d,e},{{a,b},{b,c},{b,d},{e,b}});

F93E1 =  isSink (D,b)

F93E2 =  isSink (D,d)

F94E0 =  bridges = graph ({{0,1},{0,2},{0,3},{1,3},{2,3}}, EntryMode => "edges");

F94E1 =  E = isEulerian bridges

F94E2 =  D = digraph(toList(1..4), {{2,3},{3,4},{4,2}});

F94E3 =  E = isEulerian D

F95E0 =  D = digraph({{1,2},{2,1},{3,1}},EntryMode=>"edges");

F95E1 =  edges D

F95E2 =  G = cycleGraph 4;

F95E3 =  edges G

F96E0 =  G = completeGraph 10;

F96E1 =  degeneracy G

F97E0 =  G = graph({{1,2},{1,3},{1,4},{2,3}},EntryMode=>"edges");

F97E1 =  vertexCovers G

F98E0 =  G = kneserGraph(5,2)

F99E0 =  D = digraph ({{0,1},{0,2},{2,3},{3,4},{4,2}},EntryMode=>"edges");

F99E1 =  bfs = breadthFirstSearch(D,0)

F99E2 =  G = cycleGraph 6

F99E3 =  bfs = breadthFirstSearch(G,3)

F100E0 =  G = digraph ({{1,2},{2,1},{3,1}}, EntryMode => "edges")

F100E1 =  G = digraph hashTable{1 => {2}, 3 => {4}, 5 => {6}}

F100E2 =  G = digraph ({{a,{b,c,d,e}}, {b,{d,e}}, {e,{a}}}, EntryMode => "neighbors")

F100E3 =  G = digraph ({x,y,z}, matrix {{0,1,1},{0,0,1},{0,1,0}})

F100E4 =  G = digraph matrix {{0,1,1},{0,0,1},{0,1,0}}

F101E0 =  G = cycleGraph 5;

F101E1 =  isRegular G

F102E0 =  G = graph({{1,2}});

F102E1 =  minimalDegree G

F103E0 =  D = digraph ({{0,1},{0,2},{2,3},{3,4},{4,2}},EntryMode=>"edges")

F103E1 =  isCyclic D

F104E0 =  M = incidenceMatrix cycleGraph 3

F105E0 =  girth completeGraph 6

F105E1 =  girth pathGraph 6

F106E0 =  pathGraph 5

F107E0 =  G = graph({{1,2},{2,3},{3,1},{3,4},{2,4}},EntryMode=>"edges");

F107E1 =  numberOfTriangles G

F108E0 =  D = digraph({{0,1},{0,2},{2,3},{3,4},{4,2}},EntryMode=>"edges")

F108E1 =  F = floydWarshall D

F109E0 =  D = digraph({1,2,3,4},{{1,2},{2,3},{3,4},{4,2}});

F109E1 =  isStronglyConnected D

F109E2 =  D' = digraph({1,2,3,4},{{1,2},{2,1},{2,3},{3,4},{4,2}});

F109E3 =  isStronglyConnected D'

F110E0 =  G = graph(toList(1..4),{{1, 2}, {1, 3}, {2, 3}, {3, 4}});

F110E1 =  cliqueComplex G

F111E0 =  D = digraph ({{0,1},{1,3},{1,4},{4,7},{4,8},{0,2},{2,5},{2,6}},EntryMode=>"edges")

F111E1 =  dfs = depthFirstSearch D

F111E2 =  G = cycleGraph 6

F111E3 =  dfs = depthFirstSearch G

F112E0 =  D = digraph({1,2,3,4},{{1,2},{2,3},{3,4},{4,2}});

F112E1 =  isWeaklyConnected D

F113E0 =  G = completeGraph 4

F113E1 =  H = addVertices(G, {3,4,5})

F114E0 =  L = apply(vertexSet pathGraph 5, i -> degreeCentrality (pathGraph 5, i))

F114E1 =  sum L

F115E0 =  G = graph({1,2,3,4,5},{{1,3},{3,4},{4,5}});

F115E1 =  reindexBy(G,"maxdegree")

F115E2 =  D = digraph({1,2,3,4,5},{{1,2},{2,3},{3,1},{4,5},{5,4}})

F115E3 =  reindexBy(D, "mindegreeout")

F116E0 =  D = digraph({1,2,3,4},{{1,2},{2,3},{3,4},{4,2}});

F116E1 =  degreeOut(D, 2)

F117E0 =  rattleGraph (6, 3)

F118E0 =  D = digraph ({{0,1},{0,2},{2,3},{3,4},{4,2}},EntryMode=>"edges")

F118E1 =  bfs = reverseBreadthFirstSearch(D,2)

F119E0 =  D = digraph({1,2,3,4},{{1,2},{2,3},{3,4},{4,2}});

F119E1 =  degreeIn(D, 2)

F120E0 =  generalizedPetersenGraph (5,2)

F121E0 =  center graphLibrary "dart"

F122E0 =  G = digraph{{5,2},{5,0},{4,0},{4,1},{2,3},{3,1}}

F122E1 =  topologicalSort G

F122E2 =  topologicalSort(G,"min")

F122E3 =  topologicalSort(G,"max")

F122E4 =  topologicalSort(G,"random")

F122E5 =  topologicalSort(G,"degree")

F123E0 =  C = cycleGraph 5

F124E0 =  G = graph({{1,2},{2,3},{3,4},{4,1},{2,4}}, EntryMode => "edges");

F124E1 =  isChordal G

F125E0 =  G = graph({1,2,3,4,5},{{1,3},{3,4},{4,5}});

F125E1 =  L = {1,2};

F125E2 =  deleteVertices(G,L)

F126E0 =  degreeSequence pathGraph 5

F127E0 =  G = digraph{{5,2},{5,0},{4,0},{4,1},{2,3},{3,1}}

F127E1 =  H = topSort G

F127E2 =  H#digraph

F127E3 =  H#map

F127E4 =  topSort(G,"min")

F127E5 =  topSort(G,"max")

F127E6 =  topSort(G,"random")

F127E7 =  topSort(G,"degree")

F128E0 =  G = graph {{1,2},{1,3},{1,4},{2,5},{5,3},{3,2}};

F128E1 =  isPerfect G

F129E0 =  G = graph({{1,2},{1,3},{3,4},{3,5}},EntryMode=>"edges");

F129E1 =  isTree G

exampleIDS = {"F0E0", "F0E1", "F1E0", "F1E1", "F1E2", "F2E0", "F2E1", "F3E0", "F3E1", "F3E2", "F3E3", "F4E0", "F4E1", "F5E0", "F5E1", "F6E0", "F6E1", "F7E0", "F7E1", "F8E0", "F9E0", "F9E1", "F9E2", "F9E3", "F10E0", "F11E0", "F12E0", "F12E1", "F12E2", "F13E0", "F14E0", "F14E1", "F14E2", "F15E0", "F15E1", "F15E2", "F15E3", "F16E0", "F16E1", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F18E0", "F18E1", "F19E0", "F20E0", "F20E1", "F21E0", "F21E1", "F22E0", "F22E1", "F22E2", "F23E0", "F23E1", "F24E0", "F24E1", "F24E2", "F24E3", "F24E4", "F24E5", "F25E0", "F25E1", "F26E0", "F26E1", "F27E0", "F27E1", "F28E0", "F28E1", "F29E0", "F29E1", "F30E0", "F30E1", "F30E2", "F31E0", "F31E1", "F32E0", "F32E1", "F33E0", "F33E1", "F34E0", "F34E1", "F35E0", "F35E1", "F36E0", "F36E1", "F37E0", "F37E1", "F38E0", "F38E1", "F39E0", "F39E1", "F40E0", "F40E1", "F40E2", "F41E0", "F41E1", "F42E0", "F42E1", "F43E0", "F43E1", "F43E2", "F44E0", "F45E0", "F45E1", "F45E2", "F45E3", "F46E0", "F46E1", "F47E0", "F47E1", "F48E0", "F48E1", "F49E0", "F49E1", "F50E0", "F50E1", "F50E2", "F50E3", "F51E0", "F51E1", "F52E0", "F52E1", "F52E2", "F53E0", "F53E1", "F53E2", "F53E3", "F54E0", "F54E1", "F55E0", "F55E1", "F55E2", "F56E0", "F56E1", "F56E2", "F57E0", "F58E0", "F59E0", "F59E1", "F59E2", "F59E3", "F60E0", "F60E1", "F60E2", "F60E3", "F60E4", "F61E0", "F61E1", "F62E0", "F62E1", "F63E0", "F64E0", "F64E1", "F64E2", "F64E3", "F65E0", "F65E1", "F66E0", "F66E1", "F66E2", "F67E0", "F67E1", "F68E0", "F68E1", "F68E2", "F69E0", "F69E1", "F70E0", "F70E1", "F70E2", "F71E0", "F72E0", "F72E1", "F72E2", "F73E0", "F73E1", "F73E2", "F73E3", "F74E0", "F74E1", "F75E0", "F75E1", "F76E0", "F76E1", "F77E0", "F77E1", "F78E0", "F78E1", "F79E0", "F80E0", "F80E1", "F81E0", "F81E1", "F82E0", "F82E1", "F82E2", "F82E3", "F83E0", "F83E1", "F83E2", "F84E0", "F84E1", "F85E0", "F85E1", "F85E2", "F86E0", "F86E1", "F86E2", "F86E3", "F87E0", "F87E1", "F88E0", "F88E1", "F89E0", "F89E1", "F90E0", "F91E0", "F91E1", "F92E0", "F92E1", "F93E0", "F93E1", "F93E2", "F94E0", "F94E1", "F94E2", "F94E3", "F95E0", "F95E1", "F95E2", "F95E3", "F96E0", "F96E1", "F97E0", "F97E1", "F98E0", "F99E0", "F99E1", "F99E2", "F99E3", "F100E0", "F100E1", "F100E2", "F100E3", "F100E4", "F101E0", "F101E1", "F102E0", "F102E1", "F103E0", "F103E1", "F104E0", "F105E0", "F105E1", "F106E0", "F107E0", "F107E1", "F108E0", "F108E1", "F109E0", "F109E1", "F109E2", "F109E3", "F110E0", "F110E1", "F111E0", "F111E1", "F111E2", "F111E3", "F112E0", "F112E1", "F113E0", "F113E1", "F114E0", "F114E1", "F115E0", "F115E1", "F115E2", "F115E3", "F116E0", "F116E1", "F117E0", "F118E0", "F118E1", "F119E0", "F119E1", "F120E0", "F121E0", "F122E0", "F122E1", "F122E2", "F122E3", "F122E4", "F122E5", "F123E0", "F124E0", "F124E1", "F125E0", "F125E1", "F125E2", "F126E0", "F127E0", "F127E1", "F127E2", "F127E3", "F127E4", "F127E5", "F127E6", "F127E7", "F128E0", "F128E1", "F129E0", "F129E1"}
