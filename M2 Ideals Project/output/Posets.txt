needsPackage "Posets"

F0E0 =  (chain 5).GroundSet

F0E1 =  rankFunction chain 5

F0E2 =  (booleanLattice 3).GroundSet

F0E3 =  rankFunction booleanLattice 3

F1E0 =  P = booleanLattice 3;

F1E1 =  principalOrderIdeal(P, "101")

F2E0 =  rankPoset chain 5

F2E1 =  rankPoset booleanLattice 3

F3E0 =  incomparabilityGraph booleanLattice 3

F4E0 =  P = poset {{1, 2}, {1, 3}, {1, 4}, {2, 5}, {3, 5}, {4, 5}};

F4E1 =  isLattice P

F4E2 =  isGeometric P

F4E3 =  isGeometric booleanLattice 4

F4E4 =  Q = poset {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 4}, {4, 6}, {5, 6}};

F4E5 =  isLattice Q

F4E6 =  isGeometric

F5E0 =  n = 5;

F5E1 =  rankGeneratingFunction chain n

F5E2 =  factor rankGeneratingFunction booleanLattice n

F6E0 =  ncpLattice 3

F7E0 =  maximalAntichains divisorPoset 30

F8E0 =  B = booleanLattice 3;

F8E1 =  z = factor degreePolynomial B

F9E0 =  R = QQ[x,y,z];

F9E1 =  standardMonomialPoset monomialIdeal(x^2, y^2, z^2, x*y*z)

F9E2 =  standardMonomialPoset(monomialIdeal(x^4, y^4, z^4, x*y*z), 3, 4)

F10E0 =  P = plueckerPoset 4;

F10E1 =  coveringRelations P

F11E0 =  C = chain 7;

F11E1 =  subposet(C, {2,3,5,6})

F12E0 =  P = divisorPoset 12;

F12E1 =  HP = hibiIdeal P

F12E2 =  betti res HP

F12E3 =  betti res (HP^2)

F12E4 =  betti res (HP^3)

F12E5 =  pdim module HP

F12E6 =  dilworthNumber P

F12E7 =  LP = distributiveLattice P;

F12E8 =  cvrs = partition(last, coveringRelations LP);

F12E9 =  iCvrs = tally apply(keys cvrs, i -> #cvrs#i);

F12E10 =  gk = prepend(1, apply(sort keys iCvrs, k -> iCvrs#k))

F12E11 =  apply(#gk, i -> sum(i..<#gk, j -> binomial(j, i) * gk_j))

F13E0 =  R = RR[x,y];

F13E1 =  A = {x+y,x,x-y,y+1};

F13E2 =  boundedRegions(A, R)

F14E0 =  P = poset {{1,2}, {1,3}};

F14E1 =  distributiveLattice P

F14E2 =  distributiveLattice chain 3

F15E0 =  orderComplex booleanLattice 3

F15E1 =  orderComplex chain 5

F16E0 =  flaghPolynomial booleanLattice 3

F16E1 =  flaghPolynomial chain 5

F17E0 =  P = poset {{a,b}, {a,c}, {b,d}, {c,d}, {e,d}};

F17E1 =  meetExists(P, b, c)

F17E2 =  meetExists(P, b, e)

F17E3 =  Q = poset {{a,b}, {a,c}, {d,b}, {d,c}, {b,e}, {c,e}};

F17E4 =  meetExists(Q, b, c)

F18E0 =  R = QQ[x,y,z];

F18E1 =  intersectionLattice({x+y, x+z, y+z}, R)

F19E0 =  hasseDiagram booleanLattice 3

F20E0 =  P = poset {{a,b}, {a,c}, {a,d}, {c,e}, {d,e}};

F20E1 =  joinExists(P, b, c)

F20E2 =  joinExists(P, c, d)

F20E3 =  Q = poset {{a,b}, {a,c}, {b,d}, {c,d}, {b,e}, {c,e}};

F20E4 =  joinExists(P, b, c)

F21E0 =  P = booleanLattice 3;

F21E1 =  P_*

F22E0 =  n = 3;

F22E1 =  B = booleanLattice n;

F22E2 =  C2 = chain 2;

F22E3 =  C = product(n, i -> C2);

F22E4 =  areIsomorphic(B, C)

F22E5 =  P = {2, 3, 5, 7, 11, 13, 17, 19};

F22E6 =  D = divisorPoset product take(P, n);

F22E7 =  areIsomorphic(B, D)

F22E8 =  R = QQ[x_1..x_n];

F22E9 =  I = monomialIdeal apply(R_*, x -> x^2);

F22E10 =  M = standardMonomialPoset I;

F22E11 =  areIsomorphic(B, M)

F23E0 =  maximalChains divisorPoset 30

F24E0 =  P = poset {{a,b}, {b,c}, {d,c}};

F24E1 =  minimalElements P

F25E0 =  R = QQ[x,y,z];

F25E1 =  C = res ideal(y*z,x*z,x^2*y)

F25E2 =  resolutionPoset C

F25E3 =  (resolutionPoset C).GroundSet

F25E4 =  P = resolutionPoset monomialIdeal(y*z,x*z,x^2*y)

F25E5 =  P.GroundSet

F26E0 =  D = dominanceLattice 6;

F26E1 =  closedInterval(D, {2,2,1,1}, {4,2})

F26E2 =  dominanceLattice 2 == chain 2

F26E3 =  dominanceLattice 3 == chain 3

F26E4 =  dominanceLattice 4 == chain 5

F26E5 =  dominanceLattice 5 == chain 7

F27E0 =  P = chain 5;

F27E1 =  dropElements(P, {3})

F27E2 =  P - {4, 5}

F27E3 =  P = divisorPoset (2*3*5*7);

F27E4 =  Q = dropElements(P, e -> e % 3 == 0)

F27E5 =  Q == divisorPoset(2*5*7)

F28E0 =  P = poset {{1,2}, {2,4}, {3,4}, {3,5}};

F28E1 =  pPartitionRing P

F28E2 =  pPartitionRing(divisorPoset 6, Strategy => "4ti2")

F29E0 =  P = poset {{1,4},{2,4},{3,4}};

F29E1 =  adjoinMin(P, 0)

F30E0 =  setPartition {2,3,5}

F30E1 =  setPartition 4

F31E0 =  n = 3;

F31E1 =  B = booleanLattice n

F31E2 =  B == poset(subsets n, isSubset)

F31E3 =  B == product(n, i -> chain 2)

F31E4 =  B == divisorPoset (2*3*5)

F32E0 =  joinIrreducibles booleanLattice 3

F33E0 =  moebiusFunction chain 3

F34E0 =  n = 5;

F34E1 =  isBounded chain n

F34E2 =  B = booleanLattice n;

F34E3 =  isBounded B

F34E4 =  isBounded flagPoset(B, {1,2,3,4})

F35E0 =  divisorPoset 12

F35E1 =  divisorPoset 30

F36E0 =  P = booleanLattice 3;

F36E1 =  P_0

F36E2 =  P_3

F37E0 =  n = 4;

F37E1 =  factor flagfPolynomial chain n

F38E0 =  atoms booleanLattice 3

F38E1 =  atoms chain 5

F39E0 =  R = RR[x,y];

F39E1 =  A = {x+y,x,x-y,y+1};

F39E2 =  realRegions(A, R)

F40E0 =  B = booleanLattice 3;

F40E1 =  z = zetaPolynomial B

F40E2 =  #B.GroundSet == sub(z, (ring z)_0 => 2)

F40E3 =  #allRelations B == sub(z, (ring z)_0 => 3)

F41E0 =  partitionLattice 3

F42E0 =  P = booleanLattice 3;

F42E1 =  principalFilter(P, "101")

F43E0 =  P = divisorPoset 12;

F43E1 =  allRelations P

F43E2 =  allRelations(P, true)

F44E0 =  P = booleanLattice 4;

F44E1 =  rankFunction P

F44E2 =  flagPoset(P, {2,3})

F44E3 =  flagPoset(P, {1})

F45E0 =  union(chain 3, poset {{1,4},{4,5},{5,3}})

F46E0 =  B = booleanLattice 3;

F46E1 =  posetMeet(B, "011", "110")

F47E0 =  n = 5;

F47E1 =  factor poincarePolynomial booleanLattice n

F47E2 =  R = QQ[x,y,z];

F47E3 =  A = {x,y,z,x+y,x+z,y+z,x-y,x-z,y-z};

F47E4 =  LA = intersectionLattice(A, R);

F47E5 =  factor poincarePolynomial LA

F48E0 =  randomPoset 10

F48E1 =  randomPoset(10, Bias => 0.1)

F48E2 =  randomPoset(10, Bias => 0.9)

F49E0 =  comparabilityGraph booleanLattice 3

F50E0 =  n = 5;

F50E1 =  C = chain n;

F50E2 =  isRanked C

F50E3 =  rankFunction C

F50E4 =  B = booleanLattice n;

F50E5 =  isRanked B

F50E6 =  rankGeneratingFunction C

F50E7 =  P = poset {{1,2}, {1,3}, {3,4}, {2,5}, {4,5}};

F50E8 =  isRanked P

F51E0 =  P = divisorPoset 12;

F51E1 =  dual P

F51E2 =  C = chain 5;

F51E3 =  areIsomorphic(C, dual C)

F51E4 =  B = booleanLattice 4;

F51E5 =  areIsomorphic(B, dual B)

F52E0 =  meetIrreducibles booleanLattice 3

F53E0 =  D = divisorPoset 12;

F53E1 =  isAntichain(D, {2,3})

F53E2 =  isAntichain(D, {2,6})

F54E0 =  R = QQ[x,y];

F54E1 =  divisorPoset(x*y-x, x^2*y^2 - 2*x^2*y + x^2)

F55E0 =  hibiRing booleanLattice 2

F55E1 =  hibiRing chain 4

F55E2 =  hibiRing(divisorPoset 6, Strategy => "4ti2")

F56E0 =  R = RR[x,y];

F56E1 =  A = {x + y, x, x - y, y + 1};

F56E2 =  LA = intersectionLattice(A, R)

F56E3 =  MF = moebiusFunction LA;

F56E4 =  sum apply(LA_*, i -> abs(MF#(ideal 0_R, i)))

F56E5 =  MF' = moebiusFunction adjoinMax(LA, ideal 1_R);

F56E6 =  abs(MF'#(ideal 0_R, ideal 1_R))

F57E0 =  B = booleanLattice 3;

F57E1 =  f = tuttePolynomial B

F57E2 =  R = ring f;

F57E3 =  sub(f, {R_0 => 1, R_1 => 1})

F58E0 =  R = QQ[x,y,z];

F58E1 =  projectivizeArrangement({x^2-y, y^2-z}, R)

F59E0 =  n = 5;

F59E1 =  isSperner chain n

F59E2 =  isSperner booleanLattice n

F59E3 =  P = poset {{1,4}, {1,5}, {1,6}, {2,6}, {3,6}};

F59E4 =  isSperner P

F59E5 =  isAntichain(P, {2,3,4,5})

F59E6 =  rankGeneratingFunction P

F60E0 =  R = QQ[x,y];

F60E1 =  L = lcmLattice monomialIdeal(x^2, x*y, y^2)

F60E2 =  compare (L, 1_R, x^2*y);

F61E0 =  n = 4;

F61E1 =  isUpperSemilattice chain n

F61E2 =  B = booleanLattice n;

F61E3 =  isUpperSemilattice B

F61E4 =  isUpperSemilattice flagPoset(B, {1,2,3})

F61E5 =  B' = flagPoset(B, {1,2,3,4});

F61E6 =  isLattice B'

F61E7 =  isUpperSemilattice B'

F62E0 =  P = booleanLattice 3;

F62E1 =  orderIdeal(P, {"001", "100"})

F63E0 =  hibiIdeal chain 3

F64E0 =  P = poset {{a,b},{a,c}};

F64E1 =  compare(P, a, b)

F64E2 =  compare(P, c, a)

F64E3 =  compare(P, b, c)

F65E0 =  D = divisorPoset(2^2*3*5);

F65E1 =  rankFunction D

F65E2 =  flagChains(D, {1,2,3})

F66E0 =  G = {1,2,3,4,5};

F66E1 =  R = {{1,2}, {1,3}, {2,4}, {3,4}, {4,5}};

F66E2 =  transitiveClosure(G, R)

F67E0 =  D = divisorPoset 12;

F67E1 =  antichains D

F67E2 =  antichains(D, 2)

F67E3 =  antichains chain 5

F68E0 =  B = booleanLattice 3;

F68E1 =  posetJoin(B, "001", "100")

F69E0 =  B = booleanLattice 3;

F69E1 =  z = magnitude B

F70E0 =  R = QQ[a..d];

F70E1 =  facePoset simplicialComplex {a*b*c, c*d}

F71E0 =  P = poset {{0, 2}, {1, 2}, {1, 3}, {2, 5}, {3, 4}, {3, 5}};

F71E1 =  dilworthLattice P

F72E0 =  diamondProduct(chain 3, chain 3)

F73E0 =  n = 4;

F73E1 =  isLowerSemimodular chain n

F73E2 =  isLowerSemimodular booleanLattice n

F73E3 =  P = poset {{1, 2}, {1, 5}, {2, 3}, {2, 4}, {3, 7}, {4, 7}, {5, 4}, {5, 6}, {6, 7}};

F73E4 =  isLattice P

F73E5 =  isLowerSemimodular P

F74E0 =  P = poset {{1, 2}, {1, 3}, {1, 4}, {2, 5}, {3, 5}, {4, 5}};

F74E1 =  isLattice P

F74E2 =  isAtomic P

F74E3 =  isAtomic booleanLattice 4

F74E4 =  Q = poset {{1, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 4}, {4, 6}, {5, 6}};

F74E5 =  isLattice Q

F74E6 =  isAtomic Q

F74E7 =  isAtomic chain 5

F75E0 =  G = graph {{1,2}, {2,3}, {3,4}, {1,4}};

F75E1 =  transitiveOrientation G

F75E2 =  setRandomSeed 0;

F75E3 =  G = graph {{1,2},{2,3},{3,4},{1,3},{1,3}};

F75E4 =  removeIsomorphicPosets apply(4, i -> transitiveOrientation(G, Random => true))

F76E0 =  isDistributive booleanLattice 3

F76E1 =  P = poset {{1,2}, {1,3}, {3,4}, {2,5}, {4, 5}};

F76E2 =  isLattice P

F76E3 =  isDistributive P

F76E4 =  D = poset {{1,2}, {1,3}, {1,4}, {2,5}, {3,5}, {4,5}};

F76E5 =  isLattice D

F76E6 =  isDistributive D

F77E0 =  P = divisorPoset 12;

F77E1 =  L = linearExtensions P

F77E2 =  F = flatten filtration P

F77E3 =  member(F, L)

F77E4 =  linearExtensions chain 10

F78E0 =  texPoset booleanLattice 2

F78E1 =  texPoset(booleanLattice 2, Jitter => true)

F79E0 =  isStrictSperner chain 5

F79E1 =  B = booleanLattice 3;

F79E2 =  isStrictSperner B

F79E3 =  rankPoset B

F79E4 =  maximalAntichains B

F80E0 =  P = poset {{a,b}, {a,c}, {c,d}};

F80E1 =  maximalElements P

F81E0 =  setSuppressLabels false

F82E0 =  hPolynomial booleanLattice 3

F82E1 =  hPolynomial chain 5

F83E0 =  C = chain 5;

F83E1 =  P = poset {{a,b},{b,c},{c,d},{d,e}};

F83E2 =  areIsomorphic(C, P)

F83E3 =  B = booleanLattice 4;

F83E4 =  B == product(4, i -> chain 2)

F83E5 =  B == divisorPoset (2*3*5*7)

F83E6 =  B == divisorPoset (2^2*3*5)

F84E0 =  n = 4;

F84E1 =  isLattice chain n

F84E2 =  B = booleanLattice n;

F84E3 =  isLattice B

F84E4 =  isLattice flagPoset(B, {1,2,3})

F85E0 =  P = booleanLattice 3;

F85E1 =  closedInterval(P, "001", "111")

F86E0 =  R = QQ[x,y];

F86E1 =  D = divisorPoset({0,1}, {2,2}, R)

F86E2 =  D == divisorPoset(y, x^2*y^2)

F87E0 =  P = poset {{1,2},{1,3},{1,4}};

F87E1 =  adjoinMax(P, 100)

F88E0 =  B = booleanLattice 3;

F88E1 =  z = coxeterPolynomial B

F89E0 =  youngSubposet 4

F89E1 =  youngSubposet({3,1}, {4,2,1})

F90E0 =  P = booleanLattice 3;

F90E1 =  Q = indexLabeling P;

F90E2 =  P.GroundSet

F90E3 =  Q.GroundSet

F90E4 =  P == Q

F91E0 =  C = chain 3;

F91E1 =  connectedComponents C

F91E2 =  S = sum(5, i -> naturalLabeling(C, 10*i));

F91E3 =  connectedComponents S

F92E0 =  G = {1,2,3,4};                  -- the ground set

F92E1 =  R = {{1,2},{1,3},{2,4},{3,4}};  -- a list of cover relations

F92E2 =  P = poset(G, R)                 -- the poset with its relations matrix computed

F93E0 =  isConnected divisorPoset 18

F93E1 =  C = chain 3;

F93E2 =  P = sum(5, i -> naturalLabeling(C, 10*i));

F93E3 =  isConnected P

F94E0 =  P = booleanLattice 3;

F94E1 =  P_{2,4,5}

F95E0 =  n = 4;

F95E1 =  isUpperSemimodular chain n

F95E2 =  isUpperSemimodular booleanLattice n

F95E3 =  P = poset {{1, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}, {3, 5}, {4, 6}, {5, 7}, {6, 7}};

F95E4 =  isLattice P

F95E5 =  isUpperSemimodular P

F96E0 =  S = "[ [ 3 ], [ 10 ], [ 4, 7, 9 ], [ 5, 6 ], [ 2 ], [ 2 ], [ 5, 8 ], [ 2 ], [ 6, 8 ], [  ] ]";

F96E1 =  P = gapConvertPoset S

F96E2 =  P == augmentPoset booleanLattice 3

F96E3 =  gapConvertPoset chain 3

F97E0 =  coveringRelations divisorPoset 12

F98E0 =  n = 5;

F98E1 =  factor fPolynomial chain n

F99E0 =  n = 5;

F99E1 =  factor characteristicPolynomial chain n

F99E2 =  factor characteristicPolynomial booleanLattice n

F100E0 =  P = chain 5;

F100E1 =  l = hashTable { 1 => a, 2 => b, 3 => c, 4 => d, 5 => e};

F100E2 =  Q = labelPoset(P, l);

F100E3 =  P.GroundSet

F100E4 =  Q.GroundSet

F100E5 =  P == Q

F101E0 =  D = divisorPoset 12;

F101E1 =  chains D

F101E2 =  chains(D, 2)

F102E0 =  P = booleanLattice 3;

F102E1 =  Q = naturalLabeling P

F102E2 =  all(allRelations Q, r -> r_0 <= r_1)

F102E3 =  C = chain 3;

F102E4 =  Q' = sum(3, i -> naturalLabeling(C, 3*i))

F102E5 =  all(allRelations Q', r -> r_0 <= r_1)

F103E0 =  P = booleanLattice 3;

F103E1 =  openInterval(P, "001", "111")

F104E0 =  P = poset {{a,b}, {b,c}, {c,d}, {a,e}, {e,d}};

F104E1 =  filtration P

F104E2 =  B = booleanLattice 3;

F104E3 =  F = filtration B

F104E4 =  R = rankPoset B

F104E5 =  sort \ F === sort \ R

F104E6 =  member(flatten F, linearExtensions B)

F105E0 =  product(chain 3, poset {{a,b},{b,c}})

F105E1 =  B = booleanLattice 4;

F105E2 =  B == product(4, i -> chain 2)

F106E0 =  n = 4;

F106E1 =  isLowerSemilattice chain n

F106E2 =  B = booleanLattice n;

F106E3 =  isLowerSemilattice B

F106E4 =  isLowerSemilattice flagPoset(B, {1,2,3})

F106E5 =  B' = flagPoset(B, {0,1,2,3});

F106E6 =  isLattice B'

F106E7 =  isLowerSemilattice B'

F107E0 =  G = comparabilityGraph booleanLattice 5;

F107E1 =  isComparabilityGraph G

F107E2 =  G = graph {{1,2}, {2,3}, {3,4}, {4,5}, {1,5}};

F107E3 =  isComparabilityGraph G

F108E0 =  isEulerian chain 10

F108E1 =  n = 10;

F108E2 =  R = QQ[x_0..x_(n-1)];

F108E3 =  F = facePoset simplicialComplex apply(n, i -> x_i * x_((i+1)%n));

F108E4 =  isEulerian F

F109E0 =  setPrecompute false

F110E0 =  G = {a,b,c,d};

F110E1 =  R = {{a,b}, {a,c}, {c,d}};

F110E2 =  P = poset(G, R)

F110E3 =  poset {{1,2},{2,3},{3,4}}

F110E4 =  cmp = (a,b) -> b % a == 0;

F110E5 =  G = toList(1..10);

F110E6 =  P = poset(G, cmp)

F110E7 =  S = QQ[x,y,z];

F110E8 =  G = {x^2, x*y, z^2, x^2*y*z, x*y*z^3, x^2*y^2*z^3};

F110E9 =  R = flatten for g in G list for h in G list if h %g == 0 then {g,h} else continue;

F110E10 =  M = matrix apply(G, g -> apply(G, h -> if h %g == 0 then 1 else 0));

F110E11 =  P = poset(G, R, M)

F111E0 =  n = 5;

F111E1 =  dilworthNumber chain n

F111E2 =  dilworthNumber booleanLattice n

F111E3 =  n*(n-1)//2

F112E0 =  L = {chain 4, divisorPoset (2^3), booleanLattice 3, booleanLattice 2, product(3, i -> chain 2)};

F112E1 =  removeIsomorphicPosets L

F113E0 =  isomorphism(divisorPoset (2*3*5), booleanLattice 3)

F114E0 =  n = 5;

F114E1 =  height chain n

F115E0 =  n = 4;

F115E1 =  isModular chain n

F115E2 =  isModular booleanLattice n

F115E3 =  P = poset {{1, 2}, {1, 5}, {2, 3}, {2, 4}, {3, 7}, {4, 7}, {5, 4}, {5, 6}, {6, 7}};

F115E4 =  isLattice P

F115E5 =  isModular P

F116E0 =  ncPartitions 5

F117E0 =  R = QQ[a,b,c,d];

F117E1 =  M = ideal(a^3*b^2*c, a^3*b^2*d, a^2*c*d, a*b*c^2*d, b^2*c^2*d);

F117E2 =  LM = lcmLattice M;

F117E3 =  D1 = orderComplex(openInterval(LM, 1_R, a^2*b^2*c^2*d));

F117E4 =  prune HH(D1)

F117E5 =  D2 = orderComplex(openInterval(LM, 1_R, a^3*b^2*c*d));

F117E6 =  prune HH(D2)

F118E0 =  n = 5;

F118E1 =  isGraded chain n

F118E2 =  isGraded booleanLattice n

F118E3 =  P = poset {{1,2}, {1,3}, {3,4}, {2,5}, {4, 5}};

F118E4 =  isGraded P

F119E0 =  setPrecompute true;

F119E1 =  C = chain 10;

F119E2 =  peek C.cache

F119E3 =  P = poset apply(9, i -> {i+1, i+2});

F119E4 =  peek P.cache

F119E5 =  C == P

F119E6 =  time isDistributive C

F119E7 =  time isDistributive P

F119E8 =  C' = dual C;

F119E9 =  time isDistributive C'

F119E10 =  peek C'.cache

F120E0 =  n = 5;

F120E1 =  C = chain n

F120E2 =  C == poset(toList(1..n), (a,b) -> a <= b)

F120E3 =  C == divisorPoset(2^(n-1))

F121E0 =  R = QQ[x,y];

F121E1 =  divisorPoset(x^2*y)

F121E2 =  divisorPoset(x*y^2 - 2*x*y + x)

F122E0 =  P = booleanLattice 3;

F122E1 =  filter(P, {"001", "100"})

F123E0 =  P = poset {{1,2},{2,3},{3,4},{2,5},{6,3}};

F123E1 =  greeneKleitmanPartition P

F123E2 =  D = dominanceLattice 6;

F123E3 =  time greeneKleitmanPartition(D, Strategy => "antichains")

F123E4 =  time greeneKleitmanPartition(D, Strategy => "chains")

F123E5 =  greeneKleitmanPartition chain 10

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F1E0", "F1E1", "F2E0", "F2E1", "F3E0", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F5E0", "F5E1", "F5E2", "F6E0", "F7E0", "F8E0", "F8E1", "F9E0", "F9E1", "F9E2", "F10E0", "F10E1", "F11E0", "F11E1", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F12E6", "F12E7", "F12E8", "F12E9", "F12E10", "F12E11", "F13E0", "F13E1", "F13E2", "F14E0", "F14E1", "F14E2", "F15E0", "F15E1", "F16E0", "F16E1", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F18E0", "F18E1", "F19E0", "F20E0", "F20E1", "F20E2", "F20E3", "F20E4", "F21E0", "F21E1", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F22E5", "F22E6", "F22E7", "F22E8", "F22E9", "F22E10", "F22E11", "F23E0", "F24E0", "F24E1", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F25E5", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F27E5", "F28E0", "F28E1", "F28E2", "F29E0", "F29E1", "F30E0", "F30E1", "F31E0", "F31E1", "F31E2", "F31E3", "F31E4", "F32E0", "F33E0", "F34E0", "F34E1", "F34E2", "F34E3", "F34E4", "F35E0", "F35E1", "F36E0", "F36E1", "F36E2", "F37E0", "F37E1", "F38E0", "F38E1", "F39E0", "F39E1", "F39E2", "F40E0", "F40E1", "F40E2", "F40E3", "F41E0", "F42E0", "F42E1", "F43E0", "F43E1", "F43E2", "F44E0", "F44E1", "F44E2", "F44E3", "F45E0", "F46E0", "F46E1", "F47E0", "F47E1", "F47E2", "F47E3", "F47E4", "F47E5", "F48E0", "F48E1", "F48E2", "F49E0", "F50E0", "F50E1", "F50E2", "F50E3", "F50E4", "F50E5", "F50E6", "F50E7", "F50E8", "F51E0", "F51E1", "F51E2", "F51E3", "F51E4", "F51E5", "F52E0", "F53E0", "F53E1", "F53E2", "F54E0", "F54E1", "F55E0", "F55E1", "F55E2", "F56E0", "F56E1", "F56E2", "F56E3", "F56E4", "F56E5", "F56E6", "F57E0", "F57E1", "F57E2", "F57E3", "F58E0", "F58E1", "F59E0", "F59E1", "F59E2", "F59E3", "F59E4", "F59E5", "F59E6", "F60E0", "F60E1", "F60E2", "F61E0", "F61E1", "F61E2", "F61E3", "F61E4", "F61E5", "F61E6", "F61E7", "F62E0", "F62E1", "F63E0", "F64E0", "F64E1", "F64E2", "F64E3", "F65E0", "F65E1", "F65E2", "F66E0", "F66E1", "F66E2", "F67E0", "F67E1", "F67E2", "F67E3", "F68E0", "F68E1", "F69E0", "F69E1", "F70E0", "F70E1", "F71E0", "F71E1", "F72E0", "F73E0", "F73E1", "F73E2", "F73E3", "F73E4", "F73E5", "F74E0", "F74E1", "F74E2", "F74E3", "F74E4", "F74E5", "F74E6", "F74E7", "F75E0", "F75E1", "F75E2", "F75E3", "F75E4", "F76E0", "F76E1", "F76E2", "F76E3", "F76E4", "F76E5", "F76E6", "F77E0", "F77E1", "F77E2", "F77E3", "F77E4", "F78E0", "F78E1", "F79E0", "F79E1", "F79E2", "F79E3", "F79E4", "F80E0", "F80E1", "F81E0", "F82E0", "F82E1", "F83E0", "F83E1", "F83E2", "F83E3", "F83E4", "F83E5", "F83E6", "F84E0", "F84E1", "F84E2", "F84E3", "F84E4", "F85E0", "F85E1", "F86E0", "F86E1", "F86E2", "F87E0", "F87E1", "F88E0", "F88E1", "F89E0", "F89E1", "F90E0", "F90E1", "F90E2", "F90E3", "F90E4", "F91E0", "F91E1", "F91E2", "F91E3", "F92E0", "F92E1", "F92E2", "F93E0", "F93E1", "F93E2", "F93E3", "F94E0", "F94E1", "F95E0", "F95E1", "F95E2", "F95E3", "F95E4", "F95E5", "F96E0", "F96E1", "F96E2", "F96E3", "F97E0", "F98E0", "F98E1", "F99E0", "F99E1", "F99E2", "F100E0", "F100E1", "F100E2", "F100E3", "F100E4", "F100E5", "F101E0", "F101E1", "F101E2", "F102E0", "F102E1", "F102E2", "F102E3", "F102E4", "F102E5", "F103E0", "F103E1", "F104E0", "F104E1", "F104E2", "F104E3", "F104E4", "F104E5", "F104E6", "F105E0", "F105E1", "F105E2", "F106E0", "F106E1", "F106E2", "F106E3", "F106E4", "F106E5", "F106E6", "F106E7", "F107E0", "F107E1", "F107E2", "F107E3", "F108E0", "F108E1", "F108E2", "F108E3", "F108E4", "F109E0", "F110E0", "F110E1", "F110E2", "F110E3", "F110E4", "F110E5", "F110E6", "F110E7", "F110E8", "F110E9", "F110E10", "F110E11", "F111E0", "F111E1", "F111E2", "F111E3", "F112E0", "F112E1", "F113E0", "F114E0", "F114E1", "F115E0", "F115E1", "F115E2", "F115E3", "F115E4", "F115E5", "F116E0", "F117E0", "F117E1", "F117E2", "F117E3", "F117E4", "F117E5", "F117E6", "F118E0", "F118E1", "F118E2", "F118E3", "F118E4", "F119E0", "F119E1", "F119E2", "F119E3", "F119E4", "F119E5", "F119E6", "F119E7", "F119E8", "F119E9", "F119E10", "F120E0", "F120E1", "F120E2", "F120E3", "F121E0", "F121E1", "F121E2", "F122E0", "F122E1", "F123E0", "F123E1", "F123E2", "F123E3", "F123E4", "F123E5"}
