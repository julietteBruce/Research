needsPackage "NormalToricVarieties"

F100E0 =  PP2 = normalToricVariety matrix {{0,1,0},{0,0,1}};

F100E1 =  rays PP2

F100E2 =  max PP2

F100E3 =  PP2' = toricProjectiveSpace 2;

F100E4 =  set rays PP2 === set rays PP2'

F100E5 =  max PP2 === max PP2'

F100E6 =  assert (isWellDefined PP2 and isWellDefined PP2')

F100E7 =  X = normalToricVariety (id_(ZZ^3) | -id_(ZZ^3));

F100E8 =  transpose matrix rays X

F100E9 =  max X

F100E10 =  assert (isWellDefined X and not isSimplicial X)

F100E11 =  FF1 = normalToricVariety matrix {{0,1,0,2},{0,0,1,1}};

F100E12 =  assert isWellDefined FF1

F100E13 =  rays FF1

F100E14 =  max FF1

F100E15 =  FF1' = hirzebruchSurface 1;

F100E16 =  assert (rays FF1 === rays FF1' and max FF1 === max FF1')

F100E17 =  VertMat = matrix {{0,0,1,1,2},{0,1,0,1,1}}

F100E18 =  notFF1 = normalToricVariety VertMat;

F100E19 =  max notFF1

F100E20 =  isWellDefined notFF1

F100E21 =  FF1'' = normalToricVariety (VertMat, MinimalGenerators => true);

F100E22 =  assert (rays FF1'' == rays FF1 and max FF1'' == max FF1)

F100E23 =  assert isWellDefined FF1''

exampleIDS = {"F100E0", "F100E1", "F100E2", "F100E3", "F100E4", "F100E5", "F100E6", "F100E7", "F100E8", "F100E9", "F100E10", "F100E11", "F100E12", "F100E13", "F100E14", "F100E15", "F100E16", "F100E17", "F100E18", "F100E19", "F100E20", "F100E21", "F100E22", "F100E23"}
