needsPackage "BinomialEdgeIdeals"

F0E0 =  G={{1,2},{2,3},{3,1}}

F0E1 =  I = binomialEdgeIdeal(G,Field=>ZZ/2)

F0E2 =  J = binomialEdgeIdeal(G,Permanental=>true)

F0E3 =  needsPackage("Graphs")

F0E4 =  H=graph({{1,2},{2,3},{3,1}})

F0E5 =  I = binomialEdgeIdeal(H)

F1E0 =  needsPackage("Graphs")

F1E1 =  G=graph({{1,2},{2,3},{3,1}})

F1E2 =  S={1}

F1E3 =  isDisconnector(G,S)

F2E0 =  G={{1,2},{2,3},{3,1},{4,5},{6,7},{7,8},{6,8}};

F2E1 =  weightedConnectedComponents(G,WeightMethod=>"BEI")

F2E2 =  weightedConnectedComponents(G,WeightMethod=>"PBEI")

F3E0 =  G={{1,2},{2,3},{3,1}}

F3E1 =  d = disconnectors(G)

F3E2 =  d = disconnectors(G,EffectiveOnly=>true)

F4E0 =  G={{1,2},{2,3},{3,1}}

F4E1 =  I = parityBinomialEdgeIdeal(G,Field=>ZZ/2)

F4E2 =  J = parityBinomialEdgeIdeal(G)

F4E3 =  needsPackage("Graphs")

F4E4 =  H=graph({{1,2},{2,3},{3,1}})

F4E5 =  I = binomialEdgeIdeal(H)

F5E0 =  needsPackage("Graphs")

F5E1 =  G=graph({{1,2},{2,3},{3,1}})

F5E2 =  S={1}

F5E3 =  isEffective(G,S)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F1E0", "F1E1", "F1E2", "F1E3", "F2E0", "F2E1", "F2E2", "F3E0", "F3E1", "F3E2", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F5E0", "F5E1", "F5E2", "F5E3"}
