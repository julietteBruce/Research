needsPackage "Saturation"

F0E0 =  R = ZZ/32003[a..d];

F0E1 =  m = ideal vars R

F0E2 =  M = R^1 / (a * m^2)

F0E3 =  M / saturate 0_M

F0E4 =  R = QQ[a..i];

F0E5 =  M = cokernel genericMatrix(R,a,3,3)

F0E6 =  annihilator M

F0E7 =  ann (M/(a*M))

F1E0 =  R = QQ[a..d];

F1E1 =  I = ideal(a^2*b-c^2, a*b^2-d^3, c^5-d);

F1E2 =  J = ideal(a^2,b^2,c^2,d^2);

F1E3 =  I:J

F1E4 =  P = quotient(I,J)

F1E5 =  R = ZZ/32003[a..d];

F1E6 =  I = ideal(a^3-b, a^4-c)

F1E7 =  Ih = homogenize(I, d)

F1E8 =  saturate(Ih, d)

F2E0 =  R = ZZ/32003[a..d];

F2E1 =  J = monomialCurveIdeal(R,{1,4,7})

F2E2 =  I = ideal(J_1-a^2*J_0,J_2-d*c*J_0)

F2E3 =  I : J

F2E4 =  R = ZZ[a,b,c];

F2E5 =  F = a^3-b^2*c-11*c^2

F2E6 =  I = ideal(F,diff(a,F),diff(b,F),diff(c,F))

F2E7 =  I : (ideal(a,b,c))^3

F2E8 =  S = QQ[x,y,z];

F2E9 =  J = image vars S

F2E10 =  I = image symmetricPower(2,vars S)

F2E11 =  (I++I) : (J++J)

F2E12 =  (I++I) : x+y+z

F2E13 =  quotient(I,J)

F2E14 =  quotient(gens I, gens J)

F2E15 =  I = ideal(x^2-y^2, y^3)

F2E16 =  J = ideal((x+y+z)^3, z^2)

F2E17 =  L = intersect(I,J)

F2E18 =  L : z^2

F2E19 =  L : I == J

F3E0 =  R = QQ[a..d];

F3E1 =  J = monomialCurveIdeal(R,{1,3,4})

F3E2 =  M = Ext^2(R^1/J, R)

F3E3 =  annihilator M

F3E4 =  A = R/(a*b, a*c, a*d)

F3E5 =  ann a

F3E6 =  annihilator(M, Strategy => Quotient)

F4E0 =  S = ZZ/32003[x_0..x_4, Degrees=>{2:{1,0}, 3:{0,1}}];

F4E1 =  irr = intersect(ideal(x_0,x_1), ideal(x_2,x_3,x_4));

F4E2 =  M = S^1/(irr^2);

F4E3 =  isSupportedInZeroLocus_irr M

F5E0 =  hooks methods(quotient, Ideal, Ideal)

F5E1 =  code(quotient, Ideal, Ideal, Strategy => Quotient)

F5E2 =  n = 6

F5E3 =  S = ZZ/101[vars(0..n-1)];

F5E4 =  I = monomialCurveIdeal(S, 1..n-1);

F5E5 =  J = ideal(map(S^1, S^n, (p, q) -> S_q^5));

F5E6 =  time quotient(I^3, J^2, Strategy => Iterate);

F5E7 =  time quotient(I^3, J^2, Strategy => Quotient);

F5E8 =  S = ZZ/101[vars(0..4)];

F5E9 =  I = ideal vars S;

F5E10 =  time quotient(I^5, I^3, Strategy => Iterate);

F5E11 =  time quotient(I^5, I^3, Strategy => Quotient);

F6E0 =  R = ZZ/32003[a..d];

F6E1 =  I = ideal(a^3-b, a^4-c)

F6E2 =  Ih = homogenize(I,d)

F6E3 =  saturate(Ih,d)

F6E4 =  m = ideal vars R

F6E5 =  M = R^1 / (a * m^2)

F6E6 =  M / saturate 0_M

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F0E7", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F2E10", "F2E11", "F2E12", "F2E13", "F2E14", "F2E15", "F2E16", "F2E17", "F2E18", "F2E19", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F4E0", "F4E1", "F4E2", "F4E3", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F5E9", "F5E10", "F5E11", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6"}
