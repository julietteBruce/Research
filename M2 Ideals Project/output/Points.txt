needsPackage "Points"

F0E0 =  R = ZZ/31991[vars(0..3)]

F0E1 =  randomPointsMat(R,3)

F0E2 =  randomPointsMat(R,3, AllRandom=>true)

F0E3 =  randomPointsMat(R,7)

F1E0 =  R = QQ[x,y]

F1E1 =  M = transpose matrix{{0,0},{1,1}}

F1E2 =  mults = {3,2}

F1E3 =  (Q,inG,G) = affineFatPoints(M,mults,R)

F1E4 =  monomialIdeal G == inG

F1E5 =  K = ZZ/32003

F1E6 =  R = K[z_1..z_5]

F1E7 =  M = random(K^5,K^12)

F1E8 =  mults = {1,2,3,1,2,3,1,2,3,1,2,3}

F1E9 =  elapsedTime (Q,inG,G) = affineFatPoints(M,mults,R);

F1E10 =  elapsedTime H = affineFatPointsByIntersection(M,mults,R);

F1E11 =  G==H

F2E0 =  M = random(ZZ^3, ZZ^5)

F2E1 =  R = QQ[x,y,z]

F2E2 =  phi = affineMakeRingMaps(M,R)

F2E3 =  apply (gens(R),r->phi#2 r)

F2E4 =  phi#2

F3E0 =  M = random(ZZ^3, ZZ^5)

F3E1 =  R = QQ[x,y,z]

F3E2 =  (A,stds) = affinePointsMat(M,R)

F4E0 =  M = random(ZZ^3, ZZ^5)

F4E1 =  R = QQ[x,y,z]

F4E2 =  (Q,inG,G) = affinePoints(M,R)

F4E3 =  monomialIdeal G == inG

F5E0 =  R = ZZ/101[vars(0..4)]

F5E1 =  p = randomPointsMat(R,11)

F5E2 =  w = omegaPoints p

F5E3 =  degree (R^1/(points p))

F5E4 =  degree coker w

F5E5 =  betti res (R^1/(points p))

F5E6 =  betti res coker w

F6E0 =  betti res randomPoints(11,5)

F7E0 =  R = QQ[x,y,z]

F7E1 =  M = transpose matrix{{1,0,0},{0,1,1}}

F7E2 =  projectivePointsByIntersection(M,R)

F8E0 =  R = QQ[x,y,z]

F8E1 =  M = transpose matrix{{1,0,0},{0,1,1}}

F8E2 =  mults = {3,2}

F8E3 =  projectiveFatPointsByIntersection(M,mults,R)

F9E0 =  expectedBetti(11,5)

F10E0 =  R = QQ[x_0..x_2]

F10E1 =  M = random(ZZ^3,ZZ^5)

F10E2 =  (inG,G) = projectivePoints(M,R)

F10E3 =  monomialIdeal G == inG

F11E0 =  R = QQ[x,y,z]

F11E1 =  M = transpose matrix{{1,0,0},{0,1,1}}

F11E2 =  mults = {3,2}

F11E3 =  (inG,G) = projectiveFatPoints(M,mults,R)

F11E4 =  monomialIdeal G == inG

F12E0 =  minMaxResolution(3,5)

F13E0 =  R = ZZ/101[vars(0..4)]

F13E1 =  pointsMat = randomPointsMat(R,11)

F13E2 =  points pointsMat

F14E0 =  M = random(ZZ^3, ZZ^5)

F14E1 =  R = QQ[x,y,z]

F14E2 =  affinePointsByIntersection(M,R)

F15E0 =  R = QQ[x,y]

F15E1 =  M = transpose matrix{{0,0},{1,1}}

F15E2 =  mults = {3,2}

F15E3 =  affineFatPointsByIntersection(M,mults,R)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F1E10", "F1E11", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F3E0", "F3E1", "F3E2", "F4E0", "F4E1", "F4E2", "F4E3", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F6E0", "F7E0", "F7E1", "F7E2", "F8E0", "F8E1", "F8E2", "F8E3", "F9E0", "F10E0", "F10E1", "F10E2", "F10E3", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F12E0", "F13E0", "F13E1", "F13E2", "F14E0", "F14E1", "F14E2", "F15E0", "F15E1", "F15E2", "F15E3"}
