needsPackage "Macaulay2Doc"

F0E0 =  f = x -> 2*x+1

F0E1 =  f 100

F1E0 =  gradedModuleMap(random(ZZ^3,ZZ^4),random(ZZ^2,ZZ^2))

F2E0 =  C = gradedModule(ZZ^1,ZZ^6,ZZ^2)

F2E1 =  C ** C

F2E2 =  betti oo

F3E0 =  S = ZZ/101[x,y,z,Degrees => {{2,3},{1,2},{2,0}}];

F3E1 =  degrees vars S

F4E0 =  Beta(3, 4)

F5E0 =  x = t

F5E1 =  x <- 4

F5E2 =  x

F5E3 =  t

F5E4 =  y <- 44

F5E5 =  y

F5E6 =  f = () -> symbol z

F5E7 =  (f()) <- 44

F5E8 =  z

F5E9 =  installMethod(symbol <-, String, peek)

F5E10 =  "foo" <- "bar"

F5E11 =  "foo" | "foo" <- "bar"

F5E12 =  u = s_4

F5E13 =  s = 3

F5E14 =  u <- 555

F5E15 =  s

F5E16 =  s_4

F5E17 =  u

F5E18 =  value u

F5E19 =  (symbol a, symbol b) <- (3,4)

F5E20 =  a

F5E21 =  (symbol r_1 .. symbol r_3) <- (5,6,7)

F5E22 =  r_2

F6E0 =  S = QQ[x,y,z];

F6E1 =  I = ideal(y*(x-1), z*(x-1));

F6E2 =  dim I

F6E3 =  gens gb I

F6E4 =  y % I

F6E5 =  R = QQ[x,y,z,MonomialOrder=>{Weights=>{-1,-1,-1},RevLex},Global=>false];

F6E6 =  J = substitute(I,R)

F6E7 =  gens gb J

F6E8 =  dim J

F6E9 =  y % J

F6E10 =  J = substitute(J, {x=>x+1})

F6E11 =  dim J

F6E12 =  use ring I

F6E13 =  I1 = substitute(I, {x=>x+1})

F6E14 =  dim I1

F7E0 =  A = ZZ/101[a]/(a^2-1);

F7E1 =  toField A

F7E2 =  1//(a-1)

F7E3 =  getNonUnit A

F8E0 =  R = ZZ[x,y,z]

F8E1 =  f = vars R ** vars R

F8E2 =  diff(transpose vars R, f)

F8E3 =  diff(x, f)

F8E4 =  diff(y, f)

F8E5 =  diff(z, f)

F9E0 =  A = QQ[t,x,y,z];

F9E1 =  I = ideal"t2+x2+y2+z2,t2+2x2-xy-z2,t+y3-z3";

F9E2 =  eliminate(I,t)

F9E3 =  A1 = QQ[t,x,y,z,MonomialOrder=>{1,3}];

F9E4 =  I = substitute(I,A1);

F9E5 =  transpose gens gb I

F9E6 =  A2 = QQ[t,x,y,z,MonomialOrder=>Weights=>{1}];

F9E7 =  I = substitute(I,A2);

F9E8 =  transpose gens gb I

F9E9 =  A3 = QQ[t,x,y,z,MonomialOrder=>Eliminate 1];

F9E10 =  I = substitute(I,A3);

F9E11 =  transpose gens gb I

F10E0 =  R = ZZ/101[x,y,z,w];

F10E1 =  M = cokernel matrix {{x*y-z^2,y^2-w^2,w^4}}

F10E2 =  res(M,SyzygyLimit => 1)

F10E3 =  res(M,SyzygyLimit => 2)

F10E4 =  res(M,SyzygyLimit => infinity)

F11E0 =  << "hi" << endl

F11E1 =  stdio << "hi" << endl

F12E0 =  V = Proj(QQ[a,b,c]/ideal(b^2*c-a^2*(a+c)))

F12E1 =  genus V

F12E2 =  R = ZZ/101[x_0..x_5];

F12E3 =  M = random(R^4, R^{4:-1});

F12E4 =  I = minors(3, M+transpose(M));

F12E5 =  V = Proj(R/I);

F12E6 =  genus V

F13E0 =  R = ZZ/101[x,y];

F13E1 =  random(R^{1,2,3},R^{1,2,3})

F13E2 =  random(ZZ^3,ZZ^6,MaximalRank=>true)

F13E3 =  random(ZZ^3,ZZ^10,Density=>.3)

F13E4 =  random(ZZ^6,ZZ^6,UpperTriangular=>true)

F14E0 =  R = QQ[x..z];

F14E1 =  C = res coker vars R;

F14E2 =  f = id_C

F14E3 =  f[3]

F15E0 =  applyiter = apply(iterator "foo", toUpper)

F15E1 =  next applyiter

F15E2 =  next applyiter

F15E3 =  next applyiter

F15E4 =  next applyiter

F16E0 =  1+1

F17E0 =  A = QQ[x,y,z]

F17E1 =  N = image matrix{{x*y,0},{0,x*z},{y*z,z^2}}

F17E2 =  N + x*N

F17E3 =  f = matrix{{x*y,x*z},{y*z,z^2}}

F17E4 =  M = image f

F17E5 =  g = gens M

F17E6 =  f == g

F17E7 =  N = cokernel f

F17E8 =  presentation N

F17E9 =  presentation M

F17E10 =  syz f

F17E11 =  kernel f

F18E0 =  set{a,b,c} + set{a,d,f}

F18E1 =  x = apply(3, i -> set apply(3, j -> 10*i+j))

F18E2 =  sum x

F19E0 =  minimizeFilename "a/b/c/../d"

F19E1 =  minimizeFilename "../../../../../../"

F20E0 =  A = GF(3,2,Variable=>b);

F20E1 =  ambient A

F20E2 =  b^8

F20E3 =  b^4

F20E4 =  K = GF 8

F20E5 =  x = K_0

F20E6 =  x^3+x

F20E7 =  A = ZZ/5[a]/(a^3-a-2)

F20E8 =  B = GF A

F20E9 =  C = ZZ/5[b]/(b^3+1+3*b^2+b)

F20E10 =  D = GF C

F20E11 =  map(B,D,{a^2})

F21E0 =  partitions(4)

F21E1 =  partitions(4, 2)

F21E2 =  p = new Partition from {2,2,1}

F21E3 =  member(p, partitions(5,2))

F21E4 =  member(p, partitions(5,1))

F21E5 =  conjugate(p)

F21E6 =  A = unique apply(compositions(4, 10), comp -> rsort comp);

F21E7 =  B = select(A, a -> all(a, i -> 0<i and i<6));

F21E8 =  apply(B, b -> new Partition from b)

F22E0 =  newPackage "Foo"

F22E1 =  export "abc"

F22E2 =  abc = 3

F22E3 =  dictionaryPath

F22E4 =  endPackage "Foo"

F22E5 =  peek oo

F22E6 =  dictionaryPath

F22E7 =  abc

F23E0 =  R = QQ[x..z]

F23E1 =  variety ideal x

F23E2 =  dim oo

F24E0 =  R = ZZ/101[a..d]/(b*c-a*d,c^2-b*d,b^2-a*c);

F24E1 =  I = ideal (a*b-c,d^3);

F24E2 =  J = ideal (a^3,b*c-d);

F24E3 =  I+J

F24E4 =  I*J

F24E5 =  I^2

F25E0 =  truncate 3.7

F25E1 =  truncate(-3.7)

F25E2 =  truncate(2.5 + ii)

F26E0 =  gradedModule ZZ^2

F26E1 =  gradedModule(ZZ^2,ZZ^3,ZZ^400)

F26E2 =  R = QQ[x,y]

F26E3 =  C = res coker vars R

F26E4 =  gradedModule C

F27E0 =  x = y

F27E1 =  globalAssign(x,4)

F27E2 =  x

F27E3 =  y

F28E0 =  R = QQ[x,y]

F28E1 =  p = map(R,QQ)

F28E2 =  f = matrix {{x-y, x+2*y, 3*x-y}};

F28E3 =  kernel f

F28E4 =  g = map(R^1,QQ^3,p,f)

F28E5 =  g === map(R^1,QQ^3,p,{{x-y, x+2*y, 3*x-y}})

F28E6 =  isHomogeneous g

F28E7 =  kernel g

F28E8 =  coimage g

F28E9 =  rank oo

F28E10 =  g2 = map(R^1,,p,f,Degree => {1})

F28E11 =  g === g2

F28E12 =  M' = image f

F28E13 =  g3 = map(M',p,Degree => {1})

F28E14 =  isHomogeneous g3

F28E15 =  kernel g3

F28E16 =  oo == kernel g

F28E17 =  R = QQ[x, Degrees => {{2:1}}];

F28E18 =  M = R^1

F28E19 =  S = QQ[z];

F28E20 =  N = S^1

F28E21 =  p = map(R,S,{x},DegreeMap => x -> join(x,x))

F28E22 =  isHomogeneous p

F28E23 =  f = matrix {{x^3}}

F28E24 =  g = map(M,N,p,f,Degree => {3,3})

F28E25 =  isHomogeneous g

F28E26 =  kernel g

F28E27 =  coimage g

F29E0 =  s = "three dogs, two catfishes, and a cat"

F29E1 =  match("cat", s)

F29E2 =  lastMatch

F29E3 =  substring(first lastMatch, s)

F29E4 =  match ("cats", s)

F29E5 =  lastMatch

F29E6 =  s = "catfish cat dog"

F29E7 =  match("cat(?!fish)", s)

F29E8 =  substring(lastMatch#0#0, lastMatch#0#1 + 4, s)

F29E9 =  match("cat(?=fish)", s)

F29E10 =  substring(lastMatch#0#0, lastMatch#0#1 + 4, s)

F29E11 =  match("(?<!cat)fish", "cat catfish dog")

F29E12 =  match("(?<!cat)fish", "cat swordfish dog")

F29E13 =  match({"Cat", "Dog"}, "CatDog")

F29E14 =  match({"Cat", "Dog"}, "Catfish")

F29E15 =  match({"Cat", "Dog"}, "CatDog", Strategy => all)

F29E16 =  not match({"Cat", "Dog"}, "Catfish", Strategy => all)

F30E0 =  R = QQ[a..d];

F30E1 =  M = module monomialCurveIdeal(R, {1,3,4});

F30E2 =  h = hilbertPolynomial M

F30E3 =  hilbertPolynomial(M, Projective=>false)

F31E0 =  isReal 2.

F31E1 =  isReal sqrt(-1)

F32E0 =  R = ZZ/101[x,y,z];

F32E1 =  p = map(R^2,3,{{x^2,0,3},{0,y^2,5}})

F32E2 =  isHomogeneous p

F32E3 =  p = map(R^2,3,{(0,0) => x+y, (1,1) => x^2, (0,2) => x-1, (0,0) => x-y})

F33E0 =  x = new HashTable from {a => 1, b => 2}

F33E1 =  keys x

F34E0 =  all({1,2,3,4}, even)

F34E1 =  all({2,4,6,8}, even)

F34E2 =  all(7, x -> x < 10)

F35E0 =  cosh .2

F36E0 =  R = QQ[a..d];

F36E1 =  C = res coker vars R

F36E2 =  M = R^1/(a,b)

F36E3 =  C' = Hom(C,M)

F36E4 =  C'.dd_-1

F36E5 =  C'.dd^2 == 0

F37E0 =  R = QQ[a..d];

F37E1 =  f = map(image vars R, coker matrix{{a,b},{c,d}}, transpose matrix{{a,b,c,d},{d,c,b,a}})

F37E2 =  target f

F37E3 =  source f

F37E4 =  ambient f

F38E0 =  X = Proj(QQ[x..z])

F38E1 =  O = OO_X

F38E2 =  variety O

F39E0 =  makeDocumentTag (res, Module)

F39E1 =  peek oo

F39E2 =  makeDocumentTag (koszul, ZZ, Matrix)

F39E3 =  peek oo

F39E4 =  makeDocumentTag [res, PairLimit]

F39E5 =  peek oo

F40E0 =  7~

F40E1 =  (-12)~

F41E0 =  R = QQ[t][a..d];

F41E1 =  I = ideal(a,(t+1)*c) + ideal(a^2,b^2)

F41E2 =  trim I

F42E0 =  f = map ZZ^3

F42E1 =  g = id_(ZZ^3)

F42E2 =  f === g

F43E0 =  f = () -> ZZ[local t]

F43E1 =  f()

F43E2 =  t

F44E0 =  R = ZZ[a..d];

F44E1 =  F = (vars R) ++ ((vars R) ++ matrix{{a-1,b-3}})

F44E2 =  F_[1]

F44E3 =  F_[1]^[1]

F44E4 =  N = (a=>vars R) ++ (b=>vars R)

F44E5 =  N_[a]

F44E6 =  N = directSum(x1 => matrix{{a,b-1}}, x2 => matrix{{a-3,b-17,c-35}}, x3 => vars R)

F44E7 =  N_[x1,x3]

F45E0 =  A = ZZ[x] / (x^2-3)

F45E1 =  describe R

F45E2 =  flattenRing R

F45E3 =  I = ideal(y^2 - 3*x*z)

F45E4 =  (S, F) = flattenRing R;

F45E5 =  F(I)

F45E6 =  A = ZZ[x] / (x^2-3)

F45E7 =  I = ideal(y^2 - 3*x*z);

F45E8 =  (J, F) = flattenRing I

F45E9 =  K = GF(5^3)

F45E10 =  flattenRing K

F45E11 =  L = GF(7, 5, Variable => z);

F45E12 =  flattenRing L

F45E13 =  flattenRing(R, Result => 1)

F45E14 =  flattenRing(R, Result => 2)

F45E15 =  flattenRing(R, Result => 3)

F45E16 =  flattenRing(R, Result => (Nothing, RingMap))

F45E17 =  flattenRing(R, Result => (Ring, Nothing, RingMap))

F45E18 =  flattenRing(R, Result => (Nothing, ))

F45E19 =  flattenRing(R, Result => ( , Nothing, ) )

F45E20 =  flattenRing(I, Result => 1)

F45E21 =  flattenRing(I, Result => 3)

F45E22 =  flattenRing(R, Result => ( , Nothing, ) )

F45E23 =  flattenRing(I, Result => (Ring, Nothing, RingMap))

F45E24 =  flattenRing(I, Result => (Ring, RingMap))

F45E25 =  flattenRing(I, Result => Ideal)

F45E26 =  K = frac(ZZ[a])

F45E27 =  B = K[x,y,z]/(a*x^2-y^2-z^2, y^3, z^3)

F45E28 =  (D, F) = flattenRing B

F45E29 =  describe D

F45E30 =  A = QQ[a]/(a^2-3);

F45E31 =  L = toField A

F45E32 =  B = L[x,y,z]/(a*x^2-y^2-z^2, y^3, z^3)

F45E33 =  (D, F) = flattenRing(B[s,t])

F45E34 =  describe D

F45E35 =  (D, F) = flattenRing(B[s,t], CoefficientRing => QQ)

F45E36 =  describe D

F45E37 =  use L

F45E38 =  C1 = L[s,t];

F45E39 =  C2 = C1/(a*s-t^2);

F45E40 =  C3 = C2[p_0..p_4]/(a*s*p_0)[q]/(q^2-a*p_1);

F45E41 =  (D, F) = flattenRing(C3, CoefficientRing=>C2)

F45E42 =  describe D

F45E43 =  (D, F) = flattenRing(C3, CoefficientRing=>QQ)

F45E44 =  describe D

F45E45 =  flattenRing(B[s,t]) === flattenRing(B[s,t])

F46E0 =  R = ZZ/101[x,y,z,w];

F46E1 =  gb ideal(x*y-z^2,y^2-w^2)

F46E2 =  gens oo

F46E3 =  options gb

F46E4 =  gb(ideal(x*y-z^2,y^2-w^2), DegreeLimit => 2)

F46E5 =  gens oo

F46E6 =  (options gb).Syzygies

F47E0 =  R = ZZ[x..z]

F47E1 =  C = chainComplex R

F47E2 =  C.dd

F47E3 =  C.dd_1 = vars R

F47E4 =  C.dd_3 = transpose vars R

F47E5 =  C.dd

F47E6 =  C

F47E7 =  HH C

F47E8 =  prune HH C

F48E0 =  time 3^30

F49E0 =  R = QQ[a..d]

F49E1 =  S = R/(a^2-b-1);

F49E2 =  promote(2/3,S)

F49E3 =  F = map(R,QQ);  F(2/3)

F49E4 =  promote(f,S)

F49E5 =  G = map(S,R); G(f)

F49E6 =  promote(101.,QQ)

F49E7 =  promote(.101,QQ)

F49E8 =  factor denominator oo

F49E9 =  ooo + 0.

F49E10 =  oo === .101

F49E11 =  13_R

F49E12 =  use R;

F49E13 =  I = ideal(a^2,a^3,a^4)

F49E14 =  promote(I,S)

F49E15 =  m = image matrix{{a^2,a^3,a^4}}

F49E16 =  promote(gens m,S)

F49E17 =  G m

F49E18 =  m ** S

F50E0 =  Core.Dictionary # "sin"

F50E1 =  Core.Dictionary #? "sin"

F51E0 =  ascii "abcdef"

F51E1 =  ascii oo

F51E2 =  first ascii "A"

F52E0 =  A = QQ[a..d,MonomialSize=>8]

F52E1 =  B = QQ[x,y,z,w,MonomialSize=>16,MonomialOrder=>Lex]	  

F52E2 =  C = QQ[a,b,c,x,y,z,w,MonomialOrder=>{MonomialSize=>8,3,MonomialSize=>32,Lex=>4}];

F52E3 =  D = QQ[a..d,MonomialOrder=>Lex];

F52E4 =  a^1000000000

F52E5 =  E = QQ[a..d,MonomialSize=>16,MonomialOrder=>Lex];

F52E6 =  F = QQ[a..d,MonomialSize=>8,MonomialOrder=>Lex];

F53E0 =  R = ZZ/1277[x,y];

F53E1 =  I = ideal(x^3 - 2*x*y, x^2*y - 2*y^2 + x);

F53E2 =  g = gb I

F53E3 =  gens g

F53E4 =  R = ZZ/1277[x,y,z,w];

F53E5 =  I = ideal(x*y-z^2,y^2-w^2);

F53E6 =  g2 = gb(I,DegreeLimit => 2)

F53E7 =  gens g2

F53E8 =  g3 = gb(I,DegreeLimit => 3);

F53E9 =  gens g3

F53E10 =  g2

F53E11 =  g2 === g3

F53E12 =  I = ideal(x*y-z^2,y^2-w^2)

F53E13 =  gb(I,PairLimit => 2)

F53E14 =  gb(I,PairLimit => 3)

F53E15 =  I = ideal(x*y-z^2,y^2-w^2)

F53E16 =  gb(I,BasisElementLimit => 2)

F53E17 =  gb(I,BasisElementLimit => 3)

F53E18 =  R = ZZ/1277[t,F,G,MonomialOrder => Eliminate 1];

F53E19 =  I = ideal(F - (t^3 + t^2 + 1), G - (t^4 - t))

F53E20 =  transpose gens gb (I, SubringLimit => 1)

F53E21 =  gbTrace = 3

F53E22 =  I = ideal(x*y-z^2,y^2-w^2)

F53E23 =  gb I

F53E24 =  gbTrace = 0

F53E25 =  R = ZZ/1277[x..z];

F53E26 =  I = ideal(x*y+y*z, y^2, x^2);

F53E27 =  g = gb(I, StopBeforeComputation => true)

F53E28 =  gens g

F53E29 =  R = ZZ/1277[a..e];

F53E30 =  T = (degreesRing R)_0

F53E31 =  f = random(R^1,R^{-3,-3,-5,-6});

F53E32 =  time betti gb f

F53E33 =  remove(f.cache,{false,0})

F53E34 =  poincare cokernel f = (1-T^3)*(1-T^3)*(1-T^5)*(1-T^6) -- cache poincare

F53E35 =  time betti gb f

F54E0 =  R = QQ[a..h];

F54E1 =  I = minors(2,genericMatrix(R,a,2,4))

F54E2 =  inI = ideal leadTerm I

F54E3 =  independentSets I

F54E4 =  independentSets inI

F54E5 =  I = ideal"abc,bcd,cde,adf,cgh,b3f,a3g"

F54E6 =  minimalPrimes I

F54E7 =  independentSets I

F54E8 =  L = independentSets(I, Limit=>1)

F54E9 =  support L_0

F54E10 =  rsort toList(set gens R - set support L_0)

F55E0 =  QQ[a,b,c,d];

F55E1 =  I = ideal(b*c, c^2 - b*d, -a*c+b^2)

F55E2 =  monomialSubideal I

F56E0 =  {a,1} .. {c,3}

F56E1 =  {1} .. {4}

F57E0 =  R = QQ[a..d, MonomialOrder=> GroupLex=>2];

F57E1 =  a^-1

F57E2 =  try c^(-1) else "failed"

F58E0 =  a = tally{2,2,2,2,2,3,3,3,5,5}

F58E1 =  product a

F59E0 =  src = temporaryFileName()

F59E1 =  dst = temporaryFileName()

F59E2 =  src << "hi there" << close

F59E3 =  moveFile(src,dst,Verbose=>true)

F59E4 =  get dst

F59E5 =  bak = moveFile(dst,Verbose=>true)

F59E6 =  removeFile bak

F60E0 =  if 5 > 4 then 8 else 7

F61E0 =  R = QQ[a..d];

F61E1 =  leadTerm (3*b*c^2-d^3-1)

F61E2 =  S = QQ[a..d, MonomialOrder => Lex]

F61E3 =  leadTerm (3*b*c^2-d^3-1)

F61E4 =  R = ZZ[a..d][x,y,z];

F61E5 =  leadTerm((a+b)*y^2 + (b+c)*x*z)

F62E0 =  isCommutative(QQ[x,y])

F62E1 =  isCommutative(QQ[x,y, SkewCommutative => true])

F62E2 =  isCommutative(QQ[x,dx, WeylAlgebra => {x => dx}])

F63E0 =  same {1, 1, 1, 1}

F63E1 =  same {1, 2, 1, 1}

F63E2 =  R = QQ[x,y,z];

F63E3 =  L = {gcd{x,y}, x/x, 1}

F63E4 =  same L

F63E5 =  apply(L, class)

F63E6 =  uniform L

F64E0 =  assert(0 == run (commandLine#0 | " --help"));

F65E0 =  M = matrix{{1,2,3},{2,3,4},{3,4,6}}

F65E1 =  M-1, M-2

F65E2 =  2-interval(1,3)

F65E3 =  interval(1,3)-interval(-1,2)

F65E4 =  interval(-1,1)-interval(-1,1)

F66E0 =  {1,2,3,4} / 3

F67E0 =  R = ZZ/101[x,y,z];

F67E1 =  exponents (f = x^2 - 7 + x*y*z^11 + y)

F67E2 =  leadMonomial f

F67E3 =  exponents leadMonomial f

F68E0 =  R = ZZ/7[w,x,y,z];

F68E1 =  f = vars R

F68E2 =  ideal f

F68E3 =  g = matrix{{x^2-w*y, x*y-w*z, x*z-y^2},{y^2-x*z,x^2*y-z^2,x^3-y*z}}

F68E4 =  ideal g

F69E0 =  S = ZZ/10007[x, y, z];

F69E1 =  R = ZZ/10007[t];

F69E2 =  f = map(R,S,{t^3,t^4,t^5})

F69E3 =  source f

F70E0 =  findSynonyms symbol res

F70E1 =  symbol res === symbol resolution

F70E2 =  res === resolution

F70E3 =  res

F71E0 =  R = ZZ/11[x]/x^9

F71E1 =  exp x

F72E0 =  coefficientRing(ZZ/101[a][b])

F72E1 =  ultimate(coefficientRing,ZZ/101[a][b])

F73E0 =  R = QQ[w,x,y,z];

F73E1 =  X = Spec(R/(y^2-x*z,x^2*y-z^2,x^3-y*z))

F73E2 =  ideal X

F73E3 =  ring X

F73E4 =  Y = Proj(R/(x^2-w*y, x*y-w*z, x*z-y^2))

F73E5 =  ideal Y

F74E0 =  R1 = ZZ/101;

F74E1 =  R2 = ZZ/101[s,t];

F74E2 =  describe R2

F74E3 =  I = ideal (s^4+t^2+1);

F74E4 =  R3 = R2/I;

F74E5 =  describe R3

F74E6 =  f = s^4+1

F74E7 =  g = s^4+t^2+1

F74E8 =  use R2;

F74E9 =  substitute(g,R2)

F74E10 =  f = s^4+1

F74E11 =  g = s^4+t^2+1

F74E12 =  substitute(f,R3)

F74E13 =  describe R3

F74E14 =  R4 = frac R3;

F74E15 =  describe R4

F74E16 =  use R2;

F74E17 =  f = s^4+1;

F74E18 =  substitute(f,R4)

F74E19 =  use R3;

F74E20 =  g = substitute(f,R3);

F74E21 =  substitute(g,R4)

F74E22 =  F = map(R4,R3)

F74E23 =  F(f)

F74E24 =  R5 = R4[u,v,w];

F74E25 =  describe R5

F74E26 =  J = ideal(u^3-v^2*w+w^3,v^2+w^2,u*v-v*w+u*w)

F74E27 =  R6 = R5/J;

F74E28 =  describe R6

F74E29 =  map(R6,R2)

F74E30 =  substitute(f,R6)

F74E31 =  use R2;

F74E32 =  f = s^4+1;

F74E33 =  F = map(R4,R2);

F74E34 =  G = map(R5,R4);

F74E35 =  H = map(R6,R5);

F74E36 =  H(G(F(f)))

F74E37 =  f1 = substitute(f,R4)

F74E38 =  f2 = substitute(f1,R5)

F74E39 =  substitute(f2,R6)

F74E40 =  substitute(f,vars R3)

F74E41 =  try substitute(f,vars R5) else "found error"

F75E0 =  R = QQ[a..f];

F75E1 =  M = genericSkewMatrix(R,a,4)

F75E2 =  pfaffians(2,M)

F75E3 =  pfaffians(4,M)

F75E4 =  S = QQ[y_0..y_14];

F75E5 =  M = genericSkewMatrix(S,y_0,6)

F75E6 =  pluecker = pfaffians(4,M);

F75E7 =  betti res pluecker

F75E8 =  secantvariety = pfaffians(6,M)

F75E9 =  R = QQ[x_0..x_4]

F75E10 =  y = {0,1,13,-13,-1}

F75E11 =  M = matrix table(5,5, (i,j)-> x_((i+j)%5)*y_((i-j)%5))

F75E12 =  I = pfaffians(4,M);

F75E13 =  betti res I

F76E0 =  parent String

F76E1 =  parent parent String

F76E2 =  parent parent parent String

F77E0 =  R = QQ[a..d];

F77E1 =  I = monomialCurveIdeal(R,{1,3,4})

F77E2 =  M = Ext^1(I,R^{-4})

F77E3 =  M^**2

F78E0 =  R = ZZ[x,y]

F78E1 =  content(4*x + 6*x^5)

F78E2 =  content(4*x + 6*x^5, x)

F78E3 =  content(4*x + 6*x^5, y)

F78E4 =  generator oo

F79E0 =  P = projectiveHilbertPolynomial 2

F79E1 =  apply(0 .. 12, i -> P i)

F80E0 =  s = GCstats()

F80E1 =  s#"heap size"

F81E0 =  A = QQ[x,y,z,MonomialOrder=>Lex];

F81E1 =  I = ideal(x^2+y+z-1, x+y^2+z-1, x+y+z^2-1);

F81E2 =  transpose gens gb I

F82E0 =  x = new MutableHashTable from { val => 1000 }

F82E1 =  f = (t -> (print "hi there"; t.val^4))

F82E2 =  h = (stashValue VALUE) f

F82E3 =  h x

F82E4 =  h x

F82E5 =  peek x

F83E0 =  isTable {{1,2,3},{4,5,6}}

F83E1 =  isTable {{1,2,3},{4,5}}

F84E0 =  select({1,"2",3.14,4+5*ii}, ZZ)

F84E1 =  select([1,"2",3.14,4+5*ii], RR)

F85E0 =  isSubset(set{a},set{a,b,c})

F85E1 =  isSubset({a},set{a,b,c})

F85E2 =  isSubset({a,a},{a,b,c})

F86E0 =  x = hashTable {a=>b, c=>d, }

F86E1 =  x#a

F86E2 =  hashTable(plus, {(a,3),(b,4),(a,10)})

F87E0 =  minExponent

F88E0 =  R = QQ[x,y]/(x^3,y^2);

F88E1 =  N = cokernel matrix {{x^2, x*y}}

F88E2 =  H = Ext(N,N);

F88E3 =  ring H

F88E4 =  S = ring H;

F88E5 =  H

F88E6 =  isHomogeneous H

F88E7 =  rank source basis( { -2,-3 }, H)

F88E8 =  rank source basis( { -3 }, Ext^2(N,N) )

F88E9 =  rank source basis( { -4,-5 }, H)

F88E10 =  rank source basis( { -5 }, Ext^4(N,N) )

F88E11 =  hilbertSeries H

F88E12 =  hilbertSeries(H,Order=>11)

F89E0 =  R = QQ[x,y,z];

F89E1 =  I = ideal(x*y,x*z,y*z)

F89E2 =  M = I/I^2

F89E3 =  f = matrix{{x,y}}

F89E4 =  g = matrix{{x^2,x*y,y^2,z^4}}

F89E5 =  M = subquotient(f,g)

F89E6 =  N = (image f)/(image g)

F89E7 =  N1 = (image f + image g)/(image g)

F89E8 =  M === N

F89E9 =  generators M

F89E10 =  relations M

F89E11 =  N2 = R*M_0 + I*M

F89E12 =  M/N2

F89E13 =  prune(M/N2)

F89E14 =  ambient M

F89E15 =  ambient M === target relations M

F89E16 =  ambient M === target generators M

F89E17 =  super M

F89E18 =  super M === cokernel relations M

F89E19 =  M + M

F89E20 =  trim (M+M)

F89E21 =  minimalPresentation M

F89E22 =  prune M

F90E0 =  fn = temporaryFileName()

F90E1 =  fn << "f = x -> x+1\n" << close

F90E2 =  autoload(f,fn)

F90E3 =  code f

F90E4 =  f 4

F90E5 =  removeFile fn

F91E0 =  R = QQ[a..d,MonomialOrder=>GLex]

F91E1 =  a^3*b+a^4+b^100

F92E0 =  sin 1.2

F92E1 =  sin(1.2)

F92E2 =  sin(1.0+0.2)

F92E3 =  print(10 + 1)^2

F92E4 =  append

F92E5 =  append({a,b,c},d)

F92E6 =  join

F92E7 =  join({a,b},{c,d},{e,f},{g,h,i})

F92E8 =  ap = append;

F92E9 =  ap({a,b,c},d)

F93E0 =  R = ZZ/101[a .. o];

F93E1 =  f = genericMatrix(R, a, 3, 5)

F93E2 =  submatrix(f, {1..3,0})

F94E0 =  src = temporaryFileName() | "/"

F94E1 =  dst = temporaryFileName() | "/"

F94E2 =  makeDirectory (src|"a/")

F94E3 =  makeDirectory (src|"b/")

F94E4 =  makeDirectory (src|"b/c/")

F94E5 =  src|"a/f" << "hi there" << close

F94E6 =  src|"a/g" << "hi there" << close

F94E7 =  src|"b/c/g" << "ho there" << close

F94E8 =  stack findFiles src

F94E9 =  copyDirectory(src,dst,Verbose=>true)

F94E10 =  copyDirectory(src,dst,Verbose=>true,UpdateOnly => true)

F94E11 =  stack findFiles dst

F94E12 =  get (dst|"b/c/g")

F94E13 =  rm = d -> if isDirectory d then removeDirectory d else removeFile d

F94E14 =  scan(reverse findFiles src, rm)

F94E15 =  scan(reverse findFiles dst, rm)

F95E0 =  s = utf8 {119, 111, 51, 32, 25105}

F95E1 =  utf8 s

F95E2 =  try utf8check "你好" else "invalid"

F95E3 =  try utf8check "\200\200" else "invalid"

F96E0 =  21672378126371263123123

F96E1 =  3748568762746238746278/5876584978947

F96E2 =  6/3

F96E3 =  7//3

F96E4 =  1.372489274987

F96E5 =  1.3454353 * 10^20

F96E6 =  sqrt 4.5

F96E7 =  toRR_200 4.5

F96E8 =  sqrt oo

F96E9 =  1/(1+ii)

F97E0 =  printerr "Hello, world!"

F97E1 =  printerr("foo" || "bar")

F97E2 =  printerr("foo", "bar")

F98E0 =  QQ[x,y, Weights => {-1,1}, Global => false]

F98E1 =  x<1

F98E2 =  y<1

F99E0 =  20!

F99E1 =  instances ZZ

F100E0 =  R = ZZ/101[a..d];

F100E1 =  C = resolution cokernel vars R;

F100E2 =  keys C

F100E3 =  complete C;

F100E4 =  keys C

F101E0 =  code Thing#{Standard,Print}

F102E0 =  new Type of BasicList from Function := (A,B,f) -> hashTable { net => f, html => f }; 

F102E1 =  f = s -> "--list of type X--"

F102E2 =  X = new Type of List from f

F102E3 =  class X

F102E4 =  parent X

F102E5 =  peek X

F102E6 =  x = new X from {1,3,11,12}

F102E7 =  class x

F102E8 =  parent x

F102E9 =  peek x

F102E10 =  new Type of BasicList := (type,array) -> (

      		    stderr << "--new " << type << " of "

      			   << array << " being made" << endl;

      		    new MutableHashTable)

F102E11 =  M = new Type of BasicList

F102E12 =  m = new M from {3,4,5}

F102E13 =  class m

F102E14 =  m#1

F102E15 =  - M := reverse

F102E16 =  - m

F102E17 =  new M from ZZ := (M',i) -> 0 .. i

F102E18 =  n = new M from 13

F102E19 =  - n

F102E20 =  new M := (M') -> {"a","b","c"}

F102E21 =  new M

F103E0 =  R = ZZ[a..d];

F103E1 =  F = R^3

F103E2 =  G = coker vars R

F103E3 =  v = (a-37)*F_1

F103E4 =  v ** G_0

F104E0 =  R = ZZ/101[x,y,z]

F104E1 =  m = image vars R

F104E2 =  m2 = image symmetricPower(2,vars R)

F104E3 =  M = R^1/m2

F104E4 =  N = R^1/m

F104E5 =  C = cone extend(resolution N,resolution M,id_(R^1))

F104E6 =  prune HH_0 C

F104E7 =  prune HH_1 C

F104E8 =  prune (m/m2)

F105E0 =  R = GF(25,Variable=>a)[x,y,z];

F105E1 =  f = ((a+1)*x+a*y+a^2*z)^2

F105E2 =  coefficient(y^2,f)

F105E3 =  S = R[r,s,t];

F105E4 =  coefficient(r,a*x*(r+a*s))

F106E0 =  (n,m) = (2,3);

F106E1 =  A1 = QQ[x_1..x_n,y_1..y_m,MonomialOrder=>{n, RevLex=>m},Global=>false];

F106E2 =  f = x_1*x_2^2 + 1 + y_1^10 + x_1*y_2^5 + y_3

F106E3 =  1_A1 > y_1^10

F106E4 =  A2 = QQ[x_1..x_n,y_1..y_m,MonomialOrder=>{RevLex=>n, m},Global=>false];

F106E5 =  substitute(f,A2)

F106E6 =  x_1*y_2^5 < 1_A2

F106E7 =  A3 = QQ[x_1..x_n,y_1..y_m,MonomialOrder=>{n, RevLex=>2, m-2},Global=>false];

F106E8 =  substitute(f,A3)

F107E0 =  net "line 1\nline 2\nline 3\n"

F107E1 =  peek oo

F107E2 =  net ""

F107E3 =  peek oo

F107E4 =  net "\n"

F107E5 =  peek oo

F107E6 =  net "\n\n\ta"

F107E7 =  peek oo

F108E0 =  X = new WrapperType of BasicList

F108E1 =  X {a,b,c}

F108E2 =  X a

F109E0 =  x = tally {a,b,b,c,c,c,d,d,d}

F109E1 =  y = tally {a,a,a,b,b,c,d}

F109E2 =  x' = new VirtualTally from x

F109E3 =  y' = new VirtualTally from y

F109E4 =  z' = y' - x'

F109E5 =  z' + x'

F109E6 =  z' + y'

F110E0 =  2+2

F110E1 =  3/5 + 7/11

F110E2 =  1*2*3*4

F110E3 =  2^200

F110E4 =  40!

F110E5 =  100!

F110E6 =  1

F110E7 =  4*5;

F110E8 =  oo

F110E9 =  o5 + 1

F110E10 =  "hi there"

F110E11 =  s = "hi there"

F110E12 =  s | " - " | s

F110E13 =  s || " - " || s

F110E14 =  {1, 2, s}

F110E15 =  10*{1,2,3} + {1,1,1}

F110E16 =  f = i -> i^3

F110E17 =  f 5

F110E18 =  g = (x,y) -> x * y

F110E19 =  g(6,9)

F110E20 =  apply({1,2,3,4}, i -> i^2)

F110E21 =  apply({1,2,3,4}, f)

F110E22 =  apply(1 .. 4, f)

F110E23 =  apply(5, f)

F110E24 =  scan(5, i -> print (i, i^3))

F110E25 =  j=1

F110E26 =  R = ZZ/5[x,y,z];

F110E27 =  (x+y)^5

F110E28 =  R

F110E29 =  describe R

F110E30 =  F = R^3

F110E31 =  F_1

F110E32 =  F_{1,2}

F110E33 =  F_{2,1,1}

F110E34 =  f = matrix {{x,y,z}}

F110E35 =  image f

F110E36 =  ideal (x,y,z)

F110E37 =  kernel f

F110E38 =  generators oo

F110E39 =  poincare kernel f

F110E40 =  rank kernel f

F110E41 =  presentation kernel f

F110E42 =  cokernel f

F110E43 =  N = kernel f ++ cokernel f

F110E44 =  generators N

F110E45 =  relations N

F110E46 =  prune N

F110E47 =  C = resolution cokernel f

F110E48 =  C.dd

F110E49 =  C.dd^2 == 0

F110E50 =  betti C

F110E51 =  R = ZZ/101[a .. r];

F110E52 =  g = genericMatrix(R,a,3,6)

F110E53 =  M = cokernel g

F110E54 =  time C = resolution M

F110E55 =  betti C

F110E56 =  S = ZZ/101[t_1 .. t_9, u_1 .. u_9];

F110E57 =  m = genericMatrix(S, t_1, 3, 3)

F110E58 =  n = genericMatrix(S, u_1, 3, 3)

F110E59 =  m*n

F110E60 =  j = flatten(m*n - n*m)

F110E61 =  gb j

F110E62 =  generators gb j;

F110E63 =  betti gb j

F111E0 =  sech(pi/3)

F112E0 =  R = QQ[a..d]

F112E1 =  R^{-1}

F112E2 =  R^{-1,2:-2,-3}

F112E3 =  R = QQ[x,y,z,Degrees=>{{1,0},{1,-1},{1,-2}}]

F112E4 =  R^{{1,2}}

F113E0 =  x = new HashTable from { x => 1, y => 2, z => 3 }

F113E1 =  select(x,odd)

F114E0 =  loadPackage "FirstPackage"

F114E1 =  firstFunction

F114E2 =  dismiss FirstPackage

F114E3 =  firstFunction	

F114E4 =  use FirstPackage

F114E5 =  firstFunction

F115E0 =  F = directSum(a=>ZZ^1, b=>ZZ^2, c=>ZZ^3)

F115E1 =  F_[b]

F115E2 =  F^[c]

F115E3 =  F = (a => ZZ^1) ++ (b => ZZ^2)

F115E4 =  F_[b]

F116E0 =  Qu = new Type of List

F116E1 =  w = new Qu from {1,-2,0,4}

F116E2 =  expression Qu := z -> (

     	       expression z#0 +

     	       expression z#1 * expression "I" +

     	       expression z#2 * expression "J" +

     	       expression z#3 * expression "K");

F116E3 =  net Qu := z -> net expression z;

F116E4 =  toString Qu := z -> toString expression z;

F116E5 =  tex Qu := z -> tex expression z;

F116E6 =  html Qu := z -> html expression z;

F116E7 =  w

F116E8 =  toString w

F116E9 =  tex w

F116E10 =  html w

F116E11 =  I = new Qu from {0,1,0,0}

F116E12 =  J = new Qu from {0,0,1,0}

F116E13 =  K = new Qu from {0,0,0,1}

F116E14 =  2*I + 5*J

F116E15 =  peek oo

F117E0 =  R = ZZ/10007[a,b];

F117E1 =  f = (2*a+3)^4 + 5

F117E2 =  g = (2*a+b+1)^3

F117E3 =  size f, size g

F117E4 =  degree f

F117E5 =  degree g

F117E6 =  terms g

F117E7 =  select(terms g, i -> degree i == {2})

F117E8 =  sum oo

F117E9 =  part(0,g)

F117E10 =  part(1,g)

F117E11 =  part(2,g)

F117E12 =  part(3,g)

F117E13 =  toString f

F117E14 =  toString g

F117E15 =  quot = f//g

F117E16 =  rem = f%g

F117E17 =  f == quot * g + rem

F117E18 =  homogenize(f,b)

F117E19 =  ring f

F117E20 =  ring f === ring g

F117E21 =  part(1,f)

F117E22 =  f_a

F117E23 =  g_(a*b)

F117E24 =  leadTerm g

F117E25 =  leadCoefficient g

F117E26 =  leadMonomial g

F117E27 =  exponents leadMonomial g

F117E28 =  exponents leadTerm g

F117E29 =  coefficients f

F117E30 =  coefficients g

F117E31 =  exponents f

F117E32 =  exponents g

F117E33 =  listForm f

F117E34 =  S = listForm g

F117E35 =  S / print;

F117E36 =  S = standardForm f

F117E37 =  standardForm g

F117E38 =  S#(new HashTable from {0 => 2})

F117E39 =  f < g

F117E40 =  sort {b^2-1,a*b,a+1,a,b}

F117E41 =  f ? g

F118E0 =  findHeft({{-1,0}, {2,1}}, DegreeRank => 2)

F118E1 =  findHeft({}, DegreeRank => 0)

F119E0 =  unique {3,2,1,3,2,4,a,3,2,3,-2,1,2,4}

F119E1 =  toList set {3,2,1,3,2,4,a,3,2,3,-2,1,2,4}

F120E0 =  S = ZZ/101[x, y]

F120E1 =  I = ideal"x2, y2"

F120E2 =  random(2, I)

F120E3 =  random({2}, I)

F120E4 =  random({2, 3}, I)

F120E5 =  random({{2}, {3}}, I)

F120E6 =  R = ZZ/101[x, y, z, Degrees => {{1,0}, {-1,1}, {0,1}}]

F120E7 =  J = ideal"x2, y2, z2"

F120E8 =  random({2, 2}, J)

F120E9 =  random({{2, 2}}, J)

F120E10 =  random(toList(3:{1, 1}), J)

F121E0 =  R = QQ[a..d];

F121E1 =  id_R

F121E2 =  id_(R^3)

F121E3 =  C = res coker vars R

F121E4 =  id_C

F122E0 =  gbTrace = 3

F122E1 =  R = ZZ[x,y,z];

F122E2 =  f = matrix{{x^2-3, y^3-1, z^4-2}};

F122E3 =  g = forceGB(f, ChangeMatrix=>id_(source f));

F122E4 =  x^2*y^3 // g

F123E0 =  R = QQ[a..d];

F123E1 =  I = monomialCurveIdeal(R, {1,3,4});

F123E2 =  V = Proj(R/I)

F123E3 =  h = hilbertPolynomial V

F123E4 =  hilbertPolynomial(V, Projective=>false)

F123E5 =  apply(5, k-> h(k))

F123E6 =  apply(5, k-> hilbertFunction(k,ring V))

F124E0 =  value "2 + 2"

F124E1 =  value "a := 33

F124E2 =  a

F124E3 =  debuggingMode = stopIfError = false;

F124E4 =  value "1/0"

F124E5 =  debuggingMode = true;

F124E6 =  value "1/0"

F125E0 =  A = QQ[x,y,z];

F125E1 =  M = cokernel matrix(A, {{1,2,3},{4,5,6},{7,8,9}})

F125E2 =  N = cokernel matrix{{x,y},{z,0}}

F125E3 =  H = Hom(M,N)

F125E4 =  f = homomorphism H_{0}

F125E5 =  target f === N

F125E6 =  source f === M

F125E7 =  matrix f

F126E0 =  R = QQ[x_0..x_3]

F126E1 =  C = Proj(R/monomialCurveIdeal(R, {1,3,4}));

F126E2 =  P = hilbertPolynomial C

F126E3 =  euler P

F127E0 =  currentDirectory()

F128E0 =  acoth .4

F128E1 =  acoth 4.

F129E0 =  R = ZZ[a..d];

F129E1 =  a+b^100+c*d

F129E2 =  R = ZZ[a..d, MonomialOrder=>Lex];

F129E3 =  a+b^100+c*d

F129E4 =  R = ZZ[a..d, MonomialOrder => Weights => {201,2}];

F129E5 =  a+b^100+c*d

F129E6 =  R = ZZ[a..d, MonomialOrder=>{Weights=>4:1,Lex}];

F129E7 =  a+b^100+c*d

F129E8 =  R = ZZ[a..f, MonomialOrder=>Eliminate 2];

F129E9 =  a+b^100+c*d

F129E10 =  R = ZZ[a..f, MonomialOrder=>Weights=>2:1];

F129E11 =  a+b^100+c*d

F129E12 =  R = ZZ[a..f, MonomialOrder=>{2,4}];

F129E13 =  a^2*(c+d) + b*(c^100+d^100)*(c + e + f)

F129E14 =  R = ZZ[a..f, MonomialOrder=>{Weights=>2:1,Lex}]

F129E15 =  a^2*(c+d) + b*(c^100+d^100)*(c + e + f)

F129E16 =  R = ZZ[a..f, MonomialOrder => GroupLex => 3];

F129E17 =  a^-2*(c+d) + b*(c^100+d^100)*(c + e + f)

F129E18 =  R = ZZ[a..f, MonomialOrder=>RevLex, Global=>false];

F129E19 =  a^2*(c+d) + b*(c^100+d^100)*(c + e + f)

F130E0 =  R = ZZ/101[a..c];

F130E1 =  I = image vars R

F130E2 =  J = image symmetricPower (2,vars R)

F130E3 =  g = extend( resolution (R^1/I), resolution (R^1/J), id_(R^1))

F130E4 =  g_1

F130E5 =  g_2

F131E0 =  S = QQ[x,y,z,w];

F131E1 =  I = monomialCurveIdeal(S, {1,2,3})

F131E2 =  t = betti res I

F131E3 =  peek oo

F131E4 =  t#(1, {2}, 2)

F131E5 =  R = QQ[a,b,c, Degrees => {-1,-2,-3}];

F131E6 =  heft R

F131E7 =  betti koszul vars R

F131E8 =  betti(oo, Weights => {1})

F131E9 =  R = QQ[a,b,c,d, Degrees => {{1,0},{2,1},{0,1},{-2,1}}];

F131E10 =  heft R

F131E11 =  b = betti res coker vars R

F131E12 =  betti(b, Weights => {1,0})

F131E13 =  betti(b, Weights => {0,1})

F131E14 =  multigraded b

F131E15 =  S = ZZ/10007[x,y];

F131E16 =  G = gb ideal(x^3+y^3, x*y^4);

F131E17 =  gens G

F131E18 =  betti G

F131E19 =  S = ZZ/10007[x,y];

F131E20 =  betti matrix {{x^3, x*y^2}, {y*x, y^2}}

F131E21 =  S = ZZ/10007[x,y];

F131E22 =  betti coker matrix{{x^3, x*y^2}, {y*x^2, y^3}}

F131E23 =  betti coker map(S^{0,-1}, , matrix{{x^2, y}, {y^3, x^2}})

F131E24 =  S = ZZ/10007[x,y];

F131E25 =  I = ideal(x,x^2,y^3);

F131E26 =  betti I

F131E27 =  betti comodule I

F131E28 =  R = ZZ/101[a..h]

F131E29 =  p = genericMatrix(R,a,2,4)

F131E30 =  q = generators gb p

F131E31 =  C = resolution cokernel leadTerm q

F131E32 =  betti C

F132E0 =  R = ZZ/11

F132E1 =  6_R + 7_R

F132E2 =  S = QQ[x,y,z]/(x^2-y, y^3-z)

F132E3 =  {1,x,x^2,x^3,x^4,x^5,x^6,x^7,x^8}

F132E4 =  T = ZZ/101[r,s,t]

F132E5 =  T/(r^3+s^3+t^3)

F132E6 =  r^3+s^3+t^3

F132E7 =  U = ooo

F132E8 =  r^3+s^3+t^3

F132E9 =  lift(U_"r",T)

F132E10 =  substitute(T_"r",U)

F132E11 =  random(2,S)

F132E12 =  isQuotientRing ZZ

F132E13 =  isQuotientRing S

F132E14 =  ambient S

F132E15 =  coefficientRing S

F132E16 =  isHomogeneous S

F132E17 =  isHomogeneous U

F132E18 =  char (ZZ/11)

F132E19 =  char S

F132E20 =  char U

F132E21 =  presentation S

F132E22 =  R = ZZ/101[x,y,z]/(x-y,y-z,z-x)

F132E23 =  trim R

F133E0 =  R = ZZ/101[x_0..x_4];

F133E1 =  V = Proj(R/(ideal random(R^1, R^{-2,-3})));

F133E2 =  genera V

F134E0 =  F = GF(81,Variable=>a)

F134E1 =  a^80

F134E2 =  a^40

F134E3 =  ambient F

F134E4 =  a^4 + a - 1

F134E5 =  lift(a^20, ambient F)

F134E6 =  apply({20,40,80}, i -> lift(a^i, ambient F))

F134E7 =  R = F[x,y,z]

F134E8 =  f = random(2,R)

F134E9 =  f = (leadCoefficient f)^(-1) * f

F134E10 =  ZZ/101

F134E11 =  k = GF 81

F134E12 =  k_0

F134E13 =  ambient k

F134E14 =  ideal oo

F134E15 =  oo_0

F134E16 =  F = GF(16, Variable => b)

F134E17 =  b^20 + 1

F134E18 =  random F

F134E19 =  R = F[x,y,z]

F134E20 =  random(2,R)

F134E21 =  GF (ZZ/2[T]/(T^9+T+1), Variable => T) 

F134E22 =  A = ZZ/2[T]/(T^9+T+1)

F134E23 =  k = GF (A, PrimitiveElement => T^3+1)

F134E24 =  T

F134E25 =  A_0

F134E26 =  substitute(A_0,k)

F134E27 =  lift(k_0, ring T)

F134E28 =  lift(k_0, ambient ring T)

F135E0 =  fn = temporaryFileName()

F135E1 =  rootURI | fn

F136E0 =  A = QQ[u,v,x,y,z];

F136E1 =  I = ideal "x-uv,y-uv2,z-u2"

F136E2 =  eliminate(I,{u,v})

F136E3 =  g = map(QQ[u,v],QQ[x,y,z],{x => u*v, y => u*v^2, z => u^2})

F136E4 =  coimage g

F137E0 =  RR.GlobalAssignHook = (sym,val) -> << "--about to assign " << val << " to " << sym << endl;

F137E1 =  a = 4.5

F138E0 =  (3

i: 4

i: 5)


F138E1 =  (3

i: 4

i: 5

i: )


F139E0 =  R = ZZ/101[x_0..x_4];

F139E1 =  M = matrix{{x_0,x_1,x_2,x_3},{x_1,x_2,x_3,x_4}}

F139E2 =  V = Proj(R/minors(2,M));

F139E3 =  degree V

F139E4 =  dim V

F139E5 =  dim minors(2,M)

F140E0 =  match("2+2", "2+2")

F140E1 =  regexQuote "2+2"

F140E2 =  match(oo, "2+2")

F141E0 =  loadedPackages

F142E0 =  R = ZZ/101[x,y]

F142E1 =  C = chainComplex{matrix{{x,y}},matrix{{x*y},{-x^2}}}

F142E2 =  C.dd^2 == 0

F142E3 =  HH C

F143E0 =  run "uname -a"

F143E1 =  "!grep a" << " ba \n bc \n ad \n ef \n" << close

F143E2 =  peek get "!uname -a"

F143E3 =  f = openInOut "!egrep '^in'"

F143E4 =  scan(keys Core.Dictionary, key -> f << key << endl)

F143E5 =  f << closeOut

F143E6 =  get f

F143E7 =  f = openIn "!sleep 5; echo -n the answer is 4"

F143E8 =  isReady f

F143E9 =  while not isReady f do (sleep 1; << "." << flush)

F143E10 =  read f

F143E11 =  isReady f

F143E12 =  atEndOfFile f

F143E13 =  close f

F144E0 =  a .. e

F144E1 =  v = NumberedVerticalList oo

F144E2 =  v_1

F144E3 =  length v

F144E4 =  toList v

F145E0 =  x = new MutableHashTable;

F145E1 =  x.k = 444

F145E2 =  x.k

F145E3 =  peek x

F146E0 =  vars (0 .. 9,40,100,-100)

F146E1 =  ZZ[vars(0 .. 10)]

F147E0 =  R = QQ[t][a..d];

F147E1 =  I = ideal(a,(t+1)*c) * ideal(a^2,b^2)

F148E0 =  R = QQ[x,y,z];

F148E1 =  C = res coker vars R

F148E2 =  C.dd^2 == 0

F149E0 =  LowerBound {4}

F149E1 =  >= 4

F149E2 =  > 4

F150E0 =  A = ZZ[x,y];

F150E1 =  degreesRing A

F150E2 =  degreesMonoid A

F150E3 =  degrees oo

F150E4 =  heft A

F150E5 =  R = QQ[x,y, Degrees => {{1,-2}, {2,-1}}];

F150E6 =  degreesRing R

F150E7 =  degreesMonoid R

F150E8 =  degrees oo

F150E9 =  heft R

F150E10 =  S = QQ[x,y, Degrees => {-2,1}];

F150E11 =  degreesRing S

F150E12 =  degreesMonoid S

F150E13 =  degrees oo

F150E14 =  heft S

F150E15 =  R = QQ[x,y, Degrees => {{1,-2,0}, {2,-1,1}}];

F150E16 =  use degreesRing R

F150E17 =  hilbertSeries module ideal vars R

F150E18 =  (1+T_1+T_2^2)^3 

F151E0 =  R = QQ[a..d];

F151E1 =  I = ideal"a2b-c3,abc-d3,ac2-bd2-cd2,abcd-c4"

F151E2 =  C = res I;

F151E3 =  m = C.dd_2

F151E4 =  submatrixByDegrees(m, 3, 6)

F151E5 =  submatrixByDegrees(m, (3,3), (6,7))

F151E6 =  submatrixByDegrees(m, (4,4), (7,7))

F151E7 =  S = QQ[a..d, Degrees=>{2:{1,0},2:{0,1}}];

F151E8 =  I = ideal(a*d^4, b^3, a^2*d^2, a*b*c*d^3)

F151E9 =  C = res I

F151E10 =  m = C.dd_2

F151E11 =  degrees target m

F151E12 =  degrees source m

F151E13 =  submatrixByDegrees(C.dd_2, ({2,2},{2,4}), ({2,2},{5,4}))

F152E0 =  L = {1, 2, 3, 2, 1};

F152E1 =  #L

F152E2 =  S = new Set from L

F152E3 =  #S

F152E4 =  T = new HashTable from {a => 1, b => 2}

F152E5 =  #T

F152E6 =  s = "a perfectly adequate example of a string";

F152E7 =  #s

F153E0 =  R = QQ[x,y,z];

F153E1 =  d1 = matrix {{x,y}};

F153E2 =  d2 = map(source d1, ,{{y*z},{-x*z}});

F153E3 =  d1 * d2 == 0

F153E4 =  C = new ChainComplex

F153E5 =  C#0 = target d1

F153E6 =  C.dd#1 = d1

F153E7 =  C

F153E8 =  HH_0 C

F153E9 =  prune HH_1 C

F153E10 =  D = chainComplex(matrix{{x,y}}, matrix {{y*z},{-x*z}})

F153E11 =  degrees source D.dd_2

F154E0 =  R = ZZ[a..d]

F154E1 =  I = ideal(a,b,c,d)

F154E2 =  C = res I

F154E3 =  C_2

F154E4 =  C.dd_2

F155E0 =  R = QQ[a..f];

F155E1 =  F = matrix{{a,b,d,e},{b,c,e,f}}

F155E2 =  M = ker F

F155E3 =  coker F

F155E4 =  image F

F155E5 =  generators M

F155E6 =  relations M

F155E7 =  presentation M

F156E0 =  QQ[x,y,z];

F156E1 =  J = monomialIdeal(x^3*y^5*z, y^5*z^4, y^3*z^5, 

     	       x*y*z^5, x^2*z^5, x^4*z^3, x^4*y^2*z^2, 

     	       x^4*y^4*z)

F156E2 =  isSquareFree J

F156E3 =  radical J

F156E4 =  isSquareFree radical J

F156E5 =  needsPackage "SimplicialComplexes"

F156E6 =  R = QQ[a..d]

F156E7 =  D = simplicialComplex {a*b*c,a*b*d,a*c*d,b*c*d}

F156E8 =  I = monomialIdeal D

F156E9 =  isSquareFree I

F157E0 =  toLower "A b C d E f"

F158E0 =  A = QQ[x,y];

F158E1 =  I = ideal "x10+x9y2,y8-x2y7";

F158E2 =  transpose gens gb I

F158E3 =  A1 = QQ[x,y,MonomialOrder=>Lex];

F158E4 =  I = substitute(I,A1)

F158E5 =  transpose gens gb I

F158E6 =  B = QQ[x,y,MonomialOrder=>{Weights=>{-1,-1},2},Global=>false];

F158E7 =  I = substitute(I,B)

F158E8 =  transpose gens gb I

F158E9 =  B = QQ[x,y,MonomialOrder=>{Weights=>{-1,0},Weights=>{0,-1}},Global=>false];

F158E10 =  I = substitute(I,B)

F158E11 =  transpose gens gb I

F158E12 =  M = matrix{{1,1,1},{0,-1,-1},{0,0,-1}}

F158E13 =  mo = apply(entries M, e -> Weights => e)

F158E14 =  C = QQ[t,x,y,MonomialOrder=>mo];

F158E15 =  I = homogenize(substitute(I,C),t)

F158E16 =  transpose gens gb I

F158E17 =  substitute(transpose gens gb I, {t=>1})

F159E0 =  expression 4

F159E1 =  peek oo

F159E2 =  d = expression (-4)

F159E3 =  peek oo

F159E4 =  QQ[x];

F159E5 =  f = (x+1)^5

F159E6 =  peek f

F159E7 =  e = expression f

F159E8 =  peek e

F159E9 =  peek'_2 e

F159E10 =  peek'_11 e

F159E11 =  c = factor f

F159E12 =  peek'_2 c

F159E13 =  factor 240012

F159E14 =  value e

F159E15 =  value e == f

F159E16 =  value c

F159E17 =  d + e

F159E18 =  d + 4

F159E19 =  d / 4

F159E20 =  d / 1

F159E21 =  d == e

F160E0 =  R = QQ[x,y,z,Degrees=>{2,3,1}]/(y^2-x^3)

F160E1 =  H = Hom(ideal(x,y), R^1)

F160E2 =  f = H_{1}

F160E3 =  g = homomorphism f

F160E4 =  source g === module ideal(x,y)

F160E5 =  target g === R^1

F160E6 =  f' = homomorphism' g

F160E7 =  f === f'

F160E8 =  f - f'

F160E9 =  degree f, degree f'

F160E10 =  degrees f, degrees f'

F160E11 =  H1 = prune H

F160E12 =  homomorphism(H1.cache.pruningMap * H1_{1})

F161E0 =  v = {1,2,3,2,1}

F161E1 =  S = set v

F161E2 =  T = set(a,b,c,a,b,d)

F162E0 =  elapsedTiming sleep 1

F162E1 =  peek oo

F163E0 =  sec(pi/3)

F164E0 =  R = QQ[x,y,z]

F164E1 =  I =ideal(y^2*z-x^3)

F164E2 =  sing = singularLocus(R/I)

F164E3 =  dim sing

F164E4 =  R = ZZ/101[a,b,SkewCommutative => true]

F164E5 =  dim R

F164E6 =  R = ZZ/101[x,dx,y,dy,WeylAlgebra => {x=>dx, y=>dy}];

F164E7 =  dim R

F165E0 =  defs = new OptionTable from { a => 1, b => 2 };

F165E1 =  override(defs, (4,b=>6,5))

F166E0 =  a = set{1,100,10000}

F166E1 =  sum a

F167E0 =  x = a..t

F167E1 =  #x

F167E2 =  x_-1, x_19, x_0

F168E0 =  X = for i from 1 to 10 list random(100)

F168E1 =  max X

F168E2 =  R1 = QQ[x, y, z, MonomialOrder => Lex];

F168E3 =  max {x*y^2, x*y^2 + z^2, y^4, y*z^5}

F168E4 =  R2 = QQ[x, y, z, MonomialOrder => GRevLex];

F168E5 =  max (x*y^2, x*y^2 + z^2, y^4, y*z^5)

F168E6 =  max {{3, 1, 2}, {2, 9, 6}, {3, 7, 5}}

F168E7 =  max flatten {{3, 1, 2}, {2, 9, 6}, {3, 7, 5}}

F169E0 =  sum(10, i -> i^2)

F170E0 =  R = ZZ/101[x,y];

F170E1 =  point = ideal(x,y);

F170E2 =  line = ideal(2*x+3*y-1);

F170E3 =  V=Spec(R/intersect(point,line))

F170E4 =  dim V

F170E5 =  Z=Spec(R/(point+line))

F170E6 =  dim Z

F171E0 =  R = QQ[x,y,z]

F171E1 =  X = Proj R

F171E2 =  OO_X(*)

F171E3 =  peek oo

F171E4 =  OO_X(>=2)

F171E5 =  peek oo

F171E6 =  Ext^0(OO_X^1, OO_X^1)

F171E7 =  Ext^0(OO_X^1, OO_X^1(*))

F172E0 =  256 >> 5

F172E1 =  256. >> 555

F173E0 =  s = "I did not do that!"

F173E1 =  "." | s_(6,7) | "."

F174E0 =  imaginaryPart(3/4)

F174E1 =  imaginaryPart(1.5+2*ii)

F175E0 =  R = ZZ[x,y]

F175E1 =  f = random(R^{2:1},R^2)

F175E2 =  g = transpose (vars R ++ vars R)

F175E3 =  quotient'(f,g)

F175E4 =  f = f + map(target f, source f, id_(R^2))

F175E5 =  quotient'(f,g)

F176E0 =  R = ZZ/32003[a..e];

F176E1 =  I = ideal(random(3,R),random(3,R),random(3,R))

F176E2 =  gens gb(I,PairLimit=>7);

F176E3 =  g = gb(I,StopBeforeComputation => true);

F176E4 =  leadTerm gens g

F176E5 =  gens gb(I,StopBeforeComputation => true)

F176E6 =  leadTerm gbSnapshot(I)

F177E0 =  R = ZZ/101[a..e];

F177E1 =  M = matrix{{a^2*b-c^2, a*b^2-d^3, c^5-d},{a^2*b, b*c*d, c^5}}

F177E2 =  ideal M

F177E3 =  I = ideal(a^2*b-c^2+c*d, a*b^2-b*d^3, c^5,d+e);

F177E4 =  generators I

F178E0 =  e = 1e-11;

F178E1 =  M = random(RR^4,RR^4)

F178E2 =  M * (M + 1) + 1 - M^2 - M

F178E3 =  clean_e oo

F178E4 =  CC[x];

F178E5 =  f = product(5,j -> x - exp(2*pi*j*ii/5))

F178E6 =  clean_e f  

F179E0 =  "a" ..< "z"

F179E1 =  "aa" ..< "ce"

F179E2 =  "aaa" ..< "bcd"

F179E3 =  "佖" ..< "佥"

F180E0 =  lngamma 2.1

F180E1 =  lngamma(-1.1)

F180E2 =  lngamma(-2.1)

F180E3 =  lngamma (-2.000000000000000000000000000000001p120)

F181E0 =  matrix{{1,2,3},{4,5,6}}

F181E1 =  R = QQ[x,y,z];

F181E2 =  matrix{{x,0,2},{1,2,y}}

F182E0 =  R = QQ[z]/(z^2+1);

F182E1 =  isUnit z

F182E2 =  S = QQ[x,y]/(1-(x-1)*(y-1));

F182E3 =  isUnit (x^2 - 2*x + 1)

F182E4 =  isUnit x

F183E0 =  p_1 = a

F183E1 =  p_2 = b

F183E2 =  p

F183E3 =  peek p

F184E0 =  R = ZZ/101[a..d];

F184E1 =  m = matrix{{a,b,c,d}};

F184E2 =  f = schreyerOrder m

F184E3 =  g = syz f

F184E4 =  leadTerm g

F184E5 =  hf = map(source f, 1, {{d},{c},{b},{a}})

F184E6 =  hm = map(source m, 1, {{d},{c},{b},{a}})	  

F184E7 =  leadTerm hf

F184E8 =  leadTerm hm

F184E9 =  schreyerOrder source m

F184E10 =  schreyerOrder source f

F185E0 =  apply({1,2,3}, {100,200,300}, (i,j) -> i+j)

F185E1 =  apply([1,2,3], [100,200,300], (i,j) -> i+j)

F185E2 =  apply((1,2,3), (100,200,300), (i,j) -> i+j)

F185E3 =  apply("foo", "bar", concatenate)

F186E0 =  R = QQ[x];

F186E1 =  map(R^2,R^3,0)

F186E2 =  f = map(R^2,R^2,x)

F186E3 =  f == x *map(R^2,R^2,1)

F187E0 =  R = ZZ/101[x,y,z,u,w]/ideal(x-x^2-y,z+x*y,w^2-u^2);

F187E1 =  minimalPresentation(R)

F187E2 =  R.minimalPresentationMap

F187E3 =  R.minimalPresentationMapInv

F187E4 =  R = ZZ/101[x,y,z,u,w]/ideal(x-x^2-y,z+x*y,w^2-u^2);

F187E5 =  minimalPresentation(R, Exclude=>{1})

F188E0 =  R0 = matrix(QQ, {{1,0,3,0,5},{0,1,-2,0,2},{0,0,0,1,7}})

F188E1 =  B = matrix(QQ, {{1,2,3},{0,3,-1},{1,2,0}})

F188E2 =  A = B * R0

F188E3 =  R = reducedRowEchelonForm A

F188E4 =  assert(R == R0)

F188E5 =  LUdecomposition A

F188E6 =  A5 = sub(A, ZZ/5)

F188E7 =  reducedRowEchelonForm A5

F188E8 =  rank A5

F188E9 =  AR = sub(A, RR)

F188E10 =  LUdecomposition AR

F188E11 =  SVD AR

F188E12 =  AC = sub(A, CC)

F188E13 =  LUdecomposition AC

F188E14 =  SVD AC

F188E15 =  A9 = sub(A, GF 9)

F188E16 =  R9 = reducedRowEchelonForm A9

F188E17 =  S = frac(QQ[x])

F188E18 =  R = matrix(S, {{1,0,x,0,x^2+1},{0,1,-1/x,0,2*x},{0,0,0,1,7*x}})

F188E19 =  B = matrix(S, {{1,2*x,3},{0,3,-x},{1,2*x^2,0}})

F188E20 =  A = B * R

F188E21 =  LUdecomposition A

F188E22 =  M = mutableMatrix A

F188E23 =  rowAdd(M, 2, -1, 0)

F188E24 =  rowMult(M, 1, 1/M_(1,1))

F188E25 =  rowAdd(M, 2, -M_(2,1), 1)

F188E26 =  rowMult(M, 2, 1/M_(2,3))

F188E27 =  rowAdd(M, 0, -M_(0,1), 1)

F188E28 =  rowAdd(M, 0, -M_(0,3), 2)

F188E29 =  rowAdd(M, 1, -M_(1,3), 2)

F188E30 =  assert(R == matrix M)

F189E0 =  R = QQ[a..g]

F189E1 =  f = a^3+b^2*c+3*f^10*d-1+e-e

F189E2 =  weightRange({1,1,0,0,0,0,0},f)

F189E3 =  f = a^2*b+3*a^2*c+b*c+1

F189E4 =  sum select(terms f, t -> (weightRange({1,0},t))#0 == 2)

F189E5 =  S = R[x,y];

F189E6 =  weightRange({0,0,3,7},a*x^2+b*x*y)

F189E7 =  R = QQ[x,y];

F189E8 =  weightRange (x^3+y^2)^5

F190E0 =  eint 2

F191E0 =  any({1,2,3,4}, even)

F191E1 =  any({1,3,5,7}, even)

F191E2 =  any(20,n -> n == 15)

F191E3 =  fp = x -> any(#x, i -> x#i == i);

F191E4 =  fp {2,3,4,0,1}

F191E5 =  fp {2,4,0,3,1}

F192E0 =  R = QQ[x,y,z]/(x^3,y^3,z^3,x*y*z);

F192E1 =  C = res(coker vars R, LengthLimit=>8)

F192E2 =  rank C_7

F192E3 =  C.dd_3

F193E0 =  conjugate(1+2.5*ii)

F193E1 =  conjugate 3

F194E0 =  2^42 | 2^15 == 2^42 + 2^15

F195E0 =  nextPrime 10000

F195E1 =  nextPrime 3.5678

F195E2 =  nextPrime (3/7)

F196E0 =  notify = true

F196E1 =  needsPackage "FirstPackage"

F196E2 =  needsPackage "FirstPackage"

F197E0 =  f = x -> symbol x

F197E1 =  s = f 1

F197E2 =  t = f 2

F197E3 =  value s

F197E4 =  value t

F197E5 =  symbolBody s

F197E6 =  symbolBody t

F197E7 =  symbolBody s === symbolBody t

F197E8 =  class symbolBody s

F198E0 =  fileWritable "."

F199E0 =  R = QQ[a..d];

F199E1 =  intersect(ideal(a,b),ideal(c*d,a*b),ideal(b*d,a*c))

F200E0 =  R = ZZ/101[a,b,c];

F200E1 =  I = monomialIdeal(a^3,b^3,c^3, a^2-b^2)

F200E2 =  M = monomialIdeal vars R

F200E3 =  J = monomialIdeal 0_R

F200E4 =  R = ZZ[x,y]

F200E5 =  monomialIdeal(2*x,3*y)

F201E0 =  R = ZZ/101[x,y,z];

F201E1 =  M = R^4

F201E2 =  m = matrix{{x,y,z},{y,z,0}}

F201E3 =  target m == R^2

F201E4 =  degrees M

F201E5 =  F = R^{1,4:2,3,3:4}

F201E6 =  degrees F

F201E7 =  S = ZZ[a,b,c, Degrees=>{{1,2},{2,0},{3,3}}]

F201E8 =  N = S ^ {{-1,-1},{-4,4},{0,0}}

F201E9 =  degree N_0

F201E10 =  degree (a*b*N_1)

F202E0 =  filename = temporaryFileName () | ".dbm"

F202E1 =  x = openDatabaseOut filename

F202E2 =  x#"first" = "hi there"

F202E3 =  x#"first"

F202E4 =  x#"second" = "ho there"

F202E5 =  scanKeys(x,print)

F202E6 =  remove(x,"second")

F202E7 =  scanKeys(x,print)

F202E8 =  close x

F202E9 =  removeFile filename

F203E0 =  R = ZZ[a..c];

F203E1 =  f = map(R^3,R^{0,-1,-2,-3},(i,j) -> R_i^j)

F203E2 =  isHomogeneous f

F203E3 =  g = map(R^3,4,(i,j) -> R_i^j)

F203E4 =  degrees g

F203E5 =  isHomogeneous g

F203E6 =  h = matrix table(3,4,(i,j) -> R_i^j)

F203E7 =  degrees h

F203E8 =  isHomogeneous h

F204E0 =  R = QQ[x,y,z];

F204E1 =  diff(x,x^7 + 4*x^3*y - 3*y)

F204E2 =  diff(x^2+y^2+z^2, y^2*z^2 - x^3 - 1)

F204E3 =  diff_x x^6

F205E0 =  centerString(18,"asdf"||"qwer")

F206E0 =  R = ZZ/101[a..c];

F206E1 =  vars R ++ transpose vars R

F206E2 =  oo^[1]

F206E3 =  a++b++c

F207E0 =  R = ZZ/7[x,y];

F207E1 =  M = kernel vars R

F207E2 =  isFreeModule M

F207E3 =  isFreeModule prune M

F208E0 =  I = Grassmannian(1,6, CoefficientRing => ZZ/101);

F208E1 =  S = ring I

F208E2 =  elapsedTime C = res(I, FastNonminimal => true)

F208E3 =  elapsedTime C1 = res ideal(I_*)

F208E4 =  betti(C, Minimize => true) == betti C1

F208E5 =  betti C

F208E6 =  betti(C, Minimize => true)

F208E7 =  minimalBetti I

F208E8 =  R = ZZ/101[a..f]

F208E9 =  I = ideal"a3-ab-c2,abc-d2-1, b3-b2-b"

F208E10 =  C = res(I, FastNonminimal => true)

F208E11 =  needsPackage "PruneComplex"

F208E12 =  pruneComplex C

F208E13 =  R = ZZ/101[a..c,x_1..x_9, MonomialOrder=>{3,9}]

F208E14 =  I = ideal(a^2 - b^2 - x_1 * a*c - x_2 * b*c - x_3 * c^2,

                 a*b - x_4 * a*c - x_5 * b*c - x_6 *c^2,

                 b^2 - x_7 * a*c - x_8 * b*c - x_9 *c^2

                 )

F208E15 =  C = res(I, FastNonminimal => true, Strategy=>5)

F208E16 =  C.dd

F208E17 =  C1 = res(ideal I_*, Strategy=>5)

F208E18 =  C1.dd

F209E0 =  options Core

F210E0 =  R = ZZ/101[a,b,c];

F210E1 =  I = ideal(a^3,b^3,c^3, a^2-b^2)

F210E2 =  monomialIdeal I	  

F210E3 =  monomialSubideal I

F210E4 =  R = ZZ[x,y]

F210E5 =  monomialIdeal ideal(2*x,3*y)

F211E0 =  x = "abcde"

F211E1 =  x

F211E2 =  y

F211E3 =  y = z

F211E4 =  y

F211E5 =  z = 444

F211E6 =  z

F211E7 =  y

F211E8 =  value y

F211E9 =  y <- 555

F211E10 =  y

F211E11 =  z

F211E12 =  y = 666

F211E13 =  y

F211E14 =  z

F212E0 =  select("[[:alpha:]]+", "Dog, cat, and deer.")

F212E1 =  select("^.*$", "ABC\nDEF\r\nGHI")

F212E2 =  select("([a-zA-Z]+)

i: ", "$1", "Dog

i: cat, deer

i: ")


F212E3 =  select("([a-zA-Z]+)

i: ", "\\L$1", "Dog

i: cat, deer

i: ")


F212E4 =  s = "catfish cats dogs";

F212E5 =  select("cat(?!fish)s?", s)

F212E6 =  select("\\w+(?=s\\b)", s)

F212E7 =  s = "goldfish swordfish catfish catdog";

F212E8 =  select("\\w+(?=fish)", s)

F212E9 =  select("(?<=cat)\\w+", s)

F213E0 =  x = new HashTable from {1 => 203, 2 => 21, 3 => 5, 4 => 130}

F213E1 =  y = new HashTable from {2 => 37, 3 => 5, 4 => 56, 5 => 1}

F213E2 =  merge(x, y, max)

F213E3 =  merge(x, y, (i,j) -> (i+j)/2)

F213E4 =  merge(x, y, (i,j) -> {i,j})

F213E5 =  merge(x, y, (i,j) -> if i==j then i else continue)

F213E6 =  Free = new Type of HashTable

F213E7 =  p = new Free from { "x" => 2, "y" => 3, "z" => 5 }

F213E8 =  q = new Free from { "x" => 100, "y" => 200, "w" => 7 }

F213E9 =  Free + Free := (p,q) -> merge(p, q, plus);

F213E10 =  p+q

F213E11 =  x = new MutableHashTable from {"alice" => 53709, "bob" => 6549};

F213E12 =  y = new MutableHashTable from {"bob" => 86, "charlie" => 23};

F213E13 =  mutable merge(x, y, plus)

F214E0 =  R = QQ[a..d];

F214E1 =  C = res coker vars R

F214E2 =  S = R[x]

F214E3 =  C**S

F215E0 =  R = ZZ/32003[a..d,MonomialOrder=>Lex];

F215E1 =  m = matrix{{a*d, b^2, b^100, b^50*d^50, c^2*d}}

F215E2 =  p = sortColumns m

F215E3 =  m_p

F215E4 =  p = sortColumns(m, DegreeOrder=>null, MonomialOrder=>Descending)

F215E5 =  m_p

F215E6 =  R = ZZ/101[a..c];

F215E7 =  f = matrix{{1,a,a^2,b^2,b,c,c^2,a*b,b*c,a*c}}

F215E8 =  s = sortColumns f

F215E9 =  f_s

F215E10 =  s = sortColumns(f,DegreeOrder => Descending)

F215E11 =  f_s

F216E0 =  R = ZZ/2[x,y];

F216E1 =  f = random(R^3,R^{3:-1})

F216E2 =  exteriorPower_2 f

F216E3 =  g = map(coker matrix {{x^2},{x*y},{y^2}}, R^3, id_(R^3))

F216E4 =  g2 = exteriorPower(2,g)

F216E5 =  target g2

F217E0 =  f = gradedModuleMap( matrix "1;2", matrix "2,3" )

F217E1 =  f||f

F218E0 =  R = QQ[a,b][x]

F218E1 =  R.FlatMonoid

F219E0 =  R = QQ[a,b];

F219E1 =  HH^2 (R^{-3})

F219E2 =  HH^2 (R^{-4})

F219E3 =  R = ZZ/101[x_0..x_4];

F219E4 =  I = ideal(x_1*x_4-x_2*x_3, x_1^2*x_3+x_1*x_2*x_0-x_2^2*x_0, x_3^3+x_3*x_4*x_0-x_4^2*x_0)

F219E5 =  M = R^1/module(I)

F219E6 =  HH^1(M)

F219E7 =  HH^2(M)

F220E0 =  R = ZZ/101[a..e];

F220E1 =  codim monomialIdeal (b,c,d)

F220E2 =  codim monomialIdeal (b^3,c^2)

F221E0 =  M = matrix{{1,2,3},{2,3,4},{3,4,6}}

F221E1 =  M+1, M+2

F221E2 =  2+interval(1,3)

F221E3 =  interval(1,3)+interval(-1,2)

F221E4 =  interval(-1,1)+interval(-1,1)

F222E0 =  R = ZZ/101[x]

F222E1 =  p = map(R^1, R^1, {{x^4}})

F222E2 =  isHomogeneous p

F222E3 =  q = map(R^1, R^1, {{x^4}}, Degree => 4)

F222E4 =  isHomogeneous q

F223E0 =  ff = 20:4

F223E1 =  listUserSymbols

F223E2 =  clearOutput

F223E3 =  listUserSymbols

F223E4 =  clearAll

F223E5 =  listUserSymbols

F224E0 =  ascii "\n"

F225E0 =  product(5, i -> 2*i+1)

F226E0 =  R = ZZ[w,x,y,z];

F226E1 =  I = ideal(z*w-2*x*y, 3*w^3-z^3,w*x^2-4*y*z^2,x);

F226E2 =  I_0

F226E3 =  I_3

F226E4 =  gens I

F226E5 =  first entries gens I

F226E6 =  numgens I

F226E7 =  mingens I

F226E8 =  trim I

F226E9 =  R = QQ[a..d];

F226E10 =  I = monomialCurveIdeal(R,{1,2,3});

F226E11 =  toString I

F227E0 =  R = ZZ[x,y];

F227E1 =  S = ZZ[a,b,c];

F227E2 =  f = map(R,S,matrix {{x^2,x*y,y^2}})

F227E3 =  f(a+b+c^2)

F227E4 =  g = map(R,S,matrix {{1,2,3},{4,5,6}})

F227E5 =  g(a+b)

F227E6 =  S = ZZ[a][b,c];

F227E7 =  h = map(S,S,matrix {{b,c,2*a}})

F227E8 =  h(a^7 + b^3 + c)

F227E9 =  k = map(S,S,matrix {{c,b}})

F227E10 =  k(a^7 + b^3 + c)

F227E11 =  R = QQ[x,y,z];

F227E12 =  S = QQ[t,u];

F227E13 =  f = map(S,R,{t^2,t*u,u^2},DegreeMap => i -> 2*i)

F227E14 =  isHomogeneous f

F227E15 =  M = R^{1,2}

F227E16 =  f M

F227E17 =  f ** M

F228E0 =  f = a -> b -> c -> [a,b,c]

F228E1 =  uncurry(f, (1,2,3))

F229E0 =  factor 124744878111332355674003415153753485211381849014286981744945

F229E1 =  y = (2^15-4)/(2^15-5)

F229E2 =  x = factor y

F229E3 =  value x

F229E4 =  peek'(100,x)

F229E5 =  R = ZZ/101[u]

F229E6 =  factor (u^3-1)

F229E7 =  F = frac(ZZ/101[t])

F229E8 =  factor ((t^3-1)/(t^3+1))

F230E0 =  R = ZZ[a..e, MonomialOrder => ProductOrder {3,2}];

F231E0 =  R = QQ[x]/x^5;

F231E1 =  C = res coker vars R

F231E2 =  M = HH C

F231E3 =  prune M

F232E0 =  set {1,2,3} * set {2,3,4}

F233E0 =  (ZZ^5)^{2,3}

F234E0 =  R = QQ[a..h]

F234E1 =  rows = {0,1,2}

F234E2 =  cols = {0,3}

F234E3 =  result = map(R^3, 2, (i,j) -> R_(rows_i + cols_j))

F234E4 =  R = ZZ/101[a..d];

F234E5 =  m = matrix{{a^2+a^2*c+a*b+3*d}}

F234E6 =  result = coefficients(m, Variables => {a})

F234E7 =  result_0

F234E8 =  result_1

F234E9 =  R = QQ[a,b,Degrees=>{{1,0},{1,-1}}];

F234E10 =  m = matrix{{a*b, b^2}}

F234E11 =  (degrees source m)_0

F234E12 =  R = ZZ/101[a..d]

F234E13 =  m = matrix{{a,b},{c,d}}

F234E14 =  copym = map(target m, source m, entries m)

F234E15 =  R = ZZ[a..d];

F234E16 =  m = matrix{{a^2,b^3,c^4,d^5}}

F234E17 =  map(R^(numgens source m), source m, 

                       (i,j) -> if i === j then m_(0,i) else 0)

F234E18 =  R = ZZ[a..d];

F234E19 =  m = matrix{{a,b^2},{c^2,d^3}}

F234E20 =  betti m

F234E21 =  n = m ** R^{-1}

F234E22 =  betti n

F234E23 =  R = QQ[a..d]

F234E24 =  S = QQ[s,t]

F234E25 =  m = matrix{{a^2-d, b*c}}

F234E26 =  f = matrix{{s^4,s^3*t,s*t^3,t^4}}

F234E27 =  substitute(m,f)

F234E28 =  F = map(R,R,{b,c,d,a})

F234E29 =  m + F m + F F m + F F F m

F234E30 =  substitute(m, {a=>1, b=>3})

F234E31 =  R = ZZ[s,t]

F234E32 =  m = s^2+t^2

F234E33 =  S = R[a..d]

F234E34 =  substitute(m,S)

F234E35 =  R = ZZ[a..d]

F234E36 =  f = matrix{{a^2-b*c,3*b*c^4-1}}

F234E37 =  J = ideal f

F234E38 =  generators J

F234E39 =  image f

F234E40 =  cokernel f

F234E41 =  id_(R^4)

F234E42 =  myanswer = 2*(numgens R) - 1

F234E43 =  R = ZZ/31991[a..d]

F234E44 =  a

F234E45 =  a = 43

F234E46 =  a

F234E47 =  use R

F234E48 =  a

F234E49 =  I = ideal(a^2-b,c-1,d^2-a*b)

F234E50 =  J = ideal(a*b-1, c*d-2)

F234E51 =  intersect(I,J)

F235E0 =  R = QQ[x..z];

F235E1 =  C = res coker vars R

F235E2 =  length C

F236E0 =  S = ZZ/10007[x, y, z];

F236E1 =  R = ZZ/10007[t];

F236E2 =  f = map(R,S,{t^3,t^4,t^5})

F236E3 =  target f

F237E0 =  R = QQ[x,y];

F237E1 =  f = (x + y + 1)^2

F237E2 =  parts f

F237E3 =  R = QQ[x,y, MonomialOrder => Lex];

F237E4 =  f = (x + y + 1)^2

F237E5 =  parts f

F237E6 =  part(2, f)

F237E7 =  part(0, 1, f)

F238E0 =  about "Horrocks-Mumford"

F238E1 =  apropos "(H|h)ilbert"

F239E0 =  R = QQ[a..d]/(a^3+b^3+c^3+d^3)

F239E1 =  X = Proj R;

F239E2 =  T' = cotangentSheaf X

F239E3 =  numgens T'

F239E4 =  module T'

F240E0 =  tan 1

F241E0 =  A = QQ[x,y];

F241E1 =  I = ideal(x^10+x^9*y^2, y^8-x^2*y^7);

F241E2 =  f = x^2*y^7+y^14;

F241E3 =  f % I

F241E4 =  f = x*y^13+y^12;

F241E5 =  f % I

F241E6 =  K = ideal(f,x^2*y^7+y^14);

F241E7 =  (gens K) % I

F241E8 =  isSubset(K,I)

F241E9 =  K == I

F241E10 =  K = ideal(f,y^14+x*y^12);

F241E11 =  (gens K) % I

F241E12 =  isSubset(K,I)

F241E13 =  K == I

F242E0 =  - {1,5,6}

F243E0 =  R = QQ[a..d];

F243E1 =  I = ideal(a^3, b^3-c^3, a^4, a*c);

F243E2 =  numgens I

F243E3 =  I_0, I_2

F243E4 =  J = trim I

F243E5 =  J_0

F243E6 =  M = cokernel matrix{{a,b},{c,d}}

F243E7 =  M_0

F243E8 =  M/M_0

F243E9 =  N = M/(a*M + R*M_0)

F243E10 =  N_0 == 0_N

F243E11 =  M = matrix{{a,b,c},{c,d,a},{a-1,b-3,c-13}}

F243E12 =  M_0

F243E13 =  prune((image M_{1,2})/(R*M_1))

F244E0 =  m = mutableMatrix matrix{{1,2,3},{4,5,6}}

F244E1 =  columnSwap(m,0,1)

F244E2 =  m

F245E0 =  R = QQ[a..g]

F245E1 =  I = ideal(b,c,e+f)

F245E2 =  support I

F246E0 =  f = method()

F246E1 =  f ZZ := x -> -x;

F246E2 =  f(ZZ,String) := (n,s) -> concatenate(n:s);

F246E3 =  f(String,ZZ,String) := (s,n,t) -> concatenate(s," : ",toString n," : ",t);

F246E4 =  f 44

F246E5 =  f(5,"abcd ")

F246E6 =  f("foo",88,"bar")

F246E7 =  p = method(Binary => true, TypicalValue => List)

F246E8 =  p(ZZ,ZZ) := p(List,ZZ) := (i,j) -> {i,j}

F246E9 =  p(1,2)

F246E10 =  p(1,2,3,4,5,6)

F246E11 =  g = method(Dispatch => Thing);

F246E12 =  g ZZ := i -> -i;

F246E13 =  g Sequence := S -> reverse S;

F246E14 =  g 44

F246E15 =  g(3,4,5,6)

F246E16 =  h = method(Dispatch => {Type})

F246E17 =  h(QQ,ZZ) := (QQ,n) -> n/1;

F246E18 =  h(RR,ZZ) := (RR,n) -> n + 0.;

F246E19 =  h(ZZ,ZZ) := (ZZ,n) -> n;

F246E20 =  h(ZZ,14)

F246E21 =  h(QQ,14)

F246E22 =  h(RR,14)

F246E23 =  r = method(Options => {Slope => 1, Intercept => 1})

F246E24 =  r RR := o -> x -> o.Slope * x + o.Intercept

F246E25 =  r(5.)

F246E26 =  r(5.,Slope=>100)

F246E27 =  options r

F246E28 =  methodOptions r

F246E29 =  s = method(Options => true)

F246E30 =  s ZZ := { Slope => 17 } >> o -> x -> o.Slope * x

F246E31 =  s RR := { Intercept => 11 } >> o -> x -> x + o.Intercept

F246E32 =  s 100

F246E33 =  s 1000.

F246E34 =  options s

F246E35 =  options(s,ZZ)

F246E36 =  options(s,RR)

F246E37 =  installMethod(s,{ Slope => 1234 } >> o -> () -> o.Slope)

F246E38 =  s()

F246E39 =  s(Slope => 4)

F247E0 =  R = ZZ/101[a,b];

F247E1 =  C = resolution cokernel vars R

F247E2 =  C.dd

F247E3 =  C.dd_2

F248E0 =  R = QQ[x,y];

F248E1 =  M = coker vars R

F248E2 =  N = coker matrix {{x}}

F248E3 =  C = res M

F248E4 =  D = res N

F248E5 =  C ++ D

F248E6 =  E = C[5]

F248E7 =  E_-4 == C_1

F248E8 =  R^4[1]

F248E9 =  M ** D

F248E10 =  C ** D

F248E11 =  prune HH_1(C ** D)

F248E12 =  prune HH_1(M ** D)

F248E13 =  prune HH_1(C ** N)

F248E14 =  prune Tor_1(M,N)

F249E0 =  A = ZZ/101[x,y];

F249E1 =  M = cokernel random(A^3, A^{-2,-2})

F249E2 =  R = cokernel matrix {{x^3,y^4}}

F249E3 =  N = prune (M**R)

F249E4 =  C = resolution N

F249E5 =  d = C.dd

F249E6 =  s = nullhomotopy (x^3 * id_C)

F249E7 =  s*d + d*s

F249E8 =  s^2

F250E0 =  printingPrecision = 2

F250E1 =  fillMatrix(mutableMatrix(RR,5,10))

F250E2 =  fillMatrix(mutableMatrix(ZZ,5,10),UpperTriangular=>true)

F250E3 =  fillMatrix(mutableMatrix(QQ,5,10),Density=>.2,Height=>1000)

F250E4 =  fillMatrix(mutableMatrix(ZZ,5,10),25,Height=>1000)

F251E0 =  dir = temporaryFileName()

F251E1 =  makeDirectory (dir|"/a/b/c")

F251E2 =  removeDirectory (dir|"/a/b/c")

F251E3 =  removeDirectory (dir|"/a/b")

F251E4 =  removeDirectory (dir|"/a")

F252E0 =  RR.GlobalReleaseHook = (sym,val) -> << concatenate (

          "assigning ", toString val, " to ", toString sym

          ) << endl

F252E1 =  a=4.5

F252E2 =  a=5.4

F253E0 =  isDirectory "."

F253E1 =  fn = temporaryFileName()

F253E2 =  fn << "hi there" << close

F253E3 =  isDirectory fn

F253E4 =  removeFile fn

F254E0 =  for i from 1 to 4 list (continue 4; print ho) do print hi

F254E1 =  for i from 1 to 4 list (continue ; 14) do print hi

F254E2 =  for i from 1 to 4 list 14 do print hi

F254E3 =  i = 0 

F254E4 =  load "Macaulay2Doc/demo1.m2"

F254E5 =  code g

F254E6 =  g 2

F255E0 =  httpHeaders "hi there"

F256E0 =  R = QQ[a..d];

F256E1 =  I = monomialCurveIdeal(R, {1,3,4});

F256E2 =  h = hilbertPolynomial I

F256E3 =  hilbertPolynomial (R/I)

F256E4 =  hilbertPolynomial(I, Projective=>false)

F256E5 =  apply(10, k-> h(k))

F256E6 =  apply(10, k-> hilbertFunction(k,I))

F257E0 =  exp 1p300

F257E1 =  exp(pi*ii)

F258E0 =  f = openInOut "!cat"

F258E1 =  isReady f

F258E2 =  f << "hi there" << flush;

F258E3 =  isReady f

F258E4 =  read f

F258E5 =  isReady f

F259E0 =  member(c,{a,b,c,d,e})

F259E1 =  member(f,(a,b,c,d,e))

F259E2 =  member(3,set{1,2,5,6})

F260E0 =  maxExponent

F261E0 =  R = ZZ/5[s..z];

F261E1 =  M = matrix {{ x^2+y, z^3}, {y^3-z,3*z-6*x-5*y}}

F261E2 =  G = map(R^3,3,(i,j)->R_i^j)

F261E3 =  f = 3*s^2*v-t*u*v+s*t^2

F261E4 =  H = map(R^4,R^4,(i,j)->diff(R_j*R_i,f))

F261E5 =  id_(R^3)

F261E6 =  id_(source M)

F262E0 =  R = ZZ[x,y,z];

F262E1 =  S = ZZ/101[x,y,z,Degrees => {{1,2},{1,3},{1,3}}]/ideal(x+z^3);

F262E2 =  F = map(S,R,{x,y^2,z^3})

F262E3 =  use R; F(107*x+y+z)

F262E4 =  T = ZZ/5[x,y];

F262E5 =  G = map(T,S);

F262E6 =  G*F

F262E7 =  use R; G(F(107*x+y+z))

F263E0 =  R = GF(9,Variable=>a)[x,y,z];

F263E1 =  f = map(R^1, 3, (i,j) -> (a^j * x - y)^(j+1))

F263E2 =  source f

F263E3 =  isHomogeneous f

F264E0 =  p = 0 .. 20

F264E1 =  rotate(3,p)

F264E2 =  rotate(-3,p)

F265E0 =  R = QQ[a..d];

F265E1 =  I = ideal (a^2*b-c^2, a*b^2-d^3, c^5-d)

F265E2 =  J = monomialIdeal (a^2*b, b*c*d, c^5)

F265E3 =  monomialCurveIdeal(R,{1,2,3})

F266E0 =  characters "asdf"

F266E1 =  characters "π ≈ 3.14159"

F267E0 =  S = ZZ/101[a,b,c];

F267E1 =  I = ideal(a^3+b^3+c^3)

F267E2 =  R = S/I

F267E3 =  eulers(R)

F267E4 =  J = substitute(ideal(b,a+c),R)

F267E5 =  eulers(R/J)

F268E0 =  R = QQ[a..l, MonomialOrder => {3,3,3,3}];

F268E1 =  a*e^3 + a^2*c*i + a*b^2*i + b^2*e*i

F268E2 =  R = QQ[a..i, MonomialOrder => {Lex =>3,3:1,3}];

F268E3 =  a*e^3 + a^2*c*i + a*b^2*i + b^2*e*i + d^2*f*h + d*e^2*h

F269E0 =  C = ZZ/101[x,y,z,u,w];

F269E1 =  I = ideal(x-x^2-y,z+x*y,w^2-u^2);

F269E2 =  minPres I

F269E3 =  I.cache.minimalPresentationMap

F269E4 =  I.cache.minimalPresentationMapInv

F269E5 =  R = ZZ/101[x,y,z,u,w];

F269E6 =  I = ideal(x-x^2-y,z+x*y,w^2-u^2);

F269E7 =  minimalPresentation(I, Exclude=>{1})

F270E0 =  R = ZZ[vars(0..19)]

F270E1 =  ff = genericMatrix(R,4,5)

F270E2 =  exteriorPower (2,ff)

F271E0 =  R = ZZ/32003[vars(0..10)]

F271E1 =  M = genericSkewMatrix(R,a,5)

F271E2 =  ker M

F272E0 =  1/2 + 3/5

F273E0 =  class drop

F274E0 =  book = new HashTable from {

          "Joe" => "344-5567",

          "Sarah" => "567-4223",

          "John" => "322-1456"}

F274E1 =  book#"Sarah"

F274E2 =  book#?"Mary"

F274E3 =  x = set {a,b,c,r,t}

F274E4 =  peek x

F274E5 =  x#?a

F274E6 =  x#?4

F274E7 =  x = new MutableHashTable;

F274E8 =  x#"Joe" = "344-5567";

F274E9 =  x#3 = {a,b,c};

F274E10 =  x#{1,2} = 44;

F274E11 =  x#3

F274E12 =  x#?4

F274E13 =  x

F274E14 =  peek x

F274E15 =  p=4;

F274E16 =  x.p = 444;

F274E17 =  x.p

F274E18 =  x#?4

F275E0 =  join( {1,2,3}, (4,5,6), (7,8,9) )

F275E1 =  join( (1,2,3), {4,5,6}, {7}, (8,9,10) )

F275E2 =  {1,2,3} | {4,5,6}

F275E3 =  (1,2,3) | (4,5,6)

F275E4 =  join({1, 2, 3}, iterator {4, 5, 6})

F275E5 =  join(iterator {1, 2, 3}, {4, 5, 6})

F275E6 =  toList oo

F276E0 =  R = ZZ/101[x,y,z];

F276E1 =  C = res coker matrix {{x,y^2,z^3}};

F276E2 =  length C

F276E3 =  max C

F276E4 =  min C

F276E5 =  C.dd

F276E6 =  C_1

F276E7 =  C^-1

F276E8 =  C.dd_2

F276E9 =  betti C

F277E0 =  R = QQ[x,y,z,MonomialOrder=>{Weights=>{-1,-1,-1},RevLex},Global=>false]

F277E1 =  M = cokernel matrix{{0,y},{x*y-1,x*z},{x*y+1,x*z}}

F277E2 =  null -- prune M -- doesn't work yet

F277E3 =  stderr << "--this example doesn't work yet" << endl;

F278E0 =  print "Hello world!"

F279E0 =  R = ZZ[a..f];

F279E1 =  M = matrix{{a,b,c},{d,e,f}}

F279E2 =  minors(2,M)

F279E3 =  minors(2,M,Limit=>1)

F279E4 =  minors(1,M)

F279E5 =  minors(0,M)

F279E6 =  minors(-1,M)

F280E0 =  code listUserSymbols

F280E1 =  code(res,Ideal)

F280E2 =  code(symbol :, Ideal, Ideal)

F280E3 =  code methods use

F281E0 =  R = QQ[a..d]

F281E1 =  M = groebnerBasis random(R^1,R^{4:-2});

F281E2 =  netList (ideal M)_*

F281E3 =  R = ZZ/101[a..e]

F281E4 =  I = ideal sub(random(R^1, R^{4:-2}), e=>1);

F281E5 =  netList I_*

F281E6 =  gbI = ideal groebnerBasis(I, Strategy=>"MGB");

F281E7 =  netList gbI_*

F281E8 =  gbTrace=1

F281E9 =  gbI = ideal groebnerBasis(I, Strategy=>"F4");

F281E10 =  netList gbI_*

F282E0 =  A = QQ[x,y,z];

F282E1 =  M = image matrix{{x*y,x},{x*z,x}}

F282E2 =  N = image matrix{{y^2,x},{z^2,x}}

F282E3 =  M + N

F282E4 =  intersect(M,N)

F282E5 =  M : N

F282E6 =  N : M

F282E7 =  Q = A/x^5;

F282E8 =  M = substitute(M,Q)

F282E9 =  ann M

F282E10 =  M : x

F283E0 =  S = QQ[a..d];

F283E1 =  I = monomialCurveIdeal(S,{1,3,4})

F283E2 =  R = S/I

F283E3 =  X = Proj R

F283E4 =  IX = sheaf (module I ** R)

F283E5 =  Ext^1(IX,OO_X)

F283E6 =  Hom(IX,OO_X)

F284E0 =  code(prune, Matrix)

F284E1 =  typicalValues#(prune,Matrix)

F285E0 =  R = ZZ/101[a..d, Degrees => {2:{1,0}, 2:{0,1}}];

F285E1 =  I = ideal random(R^1, R^{2:{-2,-2}, 2:{-3,-3}});

F285E2 =  t = betti res I

F285E3 =  peek t

F285E4 =  betti(t, Weights => {1,0})

F285E5 =  betti(t, Weights => {0,1})

F285E6 =  betti(t, Weights => {1,1})

F285E7 =  peek oo

F285E8 =  t' = multigraded t

F285E9 =  betti(t', Weights => {1,0})

F285E10 =  betti(t', Weights => {0,1})

F285E11 =  betti(t', Weights => {1,1})

F286E0 =  R = ZZ[a]/(a^2-3)[x,y]

F286E1 =  F = y^2-x*(x-1)*(x-a)

F286E2 =  J = ideal(diff(x,F),diff(y,F),F)

F286E3 =  gens gb J

F286E4 =  peek J.generators.cache

F286E5 =  gbRemove J

F286E6 =  peek J.generators.cache

F287E0 =  between(55,{a,b,c,d})

F287E1 =  concatenate between(",", (1..10) / toString)

F288E0 =  m = matrix {{1,2,0,0},{0,0,1,0}}

F288E1 =  compress m

F289E0 =  R = ZZ/101[x, Degrees => {2}];

F289E1 =  M = module ideal x^2

F289E2 =  s = hilbertSeries M

F289E3 =  numerator s

F289E4 =  poincare M

F289E5 =  R=ZZ/101[x, Degrees => {{1,1}}];

F289E6 =  M = module ideal x^2;

F289E7 =  s = hilbertSeries M

F289E8 =  numerator s

F289E9 =  poincare M

F290E0 =  x:=3

F290E1 =  listLocalSymbols f

F290E2 =  listLocalSymbols symbol x

F290E3 =  load "Macaulay2Doc/demo1.m2"

F290E4 =  g 2

F291E0 =  opts = readPackage "NormalToricVarieties"

F291E1 =  "1.9" <= opts.Version

F292E0 =  k = ZZ/101

F292E1 =  m = matrix {{x,y,z,x^2*v,x*y*v,y^2*v,z*v,x*w,y^3*w,z*w}}

F292E2 =  n = rank source m

F292E3 =  R = k[u_1 .. u_n]

F292E4 =  S = k[u_1 .. u_n,Degrees => degrees source m]

F292E5 =  f = map(T,R,m)

F292E6 =  g = map(T,S,m)

F292E7 =  res ker f

F292E8 =  res ker g

F292E9 =  isHomogeneous f

F292E10 =  isHomogeneous g

F292E11 =  R = ZZ/32003[a..d]/(a^2+b^2+c^2+d^2);

F292E12 =  M = coker vars R

F292E13 =  C = resolution(M, LengthLimit=>6)

F292E14 =  A = QQ[x,y]

F292E15 =  C = chainComplex(

      	       map(A^1,A^{3:-2},{{x^2,x*y,y^2}}),

      	       map(A^{3:-2},A^{2:-3},{{y,0},{ -x,y},{0,-x}}),

      	       map(A^{2:-3},0,0))

F292E16 =  M = HH_0 C

F292E17 =  res M = C;

F292E18 =  res M

F293E0 =  R = QQ[x,y,z];

F293E1 =  f = matrix{{y^2-x*(x-1)*(x-13)}}

F293E2 =  jacobian f

F293E3 =  R = ZZ[a,b,c][x,y,z]

F293E4 =  jacobian matrix{{a*x+b*y^2+c*z^3, a*x*y+b*x*z}}

F294E0 =  x:=3

F294E1 =  listSymbols { symbol x, symbol y }

F294E2 =  listSymbols first localDictionaries()

F295E0 =  class 33

F295E1 =  instance(33,ZZ)

F295E2 =  instance(33,String)

F295E3 =  instance(ZZ,Type)

F295E4 =  instance(33,Type)

F295E5 =  instance(33,Thing)

F295E6 =  class ZZ

F295E7 =  parent class ZZ

F296E0 =  QQ[w,x,y,z];

F296E1 =  I = minors(2, matrix{{w,x,y},{x,y,z}})

F296E2 =  isMonomialIdeal I

F296E3 =  J = ideal leadTerm I

F296E4 =  isMonomialIdeal J

F296E5 =  K = monomialIdeal I

F296E6 =  isMonomialIdeal K

F297E0 =  R = QQ[a..d];

F297E1 =  I = ideal(a^2, b^2-c*d);

F297E2 =  I^3

F297E3 =  trim I^3

F298E0 =  v = (a,b,c)

F298E1 =  #v

F298E2 =  v#2

F298E3 =  new Array from (a,b,c)

F298E4 =  new Sequence from [a,b,c]

F299E0 =  R = ZZ/32003[a..d];

F299E1 =  M = coker matrix {{a,1,b},{c,3,b+d}}

F299E2 =  N = minimalPresentation M

F299E3 =  peek N.cache

F299E4 =  g = N.cache.pruningMap

F299E5 =  g^-1

F299E6 =  I = ideal(a^2,b^3,c^4,d^7)

F299E7 =  X = Proj R

F299E8 =  J = (module I)~

F299E9 =  minimalPresentation J

F300E0 =  set{hi,you,there} * set{hi,us,here,you}

F300E1 =  R = QQ[a..d];

F300E2 =  a * {b,c,d}

F300E3 =  f = map(R,R,{b,c,a,d})

F300E4 =  g = map(R,R,{(a+b)^2,b^2,c^2,d^2})

F300E5 =  f*g

F300E6 =  (f*g)(a) == f(g(a))

F300E7 =  M = R^2

F300E8 =  N = I*M + a*R^2

F300E9 =  isHomogeneous N

F300E10 =  2*interval(1,3)

F300E11 =  interval(1,3)*interval(-1,2)

F300E12 =  interval(-1,1)*interval(-1,1)

F301E0 =  x = tally {a,b,b,c,c,c}

F301E1 =  y = tally {a,a,a,b,b,c}

F301E2 =  x' = new VirtualTally from x

F301E3 =  y' = new VirtualTally from y

F301E4 =  x-y

F301E5 =  x'-y'

F302E0 =  position((10,20,43,105,6,93), odd)

F302E1 =  position((10,20,43,105,6,93), i -> i<0)

F302E2 =  position((10,20,43,105,6,93),(18,82,12,7,35,92), (a,b) -> a>b)

F302E3 =  position((10,20,43,105,6,93), odd, Reverse => true)

F302E4 =  position((10,20,43,105,6,93),(18,82,12,7,35,92), (a,b) -> a>b, Reverse => true)

F302E5 =  positions((10,20,43,105,6,93), odd)

F302E6 =  select((10,20,43,105,6,93), odd)

F302E7 =  number((10,20,43,105,6,93), odd)

F303E0 =  R = ZZ/101[x,y];

F303E1 =  p = matrix{{x,y}}

F303E2 =  q = map(R^{3},,p)

F303E3 =  degrees target q

F303E4 =  degrees source q

F304E0 =  product(1 .. 5, i -> i^2)

F305E0 =  R = ZZ/101[x,y,z];

F305E1 =  degrees R

F305E2 =  S = ZZ/101[x,y,z,Degrees => {{2,3},{1,2},{2,0}}];

F305E3 =  degrees S

F305E4 =  I = ideal"xy2,xyz,y3"

F305E5 =  degrees I

F305E6 =  degrees R^5

F305E7 =  degrees R^{1,2,3,4}

F306E0 =  R = ZZ[x,y,z];

F306E1 =  use R;

F306E2 =  S = ZZ[x,t];

F306E3 =  x

F306E4 =  R_0

F306E5 =  R_"x"

F306E6 =  use R;

F306E7 =  x

F307E0 =  X = Spec(QQ[x,y])

F307E1 =  Y = X ** (QQ[t])

F307E2 =  describe Y

F308E0 =  R = ZZ[a..z];

F308E1 =  genericMatrix(R,a,2,4)

F308E2 =  genericMatrix(R,i,3,2)

F308E3 =  genericMatrix(R,2,4)

F308E4 =  genericMatrix(R,3,2)

F309E0 =  floor (7.234232131231*10^6)

F310E0 =  t = new BettiTally from { (0,{0},0) => 1, (1,{1},1) => 2, (2,{3},3) => 3, (2,{4},4) => 4 }

F310E1 =  betti(t, Weights => {2})

F310E2 =  peek oo

F310E3 =  t(5)

F310E4 =  t[-5]

F310E5 =  dual oo

F310E6 =  t ++ oo

F310E7 =  t ** t

F310E8 =  pdim t

F310E9 =  codim t

F310E10 =  degree t

F310E11 =  poincare t

F310E12 =  regularity t

F310E13 =  n = 3

F310E14 =  hilbertSeries(n, t)

F310E15 =  hilbertPolynomial(n, t)

F310E16 =  (1/2) * t

F310E17 =  2 * oo

F310E18 =  lift(oo,ZZ)

F310E19 =  R = QQ[x,y]

F310E20 =  C = R^t

F310E21 =  betti C

F310E22 =  C.dd

F311E0 =  X = Proj(QQ[x,y,z])

F311E1 =  F = OO_X(3)

F311E2 =  module F

F311E3 =  degrees oo

F312E0 =  f = openInOut "!cat"

F312E1 =  isReady f

F312E2 =  f << "hi there" << flush;

F312E3 =  isReady f

F313E0 =  R = ZZ/101[a..d]

F313E1 =  M = kernel vars R ++ cokernel vars R

F313E2 =  generators M

F313E3 =  relations M

F313E4 =  M === subquotient(generators M, relations M)

F313E5 =  prune M,

F314E0 =  X = Proj(QQ[x,y])

F314E1 =  sheafExt^1(OO_X^1(2),OO_X(-11)^1)

F315E0 =  class (x->x)

F316E0 =  M = monoid[x,y,z]

F316E1 =  vars M

F317E0 =  {a,b,c}

F317E1 =  [a,b,c]

F317E2 =  (a,b,c)

F318E0 =  R = QQ[x,y];

F318E1 =  F = R^{1,2,3}

F318E2 =  G = R^{10,20,30}

F318E3 =  f = flip(F,G)

F318E4 =  isHomogeneous f

F318E5 =  target f

F318E6 =  source f

F318E7 =  target f === G**F

F318E8 =  source f === F**G

F318E9 =  u = x * F_0

F318E10 =  v = y * G_1

F318E11 =  u ** v

F318E12 =  v ** u

F318E13 =  f * (u ** v)

F318E14 =  f * (u ** v) === v ** u

F319E0 =  t = 1..4

F319E1 =  newClass(Array,t)

F319E2 =  x = new HashTable from { a => 1, b => 2 }

F319E3 =  z = newClass(ImmutableType,Vector,x)

F319E4 =  parent z

F319E5 =  new Thing of Thing from Thing := (A,B,c) -> ( 

            << "-- new " << A << " of " << B

            << " from " << toString c << endl;

            c);

F319E6 =  new ImmutableType of Vector from x

F319E7 =  newClass(ImmutableType,Vector,x)

F320E0 =  M = matrix {{1,2}, {5,7}}

F320E1 =  eigenvalues M

F320E2 =  class \ oo

F320E3 =  M = matrix {{1,2}, {2,1}}

F320E4 =  eigenvalues(M, Hermitian=>true)

F320E5 =  class \ oo

F321E0 =  R = QQ[x,y,z];

F321E1 =  f = matrix{{2,x,y,x^2},{z,32,2,x}}

F321E2 =  target f

F321E3 =  source f

F321E4 =  numgens target f

F321E5 =  numgens source f

F321E6 =  f_(1,3)

F321E7 =  entries f

F321E8 =  ring f

F321E9 =  describe ring f

F322E0 =  generateAssertions ///

F322E1 =  value \ unstack oo

F323E0 =  stack path

F323E1 =  path = append(path, "~/resolutions/"); stack path

F324E0 =  ancestors String

F324E1 =  ancestors class 3

F324E2 =  ancestors class 3.

F324E3 =  ancestors ring 3.

F324E4 =  ancestors class ring 3.

F324E5 =  ancestors 3

F325E0 =  QQ[x_0 .. x_40 ]

F325E1 =  concatenate(50:"abcd ")

F326E0 =  A = QQ[x];

F326E1 =  B = A[y,

         Join => false,

         DegreeMap => x -> 7*x]

F326E2 =  B.FlatMonoid

F326E3 =  degrees A^{-1,-2}

F326E4 =  degrees(A^{-1,-2} ** B)

F326E5 =  B = A[y,

         Join => false,

         DegreeMap => x -> 7*x,

         DegreeLift => x -> apply(x, d -> d // 7)]

F326E6 =  m = matrix {{x_B}}

F326E7 =  degrees m

F326E8 =  lift(m, A)

F326E9 =  degrees oo

F327E0 =  H = new HashTable from {1 => 10, 2 => 15, 3 => 20}

F327E1 =  applyKeys(H, k -> k + 100)

F327E2 =  applyKeys(H, k -> k//2, max)

F327E3 =  applyKeys(H, k -> k//2, plus)

F328E0 =  R = ZZ/101[x,y]

F328E1 =  C = chainComplex(matrix{{x,y}},matrix{{x*y},{-x^2}})

F328E2 =  M = HH^1 C

F328E3 =  prune M

F328E4 =  needsPackage "SimplicialComplexes"

F328E5 =  R = QQ[a..d]

F328E6 =  D = simplicialComplex {a*b*c,a*b*d,a*c*d,b*c*d}

F328E7 =  C = chainComplex D

F328E8 =  HH_2 C

F328E9 =  prune oo

F329E0 =  R = QQ[x_0..x_4];

F329E1 =  a = {1,0,0,0,0}

F329E2 =  b = {0,1,0,0,1}

F329E3 =  c = {0,0,1,1,0}

F329E4 =  M1 = matrix table(5,5, (i,j)-> x_((i+j)%5)*a_((i-j)%5))

F329E5 =  M2 = matrix table(5,5, (i,j)-> x_((i+j)%5)*b_((i-j)%5))

F329E6 =  M3 = matrix table(5,5, (i,j)-> x_((i+j)%5)*c_((i-j)%5))

F329E7 =  M = M1 | M2 | M3;

F329E8 =  betti (C=res coker M)

F329E9 =  N = transpose submatrix(C.dd_3,{10..28},{2..36});

F329E10 =  betti (D=res coker N)

F329E11 =  Pfour = Proj(R)

F329E12 =  HorrocksMumford = sheaf(coker D.dd_3);

F329E13 =  HH^0(HorrocksMumford(1))

F329E14 =  HH^0(HorrocksMumford(2))

F329E15 =  eulers(HorrocksMumford(2))

F330E0 =  R = QQ[a..d,MonomialOrder=>{Weights => {-1,2,3,4}},Global=>false];

F330E1 =  f = a^2 + b+ c^2 + b*d

F330E2 =  leadTerm f

F330E3 =  leadTerm(1,ideal(f))

F330E4 =  R = QQ[a..d,MonomialOrder=>{Weights => {1,2,3,4}, Weights => {2,4,2,1}}];

F330E5 =  f = a^6 + b^3+ c^2

F330E6 =  leadTerm(f)

F330E7 =  leadTerm(1, ideal(f))

F330E8 =  leadTerm(2, ideal(f))

F330E9 =  leadTerm(3, ideal(f))

F330E10 =  R = QQ[a..d,MonomialOrder=>{Weights => {1,2}, Lex}];

F330E11 =  f = a^2 + b+ c^2 + b*d

F331E0 =  copyright

F332E0 =  K3 = Proj(QQ[x_0..x_3]/(x_0^4+x_1^4+x_2^4+x_3^4-11*x_0*x_1*x_2*x_3))

F332E1 =  omega1 = cotangentSheaf(1,K3);

F332E2 =  HH^1(omega1)

F332E3 =  FermatQuintic = Proj(QQ[x_0..x_4]/(x_0^5+x_1^5+x_2^5+x_3^5+x_4^5))

F332E4 =  omega1 = cotangentSheaf(1,FermatQuintic);

F332E5 =  HH^1(omega1)

F332E6 =  omega2 = cotangentSheaf(2,FermatQuintic);

F332E7 =  HH^1(omega2)

F332E8 =  HH^2(omega1)

F333E0 =  A = QQ[x,y,z];

F333E1 =  B = QQ[a,b];

F333E2 =  phi = map(B,A,{a^2,a*b,b^2})

F333E3 =  kernel phi

F333E4 =  C = QQ[x,y,z,a,b]

F333E5 =  H = ideal(x-a^2, y-a*b, z-b^2);

F333E6 =  eliminate(H, {a,b})

F334E0 =  R = QQ[a,b,c]

F334E1 =  I = ideal vars R

F334E2 =  M = I / I^2

F334E3 =  gens M

F334E4 =  N = (I + I^2)/I^2

F334E5 =  gens N

F335E0 =  compositions(4, 2)

F335E1 =  compositions(2, 4)

F335E2 =  unique apply(compositions(4, 10), comp -> rsort comp)

F335E3 =  select(compositions(5, 18), comp -> all(comp, c -> c>=3))

F336E0 =  X = {(), (0, (1, 2, (3, 4))), (5, (6, 7)), 8, 9};

F336E1 =  splice X

F336E2 =  deepSplice X

F336E3 =  Z = {(), {0, {1, 2, (3, 4)}}, [5, [6, 7]], 8, 9};

F336E4 =  deepSplice Z

F336E5 =  deepSplice ((), (0, (1, 2, (3, 4))), (5, (6, 7)), 8, 9)

F336E6 =  M = new MutableList from X

F336E7 =  deepSplice M

F336E8 =  M

F337E0 =  R = QQ[a..d];

F337E1 =  M = image matrix{{a,b,c}}

F337E2 =  symmetricAlgebra M

F337E3 =  symmetricAlgebra(R^{1,2,3})

F337E4 =  A = symmetricAlgebra(M, Variables=>{x,y,z})

F337E5 =  describe A

F337E6 =  B = symmetricAlgebra(M, VariableBaseName=>G, MonomialSize=>16)

F337E7 =  describe B

F337E8 =  symmetricAlgebra(M, Degrees=> {3:1})

F337E9 =  symmetricAlgebra vars R

F337E10 =  symmetricAlgebra vars R

F337E11 =  p = symmetricAlgebra(A,B,id_M)

F337E12 =  p^-1

F337E13 =  p * p^-1 === id_A

F337E14 =  p^-1 * p === id_B

F338E0 =  atan2(1,0)

F338E1 =  atan2(0,1)

F338E2 =  atan2(-1,-1)

F339E0 =  replace(4,   t, 0..10)

F339E1 =  replace(0,   t, 0..10)

F339E2 =  replace(10,  t, 0..10)

F339E3 =  replace(-1,  t, 0..10)

F339E4 =  replace(-11, t, 0..10)

F340E0 =  R = QQ[a..d];

F340E1 =  M = ker vars R

F340E2 =  generators M

F340E3 =  numgens M

F340E4 =  numgens R^10

F341E0 =  elapsedTime nanosleep 500000000

F342E0 =  R = ZZ/5[a,b,c]

F342E1 =  leadCoefficient f

F342E2 =  S = ZZ/5[a,b,c, MonomialOrder => Lex]

F342E3 =  leadCoefficient g

F343E0 =  first {a,b,c,d,e}

F343E1 =  first gens(QQ[x,y,z])

F344E0 =  R = QQ[a..d,MonomialOrder=>ProductOrder{1,3}];

F344E1 =  I = ideal(a*b-c*d, a*c-b*d)

F344E2 =  leadTerm(1,I)

F345E0 =  Qu = new Type of List

F345E1 =  w = new Qu from {1,2,3,4}

F345E2 =  w+w

F345E3 =  Qu * Qu := (x,y) -> new Qu from { 

     	  x#0*y#0 - x#1*y#1 - x#2*y#2 - x#3*y#3,

     	  x#0*y#1 + x#1*y#0 + x#2*y#3 - x#3*y#2,

     	  x#0*y#2 + x#2*y#0 + x#3*y#1 - x#1*y#3,

     	  x#0*y#3 + x#3*y#0 + x#1*y#2 - x#2*y#1

     	  };

F345E4 =  w*w

F346E0 =  f = x -> {class x, if class x === Sequence then #x};

F346E1 =  f()

F346E2 =  f(3)

F346E3 =  f(3,4)

F346E4 =  f(3,4,5)

F346E5 =  f = x -> (

          x = sequence x;

          {class x, #x});

F346E6 =  f()

F346E7 =  f(3)

F346E8 =  f(3,4)

F346E9 =  f(3,4,5)

F346E10 =  ((x) -> x) 3

F346E11 =  1 : 3

F346E12 =  ((x) -> x) oo

F347E0 =  interval(3.1415,3.1416)

F347E1 =  precision interval(3.1415,3.1416)

F347E2 =  class interval(3.1,3.5)

F347E3 =  ring interval(3.1,3.5)

F347E4 =  interval(2.5p100,3.2p1000)

F347E5 =  interval(2.5,3.2,Precision=>200)

F347E6 =  span(2,Precision=>100)

F347E7 =  span(2,3,interval(-1.5,-0.5),73)

F347E8 =  interval(1,3)+interval(2,4)

F347E9 =  interval(-1,1)*interval(2,3)

F347E10 =  interval(0,1)-interval(0,1)

F347E11 =  interval(1,2)/interval(1,2)

F347E12 =  interval(1,3) == interval(1,3,Precision=>100)

F347E13 =  interval(1,3) === interval(1,3,Precision=>100)

F347E14 =  interval(1/3,1,Precision=>100)==interval(1/3,1,Precision=>1000)

F347E15 =  interval(1,2)<=interval(2,3)

F347E16 =  interval(1,2)<=interval(1,2)

F347E17 =  interval(1,2)<interval(2,3)

F347E18 =  interval(1,2)<interval(3,4)

F347E19 =  exp(interval(2,4))

F347E20 =  cos(interval(1,1.3))

F347E21 =  sqrt(interval(2))

F347E22 =  numericInterval(100,pi)

F347E23 =  numericInterval_200 EulerConstant

F348E0 =  R = QQ[x,y];

F348E1 =  (q,r) = quotientRemainder(x^10+5,x-2);

F348E2 =  q

F348E3 =  r

F348E4 =  q*(x-2)+r

F349E0 =  erf 2

F349E1 =  inverseErf oo

F350E0 =  R = QQ[x,y,z]

F350E1 =  X = Proj R

F350E2 =  Y = Spec R

F350E3 =  sheaf X

F350E4 =  sheaf Y

F351E0 =  x .. z

F351E1 =  x .. C

F352E0 =  R = QQ[x,y,z,w]

F352E1 =  M = cokernel matrix {{x*y-z,y^2-w-1,w^4-3}}

F352E2 =  res(M, PairLimit => 1)

F352E3 =  res(M, PairLimit => 10)

F352E4 =  res(M, PairLimit => 20)

F353E0 =  stack apply(prefixPath, p -> p | Layout#1#"packages" | "Foo.m2")

F353E1 =  stack apply(prefixPath, p -> p | replace("PKG","Foo",Layout#1#"packagehtml") | "bar.html")

F353E2 =  stack apply(prefixPath, p -> p | Layout#1#"info" | "Foo.info")

F354E0 =  rowRankProfile mutableMatrix {{1,2,3}, {0,0,0.}, {3,4,5} }

F355E0 =  R = ZZ/32003[a..d];

F355E1 =  f = inducedMap(coker matrix {{a,1,b},{c,3,b+d}},R^2)

F355E2 =  g = prune f

F355E3 =  source g

F355E4 =  target g

F355E5 =  m = matrix{{a,1,b},{c,3,b+d}}

F355E6 =  prune m

F356E0 =  R = ZZ[x,y];

F356E1 =  S = ZZ[a,b,c];

F356E2 =  f = map(R,S,{x^2,x*y,y^2})

F356E3 =  f(a+b+c^2)

F356E4 =  g = map(R,S,{a=>x^2,b=>x*y,c=>y^2})

F356E5 =  g(a+b+c^2)

F357E0 =  X = new Type of MutableHashTable

F357E1 =  x = new X

F357E2 =  X.GlobalAssignHook = globalAssignFunction

F357E3 =  X.GlobalReleaseHook = globalReleaseFunction

F357E4 =  x' = new X

F357E5 =  t = {x,x'}

F357E6 =  x = x' = 44

F357E7 =  t

F357E8 =  code globalAssignFunction

F358E0 =  isFinitePrimeField QQ

F358E1 =  isFinitePrimeField (ZZ/101)

F359E0 =  R = ZZ[x,y,z]

F359E1 =  N = R^1/(x,y,z)

F359E2 =  M = R^1/(x^2,y^2,x*y*z,z^2)

F359E3 =  f = map(N,M,1)

F359E4 =  res f

F360E0 =  fn = temporaryFileName()

F360E1 =  symlinkFile("qwert", fn)

F360E2 =  fileExists fn

F360E3 =  readlink fn

F360E4 =  removeFile fn

F361E0 =  minPosition {2, 1, 6, 4, 1}

F361E1 =  R1 = QQ[x, y, z, MonomialOrder => Lex];

F361E2 =  minPosition {x*y^2, x*y^2 + z^2, y^4, y*z^5}

F361E3 =  R2 = QQ[x, y, z, MonomialOrder => GRevLex];

F361E4 =  minPosition (x*y^2, x*y^2 + z^2, y^4, y*z^5)

F362E0 =  R = QQ[a..d, MonomialOrder=>GroupRevLex=>2, Global=>false];

F362E1 =  a^-1

F362E2 =  try c^(-1) else "failed"

F363E0 =  "testfile" << 2^100 << endl << close

F363E1 =  value get "testfile"

F363E2 =  f = "testfile" << ""

F363E3 =  f << "hi" << endl

F363E4 =  f << "ho" << endl

F363E5 =  f << close

F363E6 =  get "testfile"

F363E7 =  removeFile "testfile"

F364E0 =  fold(plus, {0,1,2,3,4,5})

F364E1 =  fold(identity, {a,b,c,d,e})

F364E2 =  fold((i,j) -> i|j|i, {"a","b","c","d","e"})

F364E3 =  fold(plus, 0, {1,2,3,4,5})

F364E4 =  fold((x, y) -> x^y, 2, {3,2,1,2})

F364E5 =  fold({a,b,c,d,e}, identity)

F364E6 =  fold({a,b,c,d}, e, identity)

F364E7 =  fold({2,3,2,1}, 2, (x, y) -> x^y)

F364E8 =  fold(identity, "abcde")

F364E9 =  fold(identity, "a", "bcde")

F364E10 =  accumulate({2,3,2,1}, 2, (x, y) -> x^y)

F365E0 =  vars{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25}

F365E1 =  vars(26..51)

F365E2 =  vars 52

F365E3 =  vars(-9..-1)

F365E4 =  vars(3 .. 9, 33 .. 35, 1000 .. 1002, -100 .. -98)

F366E0 =  x

F366E1 =  q0r55

F366E2 =  f'

F366E3 =  o2

F366E4 =  x=5

F366E5 =  x

F366E6 =  symbol x

F367E0 =  partitions 3

F367E1 =  p = new Partition from {2,1}

F367E2 =  p_0

F367E3 =  w = toList p

F368E0 =  X = {(), (0, (1, 2, (3, 4))), (5, (6, 7)), 8, 9};

F368E1 =  splice X

F368E2 =  deepSplice X

F368E3 =  Z = {(), {0, {1, 2, (3, 4)}}, [5, [6, 7]], 8, 9};

F368E4 =  splice Z

F368E5 =  splice ((), (0, (1, 2, (3, 4))), (5, (6, 7)), 8, 9)

F368E6 =  splice [(), (0, (1, 2, (3, 4))), (5, (6, 7)), 8, 9]

F368E7 =  M = new MutableList from X

F368E8 =  splice M

F368E9 =  M

F369E0 =  x = new HashTable from { x => 1, y => 2, z => 3 }

F369E1 =  select(1,x,odd)

F370E0 =  package sin

F370E1 =  package poly

F371E0 =  sequence()

F371E1 =  sequence(4)

F371E2 =  sequence(4,5)

F371E3 =  identity()

F371E4 =  identity(4)

F371E5 =  identity(4,5)

F372E0 =  R = ZZ/101[x,y,z];

F372E1 =  f = random(R^1,R^{5:-3})

F372E2 =  C = resolution cokernel f

F372E3 =  be = betti C

F372E4 =  "Betti numbers of " | net C | " are " | (net be)^2

F372E5 =  "x" | "2"^1

F372E6 =  Divide(Minus a,b)

F372E7 =  Power(Sum(3,4,5),7)

F372E8 =  Sum(1,2, Minus 3, 4,5)

F372E9 =  Minus a / b

F372E10 =  (Sum(3,4,5))^7

F372E11 =  1 + 2 + Minus 3 + 4 + 5

F372E12 =  g = (x+y)^2

F372E13 =  e = expression g

F372E14 =  peek e

F372E15 =  peek'(2,e)

F372E16 =  Table{{1,2,3},{a,bb,ccc}}

F372E17 =  MatrixExpression{{1,2,3},{a,bb,ccc}}

F372E18 =  Table{{"Example 1","Example 2"},

            {Table{{1,2},{3,4}},Table{{11,22},{3,444}}}}

F373E0 =  f = newNetFile()

F373E1 =  f << "aabbcc" << endl

F373E2 =  f << "aa" << "bb"^1 << "cc"^-1 << endl

F373E3 =  f << "aa" << "bb"^1 << "cc"^-1 << endl

F373E4 =  getNetFile f

F373E5 =  peek oo

F373E6 =  class \ ooo

F374E0 =  kk = ZZ/101

F374E1 =  A = kk[a,b]

F374E2 =  B = kk[c,d,e]

F374E3 =  describe(A**B)

F374E4 =  describe tensor(A, B, VariableBaseName => p)

F374E5 =  describe tensor(A, B, Variables => {a1,a2,b1,b2,b3})

F374E6 =  describe (C = tensor(A, B, DegreeRank => 1, Degrees => {5:1}))

F374E7 =  degreeLength C

F374E8 =  degreesRing C

F374E9 =  describe tensor(A, B, MonomialSize => 8)

F374E10 =  describe (C = tensor(A, B, MonomialOrder => Eliminate numgens A))

F374E11 =  describe (C = tensor(A, B, MonomialOrder => GRevLex))

F374E12 =  As = kk[a, b, SkewCommutative => true]

F374E13 =  D  = kk[c, d, e, SkewCommutative => true]

F374E14 =  E = tensor(As, D)

F374E15 =  describe E

F374E16 =  c * a

F374E17 =  E = kk[x, Dx, WeylAlgebra => {x => Dx}]

F374E18 =  tensor(E, E, Variables => {x, Dx, y, Dy})

F374E19 =  describe oo

F374E20 =  A = ZZ/101[a, b]

F374E21 =  B = A[x, y]

F374E22 =  C = tensor(B, B, Variables => {x1, y1, x2, y2})

F374E23 =  describe C

F374E24 =  C.FlatMonoid

F375E0 =  toRR(200,1/7)

F375E1 =  precision oo

F376E0 =  R = QQ[x,y,z];

F376E1 =  I = ideal(y^2-x*(x-1)*(x-13))

F376E2 =  jacobian I

F376E3 =  R = ZZ[a,b,c][x,y,z]

F376E4 =  jacobian ideal(a*y*z+b*x*z+c*x*y)

F377E0 =  applicationDirectory()

F378E0 =  denominator (4/6)

F378E1 =  R = frac(ZZ[x,y]);

F378E2 =  denominator((x+2*y-3)/(x-y))

F378E3 =  R = QQ[a..d]/(a^2,b^2,c^3);

F378E4 =  hf = hilbertSeries R

F378E5 =  denominator hf

F378E6 =  R = QQ[x,y,z,Inverses => true, MonomialOrder => Lex]

F378E7 =  denominator (x*y^-1+y*z^-2+1+y^-1*z^-1)

F379E0 =  positions((10,20,43,105,6,93), odd)

F379E1 =  positions((10,20,43,105,6,93), i -> i<0)

F379E2 =  positions(100..110, isPrime)

F379E3 =  position((10,20,43,105,6), odd)

F379E4 =  position((10,20,43,105,6), odd, Reverse => true)

F379E5 =  select((10,20,43,105,6), odd)

F379E6 =  number((10,20,43,105,6), odd)

F380E0 =  R = QQ[a..d];

F380E1 =  S = QQ[s,t];

F380E2 =  F = map(S,R,{s^3, s^2*t, s*t^2, t^3})

F380E3 =  ker F

F380E4 =  G = map(S,R,{s^5, s^3*t^2-t, s*t-s, t^5})

F380E5 =  ker(G, SubringLimit=>1)

F381E0 =  R = ZZ[x,y,z]

F381E1 =  f = vars R ** vars R

F381E2 =  contract(transpose vars R, f)

F381E3 =  contract(x, f)

F381E4 =  contract(y, f)

F381E5 =  contract(z, f)

F382E0 =  permutations {a,b,c,d}

F382E1 =  permutations 3

F383E0 =  R = QQ[a..d]/(a*b*c*d);

F383E1 =  isModule R

F383E2 =  M = a^2 * R^2 + a*b * R^2

F383E3 =  isModule M

F384E0 =  S = QQ[x,y,z]/ideal(x^3+y^3+z^3);

F384E1 =  T = QQ[u,v,w]/ideal(u^3+v^3+w^3);

F384E2 =  G = map(T,S,matrix{{u,v,w^2}})

F384E3 =  G(x^3+y^3+z)

F384E4 =  R = QQ[x,y,w];

F384E5 =  F = map(S,R)

F384E6 =  F(x^3)

F384E7 =  U = QQ[s,t,u, Degrees => {{1,2},{1,1},{1,3}}];

F384E8 =  H = map(U,R,matrix{{s^2,t^3,u^4}})

F384E9 =  use R; H(x^2+y^2+w^2)

F384E10 =  source H

F384E11 =  target H

F384E12 =  H.matrix

F384E13 =  source H.matrix

F384E14 =  target H.matrix

F385E0 =  R = ZZ/32003[x,y,z];

F385E1 =  I = ideal(x^2,y*z-x);

F385E2 =  module I

F385E3 =  A = matrix{{x*y-z,z^3}};

F385E4 =  M = image A

F385E5 =  ideal M

F385E6 =  coker generators I

F385E7 =  R^1/I

F385E8 =  resolution I

F386E0 =  L = 0..10

F386E1 =  insert(4, "hi", L)

F386E2 =  insert(0, "hi", L)

F386E3 =  insert(11, "hi", L)

F386E4 =  insert(-1, "hi", L)

F386E5 =  apply({-1,-3,-5}, i -> L = insert(i, "hi", L)); L

F387E0 =  R = ZZ/101[w,x,y,z];

F387E1 =  ideal{x^2-w*y, x*y-w*z, x*z-y^2}

F387E2 =  ideal(y^2-x*z,x^2*y-z^2,x^3-y*z)

F387E3 =  E = ZZ/2[x,y, SkewCommutative => true];

F387E4 =  ideal(x^2,x*y)

F387E5 =  W = QQ[x,dx, WeylAlgebra => {x => dx}];

F387E6 =  ideal(dx*x+x*dx)

F387E7 =  I = ideal(12,18)

F387E8 =  mingens I

F387E9 =  ideal ()

F387E10 =  promote(oo,R)

F388E0 =  csc(pi/3)

F389E0 =  allowableThreads

F389E1 =  allowableThreads = 4

F389E2 =  R = ZZ/101[x,y,z];

F389E3 =  I = (ideal vars R)^2

F389E4 =  dogb = I -> () -> res quotient module I

F389E5 =  f = dogb I

F389E6 =  t = schedule f

F389E7 =  t

F389E8 =  isReady t

F389E9 =  while not isReady t do sleep 1

F389E10 =  taskResult t

F389E11 =  assert instance(oo,ChainComplex)

F389E12 =  t' = createTask f

F389E13 =  t'

F389E14 =  schedule t';

F389E15 =  t'

F389E16 =  while not isReady t' do sleep 1

F389E17 =  taskResult t'

F389E18 =  F = createTask(() -> "result of F")

F389E19 =  G = createTask(() -> "result of G")

F389E20 =  addStartTask(F,G)

F389E21 =  schedule F

F389E22 =  while not isReady F do sleep 1

F389E23 =  taskResult F

F389E24 =  while not isReady G do sleep 1

F389E25 =  taskResult G

F390E0 =  R = QQ[x,y,z]/(y^2-x^3-x^7);

F390E1 =  jacobian R

F390E2 =  A = ZZ[a,b,c]/(a^2+b^2+c^2);

F390E3 =  R = A[x,y,z]/(a*x+b*y+c*z-1)

F390E4 =  jacobian R

F391E0 =  egyptian = method();

F391E1 =  egyptian QQ := x -> if x == 0 then 0 else (

          n := ceiling(1/x);

          expression(1/n) + egyptian(x - 1/n));

F391E2 =  egyptian(30/31)

F392E0 =  R = ZZ[a..z];

F392E1 =  M = genericSymmetricMatrix(R,a,3)

F392E2 =  transpose(M) - M == 0

F392E3 =  genericSymmetricMatrix(R,d,5)

F392E4 =  genericSymmetricMatrix(R,3)

F392E5 =  genericSymmetricMatrix(R,5)

F393E0 =  filename = read "file name : "

F393E1 =  peek filename

F393E2 =  R = ZZ[x,y];

F393E3 =  s = read "polynomial : "

F393E4 =  value s

F394E0 =  elapsedTime sleep 1

F395E0 =  R = QQ[x,y,z]/ideal(y^2*z-x^3)

F395E1 =  genus R

F396E0 =  all((1,2,3,4),(2,3,4,5), (i,j) -> i<=j)

F396E1 =  all((1,2,5,4),(2,3,4,5), (i,j) -> i<=j)

F396E2 =  all((1,2,5,4),(2,3,4,5), x -> (print x; false))

F396E3 =  all((1,2,5,4),(2,3,4,5), x -> (print x; true))

F397E0 =  a = tally{1,1,1,1,1,10,10,10,100,100}

F397E1 =  sum a

F398E0 =  Layout

F399E0 =  partitions 4

F399E1 =  conjugate \ oo

F400E0 =  x = {1,2,3,a,b,c,a,b,c,4,4,4,"asdf"};

F400E1 =  y = runLengthEncode x

F400E2 =  peek y

F400E3 =  value \ y

F400E4 =  deepSplice \\ oo

F400E5 =  x === oo

F401E0 =  toSequence {1, 2, 3}

F401E1 =  toSequence "foo"

F401E2 =  toSequence iterator {1, 2, 3}

F401E3 =  toSequence (1, 2, 3)

F402E0 =  VectorExpression {a,b,c}

F403E0 =  R = QQ[a..d];

F403E1 =  f = map(R^1,coker vars R,{{1_R}})

F403E2 =  isWellDefined f

F403E3 =  isWellDefined map(coker vars R, R^1, {{1_R}})

F403E4 =  A = ZZ/5[a]

F403E5 =  factor(a^3-a-2)

F403E6 =  B = A/(a^3-a-2);

F403E7 =  isWellDefined map(A,B)

F403E8 =  isWellDefined map(B,A)

F404E0 =  R = QQ[a..z]

F404E1 =  f = genericMatrix(R,3,5)

F404E2 =  M = coker gens minors_3 f

F404E3 =  C = res M

F404E4 =  D = eagonNorthcott f

F404E5 =  H = prune HH D

F404E6 =  assert( H_0 == M and H_1 == 0 and H_2 == 0 and H_3 == 0 )

F405E0 =  source

F405E1 =  functionBody source

F406E0 =  V = Proj(QQ[x_0..x_5]/(x_0^3+x_5^3))

F406E1 =  P = hilbertPolynomial V

F406E2 =  dim P

F407E0 =  R = ZZ/101

F407E1 =  9_R

F407E2 =  103_R

F407E3 =  9_R * 11_R

F407E4 =  9_R ^ 11

F407E5 =  9_R * 11_R == -2_R

F407E6 =  17_R^-1

F407E7 =  lift (17_R^-1, ZZ)

F408E0 =  F = QQ^4

F408E1 =  wedgeProduct(1,1,F)

F409E0 =  M = random(RR^200, RR^200);

F409E1 =  time SVD(M);

F409E2 =  time SVD(M, DivideConquer=>true);

F410E0 =  gfan = findProgram("gfan", "gfan --help")

F410E1 =  runProgram(gfan, "_version")

F410E2 =  oo#"output"

F410E3 =  runProgram(gfan, "_foo", RaiseError => false)

F410E4 =  oo#"error"

F411E0 =  showStructure

F411E1 =  showStructure(ZZ,QQ,RR,RR_200,QQ[x],Ring)

F412E0 =  R = QQ[x,y]/(ideal(x,y) * ideal(x-1))

F412E1 =  codim R

F412E2 =  R = QQ[x,y]/(ideal(x,y) * ideal(x-1))

F412E3 =  codim R

F412E4 =  codim (R/x)

F413E0 =  f = x -> 2^x

F413E1 =  t = createTask(f,3)

F413E2 =  schedule t

F413E3 =  while not isReady t do sleep 1

F413E4 =  taskResult t

F414E0 =  A = ZZ/3[a,b,c];

F414E1 =  isSkewCommutative A

F414E2 =  B = QQ[a..d,SkewCommutative=>{a,b}]

F414E3 =  isSkewCommutative B

F414E4 =  C = B[x,y]

F414E5 =  isSkewCommutative C

F414E6 =  b_C * a_C

F414E7 =  D = B/(a*d-b*c)

F414E8 =  isSkewCommutative D

F415E0 =  QQ[x,y,z, Degrees => {2:1, 2}]

F415E1 =  degrees oo

F415E2 =  QQ[x,y, Degrees => {{1,0}, {0,1}}]

F415E3 =  degrees oo

F415E4 =  QQ[a..f, DegreeRank => 3]

F415E5 =  transpose matrix degrees oo

F416E0 =  I = Grassmannian(1,6, CoefficientRing => ZZ/101);

F416E1 =  S = ring I

F416E2 =  elapsedTime C = minimalBetti I

F416E3 =  I = ideal I_*;

F416E4 =  elapsedTime C = minimalBetti(I, DegreeLimit=>2)

F416E5 =  I = ideal I_*;

F416E6 =  elapsedTime C = minimalBetti(I, DegreeLimit=>1, LengthLimit=>5)

F416E7 =  I = ideal I_*;

F416E8 =  elapsedTime C = minimalBetti(I, LengthLimit=>5)

F417E0 =  S = QQ[x,y,z];

F417E1 =  I = ideal(x^2, y^2)

F417E2 =  isIdeal I

F417E3 =  J = monomialIdeal I

F417E4 =  isIdeal J

F417E5 =  R = QQ[a..d]/(a*b*c*d);

F417E6 =  I = ideal(a^2,b^2) * R^1

F417E7 =  isIdeal I

F417E8 =  J = a^2 * R^2 + a*b * R^2

F417E9 =  isIdeal J

F418E0 =  toString {1,4,a,f,212312,2.123243242}

F418E1 =  R = QQ[x_1..x_5];

F418E2 =  toExternalString R

F418E3 =  x_1^3-3/4*x_5*x_3

F418E4 =  toExternalString oo

F418E5 =  value oo

F419E0 =  t1 = table({1,3,5,7}, {0,1,2,4}, (i,j) -> i^j)

F419E1 =  t2 = table(5, 5, (i,j) -> i+j)

F419E2 =  netList t1

F420E0 =  tensor(ZZ^2, ZZ^3, ZZ^4)

F420E1 =  code lookup(symbol intersect, Module)

F421E0 =  R = QQ[a..d];

F421E1 =  diagonalMatrix vars R

F421E2 =  diagonalMatrix matrix{{0,2},{4,6}}

F422E0 =  lift(4/2,ZZ)

F422E1 =  R = ZZ[x];

F422E2 =  f = ((x+1)^3*(x+4))/((x+4)*(x+1))

F422E3 =  lift(f,R)

F422E4 =  A = QQ[a..d];

F422E5 =  B = A/(a^2-b,c^2-d-a-3);

F422E6 =  f = c^5

F422E7 =  lift(f,A)

F422E8 =  jf = jacobian ideal f

F422E9 =  lift(jf,A)

F422E10 =  use B;

F422E11 =  g = (a^2+2*a-3)-(a+1)^2

F422E12 =  lift(g,A)

F422E13 =  lift(g,QQ)

F422E14 =  lift(lift(g,QQ),ZZ)

F422E15 =  lift(3.0,ZZ)

F422E16 =  lift(3.0,QQ)

F422E17 =  lift(123/2341.,QQ)

F422E18 =  promote(123/2341.,QQ)

F422E19 =  factor oo

F422E20 =  .0001^QQ

F422E21 =  .0001_QQ

F423E0 =  z = 3-4*ii

F423E1 =  z^5

F423E2 =  1/z

F423E3 =  +ii

F423E4 =  numeric_200 ii

F423E5 =  sort {1+ii,2+ii,1-ii,2-ii,1/2,2.1,7/5}

F423E6 =  precision z

F423E7 =  class z

F423E8 =  ring z

F423E9 =  3p100+2p90e3*ii

F423E10 =  printingPrecision

F423E11 =  x = {1/3.*ii,1/3p100*ii}

F423E12 =  y = toExternalString x

F423E13 =  value y === x

F424E0 =  size2 4

F424E1 =  size2 3

F424E2 =  size2 4.

F424E3 =  size2 3.99999999

F424E4 =  size2 0

F424E5 =  size2 0.

F424E6 =  size2 (1/0.)

F424E7 =  size2 (1/0.-1/0.)

F425E0 =  R = QQ[x,y]

F425E1 =  X = new Type of List

F425E2 =  Y = new Type of X

F425E3 =  Z = new Type of X

F425E4 =  showUserStructure

F426E0 =  R = ZZ/101[x,y,z];

F426E1 =  listForm (x^2 - 7 + x*y*z^11 + y)

F427E0 =  R = ZZ/101[x,y,z,u,w]

F427E1 =  I = ideal(x^2-x^2-y^2, z^2+x*y, w^2-u^2, x^2-y^2)

F427E2 =  trim I

F427E3 =  trim (R^1/I)

F427E4 =  R = ZZ/32003[a..d]

F427E5 =  M = coker matrix {{a,1,b},{c,3,b+d}}

F427E6 =  trim M

F427E7 =  prune M

F428E0 =  1 .. 10

F429E0 =  R = ZZ/101[x, Degrees => {2}];

F429E1 =  I = ideal x^2

F429E2 =  s = hilbertSeries I

F429E3 =  numerator s

F429E4 =  poincare I

F429E5 =  reduceHilbert s

F429E6 =  R=ZZ/101[x, Degrees => {{1,1}}];

F429E7 =  I = ideal x^2;

F429E8 =  s = hilbertSeries I

F429E9 =  numerator s

F429E10 =  poincare I

F429E11 =  reduceHilbert s

F430E0 =  L = {"some", "strings", "to", "join"}

F430E1 =  horizontalJoin L

F430E2 =  concatenate L

F430E3 =  demark(" ", L) --to insert spaces when concatenating strings

F430E4 =  M = for i from 1 to 10 list if isPrime i then netList{toString i, toString i^2}

F430E5 =  horizontalJoin M

F430E6 =  R = QQ[x];

F430E7 =  N1 = for i from 1 to 5 list if isPrime i then netList{x^i, i*x, i:x, i} else toString i

F430E8 =  horizontalJoin N1

F430E9 =  N2 = for i from 1 to 5 list if isPrime i then netList{x^i, i*x, i:x, i} else (toString i)^-6

F430E10 =  horizontalJoin N2

F430E11 =  A = net matrix apply(3, i -> apply(3, j -> random(10)))

F430E12 =  B = net matrix apply(3, i -> apply(3, j -> random(10)))

F430E13 =  horizontalJoin(A,B)

F430E14 =  horizontalJoin {(A, B), (A, B, (A))}

F431E0 =  R = ZZ[x,y]

F431E1 =  random(5, R)

F431E2 =  R = GF(25, Variable => a)[x, y];

F431E3 =  VerticalList for i to 6 list random(3, R)

F432E0 =  MapExpression {a,b,c}

F433E0 =  M = ZZ^5

F433E1 =  exteriorPower(3,M)

F434E0 =  x = tally {a,a,a,b,b,c}

F434E1 =  y = tally {b,c,c,d,d,d}

F434E2 =  x + y

F435E0 =  R = QQ[a..g];

F435E1 =  I = ideal"ab2-c3,abc-cef,ade-cfg"

F435E2 =  syz gens I     	       

F436E0 =  R = QQ[x,y,z,a..d,MonomialOrder=>ProductOrder{3,4}];

F436E1 =  f = matrix{{0,x^2*(a+b)}, {a*x+2*b*y, y^2*(c+d)}}

F436E2 =  leadTerm(1,f)

F437E0 =  R = QQ[x..z]

F437E1 =  p = (x-y-1)^3

F437E2 =  m = matrix {{x^2, x^2-y^2, x*y*z^7 }}

F437E3 =  M = image m

F437E4 =  f = temporaryFileName()

F437E5 =  f << toString (p,m,M) << close

F437E6 =  get f

F437E7 =  (p',m',M') = value get f

F437E8 =  p == p'

F437E9 =  m == m'

F437E10 =  M == M'

F437E11 =  removeFile f

F438E0 =  R = ZZ/101[x,y];

F438E1 =  M = coker vars R

F438E2 =  M ** R[t]

F439E0 =  R = ZZ/32003[x,y,z];

F439E1 =  Q = R/(x^2+y^2-z^5, z-x-y^2)

F439E2 =  f = z^2+y^2

F439E3 =  g = z^2+2*x-2*z-3*z^5+3*x^2+6*y^2

F439E4 =  f == g

F439E5 =  ann f

F440E0 =  num

F440E1 =  num = 5

F440E2 =  num

F440E3 =  global num

F441E0 =  selectiter = select("foo", i -> i == "o")

F441E1 =  next selectiter

F441E2 =  next selectiter

F441E3 =  next selectiter

F442E0 =  f = openInOut "!cat"

F442E1 =  f << "hi there" << closeOut;

F442E2 =  atEndOfFile f

F442E3 =  peek read f

F442E4 =  atEndOfFile f

F443E0 =  R = QQ[a..d]/(a*b*c*d)

F443E1 =  X = Proj R

F443E2 =  OO_X^{-1,-2,3}

F443E3 =  Y = Proj (QQ[x,y,z,Degrees=>{{1,0},{1,-1},{1,-2}}])

F443E4 =  OO_Y^{{1,2},{-1,3}}

F443E5 =  degrees oo

F444E0 =  R = ZZ/101[x,y,z,Degrees => {1,2,3}]

F444E1 =  f = 1 + y + z^2

F444E2 =  homogenize(f,x)

F444E3 =  homogenize(f,x,{1,0,-1})

F445E0 =  R = QQ[x,y,z]

F445E1 =  S = QQ[t,u]

F445E2 =  f = map(R,S,{x*y,y*z})

F445E3 =  preimage_f ideal(x^2,y^2)

F446E0 =  R = ZZ/5[x,y,z];

F446E1 =  F = R^3

F446E2 =  F_{0,1,2}

F446E3 =  F_{0,1}

F446E4 =  F_{1,2}

F446E5 =  f = matrix{{x,y,z}}

F447E0 =  rsort {4,2,3,1}

F447E1 =  R = QQ[a..d];

F447E2 =  m = matrix{{a*b, c*d, a*d^3, b^3*c, 1_R}}

F447E3 =  rsort(m, DegreeOrder=>Ascending)

F448E0 =  R = ZZ[x];

F448E1 =  texMath (x-1)^6

F449E0 =  R = GF(3^2,Variable => a);

F449E1 =  random(R^3,R^4)

F449E2 =  T = R[x,y];

F449E3 =  random(T^3,T^{4:-1})

F449E4 =  S = R[p..z];

F449E5 =  genericMatrix(S,t,3,2)

F449E6 =  genericSymmetricMatrix(S,s,3)

F449E7 =  genericSkewMatrix(S,u,3)

F450E0 =  leadComponent vector{0,0,1,0,1}

F450E1 =  leadComponent vector{0,0,1,2,3,4,0}

F450E2 =  leadComponent matrix{{0,0,1}, {0,1,0}, {1,0,0}}

F450E3 =  R = ZZ/5[a,b,c]; leadComponent vector{a*b^2,3*b*c^3,0}

F451E0 =  R = QQ[a,b,c,d,e,f][x,y];

F451E1 =  F = a*x^2+b*x*y+c*y^2

F451E2 =  (M,C) = coefficients F

F451E3 =  M*C === matrix F

F451E4 =  G = d*x^2+e*x*y+f*y^2

F451E5 =  P = matrix{{x*F,y*F,x*G,y*G}}

F451E6 =  (M,C) = coefficients P

F451E7 =  M*C === P

F451E8 =  (M,C) = coefficients(P, Monomials=>{x^3,y^3,x^2*y,x*y^2})

F451E9 =  (M,C) = coefficients(P, Monomials=>{x^3,y^3})

F451E10 =  M*C == P

F452E0 =  makeDocumentTag "some title"

F452E1 =  makeDocumentTag (symbol ++, Module, Module)

F452E2 =  makeDocumentTag ((symbol _, symbol =), Symbol, Thing)

F452E3 =  makeDocumentTag (Tor,ZZ,Module,Module)

F453E0 =  x

F453E1 =  q0r55

F453E2 =  f'

F453E3 =  o2

F454E0 =  p=nextPrime(random(2*10^4))

F454E1 =  kk=ZZ/p

F454E2 =  I=minors(4,random(R^5,R^{4:-1}));

F454E3 =  codim I, degree I

F454E4 =  time randomKRationalPoint(I)

F454E5 =  R=kk[x_0..x_5];

F454E6 =  I=minors(3,random(R^5,R^{3:-1}));

F454E7 =  codim I, degree I

F454E8 =  time randomKRationalPoint(I)

F454E9 =  p=10007,kk=ZZ/p,R=kk[x_0..x_2]

F454E10 =  n=5; sum(1..n,j->(-1)^(j-1)*binomial(n,j)*(n-j)!/n!)+0.0

F454E11 =  I=ideal random(n,R);

F454E12 =  time (#select(apply(100,i->(degs=apply(decompose(I+ideal random(1,R)),c->degree c);

                     #select(degs,d->d==1))),f->f>0))

F455E0 =  R = ZZ/101[a..d];

F455E1 =  M = coker matrix{{a,b},{c,d}}

F455E2 =  codim M

F456E0 =  R = QQ[x,y,z];

F456E1 =  R

F456E2 =  describe R

F456E3 =  0_R

F456E4 =  1_R

F456E5 =  11_R

F456E6 =  R_0^10+R_1^3+R_2

F456E7 =  numgens R

F456E8 =  apply(numgens R, i -> R_i^i)

F456E9 =  sum(numgens R, i -> R_i^i)

F456E10 =  gens R

F456E11 =  vars R

F456E12 =  index x, index y, index z

F456E13 =  coefficientRing R

F456E14 =  random(2,R)

F456E15 =  basis(2,R)

F456E16 =  ZZ[a,b,c][d,e,f];

F456E17 =  (a+d+1)^2

F456E18 =  QQ[rho,sigma,tau];

F456E19 =  (rho - sigma)^2

F456E20 =  ZZ[b..k];

F456E21 =  ZZ[symbol b .. symbol k];

F456E22 =  vars (0..4)

F456E23 =  ZZ[vars (0..4),vars(26..30),vars 51]

F456E24 =  ZZ[t,p_0,p_1,q_0,q_1];

F456E25 =  ZZ[p_(0,0) .. p_(2,1),q_0..q_5]

F456E26 =  (p_(0,0)+q_2-1)^2

F456E27 =  protect xx

F456E28 =  ZZ[ee_[xx],ee_[yy],ee_[zz]]

F456E29 =  R = QQ[a,b][x]

F456E30 =  (a+b+x)^3

F456E31 =  R.FlatMonoid

F456E32 =  ZZ[a,b,c] === ZZ[a,b,c]

F457E0 =  R = QQ[a..d, Weights=>{1,2,3,4}]

F457E1 =  M = monoid R

F457E2 =  use M

F457E3 =  class a

F458E0 =  R = ZZ[x,y]

F458E1 =  f = random(R^2,R^{2:-1})

F458E2 =  g = vars R ++ vars R

F458E3 =  (q,r) = quotientRemainder(f,g)

F458E4 =  g*q+r == f

F458E5 =  f = f + map(target f, source f, id_(R^2))

F458E6 =  (q,r) = quotientRemainder(f,g)

F458E7 =  g*q+r == f

F459E0 =  R = ZZ[a..d];

F459E1 =  f = matrix {{a,b}}

F459E2 =  g = transpose matrix {{c,d}}

F459E3 =  f ** g

F460E0 =  s = factor 112

F460E1 =  peek s

F460E2 =  peek'_2 s

F461E0 =  R = ZZ/101[a,b,c];

F461E1 =  I =ideal(a^3+b^3+c^3)

F461E2 =  eulers I

F462E0 =  uniquePermutations {a,b,a,b}

F463E0 =  accumulate(plus, {0,1,2,3,4,5})

F463E1 =  accumulate(concatenate, {a,b,c,d,e})

F463E2 =  accumulate((i,j) -> i|j|i, {"a","b","c","d","e"})

F463E3 =  accumulate(plus, 0, {1,2,3,4,5})

F463E4 =  accumulate((x, y) -> x^y, 2, {3,2,1,2})

F463E5 =  accumulate({a,b,c,d,e}, concatenate)

F463E6 =  accumulate({a,b,c,d}, e, concatenate)

F463E7 =  accumulate({2,3,2,1}, 2, (x, y) -> x^y)

F463E8 =  iter = accumulate(identity, "abcde")

F463E9 =  next iter

F463E10 =  next iter

F463E11 =  next iter

F463E12 =  fold({2,3,2,1}, 2, (x,y) -> x^y)

F464E0 =  x = new HashTable from {a => 1, b => 2, c => 3}

F464E1 =  pairs x

F464E2 =  d = new Dictionary

F464E3 =  getGlobalSymbol (d, "foo")

F464E4 =  getGlobalSymbol (d, "bar")

F464E5 =  pairs d

F464E6 =  first oo

F464E7 =  class \ oo

F464E8 =  L = {3, 5, 7};

F464E9 =  pairs L

F464E10 =  pairs {apple, banana, carrot}

F465E0 =  synonym ZZ

F465E1 =  Stack = new Type of HashTable

F465E2 =  synonym Stack

F465E3 =  Stack.synonym = "Deligne-Mumford stack"

F465E4 =  ofClass Stack

F466E0 =  R = ZZ/32003[x,y,z];

F466E1 =  P = R^3;

F466E2 =  M = image(x*P_{1}+y*P_{2} | z*P_{0})

F466E3 =  N = image(x^4*P_{1} + x^3*y*P_{2} + x*y*z*P_{0})

F466E4 =  h = inducedMap(M,N)

F466E5 =  source h == N

F466E6 =  target h == M

F466E7 =  ambient M == ambient N

F467E0 =  123456789^5

F467E1 =  matrix{{123456789^5}}

F467E2 =  gcd(3782621293644611237896400,85946734897630958700)

F467E3 =  n = 12345/6789

F467E4 =  n^5

F467E5 =  toString(n^5)

F467E6 =  A = ZZ/32003;

F467E7 =  123456789 * 1_A

F467E8 =  (123456789_A)^5

F467E9 =  A2 = GF(8,Variable=>a)

F467E10 =  ambient A2

F467E11 =  a^3+a+1

F467E12 =  A3 = ZZ/2[a]/(a^20+a^3+1);

F467E13 =  n = a+a^2

F467E14 =  n^5

F467E15 =  n = 123456789.0

F467E16 =  n = n * 1_RR

F467E17 =  n^5

F467E18 =  R3 = frac(ZZ[a,b,c])

F467E19 =  n = 12345*a + 12345/(78*b*c)

F467E20 =  n^2

F467E21 =  n/(9*c)

F468E0 =  t = hashTable {{1,8},{2,20},{3,4},{4,20}}

F468E1 =  scanValues(t, print)

F468E2 =  scanValues(t, v -> if v>10 then print v)

F469E0 =  A = ZZ[x]

F469E1 =  (lf,cf) = topCoefficients (7*x^4-13*x^3+x+1)

F469E2 =  v = first support lf

F469E3 =  e = first degree lf

F469E4 =  B = ZZ[x,y,z]

F469E5 =  f = y^4*(3*z^3-z^2-1) - y^3*z^7 + y + z^12

F469E6 =  (lf,cf) = topCoefficients f

F470E0 =  R = QQ[a..e]

F470E1 =  C = res coker vars R

F470E2 =  min C

F470E3 =  dual C

F470E4 =  min dual C

F471E0 =  log 10

F471E1 =  log_2 10

F471E2 =  log_10 2p100

F472E0 =  programPaths#"gfan" = "/path/to/gfan/" 

F472E1 =  gfan = findProgram("gfan", "gfan _version --help", Verbose => false)

F472E2 =  findProgram("topcom", "cube 3", Verbose => false, Prefix => {

         (".*", "topcom-"),

         ("^(cross|cube|cyclic|hypersimplex|lattice)$", "TOPCOM-"),

         ("^cube$", "topcom_")})

F472E3 =  findProgram("gfan", "gfan _version --help", Verbose => false,

       MinimumVersion => ("0.5",

         "gfan _version | head -2 | tail -1 | sed 's/gfan//'"))

F472E4 =      

F473E0 =  dir = temporaryFileName()

F473E1 =  makeDirectory dir

F473E2 =  readDirectory dir

F473E3 =  removeDirectory dir

F474E0 =  R = ZZ/101[a..f];

F474E1 =  m = matrix{{a,b,c,d}};

F474E2 =  m1 = schreyerOrder m

F474E3 =  F = source m1

F474E4 =  g = syz m1

F474E5 =  leadTerm g

F474E6 =  schreyerOrder target m

F474E7 =  schreyerOrder source g

F474E8 =  R = QQ[a..f];

F474E9 =  I = ideal"abc-def,a2c-d2f,aef-bcd,a3-d3,af2-cd2"

F474E10 =  F = syz gens I

F474E11 =  betti gens gb syz F

F474E12 =  G = schreyerOrder F

F474E13 =  betti gens gb syz G	  

F475E0 =  F = GF(25,Variable=>a)

F475E1 =  ambient F

F476E0 =  isGlobalSymbol "res"

F476E1 =  isGlobalSymbol "resres"

F477E0 =  y = tally {1,2,3,a,b,1,2,a,1,2,{a,b},{a,b},a}

F477E1 =  y_2

F477E2 =  y_5

F477E3 =  y_{a,b}

F477E4 =  tally "Hello, world!"

F478E0 =  toAbsolutePath "a/b.m2"

F479E0 =  R = QQ[x,y];

F479E1 =  f = x^3 + 99*y;

F479E2 =  f[1000,3]

F480E0 =  RR_100[x]

F480E1 =  p = x^13 + 5*x^9 + 7*x^4 + x +1

F480E2 =  roots p

F480E3 =  o3#0

F480E4 =  ZZ[x]

F480E5 =  p = x^13 + 5*x^9 + 7*x^4 + x +1

F480E6 =  roots(p^2, Precision=>150, Unique=>true)

F480E7 =  o7#0

F481E0 =  degreesMonoid {1,2,3}

F481E1 =  degreesMonoid 3

F481E2 =  assert instance(T_0, IndexedVariable)

F481E3 =  use degreesMonoid 3

F481E4 =  assert instance(T_0, degreesMonoid 3)

F481E5 =  A = degreesRing 4

F481E6 =  assert instance(T_0, degreesRing 4)

F482E0 =  pi

F482E1 =  +pi

F482E2 =  numeric_100 pi

F482E3 =  2. * pi

F482E4 =  2p100 * pi

F482E5 =  exp(2*pi*ii/17)

F483E0 =  printingPrecision=2;

F483E1 =  M = map(RR^3, RR^5, (i,j) -> (i+1)^j * 1.0)

F483E2 =  (S,U,V) = SVD(M)

F483E3 =  M' = (transpose U) * M * (transpose V)

F483E4 =  e = 1e-10;

F483E5 =  clean_e M'

F483E6 =  clean_e norm (1 - U * transpose U)

F483E7 =  printingAccuracy = 2

F483E8 =  M'

F483E9 =  (S', U', V') = SVD(M, DivideConquer => true)

F483E10 =  norm \ ({S', U', V'}-{S, U, V})

F484E0 =  R = QQ[a..g]

F484E1 =  f = a^3+b^2*c+3*f^10*d-1+e-e

F484E2 =  support f

F484E3 =  M = matrix"a+b2,c+g2;c,a-1"

F484E4 =  support M

F484E5 =  A = ZZ[a,b]

F484E6 =  f = (a+r+z+1)^2+y

F484E7 =  S = support f

F484E8 =  ring S_2 === ring f

F484E9 =  select(S, x -> index x < numgens C)

F484E10 =  indices f

F484E11 =  apply(support f, index)

F485E0 =  F = frac ZZ

F485E1 =  F = frac (ZZ[a,b])

F485E2 =  R = ZZ/101[x,y];

F485E3 =  gens gb ideal(x^2*y - y^3)

F485E4 =  K = frac R;

F485E5 =  gens gb ideal(x^2*y - y^3)

F485E6 =  a*b/b^4

F485E7 =  f = (x-y)/(x^6-y^6)

F485E8 =  (x^3 - y^3) * f

F485E9 =  numerator f

F485E10 =  denominator f

F485E11 =  liftable(1/f,R)

F485E12 =  liftable(f,R)

F485E13 =  lift(1/f,R)

F485E14 =  S = K[u,v];

F485E15 =  I = ideal(y^2*u^3 + x*v^3, u^2*v, u^4);

F485E16 =  gens gb I

F485E17 =  Ires = res I

F485E18 =  Ires.dd_2

F485E19 =  A = ZZ/101[a,b,c];

F485E20 =  f = map(K, A, {x^3/y^4, x^2/y^2, (x^2+y^2)/y^4});

F485E21 =  kernel f

F486E0 =  maxAllowableThreads

F487E0 =  Gamma 6

F487E1 =  Gamma(3, 7)

F488E0 =  R = ZZ/10007[x,y,z];

F488E1 =  g = gb ideal(x^2, x*y-z^2, z^5);

F488E2 =  target g

F489E0 =  coth(pi/3)

F490E0 =  L = {1,3,6,5,3,1,2,8,8,8}

F490E1 =  partition(odd, L)

F490E2 =  partition(odd, set L)

F490E3 =  partition(odd, tally L)

F490E4 =  partition (even, {3,3,5},{true,false})

F490E5 =  R = QQ[a..f]

F490E6 =  I = ideal"ab,ade,ac3,d4,b3,adf,f4,e10"

F490E7 =  partition(f -> first degree f, flatten entries gens I)

F491E0 =  ///-- We can compute $(x+y)^3$ as follows.

F491E1 =  tutorial oo

F491E2 =  peek oo

F492E0 =  o = Limit => 5

F492E1 =  peek o

F492E2 =  ht = new HashTable from {a => 5, b => 7}

F492E3 =  keys ht

F492E4 =  values ht

F492E5 =  pairs ht

F492E6 =  o#0

F492E7 =  o#1

F493E0 =  R = ZZ[a..f]

F493E1 =  m = mutableMatrix genericMatrix(R,a,2,3)

F493E2 =  columnMult(m,0,c)

F493E3 =  m

F494E0 =  R = ZZ/31991[a,b,c] -- the coordinate ring of P^2

F494E1 =  ipoint1 = ideal matrix({{a,b}})

F494E2 =  ipoint1 = ideal(a,b)

F494E3 =  ipoint2 = ideal(a,c)

F494E4 =  ipoint3 = ideal(b,c)

F494E5 =  icurves1 = intersect(

                    ipoint1^2,

                    ipoint2^2,

                    ipoint3^2

                )

F494E6 =  Icurves1 = gens icurves1

F494E7 =  F1 = Icurves1 * random(source Icurves1, R^{-6})

F494E8 =  betti F1

F494E9 =  Icurves2 = gens (ipoint1^3)

F494E10 =  F2 = Icurves2 * random(source Icurves2, R^{-6})

F494E11 =  betti F2

F494E12 =  i = ideal((a-b)^2) + (ipoint1^4)

F494E13 =  icurves3 = intersect(i, ipoint3^2)

F494E14 =  Icurves3 = gens icurves3

F494E15 =  F3 = Icurves3 * random(source Icurves3, R^{-6})

F494E16 =  betti F3

F494E17 =  can1 = basis(3, intersect(ipoint1,ipoint2,ipoint3))

F494E18 =  target can1

F494E19 =  source can1

F494E20 =  can1 = can1 ** R

F494E21 =  can1 = super can1

F494E22 =  can2 = basis(3, ipoint1^2)

F494E23 =  can2 = super (can2 ** R)

F494E24 =  can3 = basis(3, intersect(ideal(a-b) + ipoint1^2, ipoint3))

F494E25 =  can3 = super (can3 ** R)

F494E26 =  betti  can1

F494E27 =  betti  can2

F494E28 =  betti  can3

F494E29 =  S = (coefficientRing R)[x_0..x_6]

F494E30 =  T1 = R/ideal F1

F494E31 =  f1 = map(T1,S,substitute(can1, T1))

F494E32 =  IC1 = mingens ker f1

F494E33 =  T2 = R/ideal F2

F494E34 =  f2 = map(T2,S,substitute(can2, T2))

F494E35 =  IC2 = mingens ker f2

F494E36 =  T3 = R/ideal F3

F494E37 =  f3 = map(T3,S,substitute(can3, T3))

F494E38 =  IC3 = mingens ker f3

F494E39 =  IC1res = res(coker IC1)

F494E40 =  betti  IC1res

F494E41 =  IC2res = res(coker IC2)

F494E42 =  betti  IC2res

F494E43 =  IC3res = res(coker IC3)

F494E44 =  betti  IC3res

F494E45 =  IC1 = matrix entries IC1

F494E46 =  IC1res = res(coker IC1, DegreeLimit => {1})

F494E47 =  betti IC1res

F494E48 =  ff1 = map(R,S,can1)

F494E49 =  G = map(coker F1,ff1)

F494E50 =  trim coimage G

F495E0 =  relativizeFilename("a/b/","a/b/c/d")

F495E1 =  relativizeFilename("a/b/c/d","a/b/")

F495E2 =  relativizeFilename("a/b/c/d","a/b/e/f")

F496E0 =  x = {1,2,3,4,5,0}

F496E1 =  y = inversePermutation x

F496E2 =  all(#x, i -> x#(y#i) == i)

F496E3 =  all(#x, i -> y#(x#i) == i)

F496E4 =  x_x_x

F496E5 =  x_x_x_x_x_x

F496E6 =  x_y

F496E7 =  y_x

F497E0 =  R = ZZ[a..z];

F497E1 =  M = genericSkewMatrix(R,a,3)

F497E2 =  transpose(M) + M == 0

F497E3 =  genericSkewMatrix(R,d,5)

F497E4 =  genericSkewMatrix(R,3)

F497E5 =  genericSkewMatrix(R,5)

F498E0 =  R = ZZ/101[x,y];

F498E1 =  m = ideal vars R

F498E2 =  M = m/m^3

F498E3 =  C = resolution M

F498E4 =  h = resolution inducedMap(M, m^2/m^4)

F499E0 =  A = QQ[a..f]

F499E1 =  F = 3*a^2-b-d+101*c

F499E2 =  sub(F, {a=>1, b=>b^4})

F499E3 =  sub(F, matrix{{x,y,1,0}})

F499E4 =  sub(F, A)

F499E5 =  D = B/(a*b*c*d);

F499E6 =  sub(F,D)

F499E7 =  use ring F;

F499E8 =  sub(F, {a=>1, b=>3, c=> 1, d=>13})

F499E9 =  use B;

F499E10 =  M = image(vars B ++ vars B)

F499E11 =  N = substitute(M, {a=>b+c,c=>1})

F499E12 =  M' = prune M

F499E13 =  N' = coker substitute(presentation M', {a=>b+c,c=>1})

F499E14 =  hf = hilbertSeries coker matrix{{a,b^3,d^5}}

F499E15 =  hf1 = reduceHilbert hf

F499E16 =  use ring numerator hf;

F499E17 =  sub(hf1, T => -1)

F499E18 =  sub(hf, T => a)

F499E19 =  value oo

F499E20 =  oo == value sub(hf1, T=>a)

F499E21 =  use B;

F499E22 =  G = map(B,B,{a=>1, b=>b^4})

F499E23 =  G F

F500E0 =  f = i -> i+1

F500E1 =  g = i -> i^2

F500E2 =  apply(0 .. 10, f @@ g)

F500E3 =  apply(0 .. 10, g @@ f)

F501E0 =  R = ZZ[x,y]

F501E1 =  f = random(R^2,R^{2:-1})

F501E2 =  g = vars R ++ vars R

F501E3 =  remainder(f,g)

F501E4 =  f = f + map(target f, source f, id_(R^2))

F501E5 =  remainder(f,g)

F502E0 =  R = ZZ/101[x,y,z];

F502E1 =  f = vars R

F502E2 =  M = R^4

F502E3 =  M^{0,1}

F502E4 =  M_{2,3}

F502E5 =  inducedMap(source f, ker f)

F502E6 =  inducedMap(coker f, target f)

F503E0 =  R = QQ[w,x,y,z];

F503E1 =  (L,p) = irreducibleCharacteristicSeries ideal(x^2-y*w,x^3-z*w^2)

F503E2 =  apply(L, m -> p m)

F503E3 =  p^-1

F504E0 =  R = QQ[x_1 .. x_24];

F504E1 =  f = genericMatrix(R,2,4*3)

F504E2 =  isHomogeneous f

F504E3 =  g = adjoint(f,R^4,R^3)

F504E4 =  g = adjoint(f,R^4,R^{-1,-1,-1})

F504E5 =  isHomogeneous g

F505E0 =  R = QQ[a..d];

F505E1 =  M = monoid R

F505E2 =  gens M

F506E0 =  p = temporaryFileName() | "/"

F506E1 =  mkdir p

F506E2 =  isDirectory p

F506E3 =  (fn = p | "foo") << "hi there" << close

F506E4 =  get fn

F506E5 =  removeFile fn

F506E6 =  removeDirectory p

F507E0 =  s = new MutableList from {a,b,c};

F507E1 =  s#2 = 1234;

F507E2 =  s

F507E3 =  peek s

F508E0 =  ex := examples(resolution, Ideal)

F508E1 =  last capture ex 

F508E2 =  print ex

F509E0 =  R = QQ[x,y,z];

F509E1 =  f = matrix{{x^2-y*z, x*y*z + z^4}, {x-1, 2*y^2+z^2-1}}

F509E2 =  diff(x,f)

F509E3 =  diff(x^2-y*z,f)

F510E0 =  R = ZZ[x,y];

F510E1 =  f = random(R^{2},R^2)

F510E2 =  compactMatrixForm = false;

F510E3 =  f

F511E0 =  d = new Dictionary

F511E1 =  sym = getGlobalSymbol(d,"foo")

F511E2 =  d

F511E3 =  peek d

F511E4 =  d#"foo" === sym

F511E5 =  d#"asfd" = sym

F511E6 =  peek d

F512E0 =  A = QQ[x,y,z];

F512E1 =  f = x^3+y^2+z^2

F512E2 =  f^2-f

F512E3 =  B = ZZ/32003[x,y,z];

F512E4 =  C = GF(8)[x,y,z];

F512E5 =  D = ZZ[x,y,z];

F512E6 =  E = (frac(ZZ[a,b,c]))[x,y,z];

F512E7 =  x

F512E8 =  use D

F512E9 =  x

F512E10 =  describe D

F513E0 =  M = monoid[a,b,c, Degrees => {2,3,4}]

F513E1 =  degrees M

F513E2 =  M_0 * M_1^6

F513E3 =  monoid[x,y,z]

F513E4 =  x

F513E5 =  use ooo

F513E6 =  x * y^6

F513E7 =  options M

F513E8 =  describe M

F513E9 =  toExternalString M

F513E10 =  R = ZZ[x,y, Degrees => {-1,-2}, Heft => {-1}]

F513E11 =  degree \ gens R

F513E12 =  transpose vars R

F513E13 =  QQ[x][y]

F513E14 =  oo.FlatMonoid

F513E15 =  QQ[x][y][z]

F513E16 =  oo.FlatMonoid

F513E17 =  QQ[x][y, Join => false]

F513E18 =  oo.FlatMonoid

F514E0 =  R = QQ[a..d];

F514E1 =  f = matrix{{0,a^2-b*c},{c,d}}

F514E2 =  leadTerm f

F514E3 =  R = ZZ[a..d][x,y,z];

F514E4 =  f = matrix{{0,(a+b)*x^2},{c*x, (b+c)*y}}

F514E5 =  leadTerm f

F515E0 =  R = ZZ/7[x]/(x^46-x-1);

F515E1 =  (x+4)^(7^100)

F515E2 =  S = ZZ[t,Inverses=>true,MonomialOrder=>RevLex];

F515E3 =  t^-1

F515E4 =  T = frac(ZZ[a,b,c]);

F515E5 =  (a+b+c)^-1

F516E0 =  R = ZZ[x]

F516E1 =  liftable ((x-1)*(x+1)-x^2, ZZ)

F516E2 =  liftable(3/4,ZZ)

F516E3 =  liftable((3/4)*4,ZZ)

F517E0 =  timing 3^30

F517E1 =  peek oo

F518E0 =  ofClass class 3

F518E1 =  peek oo

F518E2 =  ofClass Ring

F518E3 =  needsPackage "Text"

F518E4 =  SPAN ofClass {HashTable, ProjectiveVariety}

F518E5 =  document { Key => foo, "We may need ", ofClass ZZ, " and ", ofClass HashTable, "." }

F518E6 =  help foo

F519E0 =  apply(-3..3,i->try 1/i else infinity)

F520E0 =  maxPosition {1, 6, 4, 2, 6}

F520E1 =  R1 = QQ[x, y, z, MonomialOrder => Lex];

F520E2 =  maxPosition {x*y^2, x*y^2 + z^2, y^4, y*z^5}

F520E3 =  R2 = QQ[x, y, z, MonomialOrder => GRevLex];

F520E4 =  maxPosition (x*y^2, x*y^2 + z^2, y^4, y*z^5)

F521E0 =  C = gradedModule(ZZ^1,ZZ^6,ZZ^2)

F521E1 =  C ** ZZ^3

F521E2 =  betti oo

F521E3 =  ZZ^3 ** C

F522E0 =  dir = temporaryFileName()

F522E1 =  makeDirectory dir

F522E2 =  (fn = dir | "/" | "foo") << "hi there" << close

F522E3 =  readDirectory dir

F522E4 =  removeFile fn

F522E5 =  removeDirectory dir

F523E0 =  typicalValues#isRing

F524E0 =  R = QQ[a..d];

F524E1 =  I = ideal(a^3, b^2, a*b*c);

F524E2 =  F = hilbertPolynomial I

F524E3 =  degree F

F524E4 =  dim F

F524E5 =  (dim I - 1, degree I)

F525E0 =  gbTrace = 3

F525E1 =  R = ZZ[x,y,z];

F525E2 =  f = matrix{{x^2-3, y^3-1, z^4-2}};

F525E3 =  z = koszul(2,f)

F525E4 =  g = forceGB(f, SyzygyMatrix=>z);

F525E5 =  syz g -- no extra computation

F525E6 =  syz f

F525E7 =  kernel f

F526E0 =  X = Proj(QQ[x,y,z])

F526E1 =  I = ideal(y^2*z-x*(x-z)*(x-11*z))

F526E2 =  N = (sheaf module I)/(sheaf module I^2)

F526E3 =  G = OO_X^1/I

F526E4 =  HH^1(G)

F526E5 =  HH^1(N)

F527E0 =  for i from 1 to 10 do if i == 7 then break 12345

F527E1 =  table(3,3,(i,j) -> if i == 1 then break 3 else "hi")

F527E2 =  table(3,3,(i,j) -> if j == 1 then break 3 else "hi")

F527E3 =  load "Macaulay2Doc/demo1.m2"

F527E4 =  g 2

F527E5 =  g 3

F528E0 =  currentFileName

F529E0 =  QQ[x,y];

F529E1 =  f = matrix{{x^2, x*y},{x*y, y^2}}

F529E2 =  dual f

F529E3 =  source f

F529E4 =  target dual f

F529E5 =  compactMatrixForm = false

F529E6 =  matrix{{x^2 + 3, x^4 + 1},{x^13 - 5, x^7 - 1}}

F529E7 =  compactMatrixForm = true

F529E8 =  matrix{{x^2 + 3, x^4 + 1},{x^13 - 5, x^7 - 1}}

F530E0 =  printString(stdio, (a,10,"b",20,c))

F531E0 =  t = tally apply(1..10000, i -> # factor i)

F531E1 =  t_5

F531E2 =  t_6

F532E0 =  R = ZZ[x,y,z];

F532E1 =  sum({2,3,4},{x,y,z},(i,j)->j^i)

F533E0 =  R = ZZ/101[x,y,z,w];

F533E1 =  M = cokernel matrix {{x*y-z^2,y^2-w^2}}

F533E2 =  res(M,DegreeLimit => 1)

F533E3 =  res(M,DegreeLimit => 2)

F534E0 =  identity_a x

F534E1 =  identity_a (x,y)

F534E2 =  identity_(a,b) x

F534E3 =  identity_(a,b) (x,y)

F534E4 =  R = ZZ[a .. i];

F534E5 =  f = genericMatrix(R,a,3,3)

F534E6 =  exteriorPower(2,f)

F534E7 =  exteriorPower_2 f

F534E8 =  p = prepend_7

F534E9 =  p {8,9,10}

F535E0 =  R = ZZ/101[a..d];

F535E1 =  S = coimage map(R, R, {a^4, a^3*b, a*b^3, b^4});

F535E2 =  presentation S

F535E3 =  h =  hilbertPolynomial S

F535E4 =  hilbertPolynomial(S, Projective=>false)

F535E5 =  apply(5, k-> h(k))

F535E6 =  apply(5, k-> hilbertFunction(k,S))

F536E0 =  atan 1

F536E1 =  abs atan 1 == pi/4

F537E0 =  R = QQ[a..f]

F537E1 =  M = coker genericMatrix(R,a,2,3)

F537E2 =  res M

F537E3 =  dual oo

F538E0 =  R = QQ[a..d]

F538E1 =  f = mutableMatrix vars R

F538E2 =  f_(0,2)

F538E3 =  f_(0,2) = 7*c^2

F538E4 =  f

F539E0 =  3000000000000.

F539E1 =  printingTrailLimit

F539E2 =  printingTrailLimit = 20

F539E3 =  3000000000000.

F540E0 =  R = ZZ/101[a..c]

F540E1 =  I = image vars R

F540E2 =  J = image symmetricPower (2,vars R)

F540E3 =  g = extend( resolution (R^1/I), resolution (R^1/J), id_(R^1))

F540E4 =  g_1

F540E5 =  g_2

F541E0 =  R = ZZ/101[x];

F541E1 =  k = coker vars R

F541E2 =  M = R^3 ++ k^5;

F541E3 =  fittingIdeal(3,M)

F541E4 =  fittingIdeal(8,M)

F542E0 =  R = ZZ[a..f];

F542E1 =  M = genericMatrix(R,a,2,3)

F542E2 =  permanents(2,M)

F543E0 =  y = x_3

F543E1 =  x_3 = 4

F543E2 =  x_3

F543E3 =  y

F543E4 =  value y

F544E0 =  (2^15 + 2^13 + 2^42) & (2^15 + 2^23 + 2^42) == 2^15 + 2^42

F545E0 =  R = ZZ[x,y,z];

F545E1 =  M = matrix{{x,z,x*y},{x^2+z,y*z,1}}

F545E2 =  entries M

F545E3 =  N = mutableMatrix{{x,z,x*y},{x^2+z,y*z,1}}

F545E4 =  entries N

F546E0 =  Z = Proj(QQ[x_0..x_12]/(x_0^3+x_12^3))

F546E1 =  hilbertPolynomial Z

F547E0 =  i = 0 ; while i < 10 list i^2 do i = i+1

F547E1 =  i = 0 

F547E2 =  i = 0 

F547E3 =  i = 0 

F547E4 =  i = 0 

F547E5 =  i = 0 

F547E6 =  i = 0 

F548E0 =  R = ZZ/101[x_0..x_4];

F548E1 =  I = ideal random(R^1, R^{-2,-3});

F548E2 =  genera(R/I)

F549E0 =  acosh .2

F549E1 =  cosh oo

F550E0 =  R = ZZ[x,y]

F550E1 =  f = random(R^{2:1},R^2)

F550E2 =  g = transpose (vars R ++ vars R)

F550E3 =  remainder'(f,g)

F550E4 =  f = f + map(target f, source f, id_(R^2))

F550E5 =  remainder'(f,g)

F551E0 =  0_(ZZ^3)

F552E0 =  R = QQ[a..d];

F552E1 =  I = ideal(a^2-b*d, a^2-b*d, c^2, d^2);

F552E2 =  numgens I

F552E3 =  mingens I

F552E4 =  numgens trim I

F553E0 =  toUpper "A b C d E f"

F554E0 =  R = ZZ/32003[vars(0..17)];

F554E1 =  M = coker genericMatrix(R,a,3,6)

F554E2 =  isHomogeneous M

F554E3 =  codim M

F554E4 =  degree M

F554E5 =  genera M

F554E6 =  poincare M

F554E7 =  hf = hilbertSeries M

F554E8 =  reduceHilbert hf

F554E9 =  poincare' = (M) -> (

      	H := poincare M;

      	t := (ring H)_0;  -- The variable t above

      	while H % (1-t) == 0 do H = H // (1-t);

      	H);

F554E10 =  poincare' M

F554E11 =  C = resolution M

F554E12 =  C.dd_3

F554E13 =  betti C

F555E0 =  Table {{a,b,c},{a,bb,ccc}}

F555E1 =  value oo

F556E0 =  MatrixExpression {{a,b,c},{a,bb,ccc}}

F556E1 =  R=QQ[x,y];

F556E2 =  MatrixExpression append(applyTable({{x^2-y^2,x^3-y^3},{x^2-4*y^2,x^3+y^3}},factor),Degrees=>{{{-2},{-3}},{{0},{0}}})

F556E3 =  value oo

F557E0 =  dictionaryPath

F558E0 =  R = QQ[a..d];

F558E1 =  symmetricAlgebra R^3

F558E2 =  vars R

F558E3 =  symmetricAlgebra vars R

F558E4 =  symmetricAlgebra transpose vars R

F558E5 =  a

F558E6 =  p_0

F558E7 =  S = o2;

F558E8 =  a

F558E9 =  p_0

F558E10 =  symmetricAlgebra(R^3, Variables => {t,u,v})

F558E11 =  symmetricAlgebra(R^3, VariableBaseName => t)

F558E12 =  use R

F558E13 =  symmetricAlgebra(R^1/(a,b^3))

F559E0 =  R = ZZ/101[a..e]

F559E1 =  borel matrix {{a*d*e, b^2}}

F560E0 =  R = QQ[a..d];

F560E1 =  I = ideal (a^2*b-c^2, a*b^2-d^3, c^5-d);

F560E2 =  J = ideal (a^2,b^2,c^2,d^2);

F560E3 =  I == J

F560E4 =  I != J

F560E5 =  (1+a+a^3+a^4) % J

F560E6 =  (1+a+a^3+a^4) % J == 0

F560E7 =  a^4 % J == 0

F560E8 =  isSubset(I,J)

F560E9 =  isSubset(I,I+J)

F560E10 =  isSubset(I+J,I)

F560E11 =  I = ideal (a^2-1,a^3+3);

F560E12 =  I == 1

F560E13 =  S = R/I

F560E14 =  S == 0

F561E0 =  R = QQ[x,y,z, Degrees=>{3:{1,1}}];

F561E1 =  hilbertFunction({3,3}, R)

F561E2 =  basis({3,3},R)

F561E3 =  hilbertFunction_{3,3} R

F561E4 =  R = QQ[x,y,z];,

F561E5 =  hilbertFunction({3}, R)

F561E6 =  hilbertFunction(3, R)

F561E7 =  R = QQ[a..d, Degrees=>{4:{1,1}}];

F561E8 =  M = coker matrix {{a,c,d},{c,b,d}}

F561E9 =  hilbertFunction({2,2}, M)

F561E10 =  B = basis({2,2},M)

F561E11 =  numgens source B

F561E12 =  R = QQ[a..f, Degrees=>{6:{1,1}}];

F561E13 =  I = ideal (a*b, c*d, e*f);

F561E14 =  hilbertFunction({2,2}, I)

F561E15 =  S = R/I;

F561E16 =  basis({2,2},S)

F562E0 =  m = mutableMatrix(ZZ,3,5)

F562E1 =  m_(1,2) = 3

F562E2 =  m_(2,4) = 54

F562E3 =  m_(0,0) = -12

F562E4 =  m

F562E5 =  matrix m

F563E0 =  R = QQ[vars(0..8)]

F563E1 =  M = genericMatrix(R,2,2)

F563E2 =  det M

F563E3 =  N = genericMatrix(R,3,3)

F563E4 =  det N

F564E0 =  R = QQ[x,y]

F564E1 =  leadTerm matrix {{x+y, x^2+y}}

F564E2 =  R = QQ[x,y, Weights => {1,2}]

F564E3 =  leadTerm matrix {{x+y, x^2+y}}

F564E4 =  R = QQ[x,y, Weights => {1,3}]

F564E5 =  leadTerm matrix {{x+y, x^2+y}}

F565E0 =  toList "foo"

F565E1 =  A = set(3,7,9,6)

F565E2 =  toList A

F565E3 =  toList (1..9)

F565E4 =  toList set {4,5,13}

F566E0 =  i = 22;

F566E1 =  f = () -> (i := 0

i: while i<9 do (<< i << " "

i: i=i+1)

i: <<endl

i: )


F566E2 =  f()

F566E3 =  i

F566E4 =  f = () -> (i := 0; () -> i = i+1)

F566E5 =  p = f()

F566E6 =  q = f()

F566E7 =  p(),p(),p(),p(),q(),p(),p(),q(),p(),p()

F567E0 =  S = ZZ/101[w..z];

F567E1 =  M = module monomialCurveIdeal(S, {1,3,4});

F567E2 =  betti res M

F567E3 =  poincare M

F567E4 =  hilbertSeries M

F567E5 =  R = ZZ/101[x]/ideal(x^2);

F567E6 =  poincare R

F567E7 =  numerator hilbertSeries R

F567E8 =  R = ZZ/101[x,y, DegreeRank => 2]/ideal(x^2*y);

F567E9 =  poincare R

F567E10 =  numerator hilbertSeries R

F567E11 =  R = ZZ/101[w..z];

F567E12 =  M = module monomialCurveIdeal(R, {1,3,4});

F567E13 =  poincare M

F567E14 =  numerator reduceHilbert hilbertSeries M

F567E15 =  R = ZZ/101[w..z];

F567E16 =  I = monomialCurveIdeal(R, {1,3,4});

F567E17 =  poincare I

F567E18 =  poincare comodule I

F567E19 =  numerator hilbertSeries I

F567E20 =  numerator reduceHilbert hilbertSeries I

F567E21 =  poincare module I

F567E22 =  R = ZZ/101[a..g];

F567E23 =  I = ideal random(R^1, R^{3:-3});

F567E24 =  p = poincare ideal(a^3, b^3, c^3)

F567E25 =  poincare I = p

F567E26 =  gbTrace = 3

F567E27 =  time poincare I

F567E28 =  time gens gb I;

F567E29 =  R = QQ[a..d];

F567E30 =  I = ideal random(R^1, R^{3:-3});

F567E31 =  time p = poincare I

F567E32 =  S = QQ[a..d, MonomialOrder => Eliminate 2]

F567E33 =  J = substitute(I, S)

F567E34 =  poincare J = p

F567E35 =  gbTrace = 3

F567E36 =  time gens gb J;

F567E37 =  selectInSubring(1, gens gb J)

F568E0 =  for i from 1 to 9 do (x := 0 .. 10000 ; registerFinalizer(x, "-- finalizing sequence #"|i|" --"))

F568E1 =  collectGarbage() 

F569E0 =  R = ZZ/101[a,b,c];

F569E1 =  M = R^1/(a^2,b^2,c^2)

F569E2 =  isQuotientModule M

F569E3 =  f = M_{0}

F569E4 =  N = image f

F569E5 =  M == N

F569E6 =  isQuotientModule N

F570E0 =  R = ZZ/31991[a,b,c,d]

F570E1 =  I = monomialCurveIdeal(R,{1,2,3})

F570E2 =  M = Ext^1(I,R)

F570E3 =  dim M

F570E4 =  N = Ext^0(I,R)

F570E5 =  dim N

F571E0 =  erf 2

F572E0 =  x = <|a,b,c|>

F572E1 =  # x

F572E2 =  x#1

F572E3 =  new AngleBarList from {a,b,c}

F572E4 =  new Sequence from <|a,b,c|>

F573E0 =  fn = temporaryFileName()

F573E1 =  fn << "hi there" << close

F573E2 =  fileMode fn

F573E3 =  removeFile fn

F574E0 =  {10..10}

F574E1 =  {10..8}

F574E2 =  {3..5,8..10}

F574E3 =  splice {3..5,8..10}

F574E4 =  0..5

F574E5 =  toList (0..5)

F574E6 =  new Array from 0..5

F574E7 =  new Sum from 0..5

F574E8 =  (0,0)..(1,3)

F574E9 =  p_(0,a) .. p_(1,c)

F574E10 =  p_(1,1) .. q_(2,2)

F575E0 =  R = ZZ[a..d];

F575E1 =  F = R^3

F575E2 =  f = b*F_0 + a*F_1

F575E3 =  leadTerm f

F575E4 =  R = ZZ[a..d, MonomialOrder => {GRevLex => 4, Position => Up}];

F575E5 =  F = R^3

F575E6 =  leadTerm(a*F_0 + a*F_1)

F575E7 =  R = ZZ[a..d, MonomialOrder => {GRevLex => 4, Position => Down}];

F575E8 =  F = R^3

F575E9 =  leadTerm(a*F_0 + a*F_1)

F575E10 =  R = ZZ[a..d, MonomialOrder => {GRevLex => 2, Position => Down, GRevLex => 2}];

F575E11 =  F = R^3

F575E12 =  leadTerm(a*F_0 + a*F_1)

F575E13 =  leadTerm(b*F_0 + c^4*F_1)

F575E14 =  leadTerm(c*F_0 + d^2*F_1)

F575E15 =  R = ZZ[a..d, MonomialOrder => {Position => Down}];

F575E16 =  F = R^3

F575E17 =  leadTerm(a*F_0 + a*F_1)

F575E18 =  leadTerm(b*F_0 + c^4*F_1)

F575E19 =  leadTerm(c*F_0 + d^2*F_1)

F576E0 =  R = QQ[x,y,z]

F576E1 =  f = matrix {{x,y}}

F576E2 =  g = matrix {{y,z}}

F576E3 =  modulo(f,g)

F576E4 =  kernel( inducedMap(coker g, target g) * f )

F577E0 =  fn = temporaryFileName()

F577E1 =  f = fn << "hi there"

F577E2 =  fileMode f

F577E3 =  close f

F577E4 =  removeFile fn

F578E0 =  R = QQ[w,x,y,z];

F578E1 =  f = map(R^1,R^3, matrix{{x^2-w*y, x*y-w*z, x*z-y^2}})

F578E2 =  image f

F578E3 =  ideal image f

F579E0 =  R = QQ[a..f]

F579E1 =  I = ideal(a,b,c) * ideal(a,b,c)

F579E2 =  mingens I

F579E3 =  J = ideal(a-1, b-2, c-3)

F579E4 =  I = J*J

F579E5 =  mingens I

F579E6 =  M = matrix{{a^2*b*c-d*e*f,a^3*c-d^2*f,a*d*f-b*c*e-1}}

F579E7 =  I = kernel M

F579E8 =  J = image mingens I

F579E9 =  I == J

F579E10 =  trim I

F580E0 =  R = ZZ/101[a..d];

F580E1 =  I = intersect(ideal(a, b), ideal(b, c), ideal(c, d), ideal(d, a))

F580E2 =  R=ZZ[x, y, z];

F580E3 =  M=image matrix{{3*x}, {3*x}};

F580E4 =  N=image matrix{{5*y}, {5*y}};

F580E5 =  P=image matrix{{7*z}, {7*z}};

F580E6 =  intersect{M, N, P}

F580E7 =  hooks(intersect, Ideal, Ideal)

F580E8 =  hooks(intersect, Module, Module)

F580E9 =  intersect(ideal(x, y), (ideal(x, y, z))^2, Strategy => Monomial)

F581E0 =  M = ZZ^1 ++ ZZ^2 ++ ZZ^3

F581E1 =  f = random(M,M)

F581E2 =  blockMatrixForm = true;

F581E3 =  f

F582E0 =  transpose{{a, b, c},{d, e, f}}

F583E0 =  product {1,2,3,4,5}

F584E0 =  A = QQ[a,b,c];

F584E1 =  f = a+b+a*b+c^3;

F584E2 =  B = QQ[x,y,z];

F584E3 =  F = map(B,A,{x+y, x-y, z})

F584E4 =  g = F f

F584E5 =  A1 = QQ[x,y,c,b,a,z];

F584E6 =  substitute(f,A1)

F584E7 =  v = take(gens A1, numgens A)

F584E8 =  G = map(A1,A,v)

F584E9 =  G f

F585E0 =  k = toField (QQ[x]/(x^2+x+1));

F585E1 =  R = k[y]/(x-y+2);

F585E2 =  flattenRing(R, Result => 1)

F585E3 =  flattenRing(R, Result => 2)

F585E4 =  flattenRing(R, Result => 3)

F585E5 =  flattenRing(R, Result => (Nothing, RingMap))

F585E6 =  flattenRing(R, Result => (Ring, Nothing, RingMap))

F585E7 =  flattenRing(R, Result => (Nothing, ))

F585E8 =  flattenRing(R, Result => ( , Nothing, ) )

F585E9 =  I = ideal(x*y+y^2-5);

F585E10 =  flattenRing(I, Result => 1)

F585E11 =  flattenRing(I, Result => 3)

F585E12 =  flattenRing(I, Result => (Ring, Nothing, RingMap))

F585E13 =  flattenRing(I, Result => (Ideal, Nothing, RingMap))

F585E14 =  flattenRing(I, Result => (Ring, RingMap))

F585E15 =  flattenRing(I, Result => Ideal)

F586E0 =  f = x -> (

          if x == 3 then return;

          if x > 3 then return x^2;

          5);

F586E1 =  f 2

F586E2 =  f 3

F586E3 =  f 4

F586E4 =  load "Macaulay2Doc/demo1.m2"

F586E5 =  code g

F586E6 =  g 2

F587E0 =  R = ZZ/101[x,y,z]

F587E1 =  p = map(R^2,,{{x^2,0,3},{0,y^2,5}})

F587E2 =  isHomogeneous p

F587E3 =  p = matrix {{x^2,0,3},{0,y^2,5}}

F587E4 =  R = ZZ/101[x,y]

F587E5 =  f = map(R^2,,{{x^2,y^2},{x*y,0}})

F587E6 =  degrees source f

F587E7 =  isHomogeneous f

F588E0 =  s = "I love computing Groebner bases in Macaulay2.";

F588E1 =  substring(0, 5, s)

F588E2 =  substring(s, -10, 5)

F588E3 =  substring(s, 100, 5)

F588E4 =  substring((3, 10), s)

F588E5 =  substring(3, s)

F588E6 =  substring(s, -10)

F589E0 =  A = QQ[a..e];

F589E1 =  B = A[x,y,Join=>false];

F589E2 =  C = QQ[a..e,x,y];

F589E3 =  map(B,A)

F589E4 =  map(A,B)

F589E5 =  F = map(B,C)

F589E6 =  G = map(C,B)

F589E7 =  F*G

F589E8 =  oo === id_B

F589E9 =  G*F

F589E10 =  oo === id_C

F589E11 =  D = QQ[x,y,z];

F589E12 =  E = D/(x^2-z-1,y);

F589E13 =  F = map(E,D)

F589E14 =  G = map(D,E)

F589E15 =  x^3

F589E16 =  G x^3

F590E0 =  number(0..100, isPrime)

F590E1 =  number(0..100, odd)

F590E2 =  number(0..100, i -> i==17)

F590E3 =  position((10,20,43,105,6), odd)

F590E4 =  positions((10,20,43,105,6), odd)

F590E5 =  select((10,20,43,105,6), odd)

F591E0 =  2+

F591E1 =  f = x -> (print x; print)

F591E2 =  f f [1,2,3]

F591E3 =  f f ([1,2,3])

F591E4 =  f (f [1,2,3])

F592E0 =  P = projectiveHilbertPolynomial 3

F592E1 =  s = hilbertSeries P

F592E2 =  numerator s

F592E3 =  R = QQ[a..h];

F592E4 =  I = ideal (a*b, c*d, e*f);

F592E5 =  P=hilbertPolynomial(I)

F592E6 =  s = hilbertSeries P

F592E7 =  numerator s

F593E0 =  R = QQ[a..i];

F593E1 =  M = genericMatrix(R,a,3,3)

F593E2 =  I = ideal(M^3);

F593E3 =  f = trace M

F593E4 =  G = gb(I, DegreeLimit=>3)

F593E5 =  f^7 % G == 0

F593E6 =  gb(I, DegreeLimit=>7)	  	  

F593E7 =  f^7 % G

F593E8 =  gb I

F593E9 =  I = ideal(M^3);

F593E10 =  G = gb(I, StopBeforeComputation=>true)

F593E11 =  f^7 % I

F593E12 =  status G

F594E0 =  R = QQ[a..d, MonomialOrder => Lex];

F594E1 =  a^3 + a^2*b^2 + b*c

F594E2 =  B = QQ[a..d,MonomialOrder=>Lex,MonomialSize=>16];

F594E3 =  a^(2^15-1)

F594E4 =  C = QQ[a..d,MonomialOrder=>Lex,MonomialSize=>8];

F594E5 =  try a^(2^15-1) else "failed"

F594E6 =  a^(2^7-1)

F594E7 =  B = QQ[a..d,MonomialSize=>16,MonomialOrder=>{Weights => {1,2,3,4}, Lex}];

F594E8 =  a^2 + b+ c + b*d

F595E0 =  R = QQ[a,b,c];

F595E1 =  ideal(a^2-b,a^3) == ideal(b^2, a*b, a^2-b)

F595E2 =  L = ideal(a^2-a-1,a^3+a+3)

F595E3 =  L == 1

F595E4 =  L == 0

F595E5 =  m = matrix{{a,b},{c,a}}

F595E6 =  n = map(R^2,R^2,m)

F595E7 =  m == n

F595E8 =  source m == source n

F595E9 =  m-n == 0

F595E10 =  image matrix {{2,a},{1,5}} == R^2

F595E11 =  image matrix {{2,a},{0,5}} == R^2

F595E12 =  interval(1,3) == interval(1,3)

F595E13 =  interval(1/2) == 1/2

F595E14 =  interval(1/3) == 1/3

F596E0 =  R = QQ[x,y,z]

F596E1 =  I = ideal vars R

F596E2 =  f = I_{0,2}

F596E3 =  image f

F596E4 =  M = image syz vars R

F596E5 =  g = M_{1}

F596E6 =  source g

F596E7 =  target g

F597E0 =  R = QQ[a..d];

F597E1 =  degree(b, a*b^5+b^7-3*a^10-3)

F598E0 =  {1,2,3} === {1,2,3}

F598E1 =  {1,2,3} === {2,1,3}

F598E2 =  R = QQ[a..d];

F598E3 =  a^2+b === b+a^2

F598E4 =  ideal(a^2+b,c*d) === ideal(b+a^2,c*d+b+a^2)

F598E5 =  matrix{{a,b,c}} === matrix{{a,b,c}}

F598E6 =  matrix{{a,b,c}} === transpose matrix{{a},{b},{c}}

F598E7 =  A = QQ[x]

F598E8 =  A === B

F599E0 =  (hold 2)^5 * (hold 3)^3

F600E0 =  R = QQ[a,b,c]/(a^2, b^3, a*c, c^3);

F600E1 =  basis R

F600E2 =  sort basis R

F600E3 =  R = QQ[x,y,z]

F600E4 =  basis(2,R)

F600E5 =  I = ideal"x2,y3"

F600E6 =  phi = basis(3,I)

F600E7 =  super phi

F600E8 =  R = QQ[a..c,Degrees=>{{1,0},{1,-1},{1,-2}}]

F600E9 =  basis({4,-5},R)

F600E10 =  R = QQ[a..d,Degrees=>{{1,0},{1,-1},{1,-2},{0,1}}]

F600E11 =  basis(2,R)

F600E12 =  A = ZZ/101[a..d];

F600E13 =  B = A[x,y]/(a*x, x^2, y^2);

F600E14 =  basis B

F600E15 =  R = QQ[a,b,c]/(a^2, b^3, a*c, c^3);

F600E16 =  I = ideal(a,b^2,c)

F600E17 =  F = basis I

F600E18 =  super F

F600E19 =  C = B[u,v]/(u^2,u*v,v^2)

F600E20 =  basis(C, Variables=>{u,v,x_C,y_C}, SourceRing => A)

F600E21 =  D = QQ[a..d]/(a^2, b^2)

F600E22 =  basis(D, Variables => {a,b})

F600E23 =  E = QQ{a..d}

F600E24 =  I = ideal(a+d^3-d^4, b^2 + d^3, c^2 + d^4, d^5)

F600E25 =  f = basis (E^1/I)

F600E26 =  cover f

F600E27 =  R = ZZ/101[a..d]

F600E28 =  M = koszul(2,vars R)

F600E29 =  f1 = basis(2, source M)

F600E30 =  f2 = basis(2, target M)

F600E31 =  f = basis(2,M)

F600E32 =  source f == image f1

F600E33 =  target f == image f2

F600E34 =  matrix f

F601E0 =  R = QQ[x,y,z];

F601E1 =  radical ideal(z^4+2*z^2+1)

F601E2 =  I = ideal"xyz,x2,y4+y5"

F601E3 =  radical I

F601E4 =  k = 0;

F601E5 =  while (y^2+y)^k % I != 0 do k = k+1;

F601E6 =  k

F602E0 =  R = QQ[a..d];

F602E1 =  I = monomialIdeal(a^3,b^2,a*b*c)

F602E2 =  J = monomialIdeal(a^2,b^3,a*b*c)

F602E3 =  I - J

F602E4 =  J - I

F602E5 =  I - (I-J)

F603E0 =  x = new HashTable from {a => 1, b => 2}

F603E1 =  values x

F604E0 =  R = QQ[a..f]

F604E1 =  M = genericSymmetricMatrix(R,a,3)

F604E2 =  I = minors(2,M)

F604E3 =  G = gb(I, PairLimit=>5)

F604E4 =  mingens G

F604E5 =  mingens I

F605E0 =  x = set{1,2,3}

F605E1 =  x#?2

F605E2 =  member(2,x)

F606E0 =  A = QQ[a..d];

F606E1 =  B = A/(a^2,b^3);

F606E2 =  C = B/(a*b*c,b*c*d, b^2);

F606E3 =  presentation A

F606E4 =  presentation B

F606E5 =  presentation C

F606E6 =  presentation(B,C)

F606E7 =  presentation(A,C)

F606E8 =  minimalPresentation C

F607E0 =  groupID()

F608E0 =  R = QQ[a,b];

F608E1 =  f1 = matrix{{a,b}}

F608E2 =  f = a * f1

F608E3 =  degree f

F608E4 =  source f == source f1

F608E5 =  g = map(f, Degree => 0)

F608E6 =  degree g

F608E7 =  source g == (source f) ** R^{-1}

F608E8 =  g2 = a ** matrix{{a,b}}

F608E9 =  degree g2

F608E10 =  isHomogeneous g2

F609E0 =  R = QQ[a..f];

F609E1 =  p = matrix {{a,b,c},{d,e,f}}

F609E2 =  p^{1}

F609E3 =  p^{1,0}

F610E0 =  load "Macaulay2Doc/demo2.m2"

F610E1 =  code f

F610E2 =  f 0

F611E0 =  R = QQ[a..d];

F611E1 =  a^3 + b^2 + b*c

F611E2 =  S = QQ[a..d, MonomialOrder => GRevLex => {1,2,3,4}];

F611E3 =  a^3 + b^2 + b*c

F611E4 =  B1 = QQ[a..d,MonomialSize=>16,MonomialOrder=>GRevLex];

F611E5 =  B = QQ[a..d,MonomialSize=>16];

F611E6 =  a^(2^15-1)

F611E7 =  C = QQ[a..d,MonomialSize=>8,MonomialOrder=>GRevLex];

F611E8 =  try a^(2^15-1) else "failed"

F611E9 =  a^(2^7-1)

F612E0 =  Quartic = Proj(QQ[x_0..x_2]/ideal(x_0^4+x_1^4+x_2^4))

F612E1 =  euler(Quartic)

F612E2 =  Quintic = Proj(QQ[x_0..x_4]/ideal(x_0^5+x_1^5+x_2^5+x_3^5+x_4^5-101*x_0*x_1*x_2*x_3*x_4))

F612E3 =  euler(Quintic)

F613E0 =  R = ZZ[a..d]

F613E1 =  R_{3,1,5}

F613E2 =  R_{1,1,1,1}

F613E3 =  S = R[x,y,z]

F613E4 =  S_{1,1,1}

F613E5 =  S_{1,1,1,4}

F614E0 =  m = mutableMatrix map(ZZ^5,ZZ^6, (i,j) -> 100*i+j)

F614E1 =  columnPermute(m,1,{2,0,1})

F615E0 =  R = QQ[x_1 .. x_5]

F615E1 =  N = image matrix{{x_1,x_2},{x_2,x_3}}

F615E2 =  ambient N

F615E3 =  ambient cokernel vars R

F615E4 =  ambient kernel vars R

F615E5 =  M = image vars R ++ cokernel vars R

F615E6 =  ambient M

F615E7 =  ambient M == target generators M

F615E8 =  ambient M == target relations M

F616E0 =  fileExecutable "."

F617E0 =  L = {a, b, c, b, a};

F617E1 =  L#2

F617E2 =  L#-2

F617E3 =  T = new HashTable from {a => 103, b => 89.4, c => 92};

F617E4 =  T#a

F617E5 =  T#b

F617E6 =  s = "a perfectly adequate example of a string";

F617E7 =  s#2

F617E8 =  s#-2

F617E9 =  V = new MutableHashTable from T;

F617E10 =  V#a = 5;

F617E11 =  V#d = 22.3;

F617E12 =  peek V

F618E0 =  acos 0.5

F619E0 =  randomMutableMatrix(10,15,.9,100)

F620E0 =  methodOptions source

F620E1 =  methodOptions res

F621E0 =  fn = temporaryFileName()

F621E1 =  fn << "z^6+3*x*z^4+6*y*z^4+3*x^2*z^2+12*x*y*z^2+12*y^2*z^2+x^3+6*x^2*y+12*x*y^2+8*y^3" << endl << close

F621E2 =  get fn

F621E3 =  R = ZZ/101[x,y,z]

F621E4 =  f = value get fn

F621E5 =  factor f

F621E6 =  fn << "sample = 2^100

F621E7 =  get fn

F621E8 =  load fn

F621E9 =  needs fn

F621E10 =  peek get fn

F621E11 =  lines get fn

F621E12 =  peek lines get fn

F621E13 =  stack lines get fn

F621E14 =  removeFile fn

F622E0 =  R = ZZ[x,y];

F622E1 =  mathML (x+2*y-1)^2

F622E2 =  mathML matrix {{x,y},{x^2+2,0}}

F623E0 =  R = QQ[a..d]

F623E1 =  S = QQ[s,t]

F623E2 =  F = map(S,R,{s^4,s^3*t,s*t^3,t^4})

F623E3 =  m = matrix{{a,b,c,d}}

F623E4 =  F ** m

F623E5 =  F ** image m

F624E0 =  currentTime()

F624E1 =  currentTime() /( (365 + 97./400) * 24 * 60 * 60 )

F624E2 =  12 * (oo - floor oo)

F624E3 =  run "date"

F625E0 =  KK = ZZ/31991

F625E1 =  SE = KK[x,y,z]/(y^2*z - x*(x-z)*(x+3*z))

F625E2 =  purify1S2 = I -> (

         -- Assuming ring I is S2, and I is not 0, returns the 

         -- pure codimension 1 part of I.

         -- Find a nonzero element of I:

         M := compress gens I;

         -- Explanation: gens I is 

         -- the matrix of generators of I; compress

         -- removes the entries that are 0

         -- and := makes M a local variable.

         if numgens source M == 0 

         then error "purify1S2: expected nonzero ideal";

         f := ideal M_(0,0);

         -- f is the ideal generated by the first entry.

         -- Since ring I is S2, the ideal f is 

         -- pure codimension 1.  Thus

         f:(f:I)

         -- is the pure codimension 1 part. (The last 

         -- expression given in a function is the returned

         -- value, provided the semicolon is left off.)

         )

F625E3 =  R = ZZ/5[a,b]

F625E4 =  purify1S2 ideal(a^2,a*b)

F625E5 =  Divisor = new Type of BasicList

F625E6 =  divisor = method()

F625E7 =  divisor(Ideal,Ideal) := (I,J) -> new Divisor from {purify1S2 I,purify1S2 J};

F625E8 =  divisor Ideal := I -> divisor(I, ideal 1_(ring I));

F625E9 =  P = divisor ideal(x,z)

F625E10 =  R = divisor ideal(x,y)

F625E11 =  R1 = divisor ideal(x-z,y)

F625E12 =  R2 = divisor ideal(x+3*z,y)

F625E13 =  Q1 = divisor ideal(y-6*z, x-3*z)

F625E14 =  normalForm = method()

F625E15 =  normalForm Divisor := D -> new Divisor from {D#0 : D#1, D#1 : D#0};

F625E16 =  Divisor == Divisor := (D,E) -> toList normalForm D == toList normalForm E;

F625E17 =  D = divisor(ideal(y, x^2+2*x*z-3*z^2), ideal(x-z, y))

F625E18 =  normalForm D

F625E19 =  D == R2

F625E20 =  Divisor + Divisor := (D,E) -> divisor(D#0 * E#0, D#1 * E#1);

F625E21 =  - Divisor := (D) -> new Divisor from {D#1, D#0};

F625E22 =  Divisor - Divisor := (D,E) -> D + (-E);

F625E23 =  ZZ Divisor := ZZ * Divisor := (n,D) -> divisor((D#0)^n, (D#1)^n);

F625E24 =  2 P

F625E25 =  3 P

F625E26 =  D = P-R1

F625E27 =  D2 = 2 P - 2 R1

F625E28 =  D = 2 P

F625E29 =  I = D#0

F625E30 =  J = D#1

F625E31 =  f = z

F625E32 =  LD = basis(degree f, purify1S2((f*J) : I))

F625E33 =  LD = super (LD ** (ring target LD))

F625E34 =  imI = purify1S2(((z+x)*I) : z)

F625E35 =  degree imI

F625E36 =  globalSections = method()

F625E37 =  globalSections Divisor := (D) -> (

          -- First let's grab the parts (I,J) of D.

          I := D#0;

          J := D#1;

          -- Let 'f' be the first element of the 

          -- matrix of generators of the ideal I.

          f := (gens I)_(0,0);

          -- Now compute the basis of global sections

          -- just as above

          LD := basis(degree f, purify1S2((f*J) : I));

          LD = super (LD ** (ring target LD));

          -- Return both this vector space and the denominator

          {LD, f});

F625E38 =  sectionIdeal = (f,g,D) -> (

          I := D#0;

          J := D#1;

          purify1S2((f*I):g) : J

          );

F625E39 =  D = 4 P

F625E40 =  L = globalSections D

F625E41 =  phi = map(SE, ZZ/31991[a..d], L#0)

F625E42 =  ker phi

F625E43 =  D = 4 P - R

F625E44 =  L = globalSections D

F625E45 =  II = sectionIdeal(y*z+x*z+x^2, z^2, D)

F625E46 =  degree II

F625E47 =  globalSections (P-R)

F625E48 =  D = 2 P - 2 R

F625E49 =  LB = globalSections D

F625E50 =  linearlyEquivalent = (D,E) -> (

          F := normalForm(D-E);

          LB := globalSections F;

          L := LB#0;

          -- L is the matrix of numerators. Thus numgens source L

          -- is the dimension of the space of global sections.

          if numgens source L != 1 

          then false

          else (

              R := ring L;

              V := sectionIdeal(L_(0,0), LB#1, F);

              if V == ideal(1_R) 

                then L_(0,0)/LB#1

                else false)

          );

F625E51 =  linearlyEquivalent(P,R)

F625E52 =  linearlyEquivalent(2 P, 2 R)

F625E53 =  effective = (D) -> (

          LB := globalSections D;

          L := LB#0;  -- the matrix of numerators

          if numgens source L == 0 

          then error(toString D + " is not effective")

          else divisor sectionIdeal(L_(0,0), LB#1, D));

F625E54 =  effective(2 R - P)

F625E55 =  addition = (R,S) -> effective(R + S - P);

F625E56 =  addition(R1,R2)

F625E57 =  Q2 = addition(Q1, Q1)

F625E58 =  Q3 = addition(Q2, Q1)

F625E59 =  Q4 = addition(Q3, Q1)

F625E60 =  Q4a = addition(Q2,Q2)

F625E61 =  S = ZZ/31991[a,b,c,d];

F625E62 =  catalect = map(S^2, 3, (i,j)->S_(i+j))

F625E63 =  IC = minors(2, catalect)

F625E64 =  SX = S/IC

F625E65 =  KX = Ext^2(coker gens IC,S^{-4})

F625E66 =  canpres = substitute(presentation(KX), SX)

F625E67 =  betti canpres

F625E68 =  I1 = transpose (syz transpose canpres)_{0}

F625E69 =  dg = (degrees (target I1))_0_0

F625E70 =  divisorFromModule = M -> (

        -- given a module M, returns the divisor of the image

        -- of a nonzero homomorphism to R, suitably twisted.

        -- first get the presentation of M

          I1 := transpose (syz transpose presentation M)_{0};

        -- The degree is

          d := (degrees target I1)_0_0;

        -- We need to balance the degree d with a power

        -- of the first nonzero generator of the ring.

          var1 := (compress vars ring M)_{0};

        -- Now fix up the degrees.

          if d==0 then divisor ideal I1

          else if d>0 then divisor(

                        ideal (I1**dual(target I1)),

                        ideal var1^d

                       )                          

          else divisor ideal( 

                     var1^(-d)**I1**dual target I1

                     )

      );

F625E71 =  M = coker canpres

F625E72 =  divisorFromModule M

F625E73 =  use SX

F625E74 =  divisorFromModule image matrix{{d^2}}

F625E75 =  divisorFromModule SX^{1}

F625E76 =  canonicalDivisor= SX ->(

        -- Given a ring SX, computes a canonical divisor for SX

        I := ideal presentation SX;

        S := ring I;

        embcodim := codim I;

        M := Ext^embcodim(coker gens I,S^{-numgens S});

        M = coker substitute(presentation M, SX);

        divisorFromModule M

        );

F625E77 =  canonicalDivisor SX

F626E0 =  Digamma 6

F627E0 =  R = QQ[x,y,z];

F627E1 =  I = ideal(x^2, x*y, y*z);

F627E2 =  M = R^1/I

F627E3 =  res M

F627E4 =  pdim M

F627E5 =  res(module I)

F627E6 =  pdim(module I)

F628E0 =  x_1

F628E1 =  x_(a,1) ..< z_(c,3)

F629E0 =  R = QQ[x,y];

F629E1 =  f = x^4

F629E2 =  g = x^2*y + 13*x^2*y^4 +x*y^2-3*x - 1

F629E3 =  (lg, cg) = topCoefficients g

F629E4 =  h = pseudoRemainder(f,g)

F629E5 =  (cg^3 * f - h) % g

F629E6 =  q = (cg^3 * f - h) // g

F629E7 =  cg^3*f == h + q*g

F630E0 =  s = "π ≈ 3.14159";

F630E1 =  utf8substring(s, 4, 4)

F631E0 =  R = ZZ[x,y,z];

F631E1 =  M = R^1/(x,y,z);

F631E2 =  N = R^1/(x^2,y^2,x*y*z,z^2);

F631E3 =  g = map(N,M,x*y);

F631E4 =  target g

F632E0 =  R = ZZ/101[x_(0,0)..x_(2,2),y_(0,0)..y_(2,2)]

F632E1 =  M = genericMatrix(R,x_(0,0),3,3)

F632E2 =  N = genericMatrix(R,y_(0,0),3,3)

F632E3 =  I = ideal flatten(M*N-N*M);

F632E4 =  dim I

F632E5 =  needsPackage "SimplicialComplexes"

F632E6 =  R = QQ[a..d]

F632E7 =  D = simplicialComplex {a*b*c,a*b*d,a*c*d,b*c*d}

F632E8 =  I = monomialIdeal D

F632E9 =  facets D

F632E10 =  dim D

F632E11 =  dim I

F633E0 =  C = resolution cokernel matrix {{4,5}}

F633E1 =  C ++ C[-2]

F634E0 =  x

F634E1 =  x := 4

F634E2 =  x

F634E3 =  g = () -> ( p := 444; p )

F634E4 =  g()

F634E5 =  p

F634E6 =  i="a b c";

F634E7 =  for i to 3 list j := i+1

F634E8 =  i

F634E9 =  j

F634E10 =  g = () -> ( p := 444; () -> p )

F634E11 =  g()

F634E12 =  oo ()

F634E13 =  g = () -> ( p := 444; (() -> p, i -> p = i))

F634E14 =  (b,c) = g()

F634E15 =  b()

F634E16 =  c 555

F634E17 =  b()

F634E18 =  a := b := 44

F634E19 =  a

F634E20 =  b

F634E21 =  g = () -> (

           x := local x;

           R := QQ[x];

           (x+2)^10);

F634E22 =  g()

F634E23 =  f = i -> (i,i^2)

F634E24 =  (r,s) := f 9

F634E25 =  r

F634E26 =  s

F634E27 =  "left" * "right"

F634E28 =  String * Number := peek;

F634E29 =  "left" * 33

F634E30 =  "left" * 3.3

F634E31 =  ZZ + ZZ := (x,y) -> x+y+100

F634E32 =  3 + 4

F634E33 =  QQ // QQ := (w,z) -> (numerator w + numerator z)/(denominator w + denominator z)

F634E34 =  (3/5) // (6/7)

F634E35 =  - String := peek;

F634E36 =  - "foo"

F634E37 =  - String := peek;

F634E38 =  - "foo"

F634E39 =  String ~ := peek;

F634E40 =  "foo" ~

F634E41 =  String ~ := peek;

F634E42 =  "foo" ~

F634E43 =  source String := peek;

F634E44 =  source "foo"

F634E45 =  source String := peek;

F634E46 =  source "foo"

F634E47 =  source(String,Number) := peek;

F634E48 =  source("foo",33)

F634E49 =  source("foo",3.3)

F634E50 =  source(String,String) := peek;

F634E51 =  source("foo","bar")

F635E0 =  R = ZZ/101[a..c];

F635E1 =  C = res coker vars R

F635E2 =  sum C.dd

F635E3 =  betti oo

F636E0 =  columnRankProfile transpose mutableMatrix {{1,2,3}, {0,0,0.}, {3,4,5} }

F637E0 =  3.14159

F637E1 =  precision 3.14159

F637E2 =  class 3.1

F637E3 =  ring 3.1

F637E4 =  3p300

F637E5 =  3e3

F637E6 =  -3e-3

F637E7 =  -3p111e-3

F637E8 =  1/3.

F637E9 =  1/3p100

F637E10 =  100 * log(10,2)

F637E11 =  printingPrecision

F637E12 =  {1/3.,1/3p100}

F637E13 =  .5p100 == .5p30

F637E14 =  .2p100 == .2p30

F637E15 =  .5p100 === .5p30

F637E16 =  .2p100 === .2p30

F637E17 =  0.

F637E18 =  -0.

F637E19 =  1/0.

F637E20 =  1/-0.

F637E21 =  log 0

F637E22 =  csc (0.)

F637E23 =  csc (-0.)

F637E24 =  x = {1/3.,1/3p100}

F637E25 =  x == {.333333, .333333}

F637E26 =  y = toExternalString x

F637E27 =  x === value y

F637E28 =  numeric pi

F637E29 =  numeric_200 pi

F637E30 =  Gamma oo

F638E0 =  R = ZZ/32003[a,b,c,d]

F638E1 =  X = ideal(a^3+b^3+c^3+d^3)

F638E2 =  KK = coefficientRing R 

F638E3 =  S = KK [s,t,p_0..p_3,q_0..q_3]

F638E4 =  F = map(S,R,

            s*matrix{{p_0..p_3}} +

            t*matrix{{q_0..q_3}}

            )

F638E5 =  FX = F X

F638E6 =  cFX = last coefficients(gens FX, Variables => {s,t})

F638E7 =  S1 = KK[p_0..p_3,q_0..q_3]

F638E8 =  cFX = substitute(cFX, S1)

F638E9 =  S1bar = S1/ideal cFX

F638E10 =  GR = coefficientRing R[x_0..x_5]

F638E11 =  M = substitute(

          exteriorPower(2, matrix{{p_0..p_3},{q_0..q_3}}),

          S1bar)

F638E12 =  gr = map (S1bar, GR, M)

F638E13 =  fano = trim ker gr

F638E14 =  codim fano

F638E15 =  degree fano

F638E16 =  betti fano

F638E17 =  needsPackage "Text"

F638E18 =  document {

           Key => Fano2, 

              TT "Fano2(k,X,GR) or  Fano2(k,X)", " -- computes 

              the ideal of a Fano scheme in the Grassmannian.",

              PARA{},

              "Given an ideal X representing a projective variety 

              in P^r, a positive integer k<r, and optionally a 

              ring GR with (exactly) r+1 choose k+1 variables, 

              representing the ambient space of the Grassmannian of 

              k-planes in P^r, this routine returns the ideal in

              GR of the Fano scheme that parametrizes the k-planes 

              lying on X. If the optional third argument is not 

              present, the routine fabricates its own local ring, 

              and returns an ideal over it."

              };

F638E19 =  document {

          Key => Grassmannian2,

          TT "Grassmannian2(k,r,R) or 

              Grassmannian2(k,r)",

             "-- Given natural numbers k <= r,

              and optionally a ring R with at least binomial(r+1,k+1)

              variables, the routine defines the ideal of the 

              Grassmannian of projective k-planes in P^r, using 

              the first binomial(r+1,k+1) variables of R. 

              If R is not given, the routine makes and uses

              ZZ/31991[vars(0..binomial(r+1,k+1)-1]."

              };

F638E20 =  Fano2 = method()

F638E21 =  Fano2(ZZ,Ideal,Ring) := (k,X,GR) -> (

        -- Get info about the base ring of X:

        -- The coefficient ring (to make new rings of

        -- the same characteristic, for example)

        -- and the number of variables

        KK:=coefficientRing ring X;

        r := (numgens ring X) - 1;

        -- Next make private variables for our 

        -- intermediate rings, to avoid interfering

        -- with something outside:

        t:=symbol t;

        p:=symbol p;

        -- And rings

        S1 := KK[t_0..t_k];

        S2 := KK[p_0..p_(k*r+k+r)];

        S := tensor(S1,S2);

        -- Over S we have a generic point of a generic

        -- line, represented by a row vector, which

        -- we use to define a map from the base ring

        -- of X

        F := map(S,ring X,

                genericMatrix(S,S_0,1,k+1)*

                genericMatrix(S,S_(k+1),k+1,r+1)

                );

        -- We now apply F to the ideal of X

        FX := F X;

        -- and the condition we want becomes the condition

        -- that FX vanishes identically in the t_i.

        -- The following line produces the matrix of

        -- coefficients of the monomials in the 

        -- variables labelled 0..k:

        cFX := last coefficients (gens FX, Variables => toList apply(0..k, i -> S_i));

        -- We can get rid of the variables t_i

        -- to ease the computation:

        cFX = substitute(cFX, S2);

        -- The ring we want is the quotient

        S2bar := S2/ideal cFX;

        -- Now we want to move to the Grassmannian,

        -- represented by the ring GR

        -- We define a map sending the variables of GR

        -- to the minors of the generic matrix in the

        -- p_i regarded as elements of S1bar

        gr := map(S2bar,GR,

                  exteriorPower(k+1, 

                  genericMatrix(S2bar,S2bar_0,k+1,r+1)

                  )

                 );

        -- and the defining ideal of the Fano variety is

        ker gr

      )

F638E22 =  Fano2(ZZ, Ideal) := (k,X) -> (

        KK:=coefficientRing ring X;

        r := (numgens ring X) - 1;

        -- We can specify a private ring with binomial(r+1,k+1)

        -- variables as follows

        GR := KK[Variables => binomial(r+1,k+1)];

        -- the work is done by

        Fano2(k,X,GR)

      )

F638E23 =  Grassmannian2 = method()

F638E24 =  Grassmannian2(ZZ,ZZ,Ring) := (k,r,R) ->( 

              KK := coefficientRing R;

              RPr := KK[Variables => r+1];

              Pr := ideal(0_RPr);

              Fano2(k,Pr)

           )

F638E25 =  Grassmannian2(ZZ,ZZ) := (r,k) -> (

              R := ZZ/31991[

                     vars(0..(binomial(r+1,k+1)-1))

                          ];

              Grassmannian2(k,r,R)

                           )

F638E26 =  KK = ZZ/31991

F638E27 =  R = KK[a,b,c,d]

F638E28 =  X = ideal(a*b-c*d)

F638E29 =  I = Fano2(1,X)

                                                  2                     

F638E30 =  dim I

F638E31 =  degree I

F638E32 =  KK = ZZ/31991

F638E33 =  P5 = KK[a..f]

F638E34 =  MVero = genericSymmetricMatrix(P5,a,3)

F638E35 =  Vero = minors(2,MVero)

                2                                                  2         

F638E36 =  catalecticant = (R,v,m,n) -> 

              map(R^m,n,(i,j)-> R_(i+j+v))

F638E37 =  catalecticant(P5,1,2,4)

F638E38 =  M13 = catalecticant(P5,0,2,1) |

                 catalecticant(P5,2,2,3)

F638E39 =  S13 = minors(2,M13)

                                          2                                 

F638E40 =  M22 = catalecticant(P5,0,2,2) | catalecticant(P5,3,2,2)

F638E41 =  S22 = minors(2, M22)

                2                                                           

F638E42 =  Verores = res coker gens Vero

        1       6       8       3

F638E43 =  S22res = res coker gens S22

        1       6       8       3

F638E44 =  S13res = res coker gens S13

        1       6       8       3

F638E45 =  betti Verores

             0 1 2 3

F638E46 =  betti S22res

             0 1 2 3

F638E47 =  betti S13res

             0 1 2 3

F638E48 =  FVero = Fano2(1, Vero)

              2                                                              

F638E49 =  betti gens FVero

             0   1

F638E50 =  FS13 = Fano2(1, S13)

              2                                                              

F638E51 =  hilbertPolynomial coker gens FS13

F638E52 =  FS22 = Fano2(1, S22)

              2                                                              

F638E53 =  hilbertPolynomial coker gens FS22

F639E0 =  R = ZZ[x,y,z]/(x^2-y*x)

F639E1 =  F = R^4

F639E2 =  degrees F

F640E0 =  M = new Type of MutableList

F640E1 =  net M := m -> peek m

F640E2 =  M _ ZZ := (x,i) -> x#i

F640E3 =  installAssignmentMethod(symbol _, M, ZZ, (x,i,v) -> x#i = v);

F640E4 =  y = new M from (a..z)

F640E5 =  y_12

F640E6 =  y_12 = foo

F640E7 =  y

F640E8 =  y_12

F641E0 =  R = ZZ/32003[a..d];

F641E1 =  I = ideal(a^20, b^20, a*c^19-b*d^19);

F641E2 =  C = resolution I

F641E3 =  regularity C

F641E4 =  regularity comodule I

F641E5 =  regularity I

F641E6 =  regularity module I

F641E7 =  C = resolution ideal(a^3, a^2*b, a*b^6, a^2*c);

F641E8 =  betti C

F641E9 =  regularity C

F641E10 =  betti(C, Weights => {2})

F641E11 =  regularity(C, Weights => {2})

F642E0 =  R = ZZ[x,y,z];

F642E1 =  M = R^1/(x,y,z);

F642E2 =  N = R^1/(x^2,y^2,x*y*z,z^2);

F642E3 =  g = map(N,M,x*y);

F642E4 =  source g

F643E0 =  needsPackage "NormalToricVarieties"

F643E1 =  X = toricProjectiveSpace 1

F643E2 =  S = ring X

F643E3 =  X === variety S

F643E4 =  needsPackage "Schubert2"

F643E5 =  Y = abstractProjectiveSpace 1

F643E6 =  IY = intersectionRing Y

F643E7 =  Y === variety IY

F643E8 =  variety S_0

F643E9 =  variety IY_0

F644E0 =  R = QQ[a..z]

F644E1 =  b ..< i

F644E2 =  plus oo

F645E0 =  R = ZZ/5[t]/(t^2+t+1);

F645E1 =  isPrimitive t

F645E2 =  isPrimitive (t-1)

F646E0 =  R = QQ[x,y,z,q];

F646E1 =  f = vars R

F646E2 =  diff(f, (x+y-z)^2)

F646E3 =  f2 = genericMatrix(R,2,2)

F646E4 =  diff(f2, (x+y-z)^2)

F647E0 =  R = ZZ[i..p];

F647E1 =  g = matrix {{i,j},{k,l}}

F647E2 =  h = matrix {{m,n},{o,p}}

F647E3 =  f= g || h

F647E4 =  f || 33

F648E0 =  A = QQ[x,y,z];

F648E1 =  I1 = ideal(x,y);

F648E2 =  I2 = ideal(y^2,z);

F648E3 =  intersect(I1,I2)

F648E4 =  B = QQ[t,x,y,z];

F648E5 =  I1 = substitute(I1,B);

F648E6 =  I2 = substitute(I2,B);

F648E7 =  J = t*I1 + (1-t)*I2

F648E8 =  eliminate(J,t)

F649E0 =  R = QQ[x_1..x_4];

F649E1 =  f = matrix{{x_1..x_4}}

F649E2 =  koszul(2,f)

F650E0 =  select({1,2,3,4,5}, odd)

F650E1 =  select([1,2,3,4,5], odd)

F651E0 =  getenv "HOME"

F652E0 =  R = QQ[x,y]

F652E1 =  M = image vars R ++ R^2

F652E2 =  f = compose(M,M,M);

F652E3 =  H = Hom(M,M);

F652E4 =  g = H_{0}

F652E5 =  h = homomorphism g

F652E6 =  f * (g ** g)

F652E7 =  h' = homomorphism oo

F652E8 =  h' === h * h

F652E9 =  assert oo

F653E0 =  src = temporaryFileName()

F653E1 =  dst = temporaryFileName()

F653E2 =  src << "hi there" << close

F653E3 =  copyFile(src,dst,Verbose=>true)

F653E4 =  get dst

F653E5 =  copyFile(src,dst,Verbose=>true,UpdateOnly => true)

F653E6 =  src << "ho there" << close

F653E7 =  copyFile(src,dst,Verbose=>true,UpdateOnly => true)

F653E8 =  get dst

F653E9 =  removeFile src

F653E10 =  removeFile dst

F654E0 =  R = ZZ/101[x,dx,y,dy, WeylAlgebra => {x => dx, y => dy}]

F654E1 =  dx*x

F654E2 =  dx*x^10

F654E3 =  dx*y^10

F654E4 =  QQ[a,b,x,dx,y,dy, WeylAlgebra => {  x => dx,  y => dy }]

F654E5 =  QQ[a,b,x,dx,y,dy, WeylAlgebra => { (x, y) => (dx, dy) }]

F654E6 =  QQ[x,dx,y,dy,h, WeylAlgebra => { x => dx, y => dy, h }]

F654E7 =  dx*x^2

F654E8 =  dx*x*y

F654E9 =  dx*h^2

F654E10 =  isHomogeneous(dx*(x^2+x*y+h^2))

F655E0 =  M = monoid [x,y,z];

F655E1 =  product({2,3,4},{x,y,z},(i,j)->j^i)

F656E0 =  R = QQ[a..d]

F656E1 =  I = ideal(a^3,b^3,c^3)

F656E2 =  C = res coker gens I

F656E3 =  D = res coker gens (I + ideal(a*b*c))

F656E4 =  F = extend(D,C,map(D_0,C_0,1))

F657E0 =  homeDirectory

F658E0 =  ZZ[x]/367236427846278621

F658E1 =  A = QQ[u,v];

F658E2 =  I = ideal random(A^1, A^{-2,-2,-2})

F658E3 =  B = A/I;

F658E4 =  use A;

F658E5 =  C = A/(u^2-v^2,u*v);

F658E6 =  D = GF(9,Variable=>a)[x,y]/(y^2 - x*(x-1)*(x-a))

F658E7 =  ambient D

F658E8 =  ZZ/2 === ZZ/(4,6)

F658E9 =  R = ZZ/101[t]

F658E10 =  R/t === R/t

F659E0 =  S = ZZ/2[x,y,z];

F659E1 =  ideal S

F659E2 =  R = S/(y^2-x*z,x^2*y-z^2)

F659E3 =  ideal R

F659E4 =  T = R/(x^3-y*z)

F659E5 =  ideal T

F659E6 =  ambient T

F659E7 =  sing = singularLocus T

F659E8 =  ideal sing

F659E9 =  ambient sing

F660E0 =  R = QQ[a,b,t,x,y,z];

F660E1 =  f = x^7 * y^11;

F660E2 =  diff(x,f)

F660E3 =  diff(y,f)

F660E4 =  diff(x^2,f)

F660E5 =  diff(x*y,f)

F660E6 =  diff(y^2,f)

F660E7 =  diff(x+y,f)

F660E8 =  diff(x^2+x*y+y^2,f)

F660E9 =  m = matrix {{x^3, x^4},{x^5,x^6}}

F660E10 =  diff(x,m)

F660E11 =  diff(x^2,m)

F660E12 =  diff(matrix {{x,x^2,x^3,x^4}}, m)

F660E13 =  diff(matrix {{x,x^2},{x^3,x^4}}, m)

F660E14 =  diff(matrix {{x},{y}}, matrix {{x^2, x*y, y^2}})

F660E15 =  v = matrix {{x,y}}

F660E16 =  diff(v ** transpose v, 3*x^2 + 5*x*y + 11*y^2)

F660E17 =  f = x^3 + y^3 + z^3 - t*x*y*z

F660E18 =  v = matrix {{x,y,z}}

F660E19 =  det diff(transpose v * v, f)

F660E20 =  contract(x,m)

F660E21 =  contract(x^2,m)

F660E22 =  contract(matrix {{x,x^2,x^3,x^4}}, m)

F660E23 =  contract(matrix {{x,x^2},{x^3,x^4}}, m)

F660E24 =  f

F660E25 =  v3 = symmetricPower(3,matrix{{x,y,z}})

F660E26 =  contract(v3, f)

F660E27 =  f = a * x^3 + b * x^2 * y + y^3

F660E28 =  g = b * x^3 + a * x * y^2 + y^3

F660E29 =  n = matrix {{f,g}} ** symmetricPower(2,matrix {{x,y}})

F660E30 =  M = contract(transpose symmetricPower(5,matrix {{x,y}}), n)

F660E31 =  det M

F660E32 =  diff'(m, matrix {{x,x^2,x^3,x^4}})

F660E33 =  diff'(m, matrix {{x,x^2},{x^3,x^4}})

F660E34 =  contract'(m, matrix {{x,x^2,x^3,x^4}})

F660E35 =  contract'(m, matrix {{x,x^2},{x^3,x^4}})

F661E0 =  temporaryFileName () | ".tex"

F661E1 =  temporaryFileName () | ".html"

F662E0 =  R = QQ[x,y,z]

F662E1 =  f = vars R ++ vars R

F662E2 =  g = homomorphism' f

F662E3 =  target g === Hom(source f, target f)

F662E4 =  f' = homomorphism g

F662E5 =  f === f'

F663E0 =  concatenate {"a",("s",3,"d",),"f"}

F664E0 =  R = ZZ/101[x,y,z]

F664E1 =  p = vars R;

F664E2 =  rank kernel p

F664E3 =  rank cokernel p

F664E4 =  C = res cokernel p

F664E5 =  rank C

F665E0 =  R = QQ[x,y]

F665E1 =  M = image matrix {{x,0},{0,y}}

F665E2 =  N = image matrix {{x^2,0},{-y,y}}

F665E3 =  isSubset(N,M)

F665E4 =  isSubset(M,N)

F666E0 =  R = QQ[a..d];

F666E1 =  I = ideal(a,b,c,d^3);

F666E2 =  comodule I

F667E0 =  R = QQ[x,y];

F667E1 =  M = image vars R

F667E2 =  N = coker presentation M

F667E3 =  f = map(M,N,1)

F667E4 =  isWellDefined f

F667E5 =  isIsomorphism f

F667E6 =  g = map(M,cover M,1)

F667E7 =  isWellDefined g

F667E8 =  isIsomorphism g

F667E9 =  h = map(cover M,M,1)

F667E10 =  isWellDefined h

F668E0 =  R = QQ[a..d];

F668E1 =  terms(a+d^2-1+a*b*c)

F668E2 =  S = R[x,y];

F668E3 =  terms(a*x+b*x+c*x*y+c*x^3+1+a)

F668E4 =  R = QQ[a][d];

F668E5 =  f = (1+a+d)^3

F668E6 =  terms f

F668E7 =  terms(QQ,f)

F669E0 =  "a" .. "z"

F669E1 =  "aa" .. "ce"

F669E2 =  "aaa" .. "abc"

F669E3 =  "佖" .. "佥"

F670E0 =  x = new HashTable from {a=>1, b=>2}

F670E1 =  applyValues(x, value -> 1000*value)

F670E2 =  applyKeys(x, key -> {key})

F670E3 =  applyPairs(x, (key,value) -> (value,key))

F670E4 =  x = new HashTable from {a=>1, b=>2}

F670E5 =  scanValues(x, print)

F670E6 =  scanKeys(x, print)

F670E7 =  scanPairs(x, print)

F670E8 =  y = new HashTable from {b=>200, c=>300}

F670E9 =  merge(x, y, plus)

F670E10 =  combine(x,y,identity,times,plus)

F671E0 =  prepend(3, {1, 7, 8, 3})

F671E1 =  L = {"old", "old", "old"};

F671E2 =  prepend("new", L)

F671E3 =  K = (a, b, c);

F671E4 =  prepend(z, K)

F671E5 =  join((x, y, z), K)

F671E6 =  append(K, z)

F671E7 =  insert(1, z, K)

F671E8 =  L = new MutableList from {2,3,5};

F671E9 =  peek prepend(7, L)

F671E10 =  peek L

F672E0 =  printingPrecision,printingAccuracy

F672E1 =  1p100e-5/3

F672E2 =  x = {1p100e-5/3,1p100e-4/3,1p100e-3/3,1p100e-2/3}

F672E3 =  printingAccuracy = 8

F672E4 =  x

F672E5 =  printingAccuracy = 4

F672E6 =  x

F673E0 =  "test-file" << "hi there" << close

F673E1 =  isInputFile oo

F673E2 =  f = openIn "test-file"

F673E3 =  isInputFile f

F673E4 =  isOpen f

F673E5 =  get f

F673E6 =  isInputFile f

F673E7 =  isOpen f

F673E8 =  removeFile "test-file"

F674E0 =  R = QQ[a..d];

F674E1 =  I = monomialIdeal(a*b*c,b*c*d,a^2*d,b^3*c)

F674E2 =  I^2

F674E3 =  I + monomialIdeal(b*c)

F674E4 =  I : monomialIdeal(b*c)

F674E5 =  radical I

F674E6 =  associatedPrimes I

F674E7 =  primaryDecomposition I

F674E8 =  borel I

F674E9 =  isBorel I

F674E10 =  I - monomialIdeal(b^3*c,b^4)

F674E11 =  standardPairs I

F674E12 =  independentSets I

F674E13 =  dual I

F675E0 =  R = ZZ/101[a..d]

F675E1 =  S = ZZ/101[p..s]

F675E2 =  (f,g) = newCoordinateSystem(S,matrix{{a+2*b,3*c-d}});

F675E3 =  f

F675E4 =  g

F676E0 =  R = ZZ/101[x,y];

F676E1 =  R^2 ** vars R

F676E2 =  (vars R) ** R^2

F676E3 =  R = ZZ/101[t];

F676E4 =  f = matrix {{t}}

F676E5 =  degrees source f

F676E6 =  degrees source (f ** R^{-3})

F677E0 =  x = "x" | "3"^1

F677E1 =  "<--- " | ( x || "" || x ) | " --->"

F678E0 =  R = ZZ/101[x_0..x_4];

F678E1 =  I = ideal random(R^1, R^{-2,-3});

F678E2 =  genera I

F679E0 =  f = mutableMatrix {{1,2,3,4}}

F679E1 =  f_(0,2)

F679E2 =  f_(0,2) = 33

F679E3 =  f

F679E4 =  R = QQ[a..z]

F679E5 =  mutableMatrix genericMatrix(R,3,3)

F680E0 =  R = ZZ[a..d];

F680E1 =  I = ideal"abc-d3,ab-d-1,a2+b2+c3-14d-3"

F680E2 =  I/size

F680E3 =  (f->f+a*b-1)\I

F680E4 =  I/leadTerm/support/set//sum

F681E0 =  L = {a,b,c,d,e}

F681E1 =  S = (a,b,c,d,e)

F681E2 =  ()

F681E3 =  (1,2)

F681E4 =  (1)

F681E5 =  toSequence {1}

F681E6 =  10000*{3,4,5} + {1,2,3}

F681E7 =  v = [1,2,3]

F681E8 =  ZZ[a,b,c]

F681E9 =  v = <|1,2,3|>

F681E10 =  v#1

F681E11 =  Container = new Type of BasicList

F681E12 =  t = new Container from {a,b}

F681E13 =  Container ++ Container := join;

F681E14 =  t ++ t

F681E15 =  A = new MutableList from {a,b,c}

F681E16 =  peek A

F681E17 =  A#2 = 1234;

F681E18 =  A

F681E19 =  peek A

F681E20 =  r = Bag {100!}; r

F681E21 =  q = Bag {1/100!}; q

F681E22 =  unbag q

F681E23 =  showStructure(List,Sequence,Array,Container,MutableList,Bag,BasicList)

F681E24 =  L = {926, 621, 429, 67, 594, 904, 264, 18, 35, 961};

F681E25 =  #L

F681E26 =  length L

F681E27 =  L#0

F681E28 =  L#2

F681E29 =  L#-1

F681E30 =  L_1

F681E31 =  L_{3,6}

F681E32 =  first L

F681E33 =  last L

F681E34 =  A = {3,4,,5}

F681E35 =  peek A

F681E36 =  A#2

F681E37 =  1 .. 5, x_1 .. x_5, a .. e

F681E38 =  12:a

F681E39 =  1:a

F681E40 =  A = {3 .. 6, 9, 3:12}

F681E41 =  A = splice {3..6, 9, 3:12}

F681E42 =  QQ[a..c,x_1..x_4]

F681E43 =  L_{1..3,-3..-1}

F681E44 =  A = {{a,b,c},{d,{e,f}}}

F681E45 =  #A

F681E46 =  #(first A)

F681E47 =  flatten A

F681E48 =  splice (a, (b, c), (d, (e, f, (g, h))) )

F681E49 =  deepSplice (a, (b, c), (d, (e, f, (g, h))) )

F681E50 =  T = {{a,1},{b,2},{c,3}}

F681E51 =  isTable T

F681E52 =  MatrixExpression T

F681E53 =  table({1,2,3},{7,8},(i,j) -> 1000*i+j)

F681E54 =  pack(1..15, 4)

F681E55 =  mingle({{1,2,3,4}, {10,20,30,40}, {100,200,300,400}, {a, b}})

F681E56 =  append(L, -10)

F681E57 =  L

F681E58 =  L = append(L, -10); L

F681E59 =  L = prepend(-20, L)

F681E60 =  L = insert(5, -30, L)

F681E61 =  L = switch(1, 2, L)

F681E62 =  L = delete(-10, L)

F681E63 =  L = drop(L, {1,1})

F681E64 =  L = drop(L, 2)

F681E65 =  L = drop(L, -2)

F681E66 =  L = take(L, 6)

F681E67 =  L = take(L, {1,4})

F681E68 =  L = between(-5, L)

F681E69 =  L

F681E70 =  reverse L

F681E71 =  sort L

F681E72 =  rsort L

F681E73 =  unique L

F681E74 =  join(a..f, 1..6)

F681E75 =  x_1..x_3 | y_1..y_4

F681E76 =  scan({a,b,c}, print)

F681E77 =  scan({3,5,7,11,44,55,77}, i -> if even i then break i)

F681E78 =  apply({1,2,3,4}, i -> i^2)

F681E79 =  {1,2,3,4} / (i -> i^2)

F681E80 =  (i -> i^2) \ {1,2,3,4}

F681E81 =  {1,2,3,4} / (i -> i^2) / (j -> 1000*j)

F681E82 =  (j -> 1000*j) \ (i -> i^2) \ {1,2,3,4}

F681E83 =  (j -> 1000*j) @@ (i -> i^2) \ {1,2,3,4}

F681E84 =  apply({1,2,3}, {7,8,9}, (i,j) -> 1000*i+j)

F681E85 =  applyTable( {{1,2,3},{4,5}}, i -> i^2)

F681E86 =  fold((i,j) -> i*10+j, {7,3,5,4,2})

F681E87 =  accumulate((i,j) -> i*10+j, {7,3,5,4,2})

F681E88 =  select({12, 3, -10, 42, 7, 6, 53}, even)

F681E89 =  select({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

F681E90 =  select(2, {12, 3, -10, 42, 7, 6, 53}, even)

F681E91 =  positions({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

F681E92 =  position({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

F681E93 =  position({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40, Reverse => true)

F681E94 =  number({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

F681E95 =  R = QQ[x,y,z, MonomialOrder => Lex];

F681E96 =  max {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

F681E97 =  maxPosition {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

F681E98 =  min {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

F681E99 =  minPosition {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

F681E100 =  any({3, 6, 7, 8}, even)

F681E101 =  all({3, 6, 7, 8}, even)

F682E0 =  "abcd"

F683E0 =  select(20, odd)

F683E1 =  select(20, even)

F684E0 =  changeBase(255, 16)

F684E1 =  for n from 10 to 35 list changeBase(n, 36)

F684E2 =  for n from 10 to 61 list changeBase(n, 62)

F684E3 =  changeBase("ff", 16)

F684E4 =  changeBase("FF", 16)

F684E5 =  apply({"0b10", "0B10", "010", "0x10", "0X10", "10"}, s -> changeBase(s, 0))

F684E6 =  changeBase("ff", 16, 2)

F685E0 =  {1, 2} ** {10, 20, 30}

F686E0 =  256 << 5

F686E1 =  256. << 555

F687E0 =  catch scan(0..10, i -> if i == 5 then throw 18 else print i)

F688E0 =  asin 1

F689E0 =  R = QQ[a..g]

F689E1 =  F = a^3+b^2*c+3*f^10*d-1+e-e

F689E2 =  indices F

F689E3 =  index a

F689E4 =  support F

F689E5 =  M = matrix"a+b,c+e;2a-e,3b-c4"

F689E6 =  indices M

F689E7 =  support M

F690E0 =  "abc" | "def"

F690E1 =  x = "abc" || "ABC"

F690E2 =  x|"x"|x

F690E3 =  "t = " | 333

F691E0 =  10 ^^ 12

F692E0 =  agm(1,2p200)

F693E0 =  R = ZZ/101[a .. o];

F693E1 =  f = genericMatrix(R, a, 3, 5)

F693E2 =  submatrix'(f, {1}, {2})

F693E3 =  submatrix'(f, {1}, {2,3,3,2,2})

F693E4 =  submatrix'(f, {1,3}, )

F693E5 =  submatrix'(f, , {1,3} )

F693E6 =  submatrix'(f, {1,3} )

F694E0 =  Quintic = Proj(QQ[x_0..x_4]/ideal(x_0^5+x_1^5+x_2^5+x_3^5+x_4^5-101*x_0*x_1*x_2*x_3*x_4))

F694E1 =  singularLocus(Quintic)

F694E2 =  omegaQuintic = cotangentSheaf(Quintic);

F694E3 =  h11 = rank HH^1(omegaQuintic)

F694E4 =  h12 = rank HH^2(omegaQuintic)

F694E5 =  h21 = rank HH^1(cotangentSheaf(2,Quintic))

F694E6 =  hh^(2,1)(Quintic)

F694E7 =  hh^(1,1)(Quintic)

F694E8 =  euler(Quintic)

F694E9 =  SchoensQuintic = Proj(QQ[x_0..x_4]/ideal(x_0^5+x_1^5+x_2^5+x_3^5+x_4^5-5*x_0*x_1*x_2*x_3*x_4))

F694E10 =  Z = singularLocus(SchoensQuintic)

F694E11 =  degree Z

F694E12 =  II'Z = sheaf module ideal Z

F694E13 =  defect = rank HH^1(II'Z(5))

F694E14 =  h11 = defect + 1

F694E15 =  quinticsJac = numgens source basis(5,ideal Z)

F694E16 =  h21 = rank HH^0(II'Z(5)) - quinticsJac

F694E17 =  chiW = euler(Quintic)+2*degree(Z)

F695E0 =  log1p 1p100e-10

F695E1 =  log(1 + 1p100e-10)

F696E0 =  pack(a..l, 3)

F696E1 =  pack(3, a..l)

F696E2 =  pack("Hello world!", 4)

F696E3 =  pack(4, "Hello world!")

F696E4 =  pack(a..m, 3)

F696E5 =  pack(2, mingle(a..m, 0..12))

F697E0 =  Grassmannian(1,3)

F697E1 =  J = Grassmannian(2,5, CoefficientRing => ZZ/31, Variable => T) 

F697E2 =  T_(0,2,3)

F697E3 =  use ring J

F697E4 =  T_(0,2,3)

F698E0 =  last {a,b,c,d,e}

F698E1 =  last gens(QQ[x,y,z])

F699E0 =  uniform {2, 5, 0}

F699E1 =  uniform {2*0.5, 5*0.5, 0/2}

F699E2 =  uniform {hi, "hello"}

F699E3 =  uniform {"hi", "hello"}

F699E4 =  R = QQ[x,y,z];

F699E5 =  uniform {x^2*y*z, 5*y, 12/7}

F699E6 =  uniform {x^2*y*z, 5*y, (12/7)_R}

F699E7 =  S = ZZ[t];

F699E8 =  uniform {monomialIdeal(x), monomialIdeal(t)}

F699E9 =  uniform {monomialIdeal(t), ideal(t)}

F699E10 =  uniform {S/monomialIdeal(t), S/ideal(t)}

F700E0 =  iter = iterator {1, 2, 3}

F700E1 =  code iter

F700E2 =  next iter

F700E3 =  iter()

F700E4 =  next iter

F700E5 =  iter()

F700E6 =  primes = Iterator (

         p := 2;

         () -> (

             r := p;

             p = nextPrime(p + 1);

             r));

F700E7 =  iterator primes === primes

F700E8 =  for p in primes list if p > 20 then break else p

F700E9 =  for p in primes list if p > 20 then break else p

F700E10 =  s = "Hello, world!"

F700E11 =  for c in s list c

F700E12 =  for c in s list c

F701E0 =  R = QQ[a..d]/(a*d-b*c, b^2-a*c, c^2-b*d)

F701E1 =  degree R

F702E0 =  R = ZZ[x,y,z];

F702E1 =  M = R^1/(x,y,z);

F702E2 =  N = R^1/(x^2,y^2,x*y*z,z^2);

F702E3 =  g = map(N,M,x*y);

F702E4 =  f = res g;

F702E5 =  target f

F703E0 =  4/2

F703E1 =  R = GF(9,Variable=>a);

F703E2 =  (a/a^3) * a^2 == 1

F703E3 =  S = ZZ[a,b]

F703E4 =  (a^6-b^6)/(a^9-b^9)

F703E5 =  A = ZZ/101[a,b]/(a*b)

F703E6 =  (a+b)/(a-b)

F704E0 =  toCC(200,7)

F704E1 =  toCC(100,7,3.)

F704E2 =  toCC(3.,4.)

F704E3 =  toCC(3.p100,4.p200)

F705E0 =  R = ZZ/101[a..d];

F705E1 =  C = res coker vars R

F705E2 =  sum C

F705E3 =  degrees oo

F706E0 =  R = QQ[x]

F706E1 =  f = vars R

F706E2 =  M = coker presentation image f

F706E3 =  g = Hom(M,f)

F706E4 =  target g

F706E5 =  source g

F707E0 =  f = matrix{{1,3,0,0,3,5,2,0,0},{0,0,0,1,3,6,7,8,0}}

F707E1 =  pivots f

F708E0 =  x

F708E1 =  x_4

F708E2 =  x_(2,3)

F708E3 =  x_10 .. x_20

F708E4 =  x_(1,1) .. x_(2,3)

F708E5 =  y_10 = 555;

F708E6 =  y_10

F709E0 =  load "Macaulay2Doc/demo1.m2"

F709E1 =  listUserSymbols

F709E2 =  code g

F709E3 =  g 4

F709E4 =  g 3

F709E5 =  g 2

F710E0 =  R = QQ[x,y];

F710E1 =  Spec R

F711E0 =  S = QQ[w,x,y,z];

F711E1 =  vars S

F711E2 =  ideal vars S

F711E3 =  coker vars S

F711E4 =  res coker vars S

F711E5 =  R = S/(x^2-w*y, x*y-w*z, x*z-y^2);

F711E6 =  vars R

F711E7 =  use S;

F711E8 =  Q = S/(x^2-w*y, z);

F711E9 =  vars S

F712E0 =  ff := 5

F712E1 =  ff

F712E2 =  j

F712E3 =  h = () -> j

F712E4 =  h()

F712E5 =  j = 444

F712E6 =  h()

F712E7 =  j := 555

F712E8 =  h()

F712E9 =  j

F713E0 =  frac ZZ

F713E1 =  R = ZZ/101[x,y]/(x^3 + 1 + y^3)

F713E2 =  frac R

F713E3 =  x

F713E4 =  1/x

F713E5 =  x/1

F713E6 =  use frac R

F713E7 =  x

F713E8 =  f = (x-y)/(x^6-y^6)

F713E9 =  (x^3 - y^3) * f

F713E10 =  numerator f

F713E11 =  denominator f

F713E12 =  liftable(1/f,R)

F713E13 =  liftable(f,R)

F713E14 =  lift(1/f,R)

F714E0 =  printingPrecision = 2

F714E1 =  R = RR_100

F714E2 =  M = 10*random(R^3,R^10)

F714E3 =  norm M

F714E4 =  norm_(numeric_20 infinity) M

F714E5 =  norm {3/2,4,-5}

F714E6 =  RR[x]

F714E7 =  (1+x)^5

F714E8 =  norm oo

F715E0 =  R = ZZ[x,y,z];

F715E1 =  use R;

F715E2 =  S = ZZ[x,t];

F715E3 =  x

F715E4 =  R_0

F715E5 =  R_"x"

F715E6 =  use R;

F715E7 =  x

F716E0 =  4.

F716E1 =  ring 4.

F716E2 =  parent ring 4.

F716E3 =  RR_*

F717E0 =  R = QQ[a..e]

F717E1 =  C = res coker vars R

F717E2 =  max C

F717E3 =  dual C

F717E4 =  max dual C

F718E0 =  "test-file" << "hi there" << close

F718E1 =  get "test-file"

F718E2 =  removeFile "test-file"

F718E3 =  get "!date"

F719E0 =  R = (ZZ[x,y])^3;

F719E1 =  v = vector {1,x,x*y};

F719E2 =  entries v

F720E0 =  T = new MutableList from (a, b, c)

F720E1 =  mutable T

F720E2 =  V = new List from (a, b, c)

F720E3 =  mutable V

F720E4 =  mutable join(T, V)

F720E5 =  mutable a

F720E6 =  mutable "a"

F721E0 =  0 ..< 10

F721E1 =  x = {a,c,e,f}

F721E2 =  0 ..< #x

F721E3 =  apply(0 ..< #x, i -> x#i)

F722E0 =  R = QQ[a..c]

F722E1 =  I = ideal (a,b,c);

F722E2 =  J = I^2

F722E3 =  J_*     

F723E0 =  s = "The cat is black.";

F723E1 =  m = regex("(\\w+) (\\w+) (\\w+)",s)

F723E2 =  substring(m#0, s)

F723E3 =  substring(m#1, s)

F723E4 =  substring(m#2, s)

F723E5 =  substring(m#3, s)

F723E6 =  s = "aa     aaaa";

F723E7 =  m = regex("a+", 0, s)

F723E8 =  substring(m#0, s)

F723E9 =  m = regex("a+", 2, s)

F723E10 =  substring(m#0, s)

F723E11 =  m = regex("a+", 2, 3, s)

F723E12 =  s = "line 1\nline 2\r\nline 3";

F723E13 =  m = regex("^.*$", 8, -8, s)

F723E14 =  substring(m#0, s)

F723E15 =  m = regex("^", 10, -10, s)

F723E16 =  substring(0, m#0#0, s)

F723E17 =  substring(m#0#0, s)

F723E18 =  m = regex("^.*$", 4, -10, s)

F723E19 =  substring(m#0, s)

F723E20 =  m = regex("a.*$", 4, -10, s)

F723E21 =  regex("A(?!C)", "AC AB")

F723E22 =  regex("A(?=B)", "AC AB")

F723E23 =  s = "<b>bold</b> and <b>strong</b>";

F723E24 =  m = regex("<b>(.*)</b>", s, POSIX => true);

F723E25 =  substring(m#1, s)

F723E26 =  m = regex("<b>(.*?)</b>", s);

F723E27 =  substring(m#1, s)

F724E0 =  ideal 7

F724E1 =  R = ZZ/2[x,y];

F724E2 =  f = x^2+y^2;

F724E3 =  ideal f

F724E4 =  ideal 0_R

F724E5 =  ideal id_(R^0)

F724E6 =  promote(ideal(), R)

F725E0 =  A = random(RR^5, RR^3)

F725E1 =  (Q,R) = QRDecomposition A

F725E2 =  R

F725E3 =  (transpose Q) * Q

F725E4 =  clean(1e-10, oo)

F725E5 =  R - (transpose Q) * A

F725E6 =  clean(1e-10, oo)

F725E7 =  A = mutableMatrix(RR_53, 13, 5);

F725E8 =  fillMatrix A

F725E9 =  (Q,R) = QRDecomposition A

F725E10 =  Q*R-A

F725E11 =  clean(1e-10,oo)

F726E0 =  R = ZZ/32003[a..d];

F726E1 =  I = monomialCurveIdeal(R,{1,3,4})

F726E2 =  M1 = R^1/I

F726E3 =  M2 = R^1/ideal(I_0,I_1)

F726E4 =  f = inducedMap(M1,M2)

F726E5 =  Ext^1(f,R)

F726E6 =  g = Ext^2(f,R)

F726E7 =  source g == Ext^2(M1,R)

F726E8 =  target g == Ext^2(M2,R)

F726E9 =  Ext^3(f,R)

F727E0 =  newPackage("Foo",

         Version => "1.1",

         Headline => "making Foo",

         Configuration => { "foo" => 42, "bar" => "x" }

         )

F727E1 =  endPackage "Foo"

F727E2 =  opts = options Foo

F727E3 =  opts.Headline

F728E0 =  R = ZZ/101[a..d,t]

F728E1 =  index a

F728E2 =  index t

F728E3 =  A = ZZ[a..d]

F728E4 =  index x

F728E5 =  index z

F728E6 =  index r

F728E7 =  index(r*1_C)

F728E8 =  index(b*1_C)

F729E0 =  gbTrace = 3;

F729E1 =  R = ZZ[x,y,z];

F729E2 =  f = matrix{{x^2-3, y^3-1, z^4-2}};

F729E3 =  g = forceGB f

F729E4 =  g === gb(f, StopBeforeComputation=>true)

F729E5 =  gens gb f

F730E0 =  f = temporaryFileName() << "hi there"

F730E1 =  fileLength f

F730E2 =  close f

F730E3 =  filename = toString f

F730E4 =  fileLength filename

F730E5 =  get filename

F730E6 =  length oo

F730E7 =  removeFile filename

F731E0 =  R = ZZ/101[a,b,c, Degrees=>{1,1,2}];

F731E1 =  C = res cokernel vars R

F731E2 =  betti C

F731E3 =  p = poincareN C

F731E4 =  sub(p, {S => -1})

F731E5 =  poincare C

F731E6 =  sub(p, {S => 1})

F731E7 =  poincare sum C

F732E0 =  all(hashTable{1=>3, 2=>2, 3=>1}, (a,b) -> a == b)

F732E1 =  all(hashTable{1=>1, 2=>2, 3=>3}, (a,b) -> a == b)

F733E0 =  fn = temporaryFileName()

F733E1 =  fileExists fn

F733E2 =  fn << "hi there" << close

F733E3 =  fileExists fn

F733E4 =  removeFile fn

F734E0 =  x_1

F734E1 =  x_1 .. x_10

F734E2 =  x_(a,1) .. x_(b,3)

F735E0 =  R = QQ[x,y,a..d,t,MonomialOrder=>{2,4,1}];

F735E1 =  m = matrix{{x*a-d^2, a^3-1, x-a^100, a*b*d+t*c^3, t^3-t^2-t+1}}

F735E2 =  selectInSubring(1,m)

F735E3 =  selectInSubring(2,m)

F735E4 =  S = QQ[a..d,MonomialOrder=>Lex];

F735E5 =  m = matrix{{a^2-b, b^2-c, c^2-d, d^2-1}}

F735E6 =  selectInSubring(1,m)

F735E7 =  S = QQ[a..d,MonomialOrder=>{4:1}];

F735E8 =  m = matrix{{a^2-b, b^2-c, c^2-d, d^2-1}}

F735E9 =  selectInSubring(1,m)

F735E10 =  selectInSubring(2,m)

F735E11 =  selectInSubring(3,m)	  

F736E0 =  x = 1 -- this is a comment

F737E0 =  benchmark "sqrt 2p100000"

F738E0 =  isConstant 3

F738E1 =  QQ[a,b][x,y];

F738E2 =  isConstant (x+a-x)

F738E3 =  isConstant x

F739E0 =  R = ZZ/173[a..d]

F739E1 =  M = ker matrix{{a^3-a*c*d,a*b*c-b^3,a*b*d-b*c^2}}

F739E2 =  M/a == M/(a*M)

F739E3 =  M/M_0

F739E4 =  M/(R*M_0 + b*M)

F739E5 =  M/(M_0,a*M_1+M_2)

F739E6 =  presentation oo

F740E0 =  R = QQ[a..d,MonomialOrder => RevLex, Global => false];

F740E1 =  a^3 + b^2 + b*c + a*c^2 + b^2*c + a + b + c

F741E0 =  ker Matrix := on(lookup(ker,Matrix),GenerateAssertions=>true,Name=>"ker"); 

F741E1 =  f = x -> kernel (x|x);

F741E2 =  R = QQ[a..c];

F741E3 =  f vars R

F742E0 =  A = QQ[x,y,z];

F742E1 =  I1 = ideal(x,y);

F742E2 =  I2 = ideal(y^2,z);

F742E3 =  I1 : I2

F742E4 =  quotient(I1,I2)

F742E5 =  J1 = intersect(I1,ideal(I2_0))

F742E6 =  J2 = intersect(I1,ideal(I2_1))

F742E7 =  K1 = ideal(J1_0//I2_0)

F742E8 =  K2 = ideal(J2_0//I2_1, J2_1//I2_1)

F742E9 =  intersect(K1,K2)

F743E0 =  sort {c,e,a,f,b,f}

F743E1 =  sort {4,2,6,3,8,2}

F743E2 =  sort {"a11","a1","a2","A11","A1","A2","B2"}

F743E3 =  sort {(1,1),(2,1),(3,1),(1,2),(3,2)}

F743E4 =  R = ZZ[a..d,MonomialOrder=>Lex];

F743E5 =  sort{a*d, b^100, c^3*d}

F744E0 =  R = ZZ/32003[a..d];

F744E1 =  I = monomialCurveIdeal(R,{1,3,4})

F744E2 =  M = R^1/I

F744E3 =  Ext^1(M,R)

F744E4 =  Ext^2(M,R)

F744E5 =  Ext^3(M,R)

F744E6 =  Ext^1(I,R)

F745E0 =  x = s

F745E1 =  s = 11111111111

F745E2 =  x

F745E3 =  value x

F746E0 =  applicationDirectorySuffix

F746E1 =  applicationDirectory()

F746E2 =  applicationDirectorySuffix = "local/Mac2"

F746E3 =  applicationDirectory()

F747E0 =  H = new HashTable from {1 => 10, 2 => 15, 3 => 20}

F747E1 =  applyPairs(H, (k,v) -> (k+1, v+10))

F747E2 =  applyPairs(H, (k,v) -> (v,k))

F748E0 =  p = temporaryFileName ()

F748E1 =  symlinkFile ("foo", p)

F748E2 =  readlink p

F748E3 =  removeFile p

F749E0 =  X = new HeaderType of BasicList

F749E1 =  X {a,b,c}

F750E0 =  R = QQ[x]/x^5;

F750E1 =  f = map(R^1,R^1,{{x^3}}, Degree => 3)

F750E2 =  M = homology(f,f)

F750E3 =  prune M

F751E0 =  tally {a,a,b,c} - tally {c,d,d}

F752E0 =  S = ZZ/32003[x,y,z];

F752E1 =  I = ideal(x^4-4*x*y*z^2-z^4-y^4);

F752E2 =  R = S/I;

F752E3 =  X = variety I

F752E4 =  degree X

F752E5 =  degree X == degree I

F752E6 =  degree X == degree R

F753E0 =  R = GF(8,Variable=>a)

F753E1 =  f = R_0 ++ R_0^2 ++ R_0^3 ++ R_0^4

F753E2 =  generators image f

F753E3 =  generators cokernel f

F754E0 =  ZZ/101[t_0 .. t_4]

F754E1 =  (t_0 -  2*t_1)^3

F755E0 =  R = QQ[x_1 .. x_10, MonomialOrder=>{4,6}];

F755E1 =  options R

F755E2 =  (options R).MonomialOrder

F755E3 =  S = QQ[a..d];

F755E4 =  (options S).MonomialOrder

F756E0 =  R = QQ[a..d];

F756E1 =  degrees R

F756E2 =  heft R

F756E3 =  S = QQ[a..d, DegreeRank => 4];

F756E4 =  degrees S

F756E5 =  heft S

F756E6 =  T = QQ[a,b, Degrees => {1,-1}]

F756E7 =  degrees T

F756E8 =  heft T

F756E9 =  U = QQ[a..d, Degrees => {{2,0}, {1,-1}, {0,-2}, {-1,-3}}]

F756E10 =  degrees U

F756E11 =  heft U

F756E12 =  hilbertSeries U

F756E13 =  describe ring numerator oo

F756E14 =  hilbertSeries(U, Order => 8)

F756E15 =  R = QQ[x,y, Heft => {3}];

F756E16 =  degree ideal x

F757E0 =  R = QQ[a,b,c,d]/(a^4+b^4+c^4+d^4);

F757E1 =  X = Proj R

F757E2 =  Omega = cotangentSheaf X

F757E3 =  HH^1(Omega)

F757E4 =  F = sheaf coker matrix {{a,b}}

F757E5 =  module F

F758E0 =  take({a,b,c,d,e,f,g}, 3)

F758E1 =  take({a,b,c,d,e,f,g}, -3)

F758E2 =  take({a,b,c,d,e,f,g}, {1,3})

F758E3 =  take({a,b,c,d,e,f,g}, {2,2})

F758E4 =  take({a,b,c,d,e,f,g}, {3,1})

F758E5 =  take({a,b,c,d,e,f,g}, {4,-1})

F758E6 =  take("Hello, world!", 5)

F758E7 =  take("Hello, world!", 20)

F759E0 =  defaultPrecision

F759E1 =  1/3.

F759E2 =  defaultPrecision=100     

F759E3 =  1/3.	       

F759E4 =  RR[x]

F759E5 =  numeric pi

F760E0 =  R = QQ[a..d];

F760E1 =  I = monomialCurveIdeal(R,{1,3,4})

F760E2 =  X = variety I

F760E3 =  KX = sheaf(Ext^1(I,R^{-4}) ** ring X)

F760E4 =  K2 = KX^**2

F760E5 =  prune K2

F761E0 =  isInfinite 3.

F761E1 =  inf = 1/0.

F761E2 =  isInfinite inf

F761E3 =  nan = inf - inf

F761E4 =  isInfinite nan

F762E0 =  locate needs

F762E1 =  code needs

F762E2 =  locate(resolution, Module)

F762E3 =  locate methods resolution

F762E4 =  methods doc

F762E5 =  locate 0

F763E0 =  ceiling(-3.4)

F764E0 =  dictionaryPath

F764E1 =  values PackageDictionary

F765E0 =  f = "test-file" << "hi there"

F765E1 =  isOpen f

F765E2 =  close f

F765E3 =  isOpen f

F765E4 =  get "test-file"

F765E5 =  removeFile "test-file"

F766E0 =  default RR

F766E1 =  defaultPrecision = 100

F766E2 =  default CC

F767E0 =  t1 = cpuTime()

F767E1 =  for i from 0 to 1000000 do 223131321321*324234324324;

F767E2 =  t2 = cpuTime()

F767E3 =  t2-t1

F768E0 =  processID()

F769E0 =  isField QQ

F769E1 =  isField CC_53

F769E2 =  isField GF(2,3)

F769E3 =  isField(frac(QQ[x,y]))

F769E4 =  R = QQ[x]/(x^2+1)

F769E5 =  isUnit x

F769E6 =  isField R

F769E7 =  F = toField R

F769E8 =  isField F

F770E0 =  R = QQ[x,y];

F770E1 =  M = coker vars R

F770E2 =  N = coker matrix {{x}}

F770E3 =  f = inducedMap(M,N)

F770E4 =  g = res f

F770E5 =  g * (source g).dd == (target g).dd * g

F770E6 =  F = cone g

F770E7 =  prune HH_0 F

F770E8 =  prune HH_1 F

F770E9 =  prune kernel f

F770E10 =  C = res M

F770E11 =  id_C

F770E12 =  x * id_C

F770E13 =  inducedMap(C ** R^1/x,C)

F770E14 =  g ** R^1/x

F770E15 =  q = map(C,C,i -> (i+1) * id_(C_i))

F770E16 =  C.dd * q == q * C.dd

F771E0 =  R = QQ[x,y,z];

F771E1 =  X = Proj R

F771E2 =  Ext^0(OO_X^1, OO_X^1)

F771E3 =  Ext^0(OO_X^1, OO_X^1(*))

F771E4 =  Ext^0(OO_X^1, OO_X(*))	  

F772E0 =  num

F772E1 =  num = 5

F772E2 =  num

F772E3 =  symbol num

F772E4 =  symbol +

F773E0 =  M = matrix{{1,2,3},{1,34,45},{2213,1123,6543},{0,0,0}}

F773E1 =  (D,P,Q) = smithNormalForm M

F773E2 =  D == P * M * Q

F773E3 =  (D,P) = smithNormalForm(M, ChangeMatrix=>{true,false})

F773E4 =  D = smithNormalForm(M, ChangeMatrix=>{false,false}, KeepZeroes=>true)

F773E5 =  prune coker M

F773E6 =  S = ZZ/101[t]

F773E7 =  D = diagonalMatrix{t^2+1, (t^2+1)^2, (t^2+1)^3, (t^2+1)^5}

F773E8 =  P = random(S^4, S^4)

F773E9 =  Q = random(S^4, S^4)

F773E10 =  M = P*D*Q

F773E11 =  (D1,P1,Q1) = smithNormalForm M;

F773E12 =  D1 - P1*M*Q1 == 0

F773E13 =  prune coker M

F774E0 =  R4 = ZZ/32003[a..d];

F774E1 =  R5 = ZZ/32003[a..e];

F774E2 =  R6 = ZZ/32003[a..f];

F774E3 =  M = coker genericMatrix(R6,a,2,3)

F774E4 =  pdim M

F774E5 =  G = map(R6,R5,{a+b+c+d+e+f,b,c,d,e})

F774E6 =  F = map(R5,R4,random(R5^1, R5^{4:-1}))

F774E7 =  P = pushForward(G,M)

F774E8 =  pdim P

F774E9 =  Q = pushForward(F,P)

F774E10 =  pdim Q

F774E11 =  P3 = QQ[a..d];

F774E12 =  M = comodule monomialCurveIdeal(P3,{1,2,3})

F774E13 =  P2 = QQ[a,b,c];

F774E14 =  F = map(P3,P2,random(P3^1, P3^{-1,-1,-1}))

F774E15 =  N = pushForward(F,M)

F774E16 =  hilbertPolynomial M

F774E17 =  hilbertPolynomial N

F774E18 =  ann N

F775E0 =  ZZ/2[t];

F775E1 =  isPrime(t^2+t+1)

F775E2 =  isPrime(t^2+1)

F775E3 =  isPrime 101

F775E4 =  isPrime 158174196546819165468118574681196546811856748118567481185669501856749

F775E5 =  isPrime 158174196546819165468118574681196546811856748118567481185669501856749^2

F775E6 =  f = factor 28752093487520394720397634653456

F775E7 =  peek'_2 f

F775E8 =  first \ toList f

F775E9 =  isPrime \ oo

F776E0 =  R = ZZ/101[a..e];

F776E1 =  I = monomialCurveIdeal(R,{2,3,5,7})

F776E2 =  J = ideal presentation singularLocus(R/I);

F776E3 =  codim J

F776E4 =  radical J

F776E5 =  R = QQ[x,y]/(ideal(x,y) * ideal(x-1))

F776E6 =  codim ideal(x,y)

F777E0 =  for i from 1 to 5 when i < 15 list i^2 do print i

F777E1 =  for i from 1 to 5 when i^2 < 15 list i^2 do print i

F777E2 =  for i from 1 to 3 do (

          print "The value of i is : ";

          print i

          )

F777E3 =       

F777E4 =  for i to 5 when i < 15 list i^2

F777E5 =  for i to 5 list i^2

F777E6 =  for i when i < 15 list i^2

F777E7 =  for i when i^2 < 15 do print i

F777E8 =  for i from 0 when i < 10 list (if odd i then continue; i^2)

F777E9 =  for i from 0 when i < 10 list (if odd i then continue 4567; i^2)

F777E10 =  for i from 0 when i < 10 list (if i== 5 then break i; i^2)

F777E11 =  for i from 0 when i < 10 list (if i== 5 then break; i^2)

F777E12 =  for i in 0..3 list i^2

F777E13 =  for i in "foo" do print i

F778E0 =  A = ZZ[a..d];

F778E1 =  B = A/(3*a^2-1);

F778E2 =  C = B/(a*b-3);

F778E3 =  describe C

F778E4 =  ambient C

F779E0 =  t = table({1,3,5,7}, {0,1,2,4}, (i,j) -> i^j);

F779E1 =  netList t

F779E2 =  netList applyTable(t, i -> 2*i)

F779E3 =  netList applyTable(t, isPrime)

F780E0 =  (S,f) = selectVariables({2,4}, QQ[a..h,Weights=>1..8]);

F780E1 =  describe S

F780E2 =  options S

F780E3 =  f

F781E0 =  S = QQ[a,b,c];

F781E1 =  R = QQ[x,y,z];

F781E2 =  phi = map(R,S,{x,y,x^2-y^3})

F781E3 =  isInjective phi

F781E4 =  ker phi

F781E5 =  psi = map(R,S,{x,x+y,z-x^2+y^3})

F781E6 =  isInjective psi

F781E7 =  ker psi

F782E0 =  I = Schubert(2,4,{1,2,4},CoefficientRing => QQ)

F782E1 =  R = ring I;

F782E2 =  C = res I

F782E3 =  betti C

F783E0 =  S = ZZ/10007[x,y,z];

F783E1 =  f = matrix{{x^3,x*y^2},{y*x^2,y^3}}

F783E2 =  g = transpose f

F783E3 =  degrees f

F783E4 =  degrees g

F784E0 =  X = for i from 1 to 10 list random(100)

F784E1 =  min X

F784E2 =  R1 = QQ[x, y, z, MonomialOrder => Lex];

F784E3 =  min {x*y^2, x*y^2 + z^2, y^4, y*z^5}

F784E4 =  R2 = QQ[x, y, z, MonomialOrder => GRevLex];

F784E5 =  min (x*y^2, x*y^2 + z^2, y^4, y*z^5)

F784E6 =  min {{3, 1, 2}, {2, 9, 6}, {3, 7, 5}}

F784E7 =  min flatten {{3, 1, 2}, {2, 9, 6}, {3, 7, 5}}

F785E0 =  R = ZZ[a..f];

F785E1 =  tex matrix {{a^2+2,b,c},{d,e,f^3-a}}

F786E0 =  R = ZZ/32003[a..f, SkewCommutative => true]

F786E1 =  F = 1 + a + b + a*b + b*c*d + a*b*c*d*e

F786E2 =  antipode F

F786E3 =  S = ZZ/32003[a..f, SkewCommutative => {0,1,2}]

F786E4 =  F = 1 + a + b + a*b + b*c*d + a*b*c*d*e

F786E5 =  antipode F

F786E6 =  use R

F786E7 =  M = matrix{{a*b-1, a*c-d, e-a*b*c}}

F786E8 =  N = syz M

F786E9 =  M*N

F786E10 =  (transpose N) * (transpose M)

F786E11 =  Mt = matrix transpose entries M -- this does not use antipode

F786E12 =  Nt = matrix transpose entries N -- this does not use antipode

F786E13 =  Nt*Mt -- is not zero!

F787E0 =  R = ZZ/101[a..d]

F787E1 =  symmetricPower(2,vars R)

F787E2 =  R = ZZ/101[a,b]

F787E3 =  symmetricPower(2,image vars R)

F788E0 =  currentRowNumber()

F789E0 =  S = QQ[a..f];

F789E1 =  I = ideal(a^5, b^5, c^5, d^5, e^5);

F789E2 =  degree I

F789E3 =  degree(S^1/I)

F789E4 =  I = intersect(ideal(a-1,b-1,c-1),ideal(a-2,b-1,c+1),ideal(a-4,b+7,c-3/4));

F789E5 =  degree I

F790E0 =  R = ZZ/101[x,y,z];

F790E1 =  standardForm (x^2 - 7 + x*y*z^11 + y)

F791E0 =  flatten {{2,3,4}, {{5}, 6}, 7}

F791E1 =  R = ZZ/101[a,b,c];

F791E2 =  m = matrix {{2, a},{b^2, 23},{c, c^3}}

F791E3 =  flatten m

F792E0 =  P = Proj(QQ[a,b,c])

F792E1 =  TP = tangentSheaf(P)

F792E2 =  HH^0(TP(-1))

F792E3 =  HH^1(TP(-3))

F792E4 =  Node = Proj(QQ[a,b,c]/ideal(b^2*c-a^2*(a+c)))

F792E5 =  Cusp = Proj(QQ[a,b,c]/ideal(b^2*c-a^3))

F792E6 =  TNode = tangentSheaf(Node)

F792E7 =  HH^0(TNode)

F792E8 =  HH^1(TNode)

F792E9 =  TCusp = tangentSheaf(Cusp)

F792E10 =  HH^0(TCusp)

F792E11 =  HH^1(TCusp)

F793E0 =  mutable symbol s

F793E1 =  s = 5

F793E2 =  s

F793E3 =  protect symbol s

F793E4 =  mutable symbol s

F793E5 =  try s = 7

F793E6 =  s

F794E0 =  {1,2,3} + {1,5,6}

F795E0 =  lcm(-6,15,14)

F795E1 =  lcm(-6/7,15,14)

F795E2 =  R = QQ[a..d];

F795E3 =  lcm(a^2-d^2,(a-d)*(b+c))

F795E4 =  factor oo

F796E0 =  x = 1/3.

F796E1 =  class x

F796E2 =  ring x

F796E3 =  x = 1/3.p200

F796E4 =  class x

F796E5 =  ring x

F797E0 =  R = QQ[a..f,MonomialOrder=>Weights=>{1,1,1,1,0,0}]

F797E1 =  I = ideal(a*b*c-d*e*f,a*c*e-b*d*f,a*d*f-b*c*e)

F797E2 =  gens gb I

F797E3 =  leadTerm I

F797E4 =  leadTerm(1,I)

F797E5 =  R = ZZ[x,y]

F797E6 =  F = y^2-(x^3+3*x+5)

F797E7 =  I = ideal(F, diff(x,F), diff(y,F))

F797E8 =  gens gb I

F797E9 =  leadTerm I

F797E10 =  factor 174

F797E11 =  R = QQ[a..d]/(a^2+b^2+c^2+d^2-1)

F797E12 =  I = ideal(a*b*c*d)

F797E13 =  gens gb I

F797E14 =  R = QQ[a..d,SkewCommutative=>true]

F797E15 =  I = ideal(a*b-c*d)

F797E16 =  gens gb I

F797E17 =  A = QQ[s,c]/(s^2+c^2-1)

F797E18 =  B = A[x,y,z]

F797E19 =  I = ideal(c*x^2, s*y^2, c*y-s*x)

F797E20 =  gens gb I

F797E21 =  leadTerm oo

F798E0 =  Poly = new Type of HashTable

F798E1 =  p = new Poly from { "" => 1, "x" => 2, "y" => 3, "cat" => 5 }

F798E2 =  Poly * Poly := (p,q) -> combine(p,q,concatenate,times,plus);

F798E3 =  p*p

F798E4 =  DivPowPoly = new Type of HashTable

F798E5 =  divPowCoeff = (i,j) -> binomial(i+j,i)

F798E6 =  p = new DivPowPoly from { 0 => 1, 1 => 1 }

F798E7 =  DivPowPoly * DivPowPoly := (p,q) -> combine(p,q,plus,divPowCoeff,times,plus);

F798E8 =  p*p

F799E0 =  s = "a\"b\"c"

F799E1 =  t = format s

F799E2 =  u = value t

F799E3 =  u == s

F799E4 =  format(10,1/3000.)

F799E5 =  format(10,6,1/3000.)

F799E6 =  format(10,6,2,1/3000.)

F799E7 =  format(10,300000.)

F799E8 =  format(10,-1,10,5,300000.)

F799E9 =  format(10,-1,10,4,300000.)

F799E10 =  format(10,-1,10,4,"E",300000.)

F800E0 =  s = "A string with both Unix-style\nand Windows-style\r\nnew line characters."

F800E1 =  separate s

F800E2 =  lines s

F800E3 =  separate("[,.

i: ]", "Example: a string. That, is punctuated, weirdly

i: for demonstration purposes.")


F800E4 =  t = separate("[ ]+", "this    string has   different   lengths of    spacing  between     words")

F800E5 =  replace("has", "does not have", demark(" ", t))

F800E6 =  s = "algng xjfr kfjxse xhgfj xooi xwj kvexr anvi endj xkfi";

F800E7 =  concatenate separate(" x[A-Za-z]*", s)

F800E8 =  concatenate separate(" (x)[A-Za-z]*", 1, s)

F801E0 =  random RR

F801E1 =  random CC_100

F801E2 =  tally for i to 100 list random GF 11

F801E3 =  random GF(2,40)

F802E0 =  x = 100!

F802E1 =  y = Bag {x}

F802E2 =  unbag y

F803E0 =  R = ZZ/101[x,y,z];

F803E1 =  p = map(R^2,R^{-2,-2,0},{{x^2,0,3},{0,y^2,5}})

F803E2 =  isHomogeneous p

F803E3 =  p = map(R^2,R^3,{(0,0) => x+y, (1,1) => x^2, (0,2) => x-1, (0,0) => x-y})

F804E0 =  R = QQ[x,y,z];

F804E1 =  X = Proj R

F804E2 =  M = R^{1,2,3}

F804E3 =  sheaf M

F804E4 =  M~

F805E0 =  F = ZZ^3

F805E1 =  class F

F805E2 =  parent class F

F805E3 =  showStructure class F

F805E4 =  showStructure F

F805E5 =  v = F_0 + 3*F_2

F805E6 =  F === ZZ^3

F805E7 =  set (ZZ^3, ZZ^2, ZZ^3)

F805E8 =  peek F

F805E9 =  ZZ^3_0 + ZZ^3_2

F806E0 =  R = QQ[x,y,z]

F806E1 =  x^2

F806E2 =  class x^2

F806E3 =  r = 4.5

F806E4 =  s = 4.3p300

F806E5 =  precision r

F806E6 =  precision s

F806E7 =  ring r

F806E8 =  ring s

F806E9 =  RR'

F806E10 =  parent ring r     

F806E11 =  parent ring s

F806E12 =  parent ring s === RR'

F807E0 =  L = new Type of BasicList

F807E1 =  x = new L from {a,b,c,d}

F807E2 =  join(x,x)

F808E0 =  R = ZZ/5[a,b,c]

F808E1 =  leadMonomial f

F808E2 =  S = ZZ/5[a,b,c, MonomialOrder => Lex]

F808E3 =  leadMonomial g

F809E0 =  A = set {1,2}

F809E1 =  A^**3

F809E2 =  A = tally {1,1,2}

F809E3 =  A^**3

F810E0 =  mingle {{a1, a2, a3}, {b1, b2, b3}, {c1, c2, c3}}

F810E1 =  mingle {{a1, a2, a3, a4}, {b1, b2}, {c1}}

F810E2 =  pack(3, mingle ((a1, a2, a3), (b1, b2, b3), (c1, c2, c3)))

F810E3 =  concatenate mingle( {"a","b","c"} , {",",","} )

F810E4 =  netList pack(3, mingle( (0..5), apply(6, i -> i^2), apply(6, i -> i^3)))

F811E0 =  R = QQ[a,b,c,x,y,z];

F811E1 =  f = matrix{{x},{y},{z}}

F811E2 =  g = matrix{{a,b,c}}

F811E3 =  f*g

F811E4 =  target (f*g) == target f

F811E5 =  source (f*g) == source g

F811E6 =  isHomogeneous (f*g)

F811E7 =  degree(f*g)

F811E8 =  h = map(f*g,Degree=>0)

F811E9 =  degree h

F811E10 =  degrees source h

F812E0 =  R = QQ[x,y,z];

F812E1 =  f = x^2*y*z+x*y^2*z+y^2*z+z^3+x*y;

F812E2 =  f1 = x*y+y^2-1

F812E3 =  f2 = x*y

F812E4 =  G = ideal(f1,f2)

F812E5 =  f % G

F812E6 =  f % (forceGB gens G)

F812E7 =  f % (forceGB matrix{{f2,f1}})

F813E0 =  R = ZZ/101[a..d];

F813E1 =  S = coimage map(R, R, {a^4, a^3*b, a*b^3, b^4});

F813E2 =  hilbertPolynomial S

F813E3 =  hilbertPolynomial(S, Projective=>false)

F814E0 =  R = QQ[x,y,z];

F814E1 =  I = monomialIdeal(x^2,y^3,x*y^2*z,y*z^4);

F814E2 =  J = polarize(I)

F814E3 =  R = QQ[a,b,c];

F814E4 =  I = monomialIdeal(a^2*b^2,b^2*c^2,a*b*c^4);

F814E5 =  J = polarize(I, VariableBaseName => "x")

F814E6 =  J = polarize(I, VariableBaseName => "foo")

F814E7 =  S = ring J;

F814E8 =  T = QQ[a..h];

F814E9 =  F = map(T, S, first entries vars T);

F814E10 =  F(J)

F815E0 =  set {1,2} ** set {a,b,c}

F815E1 =  A = set{1,2}

F815E2 =  A ** A ** A

F815E3 =  (A ** A ** A)/splice

F815E4 =  A^**3

F816E0 =  R = QQ[a..d];

F816E1 =  F = matrix{{a,b},{c,d}}

F816E2 =  isInjective F

F816E3 =  G = substitute(F, R/(det F))

F816E4 =  isInjective G

F816E5 =  S = QQ[r,s,t];

F816E6 =  phi = map(S,R,{r^3, r^2*s, r*s*t, s^3})

F816E7 =  isInjective phi

F816E8 =  S' = coimage phi

F816E9 =  phi' = phi * map(R,S')

F816E10 =  isInjective phi'

F817E0 =  wrap(10,"abcdefghijklmnopqrstuvwxyz")

F817E1 =  wrap(10,"-","abcdefghijklmnopqrstuvwxyz")

F818E0 =  sum(1 .. 10, i -> i^2)

F819E0 =  erfc 2

F820E0 =  lines "a\nb\nc\n"

F820E1 =  peek oo

F820E2 =  lines "a\nb\nc\nd"

F820E3 =  peek oo

F820E4 =  lines( "\\.", "a.b.c." )

F820E5 =  peek oo

F820E6 =  lines( "\\.", "a.b.c.d" )

F820E7 =  peek oo

F821E0 =  f = method()

F821E1 =  f List := x -> 1

F821E2 =  f VisibleList := x -> 2

F821E3 =  f BasicList := x -> 3

F821E4 =  undocumented { f, (f,List) }

F822E0 =  class {1,2,3}

F822E1 =  R = QQ[a..d]

F822E2 =  class R

F822E3 =  class R === PolynomialRing

F822E4 =  class R === Ring

F822E5 =  instance(R,Ring)

F823E0 =  R = ZZ[a..d];

F823E1 =  f = matrix{{a,b},{c,d}}

F823E2 =  det f

F823E3 =  R = QQ[x,y,z];

F823E4 =  f = matrix{{x,y,z},{y,z,x^2}}

F823E5 =  I = minors(2,f)

F824E0 =  unsequence (2:a)

F824E1 =  unsequence (1:a)

F824E2 =  unsequence (0:a)

F825E0 =  M = coker matrix{{1,2,3}}

F825E1 =  M^3

F825E2 =  directSum(3:M)

F826E0 =  peek loadedFiles

F827E0 =  isDirectSum ZZ^6

F827E1 =  F = ZZ^2 ++ ZZ^3

F827E2 =  isDirectSum F

F827E3 =  components F

F828E0 =  baseRing QQ

F828E1 =  R = QQ[x,y]

F828E2 =  S = R / (x^2 + y^3 - 1)

F828E3 =  T = frac S

F828E4 =  baseRing T

F828E5 =  baseRing S

F828E6 =  baseRing R

F828E7 =  T.baseRings

F829E0 =  x_a

F829E1 =  x_a = b

F829E2 =  x_a

F829E3 =  x_c

F829E4 =  x_c = d

F829E5 =  x_c

F829E6 =  peek x

F830E0 =  R = QQ[x,y,z]/(y^2*z-x*(x-z)*(x-37*z));

F830E1 =  X = Proj R

F830E2 =  OO_X

F830E3 =  HH^1(OO_X)

F830E4 =  HH^0(OO_X(3))

F831E0 =  R = ZZ[a..f];

F831E1 =  m = mutableMatrix genericMatrix(R,a,2,3)

F831E2 =  rowMult(m,0,c)

F831E3 =  m

F832E0 =  R = ZZ/101[a .. o];

F832E1 =  f = genericMatrix(R, a, 3, 5)

F832E2 =  submatrix(f, {1,2,0}, {0..2, 4})

F832E3 =  submatrix(f, {1,2}, )

F832E4 =  submatrix(f,,{0,1})

F832E5 =  f_{0,1}

F833E0 =  R = ZZ/101[a..c];

F833E1 =  f = vars R

F833E2 =  ker f

F833E3 =  coker f

F833E4 =  image f

F833E5 =  image f ++ coker f

F833E6 =  M = subquotient(f, matrix {{a}})

F833E7 =  prune M

F834E0 =  t = table({1,3,5,7}, {0,1,2,4}, (i,j) -> i^j);

F834E1 =  netList t

F834E2 =  s1 = subtable({0,2}, {1,3}, t);

F834E3 =  netList s1

F834E4 =  s2 = subtable(toList(0..3), {1}, t);

F834E5 =  netList s2

F835E0 =  QQ[Variables => vars(0..3)]

F835E1 =  QQ[Variables => x_(0,0)..x_(3,3)]

F835E2 =  QQ[Variables => 2]

F835E3 =  QQ[Variables => 3, VariableBaseName => v]

F835E4 =  QQ[Variables => 4, VariableBaseName => "e"]

F835E5 =  class baseName e_0

F835E6 =  class e

F835E7 =  R = QQ[x, y, Degrees => {1, 2}]

F835E8 =  newRing(R, Variables => {a,b})

F835E9 =  degrees oo

F835E10 =  tensor(R, R, Variables => t_(0,0)..t_(1,1))

F835E11 =  degrees oo

F835E12 =  symmetricAlgebra(R^3, Variables => s_0..s_2)

F836E0 =  precision 3p111

F836E1 =  precision (RR[x])

F836E2 =  precision 3

F837E0 =  s = "what are you thinking?"

F837E1 =  #s

F837E2 =  s_-1, s_19, s_0

F838E0 =  acot 2

F839E0 =  a .. e

F839E1 =  v = VerticalList oo

F839E2 =  v_1

F839E3 =  length v

F839E4 =  toList v

F840E0 =  {a,1} ..< {d,4}

F840E1 =  {1} ..< {5}

F841E0 =  src = temporaryFileName() | "/"

F841E1 =  dst = temporaryFileName() | "/"

F841E2 =  makeDirectory (src|"a/")

F841E3 =  makeDirectory (src|"b/")

F841E4 =  makeDirectory (src|"b/c/")

F841E5 =  src|"a/f" << "hi there" << close

F841E6 =  src|"a/g" << "hi there" << close

F841E7 =  src|"b/c/g" << "ho there" << close

F841E8 =  symlinkDirectory(src,dst,Verbose=>true)

F841E9 =  get (dst|"b/c/g")

F841E10 =  symlinkDirectory(src,dst,Verbose=>true,Undo=>true)

F841E11 =  rm = d -> if isDirectory d then removeDirectory d else removeFile d

F841E12 =  scan(reverse findFiles src, rm)

F841E13 =  scan(reverse findFiles dst, rm)

F842E0 =  newPackage "Foo"

F842E1 =  currentPackage

F842E2 =  endPackage "Foo"

F843E0 =  R = QQ[a..d];

F843E1 =  M = matrix{{a^3,b^3-c^3,a*b*c,a*(b^2-c^2)}}

F843E2 =  image M

F843E3 =  coimage M

F843E4 =  kernel M

F844E0 =  load "Macaulay2Doc/demo1.m2"

F844E1 =  code g

F844E2 =  g 2

F845E0 =  M = monoid[x_1..x_10];

F845E1 =  numgens M

F846E0 =  methods BettiTally

F846E1 =  methods resolution

F846E2 =  methods symbol @@

F846E3 =  methods( symbol ++, Module)

F846E4 =  methods( Matrix, Matrix )

F847E0 =  asinh .2

F848E0 =  matrix 48

F849E0 =  R = ZZ/101[a..f]

F849E1 =  monomialCurveIdeal(R, {3, 5})

F849E2 =  monomialCurveIdeal(R, {3, 4, 5})

F849E3 =  monomialCurveIdeal(R, {6, 7, 8, 9, 11})

F849E4 =  monomialCurveIdeal(R, {1, 3, 4})

F850E0 =  expm1 1p100e-10

F850E1 =  exp(1p100e-10)-1

F851E0 =  x = "aaaa"

F851E1 =  s = getSymbol x

F851E2 =  dictionary s

F851E3 =  s === getSymbol x

F851E4 =  keys User#"private dictionary"

F852E0 =  3000000000000.

F852E1 =  printingSeparator

F852E2 =  printingSeparator = "E"

F852E3 =  3000000000000.

F853E0 =  A = set {1,2};

F853E1 =  R = QQ[a..d];

F853E2 =  B = set{a^2-b*c,b*d}

F853E3 =  toList B

F853E4 =  member(1,A)

F853E5 =  member(-b*c+a^2,B)

F853E6 =  A ** A

F853E7 =  A^**2

F853E8 =  set{1,3,2} - set{1}

F853E9 =  set{4,5} + set{5,6}

F853E10 =  set{4,5} * set{5,6}

F853E11 =  set{1,3,2} === set{1,2,3}

F853E12 =  I = ideal(a,b)

F853E13 =  I == J

F853E14 =  I === J

F853E15 =  C = set(ideal(a,b),ideal(b,a))

F853E16 =  C1 = set(trim ideal(a,b),trim ideal(b,a))

F854E0 =  (err, output) = capture examples(resolution, Ideal) 

F854E1 =  assert not err

F854E2 =  (err, output) = capture /// stderr << "Checking a false statement:" << endl; 1/0 ///

F854E3 =  assert err

F855E0 =  L = {a, b, c, b, a};

F855E1 =  L#?2

F855E2 =  L#?12

F855E3 =  T = new HashTable from {a => 103, b => 89.4, c => 92};

F855E4 =  T#?a

F855E5 =  T#?A

F855E6 =  s = "a perfectly adequate example of a string";

F855E7 =  s#?2

F855E8 =  s#?52

F856E0 =  X = Proj(QQ[x,y,z])

F856E1 =  OO_X(3)

F856E2 =  variety oo

F857E0 =  R = QQ[x..z];

F857E1 =  M = cokernel vars R

F857E2 =  C = res M

F857E3 =  R = ZZ/2[a..d];

F857E4 =  M = coker random(R^4, R^{5:-3,6:-4});

F857E5 =  handleInterrupts = true

F857E6 =  (<< "-- computation started: " << endl;

      while true do try (

          alarm 1;

          time res M;

          alarm 0;

          << "-- computation complete" << endl;

          status M.cache.resolution;

          << res M << endl << endl;

          break;

          ) else (

          << "-- computation interrupted" << endl;

          status M.cache.resolution;

          << "-- continuing the computation" << endl;

          ))

F858E0 =  serialNumber asdf

F858E1 =  serialNumber foo

F858E2 =  serialNumber ZZ

F859E0 =  powermod(2,3,10)

F859E1 =  powermod(2,4,10)

F859E2 =  powermod(2,30000,100000)

F859E3 =  powermod(2,30000,100000000000000000000)

F859E4 =  powermod(2,3331333,3331333)

F860E0 =  hooks(intersect, Ideal, Ideal)

F860E1 =  code 0

F860E2 =  hooks(quotient, Strategy => Iterate)

F861E0 =  columnate(12, characters ascii (65 .. 90))

F862E0 =  A = QQ[x,y];

F862E1 =  gens A

F862E2 =  kk = toField(QQ[t]/(t^3-t-1));

F862E3 =  B = kk[x,y,z];

F862E4 =  generators B

F862E5 =  generators(B, CoefficientRing => QQ)

F863E0 =  random 57

F863E1 =  random 10^50

F863E2 =  tally apply(100, i -> random 7)

F863E3 =  random 3.14

F863E4 =  random 3p200

F863E5 =  for i to 10 list random(100,200)

F863E6 =  tally apply(100, i -> random(10,15))

F863E7 =  random(10.,20.)

F863E8 =  random(10p100,20p100)

F864E0 =  (-4 .. 4) / 

F864E1 =  (-4 .. 4) / 

F865E0 =  R = QQ[a..f];

F865E1 =  g = matrix{{a,b},{c,d},{e,f}}

F865E2 =  M = subquotient(g,matrix{{b},{c},{d}})

F865E3 =  cover M

F865E4 =  cover M == source generators M

F866E0 =  x = new MutableHashTable

F866E1 =  scan(0 .. 30, i -> x#i = i^2)

F866E2 =  x # 20

F866E3 =  x #? 40

F867E0 =  R = QQ[t_1..t_4]

F867E1 =  symbol t_1

F867E2 =  oo_R

F868E0 =  x = tally {a,a,b}

F868E1 =  y = tally {1,2,2,2}

F868E2 =  x ** y

F869E0 =  currentColumnNumber()

F870E0 =  atanh .4

F870E1 =  atanh 4.

F871E0 =  M = matrix{{1, 2}, {5, 7}}

F871E1 =  eigenvectors M

F871E2 =  M = matrix {{1, 2}, {2, 1}}

F871E3 =  (e,v) = eigenvectors(M, Hermitian=>true)

F871E4 =  class \ e

F871E5 =  v

F872E0 =  pseudocode resolution

F872E1 =  disassemble oo

F873E0 =  M = ZZ^2 ++ ZZ^3

F873E1 =  M^[0]

F873E2 =  M^[1]

F873E3 =  M^[1,0]

F873E4 =  R = QQ[a..d];

F873E5 =  M = (a => image vars R) ++ (b => coker vars R)

F873E6 =  M^[a]

F873E7 =  isWellDefined oo

F873E8 =  M^[b]

F873E9 =  isWellDefined oo

F873E10 =  isWellDefined(M^{2})

F873E11 =  C = res coker vars R

F873E12 =  D = (a=>C) ++ (b=>C)

F873E13 =  D^[a]

F874E0 =  R = ZZ[x,y, Degrees => {-1,-2}, Heft => {-1}]

F875E0 =  any(hashTable{1=>5, 2=>4, 3=>3, 4=>2, 5=>1}, (a,b) -> a == b)

F875E1 =  any(hashTable{1=>4, 2=>3, 3=>2, 4=>1}, (a,b) -> a == b)

F876E0 =  R = ZZ[a..d];

F876E1 =  f = (a+2*b-3)^2

F876E2 =  someTerms(f,0,1) -- the lead term

F876E3 =  someTerms(f,-1,1) -- the last term

F876E4 =  someTerms(f,-2,2) -- the last 2 terms

F876E5 =  S = R[x,y,z];

F876E6 =  f = (x*(a-b)+y^2+a-1)^2

F876E7 =  someTerms(f,-1,1) -- the last term

F876E8 =  someTerms(f,-2,2) -- the last 2 terms

F877E0 =  regularizedGamma(3, 7)

F877E1 =  Gamma(3, 7) / Gamma 3

F878E0 =  f = x -> 2^x

F878E1 =  t = createTask(f,3)

F878E2 =  schedule t

F878E3 =  while not isReady t do sleep 1

F878E4 =  taskResult t

F878E5 =  u = schedule(f,4)

F878E6 =  while not isReady u do sleep 1

F878E7 =  taskResult u

F879E0 =  R = ZZ[a..d];

F879E1 =  F = (vars R) ++ ((vars R) ++ matrix{{a-1,b-3},{c,d}})

F879E2 =  F^[1]

F879E3 =  F_[1]^[1]

F879E4 =  G = (a=>R^2) ++ (b=>R^1)

F879E5 =  N = map(G,R^2, (i,j) -> (i+37*j)_R)

F879E6 =  N^[a]

F879E7 =  N^[b]

F879E8 =  N = directSum(x1 => matrix{{a,b-1}}, x2 => matrix{{a-3,b-17,c-35}}, x3 => vars R)

F879E9 =  N^[x1,x3]

F880E0 =  R = ZZ/1277[a..d]

F880E1 =  F = 5*a^3 + d^2 + a*d + b*c + 1

F880E2 =  leadTerm F

F880E3 =  R = ZZ/1277[x,y];

F880E4 =  I = ideal(x^3 - 2*x*y, x^2*y - 2*y^2 + x);

F880E5 =  leadTerm I

F880E6 =  gens gb I

F880E7 =  R = ZZ/1277[x,y, MonomialOrder => Lex];

F880E8 =  I = ideal(x^3 - 2*x*y, x^2*y - 2*y^2 + x);

F880E9 =  gens gb I

F881E0 =  commonest {a,a,a,a,b,b,b,c,c,d,e}

F881E1 =  A = {a,a,a,a,b,b,b,b,c,c,c,c,d,e}; commonest A

F881E2 =  T = tally A

F881E3 =  commonest T

F881E4 =  S = set A

F881E5 =  commonest S

F882E0 =  R = ZZ[a..f];

F882E1 =  m = mutableMatrix genericMatrix(R,a,2,3)

F882E2 =  columnAdd(m,0,c,1)

F882E3 =  m

F883E0 =  stderr << "-- hi there --" << endl

F883E1 =  << "-- ho there --" << endl

F883E2 =  fn = temporaryFileName()

F883E3 =  fn << "hi there" << endl << close

F883E4 =  get fn

F883E5 =  R = QQ[x]

F883E6 =  f = (x+1)^10

F883E7 =  << f

F883E8 =  fn << f << close

F883E9 =  get fn

F883E10 =  fn << toExternalString f << close

F883E11 =  get fn

F883E12 =  value get fn

F883E13 =  removeFile fn

F884E0 =  A = QQ[x,y,z];

F884E1 =  I1 = ideal(x^5*z^3, x*y*z, y*z^4);

F884E2 =  saturate(I1,z)

F884E3 =  J = I1:z

F884E4 =  k = 0;

F884E5 =  while not isSubset(J,I1) do (

        k = k+1;

        I1 = J;

        J = I1 : z;

        );

F884E6 =  J

F884E7 =  k

F885E0 =  ZZ/101[x,y]/(x^2-y^2) ** ZZ/101[a,b]/(a^3+b^3)

F885E1 =  T = tensor(ZZ/101[x,y], ZZ/101[a,b], MonomialOrder => Eliminate 2)

F885E2 =  options tensor

F885E3 =  R = QQ[x,y]/(x^3-y^2);

F885E4 =  T = R ** R

F885E5 =  generators T

F885E6 =  {T_0 + T_1, T_0 + T_2}

F885E7 =  U = tensor(R,R,Variables => {x,y,x',y'})

F885E8 =  x + y + x' + y'

F886E0 =  R = QQ[x,y];

F886E1 =  I = ideal vars R

F886E2 =  M = image vars R

F886E3 =  N = prune M

F886E4 =  f = N.cache.pruningMap

F886E5 =  isIsomorphism f

F886E6 =  f^-1

F886E7 =  source f

F886E8 =  target f

F886E9 =  super M

F886E10 =  cover N

F886E11 =  M ++ N

F886E12 =  M ** N

F886E13 =  M^3

F886E14 =  I^3

F887E0 =  R = ZZ/101[x,y]

F887E1 =  C = chainComplex(matrix{{x,y}},matrix{{x*y},{-x^2}})

F887E2 =  M = HH_1 C

F887E3 =  prune M

F888E0 =  R = QQ[a..d];

F888E1 =  N = coker matrix{{a,b},{c,d}}

F888E2 =  N1 = N/(a^4*N)

F888E3 =  M = a*N/(R*a*N_0+a*b*N)

F888E4 =  isSubquotient(M,N)

F888E5 =  isSubquotient(M,N1)	  

F889E0 =  importFrom_Core {"raw"}

F889E1 =  raw random(ZZ^2, ZZ^2)

F890E0 =  integrate(sin, 0, pi)

F890E1 =  integrate(x -> exp(-x), 0, infinity)

F890E2 =  integrate(x -> exp(-x^2), -infinity, infinity)

F891E0 =  "test-file" << "hi there" << close;

F891E1 =  g = openIn "test-file"

F891E2 =  fileLength g

F891E3 =  atEndOfFile g

F891E4 =  read g

F891E5 =  atEndOfFile g

F891E6 =  close g

F891E7 =  removeFile "test-file"

F892E0 =  L = {a,1,b,2}

F892E1 =  #L, length L

F892E2 =  L#2

F892E3 =  new Array from {a,b,c}

F892E4 =  new List from [a,b,c]

F893E0 =  append({1, 7, 8, 3}, 3)

F893E1 =  L = {"old", "old", "old"};

F893E2 =  append(L, "new")

F893E3 =  K = (a, b, c);

F893E4 =  append(K, z)

F893E5 =  join(K, (x, y, z))

F893E6 =  prepend(z, K)

F893E7 =  insert(1, z, K)

F893E8 =  L = new MutableList from {2,3,5};

F893E9 =  peek append(L, 7)

F893E10 =  peek L

F894E0 =  QQ[x,y, Weights => {-1,1}, Global => false]

F894E1 =  1 > x

F894E2 =  1 < y

F894E3 =  leadTerm matrix{{x+x^2, y+y^2}}

F894E4 =  QQ[x,y, Local => true]

F894E5 =  1 > x

F894E6 =  1 > y

F894E7 =  QQ{x,y}

F894E8 =  leadTerm matrix{{x+x^2, y+y^2}}

F895E0 =  isSorted {1,2,2,3}

F895E1 =  isSorted {1,2,3,2}

F895E2 =  R = ZZ/2[x,y,z, MonomialOrder => Lex];

F895E3 =  isSorted (z^3, y^2, x)

F895E4 =  R = ZZ/2[x,y,z, MonomialOrder => GLex];

F895E5 =  isSorted (z^3, y^2, x)

F896E0 =  R = ZZ/101[x,y];

F896E1 =  hilbertSeries(R/x^3)

F896E2 =  hilbertSeries(R/x^3, Order =>5)

F896E3 =  R = ZZ/101[x,y, Degrees=>{{1,2},{2,3}}];

F896E4 =  hilbertSeries(R/x^3, Order =>5)

F896E5 =  R = QQ[a..d,Degrees=>{{-2,-1},{-1,0},{0,1},{1,2}}]

F896E6 =  hilbertSeries(R, Order =>3)

F896E7 =  degrees ring oo

F896E8 =  heft R

F897E0 =  m = mutableIdentity(QQ,10)

F897E1 =  m_(5,5) = 11/13

F897E2 =  m

F898E0 =  m = mutableMatrix map(ZZ^5,ZZ^6, (i,j) -> 100*i+j)

F898E1 =  rowPermute(m,1,{2,0,1})

F899E0 =  commonRing {1,2/3}

F899E1 =  commonRing {1,2.}

F899E2 =  commonRing {1,2p100,matrix{{3p200}}}

F899E3 =  R = RR[x];

F899E4 =  commonRing {1,2p100,matrix{{3p200}},0_R}

F900E0 =  apply(10, i -> i^2)

F901E0 =  x = {2,3,,4}

F901E1 =  net x

F901E2 =  toString x#2

F901E3 =  peek x

F902E0 =  R = QQ[a..d];

F902E1 =  I = ideal(a^2-b*c-1,a*c-1,b^3-1);

F902E2 =  isSubset(I^2,I)

F902E3 =  isSubset(I,I^2)

F903E0 =  A = ZZ/101[x,y,z]

F903E1 =  F = x^4 - y*z*(1-x)^2 - z - y^3

F903E2 =  I = ideal(F,diff(x,F),diff(y,F),diff(z,F))

F903E3 =  transpose gens I

F903E4 =  1 % I

F903E5 =  h = 1 // gens I

F903E6 =  gens I * h

F904E0 =  set{a,b,c} - set{a}

F904E1 =  set{a,b,c} - {a}

F904E2 =  {a,b,c} - set{a}

F905E0 =  regularizedBeta(1/2, 3, 4)

F905E1 =  1/Beta(3,4) * integrate(t -> t^2 * (1 - t)^3, 0, 1/2)

F906E0 =  V = Proj(ZZ/101[x_0..x_2]);

F906E1 =  M = sheaf(image matrix {{x_0^3+x_1^3+x_2^3}})

F906E2 =  genera M

F907E0 =  M = ZZ^2 ++ ZZ^3

F907E1 =  M_[0]

F907E2 =  M_[1]

F907E3 =  M_[1,0]

F907E4 =  R = QQ[a..d];

F907E5 =  M = (a => image vars R) ++ (b => coker vars R)

F907E6 =  M_[a]

F907E7 =  isWellDefined oo

F907E8 =  M_[b]

F907E9 =  isWellDefined oo

F907E10 =  C = res coker vars R

F907E11 =  D = (a=>C) ++ (b=>C)

F907E12 =  D_[a]

F908E0 =  singularLocus(QQ[x,y] / (x^2 - y^3))

F908E1 =  singularLocus Spec( QQ[x,y,z] / (x^2 - y^3) )

F908E2 =  singularLocus Proj( QQ[x,y,z] / (x^2*z - y^3) )

F908E3 =  singularLocus(ZZ[x,y]/(x^2-x-y^3+y^2))

F908E4 =  gens gb ideal oo

F909E0 =  w = {a,b,c,d,e,f,g,h}

F909E1 =  w_{1,3,4}

F909E2 =  w_{-1,-2,-3}

F909E3 =  {4,2,3,1,0} _ {2,1,3,4,0}

F909E4 =  {a,b,c,d,e}_{2..4}

F910E0 =  R = ZZ/101[x,y,z];

F910E1 =  ring x

F910E2 =  M = matrix {{2*x, x+y},{y^3, z*y}};

F910E3 =  ring M

F910E4 =  S = QQ[x,y,z];

F910E5 =  ring x

F910E6 =  I = ideal (x*y, y*z);

F910E7 =  ring I

F911E0 =  R = ZZ/101[a..c];

F911E1 =  image vars R ++ kernel vars R

F912E0 =  f = x -> x+1

F912E1 =  g = x -> 2*x

F912E2 =  g \ (1 .. 10)

F912E3 =  (1 .. 10) / g

F912E4 =  f \ g \ (1 .. 10)

F912E5 =  f @@ g \ (1 .. 10)

F912E6 =  set (1 .. 10)

F912E7 =  g \ oo

F912E8 =  R = QQ[x];

F912E9 =  f = map(R,R,{x^2})

F912E10 =  f \ {x,x^2,x^3,x^4}

F913E0 =  drop({a,b,c,d,e,f,g}, 3)

F913E1 =  drop({a,b,c,d,e,f,g}, -3)

F913E2 =  drop({a,b,c,d,e,f,g}, {1,3})

F913E3 =  drop({a,b,c,d,e,f,g}, {2,2})

F913E4 =  drop({a,b,c,d,e,f,g}, {3,1})

F913E5 =  drop({a,b,c,d,e,f,g}, {4,-1})

F914E0 =  R = ZZ/101[x, Degrees => {2}]/ideal(x^2);

F914E1 =  s = hilbertSeries R

F914E2 =  numerator s

F914E3 =  poincare R

F914E4 =  R=ZZ/101[x, Degrees => {{1,1}}]/ideal(x^2);

F914E5 =  s = hilbertSeries R

F914E6 =  numerator s

F914E7 =  poincare R

F915E0 =  g = {a=>1, b=>2} >> opts -> args -> {args, opts}

F915E1 =  g x

F915E2 =  g(x,y,b=>66)

F915E3 =  g(t,u,a=>44,b=>77)

F915E4 =  h = true >> opts -> args -> {args, opts}

F915E5 =  h(t,u,c=>55)

F916E0 =  showClassStructure

F917E0 =  sum {1,2,3,4,5}

F917E1 =  sum {}

F917E2 =  class oo

F917E3 =  R = QQ[x_1 .. x_10];

F917E4 =  f = n -> sum for i from 1 to n list x_i;

F917E5 =  f 4

F917E6 =  f 0

F917E7 =  class oo

F917E8 =  g = n -> promote(sum for i from 1 to n list x_i, R);

F917E9 =  g 10

F917E10 =  g 0

F917E11 =  class oo

F918E0 =  EulerConstant

F918E1 =  +EulerConstant

F918E2 =  EulerConstant+100p100

F919E0 =  tests "FirstPackage"

F919E1 =  t = oo#0

F919E2 =  locate t

F919E3 =  code t

F919E4 =  code 0

F920E0 =  R = QQ[a..i, MonomialOrder => Eliminate 3];

F920E1 =  I = ideal(a^2, b-f, d^4, i - b);

F920E2 =  selectInSubring(1, gens gb I)

F920E3 =  R = QQ[a..i, MonomialOrder => {Eliminate 3,4,2}];

F920E4 =  d^3 - a*e^4 + b^2*i + a*c*d*f +a*c^2*g + a*c*g

F920E5 =  I = ideal(a..i)

F920E6 =  selectInSubring(1, gens gb I);

F920E7 =  selectInSubring(2, gens gb I);

F920E8 =  selectInSubring(3, gens gb I);

F921E0 =  CatalanConstant

F921E1 =  numeric_100 CatalanConstant

F922E0 =  BesselJ_0 .5

F922E1 =  BesselJ_2 3p200

F923E0 =  X = new SelfInitializingType of BasicList

F923E1 =  x = X {1,2,3}

F923E2 =  class x

F924E0 =  baseFilename "/a/b/dir/"

F924E1 =  baseFilename "/a/b/file"

F925E0 =  fib = n -> if n <= 1 then 1 else fib(n-1) + fib(n-2)

F925E1 =  time fib 28

F925E2 =  fib = memoize fib

F925E3 =  time fib 28

F925E4 =  time fib 28

F925E5 =  peek memoizeValues fib

F925E6 =  memoizeClear fib

F925E7 =  peek memoizeValues fib

F926E0 =  ff = matrix{{1,2,3},{4,5,6}}

F926E1 =  gg = matrix{{4,5,6},{1,2,3}}

F926E2 =  ff+gg

F926E3 =  ff-gg

F926E4 =  R = ZZ/17[a..l];

F926E5 =  ff = matrix {{a,b,c},{d,e,f}}

F926E6 =  gg = matrix {{g,h},{i,j},{k,l}}

F926E7 =  ff * gg

F926E8 =  ff = matrix{{1,2,3},{4,5,6},{7,8,9}}

F926E9 =  ff^4

F926E10 =  ff == gg

F926E11 =  ff == ff

F926E12 =  M = R^{1,2,3}

F926E13 =  N = R^3

F926E14 =  ff = id_M

F926E15 =  gg = id_N

F926E16 =  ff - gg == 0

F926E17 =  ff == gg

F926E18 =  ff != gg

F926E19 =  ff = matrix {{a,b,c},{d,e,f}}

F926E20 =  gg = matrix {{g,h},{i,j},{k,l}}

F926E21 =  ff ** gg

F927E0 =  notify = true

F927E1 =  loadPackage "FirstPackage"

F927E2 =  loadPackage FirstPackage

F928E0 =  cos 2

F929E0 =  R = ZZ/101[a..d]

F929E1 =  m = matrix{{a*b, a^2*c}, {a*b^2, a^4*d}}

F929E2 =  divideByVariable(m,a)

F929E3 =  divideByVariable(m,a,1)

F930E0 =  R = QQ[x,y,z];

F930E1 =  X = Proj R

F930E2 =  sheaf R

F930E3 =  R~

F931E0 =  x = [a,b,c]

F931E1 =  # x

F931E2 =  x#1

F931E3 =  new Array from {a,b,c}

F931E4 =  new Sequence from [a,b,c]

F932E0 =  C = chainComplex ZZ

F932E1 =  C.dd_101 = random(ZZ^2,ZZ^3)

F932E2 =  C.dd_105 = id_(ZZ^2)

F932E3 =  C

F932E4 =  C.dd

F933E0 =  S = ZZ/3[x,y,z];

F933E1 =  isQuotientRing S

F933E2 =  R = S/(x^2-y*z);

F933E3 =  isQuotientRing R

F933E4 =  ambient R

F933E5 =  symAlg = symmetricAlgebra R^2;

F933E6 =  isQuotientRing symAlg

F933E7 =  sing = singularLocus R;

F933E8 =  isQuotientRing sing

F934E0 =  fileReadable "."

F935E0 =  QQ[x][y]

F935E1 =  oo.FlatMonoid

F935E2 =  QQ[x][y][z]

F935E3 =  oo.FlatMonoid

F935E4 =  QQ[x][y, Join => false]

F935E5 =  oo.FlatMonoid

F936E0 =  isRing QQ

F936E1 =  R = QQ[x,y];

F936E2 =  isRing(R)

F936E3 =  isRing(R^1)

F936E4 =  isRing(GF(2,3)[x,dx, WeylAlgebra => {x => dx}])

F937E0 =  fn = temporaryFileName()

F937E1 =  fn << "hi there" << close

F937E2 =  m = fileMode fn

F937E3 =  fileMode(m|7,fn)

F937E4 =  fileMode fn

F937E5 =  removeFile fn

F938E0 =  X = Proj(QQ[x_0..x_2])

F938E1 =  HH^0(OO_X^1(>=0))

F938E2 =  HH^1(OO_X^1(>=0))

F938E3 =  HH^2(OO_X^1(>=-3)) -- this should change to * once implemented

F938E4 =  TruncDual = HH^2(OO_X^1(>=-4))

F938E5 =  hilbertFunction(-4, TruncDual)

F938E6 =  hilbertFunction(-3, TruncDual)

F938E7 =  R = QQ[x_0..x_4];

F938E8 =  a = {1,0,0,0,0}

F938E9 =  b = {0,1,0,0,1}

F938E10 =  c = {0,0,1,1,0}

F938E11 =  M1 = matrix table(5,5, (i,j)-> x_((i+j)%5)*a_((i-j)%5))

F938E12 =  M2 = matrix table(5,5, (i,j)-> x_((i+j)%5)*b_((i-j)%5))

F938E13 =  M3 = matrix table(5,5, (i,j)-> x_((i+j)%5)*c_((i-j)%5))

F938E14 =  M = M1 | M2 | M3;

F938E15 =  betti (C=res coker M)

F938E16 =  N = transpose submatrix(C.dd_3,{10..28},{2..36});

F938E17 =  betti (D=res coker N)

F938E18 =  Pfour = Proj(R)

F938E19 =  HorrocksMumford = sheaf(coker D.dd_3);

F938E20 =  T = HH^1(HorrocksMumford(>=-1))

F938E21 =  apply(-1..2, i-> hilbertFunction(i,T))

F939E0 =  fn = temporaryFileName()

F939E1 =  fn << "hi there" << close

F939E2 =  isRegularFile fn

F939E3 =  removeFile fn

F940E0 =  R = QQ[a..d];

F940E1 =  P3 = Proj R

F940E2 =  I = monomialCurveIdeal(R,{1,3,4})

F940E3 =  G = sheaf module I

F940E4 =  Hom(OO_P3,G(3))

F940E5 =  HH^0(G(3))

F941E0 =  f = matrix{{1,3,5,7,9,11},{2,4,6,8,10,12}}

F941E1 =  reshape(ZZ^3,ZZ^4,f)

F942E0 =  {1,2,3}|{4,5,6}

F942E1 =  (a,b,c)|(1,2)

F943E0 =  A2 = QQ[x,y,z];

F943E1 =  A2 = QQ[x,y,z,MonomialOrder=>GRevLex];

F943E2 =  f = x^3*y*z+y^5+z^4+x^3+x*y^2

F943E3 =  A1 = QQ[x,y,z,MonomialOrder=>Lex];

F943E4 =  substitute(f,A1)

F943E5 =  A3 = QQ[x,y,z,MonomialOrder=>{Weights=>{1,1,1},Lex}];

F943E6 =  substitute(f,A3)

F943E7 =  A4 = QQ[x,y,z,MonomialOrder=>{Weights=>{5,3,2},Lex}];

F943E8 =  substitute(f,A4)

F943E9 =  A = QQ[x,y,z,MonomialOrder=>{1,2}];

F943E10 =  substitute(f,A)

F943E11 =  A = QQ[x,y,z,MonomialOrder=>{Weights=>{-1,0,0},Weights=>{0,-1,0},Weights=>{0,0,-1}},Global=>false];

F943E12 =  substitute(f,A)

F943E13 =  A = QQ[x,y,z,MonomialOrder=>{Weights=>{-1,-1,-1},GRevLex},Global=>false];

F943E14 =  substitute(f,A)

F944E0 =  X = Proj(QQ[x,y,z])

F944E1 =  F = OO_X

F944E2 =  G = F(3)

F944E3 =  module G

F944E4 =  degrees oo

F945E0 =  s = "|"

F945E1 =  s^(4,3)

F945E2 =  n = net(x_0)

F945E3 =  n0 = s^(height n, depth n)

F945E4 =  n0|n|n0

F946E0 =  R = ZZ/101[a..d, Degrees => {2:{1,0},2:{0,1}}];

F946E1 =  I = ideal random(R^1, R^{2:{-2,-2},2:{-3,-3}});

F946E2 =  t = betti res I

F946E3 =  B = multigraded t

F946E4 =  betti(B, Weights => {1,0})

F946E5 =  betti(B, Weights => {0,1})

F946E6 =  betti(B, Weights => {1,1})

F947E0 =  R = QQ[x,y,z];

F947E1 =  p = matrix {{x,y,z}}

F947E2 =  q = map(R^1,R^3,p)

F947E3 =  degrees source p

F947E4 =  degrees source q

F948E0 =  R = ZZ/101[x_0..x_2];

F948E1 =  V = Proj R;

F948E2 =  S = sheaf(image matrix {{x_0^3+x_1^3+x_2^3}})

F948E3 =  h = hilbertPolynomial S

F948E4 =  hilbertPolynomial(S, Projective=>false)

F949E0 =  R = ZZ/101[x,y,z];

F949E1 =  f = x^3+3*y^2*z+2*z^3;

F949E2 =  substitute(f,matrix{{-1,2,5}})

F949E3 =  substitute(f,{x=>-1,y=>2,z=>5})

F949E4 =  M = matrix{{x^2,x-y},{x-z,z^2},{y-z,y^2}}

F949E5 =  substitute(M,matrix{{-1,2,x+y}})

F949E6 =  I = ideal M

F949E7 =  substitute(I,{x=>-1,y=>2})

F950E0 =  R = ZZ/31[x]

F950E1 =  f = (x^110+1)*(x^13+1)

F950E2 =  time factor f

F950E3 =  g = () -> factor f

F950E4 =  g = profile g

F950E5 =  h = profile("h", () -> factor f)

F950E6 =  for i to 10 do (g()

i: h()

i: h())


F950E7 =  profileSummary

F951E0 =  f = {{"hi there","foo"},{-3, 2^40}}

F951E1 =  netList f

F951E2 =  netList(f,Boxes=>false)

F951E3 =  netList(f,Boxes=>true,HorizontalSpace=>1,VerticalSpace=>1)

F951E4 =  netList(f,Boxes=>true,Alignment=>Center)

F951E5 =  netList(f,Boxes=>true,BaseRow=>1)

F951E6 =  netList(f,Boxes=>{{1},{1}})

F951E7 =  netList apply(5,i->apply(i+1,j->(i,j)))

F951E8 =  netList(apply(5,i->apply(i+1,j->(i,j))),Boxes=>{true,false})

F952E0 =  S = QQ[a..d, DegreeRank => 4];

F952E1 =  degrees S

F952E2 =  heft S

F953E0 =  KK = ZZ/31991

F953E1 =  R = KK[x,y,z,w]

F953E2 =  I = ideal(x^2*y,x*y^2+x^3)

F953E3 =  J = gens gb I

F953E4 =  R = KK[a..d]

F953E5 =  I = monomialCurveIdeal(R,{1,3,4})

F953E6 =  codim I

F953E7 =  dim I

F953E8 =  codim (R^1/(I*R^1))

F953E9 =  M = coker gens I

F953E10 =  codim M

F953E11 =  dim M

F953E12 =  degree I

F953E13 =  degree M

F953E14 =  hilbertPolynomial M

F953E15 =  hilbertSeries M

F953E16 =  Mres = res M

F953E17 =  betti Mres

F953E18 =  R = KK[x,y,z]

F953E19 =  F = random(R^1, R^{-2,-3})

F953E20 =  GB = gens gb F

F953E21 =  LT = leadTerm gens gb F

F953E22 =  betti LT

F953E23 =  R = KK[x,y,z, MonomialOrder => Lex]

F953E24 =  F = random(R^1, R^{-2,-3})

F953E25 =  GB = gens gb F

F953E26 =  LT = leadTerm gens gb F

F953E27 =  betti LT

F953E28 =  R = KK[a..i]

F953E29 =  M = genericMatrix(R,a,3,3)

F953E30 =  N = M^3

F953E31 =  I = flatten N

F953E32 =  Tr = trace M 

F953E33 =  Tr //I  -- the quotient, which is 0

F953E34 =  Tr % I  -- the remainder, which is Tr again

F953E35 =  Tr^2 % I

F953E36 =  Tr^3 % I

F953E37 =  Tr^4 % I

F953E38 =  Tr^5 % I

F953E39 =  Tr^6 % I

F953E40 =  Tr^7 % I

F953E41 =  Tr^6 // I

F953E42 =  Tr^6 == I * (Tr^6 // I) + (Tr^6 % I)

F953E43 =  x = global x

F953E44 =  R = KK[x_0..x_3] 

F953E45 =  M = map(R^2, 3, (i,j)->x_(i+j))

F953E46 =  I = gens minors(2,M)

F953E47 =  pideal = ideal(x_0+x_3, x_1, x_2)

F953E48 =  y = global y

F953E49 =  S = KK[y_0..y_3,MonomialOrder=> Eliminate 1]

F953E50 =  I1 = substitute(I, matrix{{y_0,y_1,y_2,y_3-y_0}})

F953E51 =  J = selectInSubring(1,gens gb I1)

F953E52 =  S1 = KK[y_1..y_3]

F953E53 =  J1 = substitute(J, S1)

F953E54 =  Rbar = R/(ideal I)

F953E55 =  f = map(Rbar, S1, matrix(Rbar,{{x_0+x_3, x_1,x_2}}))

F953E56 =  J1 = ker f

F953E57 =  R = KK[a,b,c,d]

F953E58 =  I1 = ideal(d*b-a^2, d^2*c-a^3)

F953E59 =  I1aug = (gens I1) | matrix{{d}}

F953E60 =  augrelations = gens ker I1aug

F953E61 =  I21 = submatrix(augrelations, {2}, {0,1})

F953E62 =  I21 = ideal I21

F953E63 =  I22 = I21 : d

F953E64 =  I23 = I22 : d

F953E65 =  (gens I23) % (gens I22)

F953E66 =  gens gb I1

F953E67 =  I2 = divideByVariable(gens gb I1,d)

F953E68 =  saturate(I1, d)

F954E0 =  R = QQ[x_1 .. x_12];

F954E1 =  f = genericMatrix(R,6,2)

F954E2 =  g = adjoint'(f,R^2,R^3)

F954E3 =  isHomogeneous g

F955E0 =  R = QQ[x,y,w]

F955E1 =  H = map(U,R,matrix{{s^2,s*t,t^2}})

F955E2 =  ker H

F955E3 =  coimage H

F956E0 =  R = QQ[x,y]

F956E1 =  S = QQ[s,t,u]

F956E2 =  f = map(R,S,{x^2,x*y,y^2})

F956E3 =  graphRing f

F956E4 =  Spec oo

F957E0 =  R = ZZ/1277[x,y];

F957E1 =  I = ideal(x^3 - 2*x*y, x^2*y - 2*y^2 + x);

F957E2 =  (x^3 - 2*x) % I

F957E3 =  (x^3) % I

F957E4 =  S = ZZ[x,y];

F957E5 =  144*x^2*y^2 % (7*x*y-2)

F957E6 =  S = QQ[a..f]

F957E7 =  J = ideal(a*b*c-d*e*f,a*b*d-c*e*f, a*c*e-b*d*f)

F957E8 =  C = res J

F957E9 =  F = syz transpose C.dd_4

F957E10 =  G = transpose C.dd_3

F957E11 =  G % F

F957E12 =  F % G

F957E13 =  A = QQ[x,y,z]/(x^3-y^2-3)

F957E14 =  I = ideal(x^4, y^4)

F957E15 =  J = ideal(x^3*y^2, x^2*y^3)

F957E16 =  (gens J) % I

F957E17 =  kk = frac(ZZ[a,b])

F957E18 =  B = kk[x,y,z]

F957E19 =  I = ideal(a*x^2-b*x-y-1, 1/b*y^2-z-1)

F957E20 =  gens gb I

F957E21 =  x^2*y^2 % I

F958E0 =  H = new HashTable from {1 => 10, 2 => 15, 3 => 20}

F958E1 =  applyValues(H, v -> v + 100)

F958E2 =  applyValues(H, v -> 1)

F959E0 =  R = QQ[a..d];

F959E1 =  diagonalMatrix{a,b,c,3/4}

F959E2 =  diagonalMatrix(3,5,{a,b,3/4})

F959E3 =  diagonalMatrix(R,{1,2,3})

F960E0 =  debug Core

F960E1 =  R = QQ[a..d];

F960E2 =  raw R

F961E0 =  R = QQ[a..d];

F961E1 =  I = ideal(a^2*b, a*b^2,c^3,d^5);

F961E2 =  I^[3]

F961E3 =  I^[2,3,4,5]

F961E4 =  S = QQ[x,y];

F961E5 =  T = S[z,w];

F961E6 =  I = ideal gens T;

F961E7 =  I^[3]

F961E8 =  I^[2,3]

F961E9 =  R = ZZ/5[a..d];

F961E10 =  I = minors(2,matrix {{a,b,c},{b,c,d}});

F961E11 =  S = R/I;

F961E12 =  J = ideal vars S

F961E13 =  J^[5]

F962E0 =  x ..< z

F962E1 =  x ..< C

F963E0 =  R = ZZ/101[a..d]

F963E1 =  p = matrix {{a,b},{c,d}}

F963E2 =  trace p

F964E0 =  A = QQ[x,y,z];

F964E1 =  f = matrix{{x*y-1,y^4},{z^2+3,x^3},{x*y*z,z^2}}

F964E2 =  M = image f

F964E3 =  numgens M

F964E4 =  ambient M

F964E5 =  Q = A/(x^2+y^2+z^2);

F964E6 =  substitute(M,Q)

F965E0 =  R = QQ[x,y]

F965E1 =  S = QQ[s,t,u]

F965E2 =  f = map(R,S,{x^2,x*y,y^2})

F965E3 =  graphIdeal f

F966E0 =  recursionDepth()

F966E1 =  f = x -> recursionDepth()

F966E2 =  f()

F966E3 =  g = x -> f()

F966E4 =  g()

F966E5 =  r = i -> if i == 100 then recursionDepth() else r(i+1)

F966E6 =  r 0

F967E0 =  sin (pi/2)

F968E0 =  R = ZZ/101[a,b,c_1,c_2];

F968E1 =  R

F968E2 =  describe R

F968E3 =  toString describe R

F968E4 =  toExternalString R

F968E5 =  QQ[x, dx, WeylAlgebra => { x => dx }]

F968E6 =  describe oo

F969E0 =  S = ZZ/10007[x,y,z];

F969E1 =  F = res ideal vars S;

F969E2 =  F.dd

F969E3 =  transpose F.dd

F970E0 =  f = (x -> y -> 11) 13

F970E1 =  commandInterpreter f

F970E2 =  x

F971E0 =  1232132141242345 % 1000000

F971E1 =  (-4)%5

F971E2 =  A = ZZ[a,b]

F971E3 =  (3*a^3-a*b-4) % (5*a-b)

F971E4 =  pseudoRemainder(3*a^3-a*b-4, 5*a-b)

F971E5 =  B = QQ[a,b]

F971E6 =  (3*a^3-a*b-4) % (5*a-b)

F972E0 =  M = image matrix {{2},{0}}

F972E1 =  f = coverMap M

F972E2 =  isSurjective f

F973E0 =  R = ZZ/101[x_0..x_3];

F973E1 =  M = matrix{{x_0,x_1,x_2},{x_1,x_2,x_3}}

F973E2 =  V = Proj(R/minors(2,M));

F973E3 =  codim V

F974E0 =  R = QQ[a..d]

F974E1 =  D = res coker random(R^2,R^{4:-2})

F974E2 =  status(D, TotalPairs => true, PairsRemaining => true, Monomials => true)

F975E0 =  R = QQ[x,y];

F975E1 =  f = (x+y+1)^4

F975E2 =  part(2, f)

F975E3 =  part_2 f

F975E4 =  part(1, 2, f)

F975E5 =  part(6, {2,3}, f)

F975E6 =  part(6, 8, {2,3}, f)

F975E7 =  R = QQ[x,y, Degrees=>{2,3}];

F975E8 =  f = (x+y+1)^4

F975E9 =  part(2, f)

F975E10 =  part(2, {1,1}, f)

F975E11 =  S = QQ[a,b,c]

F975E12 =  g = (a - b*c + 2)^3

F975E13 =  part(4, , g)

F975E14 =  part(, 3, g)

F975E15 =  part(, 3, 1..3, g)

F975E16 =  part(4, infinity, g)

F975E17 =  part(-infinity, 3, g)

F975E18 =  part(-infinity, infinity, 1..3, g)

F975E19 =  R = QQ[x,y,z, Degrees => {{1,0,0},{0,1,0},{0,0,1}}];

F975E20 =  f = (x+y+z)^3

F975E21 =  part({2,0,1}, f)

F975E22 =  part_{2,0,1} f

F975E23 =  R = QQ[a][x];

F975E24 =  h = (1+a+x)^3

F975E25 =  part(2, {1,0}, h)

F975E26 =  part(2, {0,1}, h)

F975E27 =  part({2,1}, h)

F976E0 =  x = " \" \f \r \\ \t \013 \u4f60 ";

F976E1 =  ascii x

F976E2 =  utf8 x

F977E0 =  S = QQ[a..d];

F977E1 =  I = monomialCurveIdeal(S,{1,3,4})

F977E2 =  R = S/I

F977E3 =  X = Proj R

F977E4 =  IX = sheaf (module I ** R)

F977E5 =  Ext^1(IX,OO_X(>=-3))

F977E6 =  Ext^0(IX,OO_X(>=-10))

F978E0 =  x = tally {a,b,b,c,c,d,d,d}

F978E1 =  x' = new VirtualTally from x

F978E2 =  - x'

F979E0 =  R = QQ[a..d, MonomialOrder=>Lex];

F979E1 =  I = ideal(a^7-b-3, a*b-1, a*c^2-3, b*d-4);

F979E2 =  gens gb I

F980E0 =  3/4

F980E1 =  QQ#{Standard,AfterPrint} = r -> r;

F980E2 =  3/4

F981E0 =  opts = {Slope => 1, Intercept => 1}

F981E1 =  f = opts >> o -> x -> x * o.Slope + o.Intercept

F981E2 =  f 5

F981E3 =  f(5, Slope => 100)

F981E4 =  f(5, Slope => 100, Intercept => 1000)

F981E5 =  f = {a => 1000} >> o -> (x,y) -> x * o.a + y;

F981E6 =  f(3,7)

F981E7 =  f(5,11,a=>10^20)

F982E0 =  m = mutableMatrix {{1.p500,1},{-2,-2}}

F982E1 =  nullSpace m

F982E2 =  precision oo

F983E0 =  x = {1,2/3,pi}

F983E1 =  numeric oo

F983E2 =  numeric_200 pi

F983E3 =  numeric_100 oo

F984E0 =  R = QQ[x,y]/(y^2-x^3);

F984E1 =  M = module ideal(x,y)

F984E2 =  F = map(R^1,M,matrix{{y,x^2}})

F984E3 =  source F

F984E4 =  target F == R^1

F984E5 =  matrix F

F984E6 =  isWellDefined F

F984E7 =  isIsomorphism F

F984E8 =  inc = inducedMap(R^1, M)

F984E9 =  G = F // inc

F984E10 =  target G == M and source G == M

F984E11 =  inc * G == F

F984E12 =  isWellDefined G

F984E13 =  isIsomorphism G

F984E14 =  prune coker G

F984E15 =  kernel G == 0

F985E0 =  X = Proj(QQ[x,y])

F985E1 =  sheafHom(OO_X^1(2),OO_X(11)^1)

F986E0 =  ZZ

F986E1 =  module ZZ

F987E0 =  X = Proj(QQ[x,y,z])

F987E1 =  OO_X(3) ++ OO_X(4)

F987E2 =  module oo

F988E0 =  1/30000000000.

F988E1 =  printingLeadLimit

F988E2 =  printingLeadLimit = 20

F988E3 =  1/30000000000.

F989E0 =  x = new HashTable from { val => 1000, cache => new CacheTable }

F989E1 =  f = (t -> (print "hi there"; t.val^4))

F989E2 =  h = (cacheValue VALUE) f

F989E3 =  h x

F989E4 =  h x

F989E5 =  peek'_2 x

F990E0 =  R = ZZ/101[a,b,c,Degrees=>{{1,2},{2,1},{1,0}}]

F990E1 =  describe R

F990E2 =  degree a

F990E3 =  degree b^2

F990E4 =  degree 0_R

F990E5 =  degree 1_R

F990E6 =  random({15,15},R)

F990E7 =  degree (a+b)

F990E8 =  degreeLength R

F990E9 =  degreeLength ZZ

F990E10 =  R = QQ[a,b,c,Degrees=>{{1,0},{-2,1},{-3,1}}];

F990E11 =  random({1,1},R)

F990E12 =  basis({1,1},R)

F990E13 =  (options R).Heft

F991E0 =  options res

F991E1 =  options codim

F991E2 =  options(codim, Ideal)

F991E3 =  methods intersect

F991E4 =  options 0

F992E0 =  numerator (4/6)

F992E1 =  R = frac(ZZ[x,y]);

F992E2 =  numerator((x+2*y-3)/(x-y))

F992E3 =  R = QQ[a..d]/(a^2,b^2,c^3);

F992E4 =  hf = hilbertSeries R

F992E5 =  numerator hf

F992E6 =  R = QQ[x,y,z,Inverses => true, MonomialOrder => Lex]

F992E7 =  numerator (x*y^-1+y*z^-2+1+y^-1*z^-1)

F993E0 =  f = "test-file" << "hi there"

F993E1 =  isOutputFile f

F993E2 =  close f

F993E3 =  isOutputFile f

F993E4 =  get "test-file"

F993E5 =  removeFile "test-file"

F994E0 =  f = {a=>3, c=>12} >> opts -> val -> if val == 1 then opts.a + opts.c;

F994E1 =  g = method(Options => {b => 5});

F994E2 =  g ZZ := opts -> val -> if val == 2 then opts.b + 1;

F994E3 =  h = val -> if val == 3 then 24;

F994E4 =  foo = method(Options => true);

F994E5 =  addHook((foo, ZZ), f)

F994E6 =  addHook((foo, ZZ), g, Strategy => "G")

F994E7 =  addHook((foo, ZZ), h)

F994E8 =  foo ZZ := true >> opts -> args -> runHooks((foo, ZZ), args, opts);

F994E9 =  debugLevel = 1

F994E10 =  assert( foo 1 == 15 )

F994E11 =  assert( foo(2, b => 9) == 10 )

F994E12 =  assert( foo 3 == 24 )

F994E13 =  hooks(foo, ZZ)

F994E14 =  assert( foo(3, Strategy => 2) == 24 )

F994E15 =  assert( foo(2, Strategy => "G") == 6 )

F994E16 =  hooks(quotient, Ideal, Ideal)

F994E17 =  code 1

F995E0 =  X=Proj(QQ[x,y,z]/(x^4+y^4+z^4))

F995E1 =  genus(X)

F995E2 =  omega = cotangentSheaf(X)

F995E3 =  degree omega

F996E0 =  iter = iterator {1, 2, 3}

F996E1 =  next iter

F996E2 =  next iter

F996E3 =  next iter

F996E4 =  next iter

F997E0 =  sq = i -> i^2

F997E1 =  sq 10

F997E2 =  sq(5+5)

F997E3 =  tm = (i,j) -> i*j

F997E4 =  tm(5,7)

F997E5 =  (i -> i^2) 7

F997E6 =  sincos = sin @@ cos

F997E7 =  sincos 2.2

F997E8 =  sin(cos(2.2))

F997E9 =  comp = (f,g) -> x -> f(g x)

F997E10 =  sincos = comp(sin,cos)

F997E11 =  cossin = comp(cos,sin)

F997E12 =  sincos 2.2

F997E13 =  cossin 2.2

F998E0 =  select(4,0..10,even)

F999E0 =  R = QQ[x,y,z, SkewCommutative => true]

F999E1 =  y*x

F999E2 =  (x+y+z)^2

F999E3 =  basis R

F999E4 =  basis(2,R)

F999E5 =  S = QQ[a,b,r,s,t, SkewCommutative=>true, Degrees=>{2,2,1,1,1}];

F999E6 =  r*a == a*r

F999E7 =  a*a

F999E8 =  f = a*r+b*s; f^2

F999E9 =  basis(2,S)

F999E10 =  x*y

F999E11 =  matrix{{x}} * matrix{{y}}

F1000E0 =  << 2^100

F1000E1 =  stdio << 2^100

F1000E2 =  << "The answer is " << 2^100 << ".";

F1000E3 =  << "The answer is " << "aaa"||"bb"||"c" << ".";

F1000E4 =  R = ZZ[x,y];

F1000E5 =  f = (x+y+1)^2; g = (x-y+1)^2

F1000E6 =  << "f = " << f << endl << "g = " << g << endl;

F1000E7 =  scan(0 .. 20, i -> << "." << flush)

F1000E8 =  truncateOutput 50

F1000E9 =  41!

F1000E10 =  42!

F1000E11 =  43!

F1000E12 =  truncateOutput infinity

F1000E13 =  43!

F1001E0 =  stopIfError = false;

F1001E1 =  assert( (2+2) === 4)

F1001E2 =  assert(rank matrix {{1, 2}, {2, 4}} == 2)

F1001E3 =  assert Equation(rank matrix {{1, 2}, {2, 4}}, 2)

F1002E0 =  X = Proj(QQ[x..z])

F1002E1 =  OO_X

F1002E2 =  OO_X^6

F1003E0 =  A = QQ[x,y,z]

F1003E1 =  M = matrix(A, {{1,2,3},{4,5,6},{7,8,9}})

F1003E2 =  Hom(M,A^2)

F1003E3 =  Hom(A^2,M)

F1003E4 =  contraHom = (M, s) -> (

         (n,m) := (numgens target M, numgens source M);

         R := mutableMatrix(ring M, s*n, s*m);

         for b from 0 to m-1 do

           for a from 0 to s-1 do

             for c from 0 to n-1 do

               R_(a*n+c,a*m+b) = M_(b,c);

         matrix R

         )

F1003E5 =  contraHom(M,2)

F1004E0 =  R = QQ[x,y,z];

F1004E1 =  M = R^3

F1004E2 =  I = ideal(x^2,y^2-x*z)

F1004E3 =  I*M

F1004E4 =  R*M_0

F1004E5 =  I*M_1

F1004E6 =  J = I*M_1 + R*y^5*M_1 + R*M_2

F1004E7 =  isSubset(I*M,M)

F1004E8 =  isSubset((x^3-x)*M,x*M)

F1004E9 =  F = matrix{{x,y,z}}

F1004E10 =  image F

F1004E11 =  kernel F

F1004E12 =  F = R^3

F1004E13 =  F/(x*F+y*F+R*F_2)

F1005E0 =  X = Proj(QQ[x_0..x_3]/ideal(x_0^4+x_1^4+x_2^4+x_3^4))

F1005E1 =  hh^(1,1)(X)

F1006E0 =  reverse {5, 7, 2, 8}

F1006E1 =  reverse (5, 7, 2, 8)

F1006E2 =  reverse "Hello, world!"

F1007E0 =  realPart(3/4)

F1007E1 =  realPart(1.5+2*ii)

F1008E0 =  load "Macaulay2Doc/demo1.m2"

F1008E1 =  g 2

F1009E0 =  options res ++ { Alpha => Omega }

F1010E0 =  R = QQ[a..d];

F1010E1 =  I = monomialIdeal "a4,a3b6,a2b8c2,c4d5"

F1010E2 =  lcm I

F1010E3 =  first exponents lcm I

F1011E0 =  fn = temporaryFileName()

F1011E1 =  rootPath | fn

F1012E0 =  R = QQ[a..f];

F1012E1 =  m = matrix{{a,b,d,e},{b,c,e,f}}

F1012E2 =  M = coker m

F1012E3 =  N = image m

F1012E4 =  K = kernel m

F1012E5 =  presentation M -- this is just the original matrix

F1012E6 =  presentation N -- this one requires computation

F1012E7 =  ideal(a,b)*N

F1012E8 =  a*N + b*N

F1012E9 =  N0 = image (a**N_{1}|N_{2}-N_{3})

F1012E10 =  N_{1}

F1012E11 =  a ** N_{1}

F1012E12 =  a ** N_{1} | N_{2}-N_{3}

F1012E13 =  N0 = image(a ** N_{1} | N_{2}-N_{3})

F1012E14 =  isHomogeneous N0

F1012E15 =  Nbar = N/N0

F1012E16 =  I = ideal(a^2, a*b, c^2)

F1012E17 =  J = module I

F1012E18 =  I == ideal J

F1012E19 =  codim I

F1012E20 =  codim J

F1012E21 =  C = res I

F1012E22 =  C.dd

F1012E23 =  betti C

F1012E24 =  C = res Nbar

F1012E25 =  betti C

F1012E26 =  C.dd

F1012E27 =  R = QQ[a..h];

F1012E28 =  J = ideal(a*c+b*d,a*e+b*f,a*g+b*h)

F1012E29 =  betti res J

F1012E30 =  use ring M

F1012E31 =  M

F1012E32 =  N = a*M

F1012E33 =  M/N

F1012E34 =  generators N

F1012E35 =  relations N

F1012E36 =  presentation N

F1012E37 =  trim N

F1012E38 =  minimalPresentation N

F1012E39 =  prune N

F1012E40 =  ambient N

F1012E41 =  ambient N == target generators N

F1012E42 =  ambient N == target relations N

F1012E43 =  super N

F1012E44 =  super N == coker relations N

F1012E45 =  cover N

F1012E46 =  cover N == source generators N

F1012E47 =  A = QQ[x,y]/(y^2-x^3)

F1012E48 =  M = module ideal(x,y)

F1012E49 =  F = map(A^1,M,matrix{{y,x^2}})

F1012E50 =  source F == M

F1012E51 =  target F == A^1

F1012E52 =  matrix F

F1012E53 =  inducedMap(A^1,M)

F1012E54 =  G = F // inducedMap(A^1,M)

F1012E55 =  source G

F1012E56 =  target G

F1012E57 =  isWellDefined G

F1012E58 =  R = QQ[x,y,z,w]

F1012E59 =  M = ideal(x,y,z)/ideal(x^2,y^2,z*w)

F1012E60 =  N = z*M

F1012E61 =  M/N

F1012E62 =  M

F1012E63 =  ambient M

F1012E64 =  N = z*M

F1012E65 =  ambient(M/N)

F1012E66 =  super M

F1012E67 =  super N

F1012E68 =  image generators M

F1012E69 =  inducedMap(M,M) == id_M

F1012E70 =  inducedMap(super M,M) == map(super id_M) -- the map $(P+Q)/Q \to R^n/Q$, where $M=(P+Q)/Q$.

F1012E71 =  inducedMap(super M,ambient M) -- the quotient map $R^n \to R^n/Q$

F1012E72 =  inducedMap(M,N) -- the inclusion map

F1012E73 =  inducedMap(M/N,M) -- the projection map

F1012E74 =  inducedMap(M/N,N) -- the zero map

F1012E75 =  inducedMap(M,M/N,Verify => false)

F1012E76 =  inducedMap(M/N,x*M)

F1012E77 =  inducedMap(M/N,M) * inducedMap(M,x*M) == inducedMap(M/N,x*M)

F1012E78 =  A = QQ[x,y,Degrees=>{2,3}]/(y^2-x^3)

F1012E79 =  M = module ideal(x,y)

F1012E80 =  H = Hom(M,M)

F1012E81 =  F = homomorphism(H_{0})

F1012E82 =  G = homomorphism(H_{1})

F1012E83 =  source F == M

F1012E84 =  target F == M

F1012E85 =  ker F

F1012E86 =  coker F

F1012E87 =  m = matrix{{x,y},{y,x}}

F1012E88 =  Hom(m,A^2)

F1012E89 =  Hom(A^2,m)

F1012E90 =  m ** m

F1012E91 =  (coker m) ** (coker m)

F1012E92 =  M = coker m

F1012E93 =  M2 = prune(M ** M)

F1012E94 =  A = QQ[a,b,c]

F1012E95 =  A ** A

F1012E96 =  B = oo

F1012E97 =  a == B_3

F1012E98 =  a == B_0

F1012E99 =  tensor(A,A,Variables=>{a,b,c,d,e,f})

F1013E0 =  R = ZZ/101[x,y,z];

F1013E1 =  I = ideal(x^3-y*z^2,x*y-z^2,x*z);

F1013E2 =  dim I

F1013E3 =  codim I

F1013E4 =  degree I

F1014E0 =  regularizedGamma(3, 7)

F1014E1 =  inverseRegularizedGamma(3, oo)

F1015E0 =  R = ZZ/2[x,y]

F1015E1 =  exteriorPower(3,R^6)

F1015E2 =  binomial(6,3)

F1015E3 =  exteriorPower(2,R^1)

F1015E4 =  I = module ideal (x,y)

F1015E5 =  exteriorPower(2,I)

F1016E0 =  currentTime() - fileTime "."

F1017E0 =  isHomogeneous(ZZ)

F1017E1 =  isHomogeneous(ZZ[x,y])

F1017E2 =  isHomogeneous(ZZ[x,y]/(x^3-x^2*y+3*y^3))

F1017E3 =  isHomogeneous(ZZ[x,y]/(x^3-y-3))

F1017E4 =  R = QQ[a,b,c,Degrees=>{{1,1},{1,0},{0,1}}];

F1017E5 =  I = ideal(a-b*c);

F1017E6 =  isHomogeneous I

F1017E7 =  isHomogeneous(R/I)

F1017E8 =  isHomogeneous(R/(a-b))

F1017E9 =  A = QQ[a]

F1017E10 =  B = A[x]

F1017E11 =  degree x

F1017E12 =  degree a_B

F1017E13 =  isHomogeneous B

F1017E14 =  S = QQ[a,b];

F1017E15 =  F = S^{-1,2}

F1017E16 =  isHomogeneous F

F1017E17 =  G = S^{1,2}

F1017E18 =  phi = random(G,F)

F1017E19 =  isHomogeneous phi

F1017E20 =  degree phi

F1017E21 =  M = coker phi

F1017E22 =  isHomogeneous(a*M)

F1017E23 =  isHomogeneous((a+1)*M)

F1017E24 =  R = QQ[x]

F1017E25 =  isHomogeneous ideal(x+x^2, x^2)

F1018E0 =  kk = ZZ/101

F1018E1 =  A = matrix"1,2,3,4

F1018E2 =  (P,L,U) = LUdecomposition A

F1018E3 =  Q = id_(kk^3) _ P

F1018E4 =  Q * L * U == matrix A

F1018E5 =  A = matrix"1,2,3,4,5,6

F1018E6 =  (P,L,U) = LUdecomposition A

F1018E7 =  Q = id_ (RR^3) _ P

F1018E8 =  Q * L * U - A

F1018E9 =  clean(1e-15,oo)

F1018E10 =  A = mutableMatrix(CC,5,10, Dense=>true)

F1018E11 =  printingPrecision = 2

F1018E12 =  setRandomSeed 0

F1018E13 =  fillMatrix A

F1018E14 =  (P,L,U) = LUdecomposition A;

F1018E15 =  Q = id_(CC^5) _ P

F1018E16 =  matrix Q * matrix L * matrix U - matrix A

F1018E17 =  clean(1e-15,oo)

F1019E0 =  csch(pi/3)

F1020E0 =  f = i -> (i, i^2, i^3);

F1020E1 =  (x,y,z) = f 3

F1020E2 =  x

F1020E3 =  y

F1020E4 =  z

F1020E5 =  s = f 4

F1020E6 =  #s

F1020E7 =  s_0

F1020E8 =  s_1

F1020E9 =  s_2

F1021E0 =  binomial(13,6)

F1021E1 =  binomial(-1,3)

F1021E2 =  binomial(7.5, pi)

F1021E3 =  R = QQ[x]

F1021E4 =  binomial(x + 3, 3)

F1022E0 =  R = ZZ[a..d,x,y];

F1022E1 =  m = matrix{{a*x^2+b*x*y+c*y^2, a*x^3+b*x^2*y+c*x*y^2+d*y^3+a*x^2}}

F1022E2 =  monomials m

F1022E3 =  monomials(m, Variables=>{x,y})

F1023E0 =  R = ZZ/101[a,b,c];

F1023E1 =  I = ideal(a^2,a*b-2,c^4,a*c-1,a*c-1)

F1023E2 =  generators I

F1023E3 =  first entries generators I

F1023E4 =  I = trim I

F1023E5 =  gens I

F1024E0 =  R = QQ[x,y,dx,dy,t,WeylAlgebra => {x=>dx, y=>dy}]

F1024E1 =  dx*dy*x*y

F1024E2 =  dx*x^5

F1024E3 =  dx*x

F1024E4 =  matrix{{dx}} * matrix{{x}}

F1024E5 =  isWeylAlgebra R

F1024E6 =  S = QQ[x,y]

F1024E7 =  isWeylAlgebra S

F1025E0 =  R = QQ[a..d];

F1025E1 =  f = matrix{{a,b},{c,0}}

F1025E2 =  h = matrix{{f,f},{f,0}}

F1026E0 =  1/3p100

F1026E1 =  {1/3p100}

F1026E2 =  printingPrecision

F1026E3 =  printingPrecision = 16

F1026E4 =  {1/3p100}

F1026E5 =  printingPrecision = 0

F1026E6 =  {1/3p100}

F1026E7 =  printingAccuracy

F1026E8 =  printingPrecision = 16

F1026E9 =  {1p100e12/3+1p100/3*ii}

F1026E10 =  printingAccuracy = 10

F1026E11 =  {1p100e12/3+1p100/3*ii}

F1027E0 =  pad(6, "foo")

F1027E1 =  pad("foo", 6) | "bar"

F1028E0 =  V = Proj(QQ[x,y,z]/ideal(y^2*z-x^2*(x+z)))

F1028E1 =  genus OO_V^1

F1029E0 =  R = ZZ[i..p];

F1029E1 =  g = matrix {{i,j},{k,l}}

F1029E2 =  h = matrix {{m,n},{o,p}}

F1029E3 =  f= g | h

F1029E4 =  f | (m-n)

F1030E0 =  R = ZZ/32003[x,y,z]

F1030E1 =  g1 = matrix{{x,y,z}}

F1030E2 =  g2 = matrix{{x^2,y^2,z^2}}

F1030E3 =  K1 = ker g1

F1030E4 =  K2 = ker g2

F1030E5 =  f = map(ambient K1, ambient K2, {{x,0,0},{0,y,0},{0,0,z}})

F1030E6 =  h = inducedMap(K1,K2,f)

F1030E7 =  h1 = inducedMap(target f,K2,f)

F1030E8 =  h2 = inducedMap(,K2,f)

F1030E9 =  h1 == h2

F1031E0 =  load "Macaulay2Doc/demo3.m2"

F1031E1 =  get loadedFiles#(#loadedFiles-1)

F1031E2 =  load "Macaulay2Doc/demo1.m2"

F1031E3 =  g 2

F1031E4 =  g 3

F1032E0 =  f = matrix "2,3,4;5,6,7"

F1032E1 =  f ** 10

F1032E2 =  QQ[x,y]

F1032E3 =  f = matrix "x,y"

F1032E4 =  g = f ** y^7

F1032E5 =  h = f * y^7

F1032E6 =  degrees g

F1032E7 =  degrees h

F1033E0 =  n = 0

F1033E1 =  t = schedule(() -> while true do n = n+1)

F1033E2 =  sleep 1

F1033E3 =  t

F1033E4 =  n

F1033E5 =  sleep 1

F1033E6 =  t

F1033E7 =  n

F1033E8 =  isReady t

F1033E9 =  cancelTask t

F1033E10 =  sleep 2

F1033E11 =  sleep 2

F1033E12 =  n

F1033E13 =  sleep 1

F1033E14 =  n

F1033E15 =  isReady t

F1034E0 =  A = QQ[x,y,z];

F1034E1 =  M = matrix{{1, x+y, z^2},

                {x, 0,   x*y*z}}

F1034E2 =  N = matrix(A, {{1,2,3},{4,5,6},{7,8,9}})

F1034E3 =  M+M

F1034E4 =  x*N

F1034E5 =  M*N

F1034E6 =  N^3

F1034E7 =  ((x+y+z)*N)^3

F1034E8 =  M_(1,2)

F1034E9 =  M1 = mutableMatrix M

F1034E10 =  M1_(1,2) = 37_A

F1034E11 =  M1

F1034E12 =  matrix M1

F1034E13 =  M | M

F1034E14 =  M || N

F1034E15 =  ideal M

F1034E16 =  F = A^5

F1034E17 =  id_(A^5)

F1034E18 =  matrix{{1,2,3},{4,5,6}}

F1035E0 =  A = QQ[x,y,z];

F1035E1 =  M = matrix{{x,x*y,z},{x^2,x*y*z,y*z}}

F1035E2 =  K = kernel M

F1035E3 =  I = image M

F1035E4 =  N = cokernel M

F1035E5 =  P = coimage M

F1036E0 =  f = gradedModuleMap( matrix "1;2", matrix "2,3" )

F1036E1 =  f|f

F1037E0 =  threadVariable x

F1037E1 =  x = 1

F1037E2 =  t = schedule ( () -> ( x = 2 ; x ) )

F1037E3 =  while not isReady t do null

F1037E4 =  taskResult t

F1037E5 =  x

F1038E0 =  disassemble res

F1038E1 =  load "Macaulay2Doc/demo1.m2"

F1038E2 =  code g

F1038E3 =  g 2

F1039E0 =  2/3

F1039E1 =  2./3

F1039E2 =  2/interval(1,3)

F1039E3 =  interval(-1,2)/interval(1,3)

F1039E4 =  interval(1,2)/interval(1,2)

F1040E0 =  g = openOut "test-file"

F1040E1 =  g << "hi there"

F1040E2 =  g << close

F1040E3 =  get "test-file"

F1040E4 =  removeFile "test-file"

F1041E0 =  {5:a,10:b}

F1041E1 =  splice {5:a,10:b}

F1042E0 =  scan({a, 4, "George", 2^100}, print)

F1042E1 =  scan("foo", print)

F1042E2 =  scan(4, print)

F1042E3 =  v = {a,b,c}; scan(#v, i -> print(i,v#i))

F1042E4 =  scan({3,5,7,11,44,55,77}, i -> if even i then break i)

F1042E5 =  scan("foo", print)

F1043E0 =  isANumber 3.

F1043E1 =  inf = 1/0.

F1043E2 =  isANumber inf

F1043E3 =  nan = inf - inf

F1043E4 =  isANumber nan

F1044E0 =  R = QQ[a..f];

F1044E1 =  p = matrix {{a,b,c},{d,e,f}}

F1044E2 =  p_{1}

F1044E3 =  p_{1,2,0}

F1045E0 =  f := x -> y -> z -> 11;

F1045E1 =  d := localDictionaries ((f 22) 33)

F1045E2 =  peek d

F1045E3 =  d#0#"y"

F1045E4 =  value d#0#"y"

F1045E5 =  peek localDictionaries()

F1046E0 =  I = Grassmannian(1,6, CoefficientRing => ZZ/101);

F1046E1 =  S = ring I

F1046E2 =  elapsedTime C = res(I, FastNonminimal => true)

F1046E3 =  betti C

F1046E4 =  betti(C, Minimize => true)

F1047E0 =  S := QQ[x]

F1047E1 =  S

F1047E2 =  S^3

F1047E3 =  R = S

F1047E4 =  S

F1047E5 =  S^3

F1048E0 =  A = QQ[i]/(i^2+1);

F1048E1 =  L = toField A

F1048E2 =  B = L[x,y,z]

F1048E3 =  I = ideal(i*x^2-y-i, i*y^2-z-i)

F1048E4 =  gens gb I

F1048E5 =  A = ZZ[a]/(a^2+3);

F1048E6 =  L = toField A

F1048E7 =  L[x,y,z]

F1048E8 =  try gb ideal (a*x^2-y^2-z^2, y^3, z^3) else getNonUnit L

F1049E0 =  R = ZZ[a..f];

F1049E1 =  m = mutableMatrix genericMatrix(R,a,2,3)

F1049E2 =  rowAdd(m,0,c,1)

F1049E3 =  m

F1050E0 =  X = Proj(QQ[x,y,z])

F1050E1 =  OO_X(-3) ++ OO_X(4)

F1050E2 =  oo ** oo

F1051E0 =  R = ZZ/101[a..d]

F1051E1 =  I = intersect((ideal(a,b,c^3-d^3))^2,ideal(a^2-c^2,b^2-d^2))

F1051E2 =  gb(I, BasisElementLimit=>5)

F1051E3 =  gbSnapshot I

F1051E4 =  gb(I, BasisElementLimit=>10)

F1051E5 =  gbSnapshot I

F1051E6 =  gens gb I

F1052E0 =  R = QQ[x,y,z];

F1052E1 =  I = monomialIdeal(x*y^3*z, x*y^2*z^2, y^3*z^2, y^2*z^3)

F1052E2 =  standardPairs I

F1053E0 =  f = method()

F1053E1 =  f String := s -> s|s;

F1053E2 =  f ".abcd."

F1053E3 =  f(ZZ,String) := (n,s) -> concatenate (n:s);

F1053E4 =  f(5,".abcd.")

F1054E0 =  R = QQ[x_1..x_4];

F1054E1 =  f = matrix{{x_1..x_4}}

F1054E2 =  C = koszul f

F1054E3 =  C.dd^2

F1055E0 =  R = ZZ[x,y]

F1055E1 =  f = random(R^{2:1},R^2)

F1055E2 =  g = transpose (vars R ++ vars R)

F1055E3 =  (q,r) = quotientRemainder'(f,g)

F1055E4 =  q*g+r == f

F1055E5 =  f = f + map(target f, source f, id_(R^2))

F1055E6 =  (q,r) = quotientRemainder'(f,g)

F1055E7 =  q*g+r == f

F1056E0 =  iter = iterator {1, 2, 3}

F1056E1 =  next iter

F1056E2 =  next iter

F1056E3 =  next iter

F1056E4 =  next iter

F1057E0 =  version

F1058E0 =  R = QQ[a..z]

F1058E1 =  b .. i

F1058E2 =  plus oo

F1058E3 =  R = QQ[e,d,c,b,a,X_1,y,X_2]

F1058E4 =  e .. a

F1058E5 =  X_1 .. X_2

F1059E0 =  L = {23, 42, 107, 2, 50};

F1059E1 =  #L

F1059E2 =  L#2

F1060E0 =  x_(1,3)

F1060E1 =  x_{1,3}

F1060E2 =  R = ZZ[x_(1,1)..x_(2,3),y_a..y_f]

F1060E3 =  gens R

F1061E0 =  apropos "atrix"

F1061E1 =  apropos "^[mM]at"

F1062E0 =  ZZ/101[e_0..e_3,       SkewCommutative => true]

F1062E1 =  (e_0+e_1+e_2+e_3)^2

F1062E2 =  ZZ/101[x,y,vars(0..4), SkewCommutative => vars(0..4)]

F1062E3 =  c*b*a*d

F1062E4 =  ZZ/101[x,y,vars(0..4), SkewCommutative => {2..6}]

F1062E5 =  c*b*a*d

F1062E6 =  R = ZZ[x,y,z, SkewCommutative => {x,y}]

F1062E7 =  x*y

F1062E8 =  y*x

F1062E9 =  x*z-z*x

F1063E0 =  R = QQ[x,y]

F1063E1 =  S = QQ[s,t,u]

F1063E2 =  f = map(R,S,{x^2,x*y,y^2})

F1063E3 =  matrix f

F1064E0 =  iter = iterator {1, 2, 3}

F1064E1 =  next iter

F1064E2 =  next iter

F1064E3 =  next iter

F1064E4 =  next iter

F1064E5 =  lookup(iterator, String)

F1064E6 =  for i in "foo" list i

F1064E7 =  scan("foo", print)

F1064E8 =  apply("foo", toUpper)

F1064E9 =  for i in oo list i

F1064E10 =  select("foo", i -> i == "o")

F1064E11 =  for i in oo list i

F1065E0 =  R = ZZ/7[x]/(x^6-3*x-4)

F1065E1 =  f = matrix{{x,x+1},{x-1,2*x}}

F1065E2 =  f^2

F1065E3 =  f^1000

F1065E4 =  M = matrix(QQ,{{1,2,3},{1,5,9},{8,3,1}})

F1065E5 =  det M

F1065E6 =  M^-1

F1065E7 =  M^-1 * M

F1065E8 =  R = QQ[x]

F1065E9 =  N = matrix{{x^3,x+1},{x^2-x+1,1}}

F1065E10 =  det N

F1065E11 =  N^-1

F1065E12 =  N^-1 * N

F1066E0 =  n = 12

F1066E1 =  (p,r) = getPrimeWithRootOfUnity(n,5)

F1066E2 =  factor(r^n-1)

F1066E3 =  r^12%p==1, r^6%p==1, r^4%p==1

F1066E4 =  (p,r) = getPrimeWithRootOfUnity(12,11,Range=>(100,200))

F1066E5 =  factor(r^n-1)

F1066E6 =  r^12%p==1, r^6%p==1, r^4%p==1

F1067E0 =  R = ZZ[a..d]

F1067E1 =  R_2

F1067E2 =  S = R[x,y,z]

F1067E3 =  generators(S,CoefficientRing=>ZZ)

F1067E4 =  S_2

F1067E5 =  S_6

F1068E0 =  R = QQ[x,y,z];

F1068E1 =  I = monomialIdeal(x*y^2, x^2*z, y^2*z)

F1068E2 =  ideal I

F1068E3 =  I * ideal I

F1068E4 =  I + ideal(x*y+y*z)

F1069E0 =  R = ZZ[x,y,z];

F1069E1 =  M = R^1/(x,y,z);

F1069E2 =  N = R^1/(x^2,y^2,x*y*z,z^2);

F1069E3 =  g = map(N,M,x*y);

F1069E4 =  f = res g;

F1069E5 =  source f

F1070E0 =  R = ZZ[a..d];

F1070E1 =  M = cokernel matrix{{2*a-b,3*c-5*d,a^2-b-3}}

F1070E2 =  f = map(a*M, M, a^3+a^2*b)

F1070E3 =  (target f,source f)

F1070E4 =  N = cokernel f

F1070E5 =  minimalPresentation N

F1071E0 =  R = QQ[x,y]/(y^2-x^3);

F1071E1 =  M = image matrix{{x,y}}

F1071E2 =  H = Hom(M,M)

F1071E3 =  f0 = homomorphism H_{0}

F1071E4 =  f1 = homomorphism H_{1}

F1072E0 =  R = ZZ/101[x, Degrees => {2}];

F1072E1 =  I = ideal x^2;

F1072E2 =  s = hilbertSeries I

F1072E3 =  reduceHilbert s

F1072E4 =  M = R^{0,-1}

F1072E5 =  hilbertSeries M

F1072E6 =  f = reduceHilbert oo

F1072E7 =  gcd( value numerator f, value denominator f )

F1073E0 =  R = QQ[a..d]

F1073E1 =  I = ideal(a^3-b^2*c, b*c^2-c*d^2, c^3)

F1073E2 =  G = gens gb I

F1073E3 =  R = QQ[x,y]

F1073E4 =  M = subquotient(matrix {{x}}, matrix {{x+y}})

F1073E5 =  gens gb M

F1073E6 =  matrix {{x}} // gb(M,ChangeMatrix=>true)

F1073E7 =  matrix {{y}} // gb(M,ChangeMatrix=>true)

F1074E0 =  zeta 2

F1075E0 =  /// \ " ///

F1075E1 =  ascii oo

F1075E2 =  ///-- //// -- /////////

F1075E3 =  ///-- ////// -- ///////////

F1075E4 =  //////////////

F1076E0 =  setRandomSeed()

F1076E1 =  random 2^100

F1076E2 =  random 2^100

F1076E3 =  setRandomSeed()

F1076E4 =  random 2^100

F1076E5 =  random 2^100

F1076E6 =  setRandomSeed 123456

F1076E7 =  for i to 10 list random 100

F1076E8 =  setRandomSeed 123456

F1076E9 =  for i to 10 list random 100

F1076E10 =  setRandomSeed "thrkwjsxz"

F1076E11 =  for i to 10 list random 100

F1076E12 =  setRandomSeed "thrkwjsxz"

F1076E13 =  for i to 10 list random 100

F1077E0 =  random toList (0 .. 12)

F1078E0 =  numeric_100 pi

F1078E1 =  ring oo

F1078E2 =  class oo

F1078E3 =  parent oo

F1079E0 =  R = QQ[x_1 .. x_4,y]

F1079E1 =  y

F1079E2 =  baseName y

F1079E3 =  x_1

F1079E4 =  baseName x_1

F1079E5 =  x

F1079E6 =  baseName x

F1080E0 =  ii

F1080E1 =  ii+1p100

F1080E2 =  numeric ii

F1080E3 =  numeric_100 ii

F1080E4 =  +ii

F1081E0 =  sqrt 2.

F1081E1 =  isFinite oo

F1081E2 =  i = 1/0.

F1081E3 =  isFinite oo

F1081E4 =  i-i

F1081E5 =  isFinite oo

F1082E0 =  m = matrix{{1,2,3},{4,5,6}}

F1082E1 =  n = mutableMatrix m

F1082E2 =  m2 = matrix n

F1082E3 =  m2 - m == 0

F1082E4 =  n_(0,0) = 212314323

F1082E5 =  n_(0,0)

F1082E6 =  n

F1082E7 =  numrows n

F1082E8 =  numColumns n

F1082E9 =  numcols n

F1082E10 =  ring n

F1082E11 =  mutableIdentity(RR_100,5)

F1082E12 =  mutableMatrix(QQ,3,5)

F1082E13 =  randomMutableMatrix(4,4,.5,100)

F1083E0 =  R = QQ[a..d, MonomialOrder => ProductOrder{2,2}];

F1083E1 =  leadTerm(1, (c+d)*a^3 - c^100*a - 1)

F1084E0 =  R = QQ[x..z];

F1084E1 =  f = vars R

F1084E2 =  K = kernel f

F1084E3 =  L = super K

F1084E4 =  L == source f

F1084E5 =  g = generators K

F1084E6 =  f*g

F1084E7 =  f*g == 0

F1085E0 =  R = QQ[x,y,z];

F1085E1 =  C = res coker vars R

F1085E2 =  C = dual C

F1085E3 =  C^2

F1085E4 =  C^2 == C_(-2)

F1086E0 =  g = openOut "test-file"

F1086E1 =  g << "hi there" << endl << close

F1086E2 =  h = openOutAppend "test-file"

F1086E3 =  h << "ho there" << endl << close

F1086E4 =  get "test-file"

F1086E5 =  removeFile "test-file"

F1087E0 =  R = QQ[x,y];

F1087E1 =  S = QQ[t];

F1087E2 =  f = map(S,R,{t^2,t^3})

F1087E3 =  f (x+y^2)

F1087E4 =  f image vars R

F1087E5 =  f ideal (x^2,y^2)

F1087E6 =  f resolution coker vars R

F1088E0 =  catch scan(0..10, i -> if i == 5 then throw 18 else print i)

F1089E0 =  realpath "."

F1089E1 =  p = temporaryFileName()

F1089E2 =  q = temporaryFileName()

F1089E3 =  symlinkFile(p,q)

F1089E4 =  p << close

F1089E5 =  readlink q

F1089E6 =  realpath q

F1089E7 =  removeFile p

F1089E8 =  removeFile q

F1089E9 =  realpath ""

F1090E0 =  n = 1166513229502037

F1090E1 =  isPseudoprime n

F1090E2 =  isPrime n

F1090E3 =  n1 = nextPrime(n+1)

F1090E4 =  factor(n1^2*n)

F1090E5 =  m = 158174196546819165468118574681196546811856748118567481185669501856749

F1090E6 =  isPseudoprime m

F1090E7 =  isPrime m

F1090E8 =  isPrime m^2

F1090E9 =  factor m^2

F1090E10 =  ndigits = 30

F1090E11 =  m = nextPrime(10^30)

F1090E12 =  m1 = nextPrime (m+10^10)

F1090E13 =  m2 = nextPrime (m1 + 10^20)

F1090E14 =  isPrime m

F1090E15 =  isPrime m1

F1090E16 =  isPrime (m*m1)

F1090E17 =  isPrime(m*m*m1*m1*m2^6)

F1090E18 =  elapsedTime facs = factor(m*m1)

F1090E19 =  facs = facs//toList/toList

F1090E20 =  assert(set facs === set {{m,1}, {m1,1}})

F1090E21 =  m3 = nextPrime (m^3)

F1090E22 =  elapsedTime isPrime m3

F1090E23 =  elapsedTime isPseudoprime m3

F1091E0 =  set{1,2,3,1,2,4}

F1091E1 =  elements oo

F1091E2 =  tally apply(10, i -> random 5)

F1091E3 =  elements oo

F1092E0 =  R = ZZ/10007[a,b];

F1092E1 =  f = (2*a+3)^4 + 5

F1092E2 =  g = (2*a+b+1)^3

F1092E3 =  S = factor f

F1092E4 =  T = factor g

F1092E5 =  #T

F1092E6 =  T#0

F1092E7 =  T#0#0

F1092E8 =  T#0#1

F1093E0 =  if 4 > 5 then 8 else 7

F1094E0 =  R = ZZ/5[a,b,c];

F1094E1 =  M = R^3;

F1094E2 =  isSubmodule M

F1094E3 =  N = ideal(a,b) * M

F1094E4 =  isSubmodule N

F1094E5 =  N' = ideal(a,b) * (R^1 / ideal(a^2,b^2,c^2))

F1094E6 =  isSubmodule N'

F1095E0 =  t = hashTable {{1,8},{2,20},{3,4},{4,20}}

F1095E1 =  scanPairs(t, (k,v) -> print (k+v))

F1095E2 =  scanPairs(t, (k,v) -> if v==20 then print k)

F1096E0 =  "a c" || "-" || "adsf"

F1096E1 =  width oo

F1097E0 =  {1,2,3} - {1,5,6}

F1098E0 =  delete(c, {a,b,c,d,e,a,b,c,d,e})

F1098E1 =  delete(1, {2/2, 3/2, 4/2})

F1099E0 =  gcd(12,8,48)

F1099E1 =  R = QQ[x,y,z];

F1099E2 =  gcd(x^2*y,x*y^3^6)

F1099E3 =  gcd(x^36-1,x^24-1)

F1100E0 =  R = QQ[a..d]

F1100E1 =  S = QQ[b,c,d,e]

F1100E2 =  b

F1100E3 =  use R

F1100E4 =  b

F1100E5 =  a+b

F1100E6 =  T

F1100E7 =  hf = poincare ideal vars S

F1100E8 =  T

F1100E9 =  use ring hf

F1100E10 =  T

F1101E0 =  R = QQ[x]

F1101E1 =  f = vars R

F1101E2 =  M = image f

F1101E3 =  g = Hom(f,M)

F1101E4 =  target g

F1101E5 =  source g

F1102E0 =  B = new BettiTally from {(0, {0, 0}, 0) => 1, (1, {0, 2}, 2) => 1, (1, {1, 1}, 2) => 2, (1, {2, 0}, 2) => 1, (2, {1, 2}, 3) => 2, (2, {2, 1}, 3) => 2, (3, {2, 2}, 4) => 1}

F1102E1 =  B = multigraded B

F1102E2 =  peek B

F1102E3 =  compactMatrixForm = false

F1102E4 =  B

F1102E5 =  compactMatrixForm = true

F1102E6 =  B(-1,-1)

F1102E7 =  B[1]

F1102E8 =  B[1] ++ B

F1102E9 =  B ** B

F1102E10 =  compactMatrixForm = false

F1102E11 =  B ** B

F1103E0 =  s = "x"

F1103E1 =  class(s^0)

F1103E2 =  n = s^1|"ij"

F1103E3 =  n^-3

F1104E0 =  a = set select(1..50, isPrime)

F1104E1 =  product a

F1105E0 =  R = QQ[a..d];

F1105E1 =  I = ideal(a*b-c*d, a*c-b*d)

F1105E2 =  leadTerm I

F1105E3 =  R = ZZ[a..d][x,y,z];

F1105E4 =  I = ideal(a*x-b*y, x^3, y^3, z^3)

F1105E5 =  leadTerm I

F1106E0 =  f = a -> b -> a+b+a*b

F1106E1 =  functionBody f 1

F1106E2 =  f 1 === f 2

F1106E3 =  functionBody f 1 === functionBody f 2

F1107E0 =  R = QQ[a..d];

F1107E1 =  degree (a^3-b-1)^2

F1107E2 =  first degree (a^3-b-1)^2

F1107E3 =  S = QQ[a..d,Degrees=>{1,2,3,4}];

F1107E4 =  first degree (a+b+c^3)

F1107E5 =  T = QQ[a..d,Degrees=>{{0,1},{1,0},{-1,1},{3,4}}];

F1107E6 =  degree c

F1107E7 =  degree c^5

F1107E8 =  degree d

F1107E9 =  degree (c^5+d)

F1108E0 =  R = QQ[x..z];

F1108E1 =  C = res coker vars R

F1108E2 =  C[3]

F1109E0 =  fn = temporaryFileName()

F1109E1 =  f = fn << "hi there"

F1109E2 =  m = 7 + 7*8 + 7*64

F1109E3 =  fileMode(m,f)

F1109E4 =  fileMode f

F1109E5 =  close f

F1109E6 =  fileMode fn

F1109E7 =  removeFile fn

F1110E0 =  L = {1,2,3,5,7,8,10,12,13,17,18,20,21};

F1110E1 =  sublists(L, odd, toList, minus)

F1110E2 =  sublists(L, odd, toList)

F1110E3 =  sublists(L, odd)

F1110E4 =  L = (1,2,3,5,7,8,10,12,13,17,18,20,21);

F1110E5 =  sublists(L, isPrime, , e -> 0)

F1110E6 =  sublists(L, isPrime, plus, e -> 0)

F1110E7 =  a = for l in L list if isPrime l then l else -10*l

F1110E8 =  b = apply(L, l -> if isPrime l then l else -10*l)

F1110E9 =  X = {1, 3, 5, 2, 4, 7, 1, 3, 4, 4, 5, 4, 7, 9, 13};

F1110E10 =  sublists(sublists(X, odd), i -> not instance(i, List))

F1111E0 =  R = QQ[a,b,c]

F1111E1 =  F = map(S,R,{s^3-t^2, s^3-t, s-t})

F1111E2 =  target F

F1111E3 =  source F

F1111E4 =  F.matrix

F1111E5 =  F (a+b)

F1111E6 =  I = kernel F

F1111E7 =  F I

F1111E8 =  J = preimage(F, ideal(s-3))

F1111E9 =  isSubset(F J, ideal(s-3))

F1111E10 =  G = map(R,R,{a=>b*c,b=>a*c,c=>a*b})

F1111E11 =  G*G

F1111E12 =  ker G == 0

F1111E13 =  isInjective G

F1111E14 =  coimage G

F1112E0 =  R = ZZ/10007[x,y];

F1112E1 =  char R

F1112E2 =  R = ZZ[x]/823671827384723894723894723892

F1112E3 =  char R

F1113E0 =  S = QQ[a..d, Degrees => {{2,-1},{1,0},{0,1},{-1,2}}];

F1113E1 =  heft S

F1113E2 =  multidegree ideal (b^2,b*c,c^2)

F1113E3 =  multidegree ideal a

F1113E4 =  multidegree ideal (a^2,a*b,b^2)

F1113E5 =  describe ring oo

F1114E0 =  M = matrix{{1,2,3},{0,5,6}}

F1114E1 =  M_(1,2)

F1114E2 =  N = mutableMatrix M

F1114E3 =  N_(1,0)

F1114E4 =  N_(1,0) = 37

F1114E5 =  N

F1115E0 =  R = QQ[x..z]

F1115E1 =  X = Proj R

F1115E2 =  OO_X^6

F1115E3 =  module oo

F1116E0 =  cot(pi/3)

F1117E0 =  v = vector {2,3,5,7}

F1117E1 =  - v

F1118E0 =  R = QQ[a..d]/(a*d-b*c)

F1118E1 =  Q = Proj R

F1118E2 =  OO_Q^5

F1118E3 =  IL = sheaf module ideal(a,b)

F1118E4 =  IL^3

F1119E0 =  any((1,2,3,4),(2,3,4,5), (i,j) -> i>j)

F1119E1 =  any((1,2,5,4),(2,3,4,5), (i,j) -> i>j)

F1119E2 =  any((1,2,5,4),(2,3,4,5), x -> (print x; false))

F1119E3 =  any((1,2,5,4),(2,3,4,5), x -> (print x; true))

F1120E0 =  V = Proj(ZZ/101[x_0..x_2]);

F1120E1 =  S = sheaf(image matrix {{x_0^3+x_1^3+x_2^3}})

F1120E2 =  pdim S

F1121E0 =  matrix{{1,2},{3,4}}

F1122E0 =  2+2

F1122E1 =  "asdf" | "qwer"

F1122E2 =  value \ values OutputDictionary

F1122E3 =  dictionaryPath

F1122E4 =  peek OutputDictionary

F1123E0 =  R = QQ[s,t,x,y,z, MonomialOrder=>Eliminate 2];

F1123E1 =  I = ideal(x-s^3-s*t-1, y-t^3-3*t^2-t, z-s*t^3)

F1123E2 =  time leadTerm gens gb I

F1123E3 =  G = selectInSubring(1,gens gb I)

F1123E4 =  ans1 = G_(0,0)

F1123E5 =  R = QQ[x,y,z,s,t];

F1123E6 =  I = ideal(x-s^3-s*t-1, y-t^3-3*t^2-t, z-s*t^3)

F1123E7 =  time G = eliminate(I,{s,t})

F1123E8 =  ans2 = G_0

F1123E9 =  R1 = QQ[x,y,z,s,t, Degrees=>{3,3,4,1,1}];

F1123E10 =  I1 = substitute(I,R1);

F1123E11 =  time G = eliminate(I1,{s,t})

F1123E12 =  ans3 = G_0

F1123E13 =  A = QQ[s,t];

F1123E14 =  B = QQ[x,y,z];

F1123E15 =  F = map(A,B,{s^3+s*t+1, t^3+3*t^2+t, s*t^3})

F1123E16 =  time G = kernel F

F1123E17 =  ans4 = G_0

F1123E18 =  use ring I

F1123E19 =  time f1 = resultant(I_0,I_2,s)

F1123E20 =  time f2 = resultant(I_1,f1,t)

F1123E21 =  ans5 = -f2

F1123E22 =  L = {ans1,ans2,ans3,ans4,ans5};

F1123E23 =  L = apply(L, f -> substitute(f,B));

F1123E24 =  length unique L

F1124E0 =  replace("[a-z]+", "x", "Dog cat cat.")

F1124E1 =  replace("(\\w+)\\.?", "A \\1.", "Dog cat cat.")

F1124E2 =  replace("(\\w+)\\.?", "A \\L$1.", "Dog cat cat.")

F1124E3 =  s = "catfish cats dogs";

F1124E4 =  replace("cat(?!fish)s?", "\\U$&", s)

F1124E5 =  replace("\\w+(?=s\\b)", "\\U$&", s)

F1124E6 =  s = "goldfish swordfish catfish catdog";

F1124E7 =  replace("\\w+(?=fish)", "\\U$&", s)

F1124E8 =  replace("(?<=cat)\\w+", "\\U$&", s)

F1125E0 =  {10..<11}

F1125E1 =  {10..<8}

F1125E2 =  {3..<5,8..<10}

F1125E3 =  splice {3..<5,8..<10}

F1125E4 =  0..<5

F1125E5 =  toList (0..<5)

F1125E6 =  new Array from 0..<5

F1125E7 =  new Sum from 0..<5

F1125E8 =  (0,0)..<(2,3)

F1125E9 =  p_(0,a) ..< r_(2,c)

F1126E0 =  currentFileDirectory

F1127E0 =  sqrt 2p200

F1127E1 =  sqrt (+ii)

F1128E0 =  R = ZZ/101[t,x,y,z];

F1128E1 =  degree (R^1 / (ideal vars R)^6)

F1128E2 =  degree minors_2 matrix {{t,x,y},{x,y,z}}

F1129E0 =  R = QQ[a,b,c][x,y,z]

F1129E1 =  m = transpose vars R

F1129E2 =  n = matrix{{x^2-a*y^3, x^3-z^2*y, x*y-b, x*z-c}}

F1129E3 =  diff(m,n)

F1130E0 =  x

F1130E1 =  ab12

F1131E0 =  v = vector {1,2,3}

F1131E1 =  matrix v

F1132E0 =  f = () -> "f value";

F1132E1 =  g = () -> "g value";

F1132E2 =  F = createTask f

F1132E3 =  G = createTask g

F1132E4 =  addStartTask(F,G)

F1132E5 =  schedule F

F1132E6 =  while not isReady F do sleep 1

F1132E7 =  taskResult F

F1132E8 =  while not isReady G do sleep 1

F1132E9 =  taskResult G

F1133E0 =  t=3;

F1133E1 =  R=QQ[x];

F1133E2 =  listUserSymbols

F1133E3 =  listUserSymbols ZZ

F1134E0 =  abs(-pi)

F1134E1 =  abs(1+ii)

F1135E0 =  f = new Manipulator from identity

F1135E1 =  stdio << f

F1135E2 =  f stdio

F1136E0 =  R = (ZZ[x,y,z])^3;

F1136E1 =  v = vector {1,x,x*y,x*z,x*y*z}

F1136E2 =  w = vector {z*x,z^2,3}

F1136E3 =  v || w

F1137E0 =  x

F1137E1 =  x = 4

F1137E2 =  x

F1137E3 =  x = y = 44

F1137E4 =  x

F1137E5 =  y

F1137E6 =  x = 444

F1137E7 =  y = foo

F1137E8 =  (y,x) = (x,y)

F1137E9 =  x

F1137E10 =  y

F1137E11 =  f = i -> (i,i^2)

F1137E12 =  (x,y) = f 9

F1137E13 =  x

F1137E14 =  y

F1137E15 =  x = new MutableList from a .. e

F1137E16 =  peek x

F1137E17 =  x#3

F1137E18 =  x#3 = "foo"

F1137E19 =  x#3

F1137E20 =  peek x

F1137E21 =  x = new MutableHashTable from { "a" => 2, "b" => 3 }

F1137E22 =  peek x

F1137E23 =  x#?"foo"

F1137E24 =  x#"foo" = "bar"

F1137E25 =  x#?"foo"

F1137E26 =  x#"foo"

F1137E27 =  peek x

F1137E28 =  "left" * "right" = "value"

F1137E29 =  String * String = peek;

F1137E30 =  "left" * "right" = "value"

F1137E31 =  s

F1137E32 =  s_2

F1137E33 =  s_2 = 44

F1137E34 =  s_2

F1137E35 =  s_(i,j)

F1137E36 =  symbol s_2

F1137E37 =  value oo

F1137E38 =  - String = peek;

F1137E39 =  - "foo" = "value"

F1137E40 =  - String = peek;

F1137E41 =  - "foo" = "value"

F1137E42 =  String ~ = peek;

F1137E43 =  "foo" ~ = "value"

F1137E44 =  String ~ = peek;

F1137E45 =  "foo" ~ = "value"

F1138E0 =  class depth

F1138E1 =  f = method()

F1138E2 =  class f

F1139E0 =  R = QQ[x,y,z]

F1139E1 =  X = Proj R

F1139E2 =  Y = Spec R

F1139E3 =  sheaf(X,R)

F1139E4 =  sheaf(Y,R)

F1140E0 =  F = ZZ^3

F1140E1 =  peek F

F1140E2 =  F.cache#Foo = Bar

F1140E3 =  peek F

F1140E4 =  peek F.cache

F1140E5 =  F === ZZ^3

F1141E0 =  R = QQ[x,y, Inverses => true, MonomialOrder => Lex, Weights => {1,2}]

F1141E1 =  quotientRemainder(x^100 - x^89, x^5 - 1)

F1141E2 =  quotientRemainder(x^100 - y^61, x^5 - 1)

F1142E0 =  notify = true

F1142E1 =  loadPackage "FirstPackage"

F1143E0 =  R = ZZ/32003[a..h];

F1143E1 =  C = res ideal(a*b, c*d, e*f)

F1143E2 =  poincare C

F1143E3 =  b = betti C

F1143E4 =  poincare b

F1144E0 =  "abcdefghij"

F1144E1 =  "abcde

F1144E2 =  w = "abcdefghij"

F1144E3 =  u = "abc\101\102\n\tstu"

F1144E4 =  peek u

F1144E5 =  ///a \ n = "c"///

F1144E6 =  ascii u

F1144E7 =  ascii oo

F1144E8 =  w|w|w

F1144E9 =  #w

F1144E10 =  w#5

F1144E11 =  substring(5,w)

F1144E12 =  substring(5,2,w)

F1144E13 =  R = ZZ[x,y];

F1144E14 =  (x+y)^2

F1144E15 =  n = net oo

F1144E16 =  peek n

F1144E17 =  x = "a" || "bb" || "ccc"

F1144E18 =  x^2

F1144E19 =  {x,x^1,x^2}

F1144E20 =  x^2 | "-------" | x

F1144E21 =  width x, height x, depth x

F1144E22 =  v = unstack x

F1144E23 =  peek oo

F1144E24 =  stack v

F1145E0 =  exportFrom_Core {"HTML"}

F1146E0 =  k = toField (QQ[x]/(x^2+x+1));

F1146E1 =  R = k[y]/(x-y+2);

F1146E2 =  (S, f) = flattenRing(R); describe S

F1146E3 =  (S2, f2) = flattenRing(R, CoefficientRing => QQ); describe S2

F1147E0 =  R = QQ[a,b,c];

F1147E1 =  I = ideal"a2-b2,abc"

F1147E2 =  M = I/(I^2+a*I)

F1147E3 =  presentation M

F1148E0 =  KK = ZZ/32003

F1148E1 =  R = KK[x,y,z,w]

F1148E2 =  I = ideal(x^2*y,x*y^2+x^3)

F1148E3 =  J = gens gb I

F1148E4 =  R = KK[x,y,z,w,MonomialOrder=>Lex]

F1148E5 =  I = substitute(I,R)

F1148E6 =  gens gb I

F1148E7 =  R = KK[x,y,z]

F1148E8 =  F = random(R^1, R^{-2,-3})

F1148E9 =  GB = gens gb F

F1148E10 =  LT = leadTerm GB

F1148E11 =  betti LT

F1148E12 =  R = KK[x,y,z, MonomialOrder => Lex]

F1148E13 =  F = random(R^1, R^{-2,-3})

F1148E14 =  GB = gens gb F

F1148E15 =  LT = leadTerm GB

F1148E16 =  betti LT

F1148E17 =  R = KK[a..i]

F1148E18 =  M = genericMatrix(R,a,3,3)

F1148E19 =  N = M^3

F1148E20 =  I = flatten N

F1148E21 =  Tr = trace M 

F1148E22 =  Tr //I  -- the quotient, which is 0

F1148E23 =  Tr % I  -- the remainder, which is Tr again

F1148E24 =  Tr^2 % I

F1148E25 =  Tr^3 % I

F1148E26 =  Tr^4 % I

F1148E27 =  Tr^5 % I

F1148E28 =  Tr^6 % I

F1148E29 =  Tr^7 % I

F1148E30 =  Tr^6 // I

F1148E31 =  Tr^6 == I * (Tr^6 // I) + (Tr^6 % I)

F1148E32 =  R = KK[t,y,z,MonomialOrder=>Lex]

F1148E33 =  I = ideal(y-(t^2+t+1), z-(t^3+1))

F1148E34 =  GB = gens gb I

F1148E35 =  F = GB_(0,0)

F1148E36 =  substitute(F, {y =>t^2+t+1, z=>t^3+1})

F1148E37 =  R = KK[y,z,t]

F1148E38 =  I = substitute(I,R)

F1148E39 =  eliminate(I,t)

F1148E40 =  A = KK[t]

F1148E41 =  B = KK[y,z]

F1148E42 =  G = map(A,B,{t^2+t+1, t^3+1})

F1148E43 =  kernel G

F1148E44 =  R = KK[t,x,y,z]

F1148E45 =  I = ideal(x^3,y^3,z^3)

F1148E46 =  F = x+y+z

F1148E47 =  L = t*I + (1-t)*ideal(F)

F1148E48 =  L1 = eliminate(L,t)

F1148E49 =  gens gb L1

F1148E50 =  (gens L1) % F

F1148E51 =  J = ideal ((gens L1)//F)

F1148E52 =  mingens J

F1148E53 =  betti oo

F1148E54 =  R = KK[x,y,z]

F1148E55 =  I = ideal(x^3,y^3,z^3)

F1148E56 =  F = x+y+z

F1148E57 =  J = I : F

F1148E58 =  betti J

F1148E59 =  transpose gens J

F1148E60 =  transpose gens gb J

F1148E61 =  R = KK[t,a..f]

F1148E62 =  I = ideal(a*b*c-d*e*f, a^2*b-c^2*d, a*f^2-d*b*c)

F1148E63 =  F = a*b*c*d*e*f

F1148E64 =  J = eliminate(I + ideal(t*F-1), t)

F1148E65 =  transpose gens J

F1148E66 =  R = KK[a..f]

F1148E67 =  I = substitute(I,R)

F1148E68 =  F = product gens R

F1148E69 =  J' = saturate(I,F)

F1148E70 =  transpose gens J'

F1149E0 =  X = new Type of BasicList

F1149E1 =  parent X

F1149E2 =  code(net,BasicList)

F1149E3 =  x = new X from {2,3,4}

F1149E4 =  stopIfError = false;

F1149E5 =  - x

F1149E6 =  - X := t -> apply(t,i -> -i);

F1149E7 =  - x

F1149E8 =  Y = new Type of X;

F1149E9 =  y = new Y from {4,5,6}

F1149E10 =  - y

F1149E11 =  Z = new Type of X;

F1149E12 =  z = new Z from {7,8,9}

F1149E13 =  Y + X := (a,b) -> "Y + X";

F1149E14 =  X + Z := (a,b) -> "X + Z";

F1149E15 =  y + z

F1150E0 =  R = ZZ/31991[a,b,c,d];

F1150E1 =  I = monomialCurveIdeal(R,{1,3,5})

F1150E2 =  projplane = Proj(R)

F1150E3 =  II = sheaf module I

F1150E4 =  can = sheafExt^1(II,OO_projplane^1(-4))

F1150E5 =  codim can

F1151E0 =  t = hashTable {{1,8},{2,20},{3,4},{4,20}}

F1151E1 =  scanKeys(t, print)

F1151E2 =  scanKeys(t, k -> if k>2 then print t#k)

F1152E0 =  m = mutableMatrix matrix{{1,2,3},{4,5,6}}

F1152E1 =  rowSwap(m,0,1)

F1152E2 =  m

F1153E0 =  R = QQ[a..g];

F1153E1 =  I = ideal"ab2-c3,abc-def,ade-bfg"

F1153E2 =  G = gb(I, Syzygies=>true);

F1153E3 =  syz G

F1153E4 =  syz gens I

F1153E5 =  mingens image syz G

F1154E0 =  apply({1,3,5,7}, i -> i^2)

F1154E1 =  apply([1,3,5,7], i -> i^2)

F1154E2 =  apply((1,3,5,7), i -> i^2)

F1154E3 =  apply("foo", identity)

F1155E0 =  M = ZZ^2 ++ ZZ^3

F1155E1 =  t = formation M

F1155E2 =  peek t

F1155E3 =  t#1

F1155E4 =  value t

F1155E5 =  M = directSum(ZZ^2, ZZ^3, ZZ^4)

F1155E6 =  t = formation M

F1155E7 =  t#1

F1155E8 =  M = ZZ^2 ** ZZ^3

F1155E9 =  t = formation M

F1155E10 =  t#1

F1155E11 =  formation ZZ^6

F1155E12 =  R = QQ[x,y];

F1155E13 =  C = res coker vars R;

F1155E14 =  D = C ++ C

F1155E15 =  formation D

F1156E0 =  R = ZZ[x,y]

F1156E1 =  f = random(R^2,R^{2:-1})

F1156E2 =  g = vars R ++ vars R

F1156E3 =  quotient(f,g)

F1156E4 =  f = f + map(target f, source f, id_(R^2))

F1156E5 =  quotient(f,g)

F1157E0 =  R = ZZ/32003[a..f];

F1157E1 =  M = genericMatrix(R,a,3,2)

F1157E2 =  N = matrix{{d^2,a*d},{b*c,b*d},{a,c}}

F1157E3 =  M|N

F1157E4 =  P = matrix{{d^2,a*d,e*f},{b*c,b*d,b*e},{a,c,d}}

F1157E5 =  transpose(M)||P

F1157E6 =  matrix{{id_(R^3),M,P},{random(R^1,R^3),random(R^1,R^3),random(R^1,R^2)}}

F1158E0 =  R = QQ[a..d];

F1158E1 =  S = QQ[s,t];

F1158E2 =  F = map(R,matrix{{s^4,s^3*t,s*t^3,t^4}})

F1158E3 =  kernel F

F1159E0 =  R = QQ[x,y];

F1159E1 =  Proj R

F1160E0 =  f = random(ZZ^6, ZZ^4)

F1160E1 =  M = subquotient ( f * diagonalMatrix{2,3,8,21}, f * diagonalMatrix{2*11,3*5*13,0,21*5} )

F1160E2 =  factor M

F1161E0 =  Cubic = Proj(QQ[x_0..x_2]/ideal(x_0^3+x_1^3+x_2^3))

F1161E1 =  HH^1(OO_Cubic)

F1162E0 =  R = ZZ[a..d];

F1162E1 =  M = image matrix {{a,b}}

F1162E2 =  N = image matrix {{c,d}}

F1162E3 =  M ** N

F1162E4 =  N ** M

F1163E0 =  R = QQ[a..d];

F1163E1 =  I = ideal(a^2,b^2,c*d)

F1163E2 =  f = basis(3,I)

F1163E3 =  source f

F1163E4 =  target f

F1163E5 =  matrix f

F1163E6 =  super f

F1164E0 =  S = QQ[x,y, Inverses => true, MonomialOrder => Lex]

F1164E1 =  S_{1,-1} + S_{-1,1}

F1165E0 =  demark("+", a..f)

F1165E1 =  demark(" and ", 6:"more")

F1165E2 =  mingle(6: "more", 5: "and")

F1166E0 =  regularizedBeta(1/2, 3, 4)

F1166E1 =  inverseRegularizedBeta(oo, 3, 4)

F1167E0 =  1234

F1167E1 =  123/4

F1167E2 =  123.4

F1167E3 =  1.234e-20

F1167E4 =  123+4*ii

F1167E5 =  0b10011010010 -- binary

F1167E6 =  0o2322 -- octal

F1167E7 =  0x4d2 -- hexadecimal

F1167E8 =  4/5 + 2/3

F1167E9 =  10^20

F1167E10 =  3*5*7

F1167E11 =  3.1^2.1

F1167E12 =  sqrt 3.

F1167E13 =  1234//100

F1167E14 =  1234%100

F1167E15 =  1_QQ

F1167E16 =  (2/3)_CC

F1167E17 =  1p300

F1167E18 =  1p300e-30

F1167E19 =  x = 2/3*ii/ii

F1167E20 =  lift(x,RR)

F1167E21 =  lift(x,QQ)

F1168E0 =  A = QQ[x,y,z,MonomialOrder=>Lex];

F1168E1 =  f = y^4*z^3+2*x^2*y^2*z^2+3*x^5+4*z^4+5*y^2

F1168E2 =  leadMonomial f

F1168E3 =  exponents leadMonomial f

F1168E4 =  leadTerm f

F1168E5 =  leadCoefficient f

F1168E6 =  someTerms(f,1,size f - 1)

F1168E7 =  someTerms(f,1,-1)

F1169E0 =  (f = Command ( () -> 2^30 );)

F1169E1 =  f

F1169E2 =  (c = Command "date";)

F1169E3 =  c

F1170E0 =  S = ZZ/101[a,b]

F1170E1 =  i = ideal(a^4,b^4)

F1170E2 =  quotient(i, a^3+b^3)

F1170E3 =  quotient(i, a^3+b^3, MinimalGenerators => false)

F1170E4 =  needsPackage "Truncations"

F1170E5 =  R = ZZ/101[x_0..x_4]

F1170E6 =  I = truncate(8, monomialCurveIdeal(R,{1,4,5,9}));

F1170E7 =  time gens gb I;

F1170E8 =  time J1 = saturate(I);

F1170E9 =  time J = saturate(I, MinimalGenerators => false);

F1170E10 =  numgens J

F1170E11 =  numgens J1

F1171E0 =  kk = ZZ/101;

F1171E1 =  A = matrix"1,2,3,4

F1171E2 =  b = matrix"1

F1171E3 =  x = solve(A,b)

F1171E4 =  A*x-b

F1171E5 =  kk = GF(25)

F1171E6 =  a = kk_0

F1171E7 =  A = matrix"a,a+1,a+2,3a,4

F1171E8 =  b = matrix"1

F1171E9 =  x = solve(A,b)

F1171E10 =  A*x-b

F1171E11 =  kk = QQ

F1171E12 =  A = matrix"1,2,3,4

F1171E13 =  b = matrix"1

F1171E14 =  x = solve(A,b)

F1171E15 =  A*x-b

F1171E16 =  printingPrecision = 4;

F1171E17 =  A = matrix "1,2,3

F1171E18 =  b = matrix "1

F1171E19 =  x = solve(A,b)

F1171E20 =  A*x-b

F1171E21 =  norm oo

F1171E22 =  clean(1e-15, A*x-b)

F1171E23 =  printingPrecision = 4;

F1171E24 =  N = 40

F1171E25 =  A = mutableMatrix(CC_53, N, N)

F1171E26 =  B = mutableMatrix(CC_53, N, 2)

F1171E27 =  time X = solve(A,B);

F1171E28 =  time X = solve(A,B, MaximalRank=>true);

F1171E29 =  norm(A*X-B)

F1171E30 =  N = 100

F1171E31 =  A = mutableMatrix(CC_100, N, N)

F1171E32 =  B = mutableMatrix(CC_100, N, 2)

F1171E33 =  time X = solve(A,B);

F1171E34 =  time X = solve(A,B, MaximalRank=>true);

F1171E35 =  norm(A*X-B)

F1171E36 =  kk = RR_53;

F1171E37 =  A = matrix"1,2,3,4

F1171E38 =  b = matrix"1

F1171E39 =  x1 = solve(A,b, ClosestFit=>true)

F1171E40 =  A*x1-b

F1171E41 =  x2 = solve(A,b, ClosestFit=>true, MaximalRank=>true)

F1171E42 =  A*x2-b

F1172E0 =  R = ZZ/32003[a..d,MonomialOrder=>Lex];

F1172E1 =  m = matrix{{a*d, b^2, b^100, b^50*d^50, c^2*d}}

F1172E2 =  sort m

F1172E3 =  options sort

F1172E4 =  sort(m, DegreeOrder=>null, MonomialOrder=>Descending)

F1173E0 =  pi

F1173E1 =  +pi

F1173E2 =  numeric_100 pi

F1173E3 =  2. * pi

F1174E0 =  currentPosition()

F1174E1 =  peek'_2 oo

F1175E0 =  T = new MutableHashTable from {a => 1, b => 2, c => 3}; peek T

F1175E1 =  remove(T, a)

F1175E2 =  peek T

F1175E3 =  T = new HashTable from {a => 1, b => 2, c => 3}

F1175E4 =  T = applyPairs(T, (k, v) -> if k =!= a then (k, v))

F1175E5 =  T = new MutableList from {1, 2, 3, 4}; peek T

F1175E6 =  remove(T, 0)

F1175E7 =  peek T

F1175E8 =  remove(T, -1)

F1175E9 =  peek T

F1176E0 =  subsets(3)

F1176E1 =  subsets(5, 3)

F1176E2 =  subsets({"apple", "banana", {1,2,3}, 7.1}, 3)

F1176E3 =  subsets({"apple", "apple", "banana"})

F1176E4 =  subsets(set{"apple", "apple", "banana"})

F1177E0 =  newPackage "PKG"

F1177E1 =  export "x1"

F1177E2 =  x1=3

F1177E3 =  endPackage "PKG"

F1177E4 =  dictionaryPath

F1177E5 =  x1

F1177E6 =  dismiss PKG

F1177E7 =  dictionaryPath

F1177E8 =  x1

F1177E9 =  values PackageDictionary

F1177E10 =  use PKG

F1177E11 =  x1

F1178E0 =  round(-2.3)

F1178E1 =  round(-2.3+5*ii)

F1178E2 =  round(2/3)

F1178E3 =  round(2,1234.5678)

F1178E4 =  round(-2,1234.5678)

F1179E0 =  set {1, 2, 3}

F1179E1 =  peek oo

F1179E2 =  new MutableHashTable from { a => 3, b => 44}

F1179E3 =  peek oo

F1180E0 =  R = ZZ[x..z]

F1180E1 =  C = chainComplex R

F1180E2 =  C_2 = R^11

F1180E3 =  C_4 = R^13

F1180E4 =  C

F1181E0 =  R = QQ[x,y,z];

F1181E1 =  hilbertSeries ideal (x,y)

F1181E2 =  hilbertSeries(ideal (x,y), Reduce => true)

F1182E0 =  I = ideal (4,6)

F1182E1 =  generator I

F1182E2 =  M = image matrix {{4,6},{0,0}}

F1182E3 =  generator M

F1183E0 =  C = new ChainComplex;

F1183E1 =  C.ring = ZZ;

F1183E2 =  C#2 = ZZ^1;

F1183E3 =  C#3 = ZZ^2;

F1183E4 =  C.dd#3 = matrix {{3,-11}};

F1183E5 =  C

F1183E6 =  C.dd

F1184E0 =  R = QQ[x,y];

F1184E1 =  f = vars R

F1184E2 =  chainComplex f

F1184E3 =  HH oo

F1185E0 =  isAffineRing (ZZ[a,b,c,d])

F1185E1 =  isAffineRing (ZZ/101[a,b,c,d])

F1185E2 =  isAffineRing (ZZ/2[x,y,z]/(x^2-y*z))

F1185E3 =  isAffineRing (QQ[x,dx, WeylAlgebra => {x => dx}])

F1186E0 =  isPolynomialRing CC

F1186E1 =  isPolynomialRing(ZZ/7[x,y])

F1186E2 =  isPolynomialRing(QQ[x,dx, WeylAlgebra => {x => dx}])

F1186E3 =  isPolynomialRing(GF(2)[x,y, SkewCommutative => true])

F1186E4 =  isPolynomialRing(ZZ/101[x,y,z]/(x^2-y*z))

F1187E0 =  QQ[a,b,c,d];

F1187E1 =  I = monomialIdeal(a*b, b*c, c*d)

F1187E2 =  dual I

F1187E3 =  intersect(monomialIdeal(a,b), 

     	       monomialIdeal(b,c),

     	       monomialIdeal(c,d))

F1187E4 =  dual dual I

F1187E5 =  QQ[x,y,z];

F1187E6 =  I = monomialIdeal(x^3, x*y, y*z^2)

F1187E7 =  dual(I, {4,4,4})

F1187E8 =  intersect( monomialIdeal(x^2),

     	       monomialIdeal(x^4, y^4),

     	       monomialIdeal(y^4, z^3))

F1187E9 =  QQ[x,y,z];

F1187E10 =  J = monomialIdeal( x^3*y^2, x*y^4, x*z, y^2*z)

F1187E11 =  dual dual J

F1187E12 =  dual( dual(J, {3,4,1}), {3,4,1})

F1188E0 =  R = ZZ[a..c];

F1188E1 =  S = R/(a+b+c);

F1188E2 =  f = vars R

F1188E3 =  f ** S

F1189E0 =  R = QQ[x,y,z,a,b,c,MonomialOrder=>Eliminate 3];

F1189E1 =  I = ideal(a-(x+y+z), b-(x*y+x*z+y*z), c-x*y*z)

F1189E2 =  f = x^3+y^3+z^3

F1189E3 =  f % I

F1190E0 =  A = QQ[x,y,z];

F1190E1 =  I = ideal"x5,xy3,y7,z3+xyz";

F1190E2 =  f = x+y+z;

F1190E3 =  B = A[t];

F1190E4 =  J = substitute(I,B) + ideal(f*t-1)

F1190E5 =  1 % J 

F1190E6 =  radical I

F1191E0 =  F = ZZ^4

F1191E1 =  v = F_2

F1191E2 =  module v

F1191E3 =  class v

F1192E0 =  L = 0..10;

F1192E1 =  switch(3, 9, L)

F1192E2 =  switch(0, -1, L)

F1192E3 =  switch(-1, -2, L)

F1193E0 =  R = QQ[x,y,z]

F1193E1 =  x^2

F1193E2 =  class x^2

F1193E3 =  r = 4.5 * ii

F1193E4 =  s = 4.3p300 * ii

F1193E5 =  precision r

F1193E6 =  precision s

F1193E7 =  ring r

F1193E8 =  ring s

F1193E9 =  CC'

F1193E10 =  parent ring r     

F1193E11 =  parent ring s

F1193E12 =  parent ring s === CC'

F1194E0 =  BesselY_0 .5

F1194E1 =  BesselY_2 3p200

F1195E0 =  3 ? 4

F1195E1 =  "book" ? "boolean"

F1195E2 =  3 ? 3.

F1195E3 =  {1,2,3} ? {4,5}

F1195E4 =  R = ZZ[a,b,c]

F1195E5 =  a*c ? b^2

F1195E6 =  set {1,2} ? set {2,3}

F1195E7 =  set {1,2} ? set {1,2,3}

F1195E8 =  tally {1,1,2} ? tally {1,2,3}

F1195E9 =  tally {1,1,2} ? tally {1,1,2,3}

F1196E0 =  toList \\ sin \ ( 1 .. 5 )

F1196E1 =  ( 1 .. 5 ) / sin // toList

F1196E2 =  (x -> (x,x)) \ (a,b,c,d)

F1196E3 =  splice \\ (x -> (x,x)) \ (a,b,c,d)

F1197E0 =  numgens ZZ

F1197E1 =  A = ZZ[a,b,c];

F1197E2 =  numgens A

F1197E3 =  KA = frac A

F1197E4 =  numgens KA

F1197E5 =  B = A[x,y];

F1197E6 =  numgens B

F1197E7 =  C = KA[x,y];

F1197E8 =  numgens C

F1197E9 =  g = generators(B, CoefficientRing=>ZZ)

F1197E10 =  #g

F1197E11 =  K = GF(9,Variable=>a)

F1197E12 =  numgens K

F1197E13 =  R = ambient K

F1197E14 =  numgens R

F1198E0 =  30!

F1198E1 =  30.!

F1198E2 =  30.01!

F1199E0 =  4/2

F1199E1 =  4//2

F1199E2 =  R = QQ[x];

F1199E3 =  (x^2-3)//(x-1)

F1199E4 =  (x^2-3)%(x-1)

F1199E5 =  (x^2-3)/(x-1)

F1200E0 =  m = mutableMatrix(QQ,10,20)

F1200E1 =  m_(5,5) = 11/13

F1200E2 =  m

F1201E0 =  R = QQ[x,dx,WeylAlgebra=>{x=>dx}]

F1201E1 =  x*dx

F1201E2 =  dx*x

F1201E3 =  M = R^2

F1201E4 =  v = M_0

F1201E5 =  dx*v

F1201E6 =  x*(dx*v)

F1201E7 =  (x*dx)*v

F1201E8 =  x*(dx*v) == (x*dx)*v

F1201E9 =  f = dx * id_M

F1201E10 =  f*(x*v)

F1201E11 =  x*(f*v)

F1201E12 =  f*(x*v) == x*(f*v)

F1201E13 =  g = x * id_M

F1201E14 =  f*g

F1201E15 =  f*g == (x*dx) * id_M

F1201E16 =  (dx * id_M)*(x * id_M) == (x*dx) * id_M

F1201E17 =  x * ( (dx * id_M) * v )

F1201E18 =  (x *  (dx * id_M) ) * v

F1201E19 =  (x *  (dx * id_M) ) * v == x * ( (dx * id_M) * v )	  

F1201E20 =  x * ( id_M * ( dx * id_M ) )

F1201E21 =  (x * id_M) * ( dx * id_M )

F1201E22 =  x * ( id_M * ( dx * id_M ) ) == (x * id_M) * ( dx * id_M )

F1202E0 =  R = QQ[x,y, MonomialOrder => Lex, Degrees => {3,5}];

F1202E1 =  describe newRing(R, MonomialOrder => GRevLex)

F1202E2 =  describe newRing(R, Variables => 4)

F1202E3 =  describe newRing(R, Heft => {2})

F1202E4 =  S = R/(x^2+y^3);

F1202E5 =  describe newRing(R, Variables => 2)

F1203E0 =  f = (x,y,z) -> t -> t

F1203E1 =  g = f(111,222,"hi there")

F1203E2 =  frames g

F1203E3 =  peek first oo

F1204E0 =  toString {1,4,a,f,212312,2.123243242}

F1204E1 =  R = QQ[x_1..x_5];

F1204E2 =  toString R

F1204E3 =  toExternalString R

F1204E4 =  toString(QQ[a])

F1204E5 =  toString (x_1^3-3/4*x_5*x_3)

F1204E6 =  toString vars R

F1204E7 =  toExternalString vars R

F1205E0 =  R = ZZ/101[x,y,z]

F1205E1 =  p = matrix {{x,y,z}}

F1205E2 =  degrees source p

F1205E3 =  isHomogeneous p

F1205E4 =  q = vars R

F1205E5 =  matrix {{q,q,q}}

F1205E6 =  matrix {{q},{q},{q}}

F1205E7 =  F = R^3

F1205E8 =  matrix {F_2, F_1, x*F_0 + y*F_1 + z*F_2}

exampleIDS = {"F0E0", "F0E1", "F1E0", "F2E0", "F2E1", "F2E2", "F3E0", "F3E1", "F4E0", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F5E9", "F5E10", "F5E11", "F5E12", "F5E13", "F5E14", "F5E15", "F5E16", "F5E17", "F5E18", "F5E19", "F5E20", "F5E21", "F5E22", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F6E9", "F6E10", "F6E11", "F6E12", "F6E13", "F6E14", "F7E0", "F7E1", "F7E2", "F7E3", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F9E8", "F9E9", "F9E10", "F9E11", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F11E0", "F11E1", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F12E6", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F14E0", "F14E1", "F14E2", "F14E3", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F16E0", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F17E7", "F17E8", "F17E9", "F17E10", "F17E11", "F18E0", "F18E1", "F18E2", "F19E0", "F19E1", "F20E0", "F20E1", "F20E2", "F20E3", "F20E4", "F20E5", "F20E6", "F20E7", "F20E8", "F20E9", "F20E10", "F20E11", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F21E5", "F21E6", "F21E7", "F21E8", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F22E5", "F22E6", "F22E7", "F23E0", "F23E1", "F23E2", "F24E0", "F24E1", "F24E2", "F24E3", "F24E4", "F24E5", "F25E0", "F25E1", "F25E2", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F27E0", "F27E1", "F27E2", "F27E3", "F28E0", "F28E1", "F28E2", "F28E3", "F28E4", "F28E5", "F28E6", "F28E7", "F28E8", "F28E9", "F28E10", "F28E11", "F28E12", "F28E13", "F28E14", "F28E15", "F28E16", "F28E17", "F28E18", "F28E19", "F28E20", "F28E21", "F28E22", "F28E23", "F28E24", "F28E25", "F28E26", "F28E27", "F29E0", "F29E1", "F29E2", "F29E3", "F29E4", "F29E5", "F29E6", "F29E7", "F29E8", "F29E9", "F29E10", "F29E11", "F29E12", "F29E13", "F29E14", "F29E15", "F29E16", "F30E0", "F30E1", "F30E2", "F30E3", "F31E0", "F31E1", "F32E0", "F32E1", "F32E2", "F32E3", "F33E0", "F33E1", "F34E0", "F34E1", "F34E2", "F35E0", "F36E0", "F36E1", "F36E2", "F36E3", "F36E4", "F36E5", "F37E0", "F37E1", "F37E2", "F37E3", "F37E4", "F38E0", "F38E1", "F38E2", "F39E0", "F39E1", "F39E2", "F39E3", "F39E4", "F39E5", "F40E0", "F40E1", "F41E0", "F41E1", "F41E2", "F42E0", "F42E1", "F42E2", "F43E0", "F43E1", "F43E2", "F44E0", "F44E1", "F44E2", "F44E3", "F44E4", "F44E5", "F44E6", "F44E7", "F45E0", "F45E1", "F45E2", "F45E3", "F45E4", "F45E5", "F45E6", "F45E7", "F45E8", "F45E9", "F45E10", "F45E11", "F45E12", "F45E13", "F45E14", "F45E15", "F45E16", "F45E17", "F45E18", "F45E19", "F45E20", "F45E21", "F45E22", "F45E23", "F45E24", "F45E25", "F45E26", "F45E27", "F45E28", "F45E29", "F45E30", "F45E31", "F45E32", "F45E33", "F45E34", "F45E35", "F45E36", "F45E37", "F45E38", "F45E39", "F45E40", "F45E41", "F45E42", "F45E43", "F45E44", "F45E45", "F46E0", "F46E1", "F46E2", "F46E3", "F46E4", "F46E5", "F46E6", "F47E0", "F47E1", "F47E2", "F47E3", "F47E4", "F47E5", "F47E6", "F47E7", "F47E8", "F48E0", "F49E0", "F49E1", "F49E2", "F49E3", "F49E4", "F49E5", "F49E6", "F49E7", "F49E8", "F49E9", "F49E10", "F49E11", "F49E12", "F49E13", "F49E14", "F49E15", "F49E16", "F49E17", "F49E18", "F50E0", "F50E1", "F51E0", "F51E1", "F51E2", "F52E0", "F52E1", "F52E2", "F52E3", "F52E4", "F52E5", "F52E6", "F53E0", "F53E1", "F53E2", "F53E3", "F53E4", "F53E5", "F53E6", "F53E7", "F53E8", "F53E9", "F53E10", "F53E11", "F53E12", "F53E13", "F53E14", "F53E15", "F53E16", "F53E17", "F53E18", "F53E19", "F53E20", "F53E21", "F53E22", "F53E23", "F53E24", "F53E25", "F53E26", "F53E27", "F53E28", "F53E29", "F53E30", "F53E31", "F53E32", "F53E33", "F53E34", "F53E35", "F54E0", "F54E1", "F54E2", "F54E3", "F54E4", "F54E5", "F54E6", "F54E7", "F54E8", "F54E9", "F54E10", "F55E0", "F55E1", "F55E2", "F56E0", "F56E1", "F57E0", "F57E1", "F57E2", "F58E0", "F58E1", "F59E0", "F59E1", "F59E2", "F59E3", "F59E4", "F59E5", "F59E6", "F60E0", "F61E0", "F61E1", "F61E2", "F61E3", "F61E4", "F61E5", "F62E0", "F62E1", "F62E2", "F63E0", "F63E1", "F63E2", "F63E3", "F63E4", "F63E5", "F63E6", "F64E0", "F65E0", "F65E1", "F65E2", "F65E3", "F65E4", "F66E0", "F67E0", "F67E1", "F67E2", "F67E3", "F68E0", "F68E1", "F68E2", "F68E3", "F68E4", "F69E0", "F69E1", "F69E2", "F69E3", "F70E0", "F70E1", "F70E2", "F70E3", "F71E0", "F71E1", "F72E0", "F72E1", "F73E0", "F73E1", "F73E2", "F73E3", "F73E4", "F73E5", "F74E0", "F74E1", "F74E2", "F74E3", "F74E4", "F74E5", "F74E6", "F74E7", "F74E8", "F74E9", "F74E10", "F74E11", "F74E12", "F74E13", "F74E14", "F74E15", "F74E16", "F74E17", "F74E18", "F74E19", "F74E20", "F74E21", "F74E22", "F74E23", "F74E24", "F74E25", "F74E26", "F74E27", "F74E28", "F74E29", "F74E30", "F74E31", "F74E32", "F74E33", "F74E34", "F74E35", "F74E36", "F74E37", "F74E38", "F74E39", "F74E40", "F74E41", "F75E0", "F75E1", "F75E2", "F75E3", "F75E4", "F75E5", "F75E6", "F75E7", "F75E8", "F75E9", "F75E10", "F75E11", "F75E12", "F75E13", "F76E0", "F76E1", "F76E2", "F77E0", "F77E1", "F77E2", "F77E3", "F78E0", "F78E1", "F78E2", "F78E3", "F78E4", "F79E0", "F79E1", "F80E0", "F80E1", "F81E0", "F81E1", "F81E2", "F82E0", "F82E1", "F82E2", "F82E3", "F82E4", "F82E5", "F83E0", "F83E1", "F84E0", "F84E1", "F85E0", "F85E1", "F85E2", "F86E0", "F86E1", "F86E2", "F87E0", "F88E0", "F88E1", "F88E2", "F88E3", "F88E4", "F88E5", "F88E6", "F88E7", "F88E8", "F88E9", "F88E10", "F88E11", "F88E12", "F89E0", "F89E1", "F89E2", "F89E3", "F89E4", "F89E5", "F89E6", "F89E7", "F89E8", "F89E9", "F89E10", "F89E11", "F89E12", "F89E13", "F89E14", "F89E15", "F89E16", "F89E17", "F89E18", "F89E19", "F89E20", "F89E21", "F89E22", "F90E0", "F90E1", "F90E2", "F90E3", "F90E4", "F90E5", "F91E0", "F91E1", "F92E0", "F92E1", "F92E2", "F92E3", "F92E4", "F92E5", "F92E6", "F92E7", "F92E8", "F92E9", "F93E0", "F93E1", "F93E2", "F94E0", "F94E1", "F94E2", "F94E3", "F94E4", "F94E5", "F94E6", "F94E7", "F94E8", "F94E9", "F94E10", "F94E11", "F94E12", "F94E13", "F94E14", "F94E15", "F95E0", "F95E1", "F95E2", "F95E3", "F96E0", "F96E1", "F96E2", "F96E3", "F96E4", "F96E5", "F96E6", "F96E7", "F96E8", "F96E9", "F97E0", "F97E1", "F97E2", "F98E0", "F98E1", "F98E2", "F99E0", "F99E1", "F100E0", "F100E1", "F100E2", "F100E3", "F100E4", "F101E0", "F102E0", "F102E1", "F102E2", "F102E3", "F102E4", "F102E5", "F102E6", "F102E7", "F102E8", "F102E9", "F102E10", "F102E11", "F102E12", "F102E13", "F102E14", "F102E15", "F102E16", "F102E17", "F102E18", "F102E19", "F102E20", "F102E21", "F103E0", "F103E1", "F103E2", "F103E3", "F103E4", "F104E0", "F104E1", "F104E2", "F104E3", "F104E4", "F104E5", "F104E6", "F104E7", "F104E8", "F105E0", "F105E1", "F105E2", "F105E3", "F105E4", "F106E0", "F106E1", "F106E2", "F106E3", "F106E4", "F106E5", "F106E6", "F106E7", "F106E8", "F107E0", "F107E1", "F107E2", "F107E3", "F107E4", "F107E5", "F107E6", "F107E7", "F108E0", "F108E1", "F108E2", "F109E0", "F109E1", "F109E2", "F109E3", "F109E4", "F109E5", "F109E6", "F110E0", "F110E1", "F110E2", "F110E3", "F110E4", "F110E5", "F110E6", "F110E7", "F110E8", "F110E9", "F110E10", "F110E11", "F110E12", "F110E13", "F110E14", "F110E15", "F110E16", "F110E17", "F110E18", "F110E19", "F110E20", "F110E21", "F110E22", "F110E23", "F110E24", "F110E25", "F110E26", "F110E27", "F110E28", "F110E29", "F110E30", "F110E31", "F110E32", "F110E33", "F110E34", "F110E35", "F110E36", "F110E37", "F110E38", "F110E39", "F110E40", "F110E41", "F110E42", "F110E43", "F110E44", "F110E45", "F110E46", "F110E47", "F110E48", "F110E49", "F110E50", "F110E51", "F110E52", "F110E53", "F110E54", "F110E55", "F110E56", "F110E57", "F110E58", "F110E59", "F110E60", "F110E61", "F110E62", "F110E63", "F111E0", "F112E0", "F112E1", "F112E2", "F112E3", "F112E4", "F113E0", "F113E1", "F114E0", "F114E1", "F114E2", "F114E3", "F114E4", "F114E5", "F115E0", "F115E1", "F115E2", "F115E3", "F115E4", "F116E0", "F116E1", "F116E2", "F116E3", "F116E4", "F116E5", "F116E6", "F116E7", "F116E8", "F116E9", "F116E10", "F116E11", "F116E12", "F116E13", "F116E14", "F116E15", "F117E0", "F117E1", "F117E2", "F117E3", "F117E4", "F117E5", "F117E6", "F117E7", "F117E8", "F117E9", "F117E10", "F117E11", "F117E12", "F117E13", "F117E14", "F117E15", "F117E16", "F117E17", "F117E18", "F117E19", "F117E20", "F117E21", "F117E22", "F117E23", "F117E24", "F117E25", "F117E26", "F117E27", "F117E28", "F117E29", "F117E30", "F117E31", "F117E32", "F117E33", "F117E34", "F117E35", "F117E36", "F117E37", "F117E38", "F117E39", "F117E40", "F117E41", "F118E0", "F118E1", "F119E0", "F119E1", "F120E0", "F120E1", "F120E2", "F120E3", "F120E4", "F120E5", "F120E6", "F120E7", "F120E8", "F120E9", "F120E10", "F121E0", "F121E1", "F121E2", "F121E3", "F121E4", "F122E0", "F122E1", "F122E2", "F122E3", "F122E4", "F123E0", "F123E1", "F123E2", "F123E3", "F123E4", "F123E5", "F123E6", "F124E0", "F124E1", "F124E2", "F124E3", "F124E4", "F124E5", "F124E6", "F125E0", "F125E1", "F125E2", "F125E3", "F125E4", "F125E5", "F125E6", "F125E7", "F126E0", "F126E1", "F126E2", "F126E3", "F127E0", "F128E0", "F128E1", "F129E0", "F129E1", "F129E2", "F129E3", "F129E4", "F129E5", "F129E6", "F129E7", "F129E8", "F129E9", "F129E10", "F129E11", "F129E12", "F129E13", "F129E14", "F129E15", "F129E16", "F129E17", "F129E18", "F129E19", "F130E0", "F130E1", "F130E2", "F130E3", "F130E4", "F130E5", "F131E0", "F131E1", "F131E2", "F131E3", "F131E4", "F131E5", "F131E6", "F131E7", "F131E8", "F131E9", "F131E10", "F131E11", "F131E12", "F131E13", "F131E14", "F131E15", "F131E16", "F131E17", "F131E18", "F131E19", "F131E20", "F131E21", "F131E22", "F131E23", "F131E24", "F131E25", "F131E26", "F131E27", "F131E28", "F131E29", "F131E30", "F131E31", "F131E32", "F132E0", "F132E1", "F132E2", "F132E3", "F132E4", "F132E5", "F132E6", "F132E7", "F132E8", "F132E9", "F132E10", "F132E11", "F132E12", "F132E13", "F132E14", "F132E15", "F132E16", "F132E17", "F132E18", "F132E19", "F132E20", "F132E21", "F132E22", "F132E23", "F133E0", "F133E1", "F133E2", "F134E0", "F134E1", "F134E2", "F134E3", "F134E4", "F134E5", "F134E6", "F134E7", "F134E8", "F134E9", "F134E10", "F134E11", "F134E12", "F134E13", "F134E14", "F134E15", "F134E16", "F134E17", "F134E18", "F134E19", "F134E20", "F134E21", "F134E22", "F134E23", "F134E24", "F134E25", "F134E26", "F134E27", "F134E28", "F135E0", "F135E1", "F136E0", "F136E1", "F136E2", "F136E3", "F136E4", "F137E0", "F137E1", "F138E0", "F138E1", "F139E0", "F139E1", "F139E2", "F139E3", "F139E4", "F139E5", "F140E0", "F140E1", "F140E2", "F141E0", "F142E0", "F142E1", "F142E2", "F142E3", "F143E0", "F143E1", "F143E2", "F143E3", "F143E4", "F143E5", "F143E6", "F143E7", "F143E8", "F143E9", "F143E10", "F143E11", "F143E12", "F143E13", "F144E0", "F144E1", "F144E2", "F144E3", "F144E4", "F145E0", "F145E1", "F145E2", "F145E3", "F146E0", "F146E1", "F147E0", "F147E1", "F148E0", "F148E1", "F148E2", "F149E0", "F149E1", "F149E2", "F150E0", "F150E1", "F150E2", "F150E3", "F150E4", "F150E5", "F150E6", "F150E7", "F150E8", "F150E9", "F150E10", "F150E11", "F150E12", "F150E13", "F150E14", "F150E15", "F150E16", "F150E17", "F150E18", "F151E0", "F151E1", "F151E2", "F151E3", "F151E4", "F151E5", "F151E6", "F151E7", "F151E8", "F151E9", "F151E10", "F151E11", "F151E12", "F151E13", "F152E0", "F152E1", "F152E2", "F152E3", "F152E4", "F152E5", "F152E6", "F152E7", "F153E0", "F153E1", "F153E2", "F153E3", "F153E4", "F153E5", "F153E6", "F153E7", "F153E8", "F153E9", "F153E10", "F153E11", "F154E0", "F154E1", "F154E2", "F154E3", "F154E4", "F155E0", "F155E1", "F155E2", "F155E3", "F155E4", "F155E5", "F155E6", "F155E7", "F156E0", "F156E1", "F156E2", "F156E3", "F156E4", "F156E5", "F156E6", "F156E7", "F156E8", "F156E9", "F157E0", "F158E0", "F158E1", "F158E2", "F158E3", "F158E4", "F158E5", "F158E6", "F158E7", "F158E8", "F158E9", "F158E10", "F158E11", "F158E12", "F158E13", "F158E14", "F158E15", "F158E16", "F158E17", "F159E0", "F159E1", "F159E2", "F159E3", "F159E4", "F159E5", "F159E6", "F159E7", "F159E8", "F159E9", "F159E10", "F159E11", "F159E12", "F159E13", "F159E14", "F159E15", "F159E16", "F159E17", "F159E18", "F159E19", "F159E20", "F159E21", "F160E0", "F160E1", "F160E2", "F160E3", "F160E4", "F160E5", "F160E6", "F160E7", "F160E8", "F160E9", "F160E10", "F160E11", "F160E12", "F161E0", "F161E1", "F161E2", "F162E0", "F162E1", "F163E0", "F164E0", "F164E1", "F164E2", "F164E3", "F164E4", "F164E5", "F164E6", "F164E7", "F165E0", "F165E1", "F166E0", "F166E1", "F167E0", "F167E1", "F167E2", "F168E0", "F168E1", "F168E2", "F168E3", "F168E4", "F168E5", "F168E6", "F168E7", "F169E0", "F170E0", "F170E1", "F170E2", "F170E3", "F170E4", "F170E5", "F170E6", "F171E0", "F171E1", "F171E2", "F171E3", "F171E4", "F171E5", "F171E6", "F171E7", "F172E0", "F172E1", "F173E0", "F173E1", "F174E0", "F174E1", "F175E0", "F175E1", "F175E2", "F175E3", "F175E4", "F175E5", "F176E0", "F176E1", "F176E2", "F176E3", "F176E4", "F176E5", "F176E6", "F177E0", "F177E1", "F177E2", "F177E3", "F177E4", "F178E0", "F178E1", "F178E2", "F178E3", "F178E4", "F178E5", "F178E6", "F179E0", "F179E1", "F179E2", "F179E3", "F180E0", "F180E1", "F180E2", "F180E3", "F181E0", "F181E1", "F181E2", "F182E0", "F182E1", "F182E2", "F182E3", "F182E4", "F183E0", "F183E1", "F183E2", "F183E3", "F184E0", "F184E1", "F184E2", "F184E3", "F184E4", "F184E5", "F184E6", "F184E7", "F184E8", "F184E9", "F184E10", "F185E0", "F185E1", "F185E2", "F185E3", "F186E0", "F186E1", "F186E2", "F186E3", "F187E0", "F187E1", "F187E2", "F187E3", "F187E4", "F187E5", "F188E0", "F188E1", "F188E2", "F188E3", "F188E4", "F188E5", "F188E6", "F188E7", "F188E8", "F188E9", "F188E10", "F188E11", "F188E12", "F188E13", "F188E14", "F188E15", "F188E16", "F188E17", "F188E18", "F188E19", "F188E20", "F188E21", "F188E22", "F188E23", "F188E24", "F188E25", "F188E26", "F188E27", "F188E28", "F188E29", "F188E30", "F189E0", "F189E1", "F189E2", "F189E3", "F189E4", "F189E5", "F189E6", "F189E7", "F189E8", "F190E0", "F191E0", "F191E1", "F191E2", "F191E3", "F191E4", "F191E5", "F192E0", "F192E1", "F192E2", "F192E3", "F193E0", "F193E1", "F194E0", "F195E0", "F195E1", "F195E2", "F196E0", "F196E1", "F196E2", "F197E0", "F197E1", "F197E2", "F197E3", "F197E4", "F197E5", "F197E6", "F197E7", "F197E8", "F198E0", "F199E0", "F199E1", "F200E0", "F200E1", "F200E2", "F200E3", "F200E4", "F200E5", "F201E0", "F201E1", "F201E2", "F201E3", "F201E4", "F201E5", "F201E6", "F201E7", "F201E8", "F201E9", "F201E10", "F202E0", "F202E1", "F202E2", "F202E3", "F202E4", "F202E5", "F202E6", "F202E7", "F202E8", "F202E9", "F203E0", "F203E1", "F203E2", "F203E3", "F203E4", "F203E5", "F203E6", "F203E7", "F203E8", "F204E0", "F204E1", "F204E2", "F204E3", "F205E0", "F206E0", "F206E1", "F206E2", "F206E3", "F207E0", "F207E1", "F207E2", "F207E3", "F208E0", "F208E1", "F208E2", "F208E3", "F208E4", "F208E5", "F208E6", "F208E7", "F208E8", "F208E9", "F208E10", "F208E11", "F208E12", "F208E13", "F208E14", "F208E15", "F208E16", "F208E17", "F208E18", "F209E0", "F210E0", "F210E1", "F210E2", "F210E3", "F210E4", "F210E5", "F211E0", "F211E1", "F211E2", "F211E3", "F211E4", "F211E5", "F211E6", "F211E7", "F211E8", "F211E9", "F211E10", "F211E11", "F211E12", "F211E13", "F211E14", "F212E0", "F212E1", "F212E2", "F212E3", "F212E4", "F212E5", "F212E6", "F212E7", "F212E8", "F212E9", "F213E0", "F213E1", "F213E2", "F213E3", "F213E4", "F213E5", "F213E6", "F213E7", "F213E8", "F213E9", "F213E10", "F213E11", "F213E12", "F213E13", "F214E0", "F214E1", "F214E2", "F214E3", "F215E0", "F215E1", "F215E2", "F215E3", "F215E4", "F215E5", "F215E6", "F215E7", "F215E8", "F215E9", "F215E10", "F215E11", "F216E0", "F216E1", "F216E2", "F216E3", "F216E4", "F216E5", "F217E0", "F217E1", "F218E0", "F218E1", "F219E0", "F219E1", "F219E2", "F219E3", "F219E4", "F219E5", "F219E6", "F219E7", "F220E0", "F220E1", "F220E2", "F221E0", "F221E1", "F221E2", "F221E3", "F221E4", "F222E0", "F222E1", "F222E2", "F222E3", "F222E4", "F223E0", "F223E1", "F223E2", "F223E3", "F223E4", "F223E5", "F224E0", "F225E0", "F226E0", "F226E1", "F226E2", "F226E3", "F226E4", "F226E5", "F226E6", "F226E7", "F226E8", "F226E9", "F226E10", "F226E11", "F227E0", "F227E1", "F227E2", "F227E3", "F227E4", "F227E5", "F227E6", "F227E7", "F227E8", "F227E9", "F227E10", "F227E11", "F227E12", "F227E13", "F227E14", "F227E15", "F227E16", "F227E17", "F228E0", "F228E1", "F229E0", "F229E1", "F229E2", "F229E3", "F229E4", "F229E5", "F229E6", "F229E7", "F229E8", "F230E0", "F231E0", "F231E1", "F231E2", "F231E3", "F232E0", "F233E0", "F234E0", "F234E1", "F234E2", "F234E3", "F234E4", "F234E5", "F234E6", "F234E7", "F234E8", "F234E9", "F234E10", "F234E11", "F234E12", "F234E13", "F234E14", "F234E15", "F234E16", "F234E17", "F234E18", "F234E19", "F234E20", "F234E21", "F234E22", "F234E23", "F234E24", "F234E25", "F234E26", "F234E27", "F234E28", "F234E29", "F234E30", "F234E31", "F234E32", "F234E33", "F234E34", "F234E35", "F234E36", "F234E37", "F234E38", "F234E39", "F234E40", "F234E41", "F234E42", "F234E43", "F234E44", "F234E45", "F234E46", "F234E47", "F234E48", "F234E49", "F234E50", "F234E51", "F235E0", "F235E1", "F235E2", "F236E0", "F236E1", "F236E2", "F236E3", "F237E0", "F237E1", "F237E2", "F237E3", "F237E4", "F237E5", "F237E6", "F237E7", "F238E0", "F238E1", "F239E0", "F239E1", "F239E2", "F239E3", "F239E4", "F240E0", "F241E0", "F241E1", "F241E2", "F241E3", "F241E4", "F241E5", "F241E6", "F241E7", "F241E8", "F241E9", "F241E10", "F241E11", "F241E12", "F241E13", "F242E0", "F243E0", "F243E1", "F243E2", "F243E3", "F243E4", "F243E5", "F243E6", "F243E7", "F243E8", "F243E9", "F243E10", "F243E11", "F243E12", "F243E13", "F244E0", "F244E1", "F244E2", "F245E0", "F245E1", "F245E2", "F246E0", "F246E1", "F246E2", "F246E3", "F246E4", "F246E5", "F246E6", "F246E7", "F246E8", "F246E9", "F246E10", "F246E11", "F246E12", "F246E13", "F246E14", "F246E15", "F246E16", "F246E17", "F246E18", "F246E19", "F246E20", "F246E21", "F246E22", "F246E23", "F246E24", "F246E25", "F246E26", "F246E27", "F246E28", "F246E29", "F246E30", "F246E31", "F246E32", "F246E33", "F246E34", "F246E35", "F246E36", "F246E37", "F246E38", "F246E39", "F247E0", "F247E1", "F247E2", "F247E3", "F248E0", "F248E1", "F248E2", "F248E3", "F248E4", "F248E5", "F248E6", "F248E7", "F248E8", "F248E9", "F248E10", "F248E11", "F248E12", "F248E13", "F248E14", "F249E0", "F249E1", "F249E2", "F249E3", "F249E4", "F249E5", "F249E6", "F249E7", "F249E8", "F250E0", "F250E1", "F250E2", "F250E3", "F250E4", "F251E0", "F251E1", "F251E2", "F251E3", "F251E4", "F252E0", "F252E1", "F252E2", "F253E0", "F253E1", "F253E2", "F253E3", "F253E4", "F254E0", "F254E1", "F254E2", "F254E3", "F254E4", "F254E5", "F254E6", "F255E0", "F256E0", "F256E1", "F256E2", "F256E3", "F256E4", "F256E5", "F256E6", "F257E0", "F257E1", "F258E0", "F258E1", "F258E2", "F258E3", "F258E4", "F258E5", "F259E0", "F259E1", "F259E2", "F260E0", "F261E0", "F261E1", "F261E2", "F261E3", "F261E4", "F261E5", "F261E6", "F262E0", "F262E1", "F262E2", "F262E3", "F262E4", "F262E5", "F262E6", "F262E7", "F263E0", "F263E1", "F263E2", "F263E3", "F264E0", "F264E1", "F264E2", "F265E0", "F265E1", "F265E2", "F265E3", "F266E0", "F266E1", "F267E0", "F267E1", "F267E2", "F267E3", "F267E4", "F267E5", "F268E0", "F268E1", "F268E2", "F268E3", "F269E0", "F269E1", "F269E2", "F269E3", "F269E4", "F269E5", "F269E6", "F269E7", "F270E0", "F270E1", "F270E2", "F271E0", "F271E1", "F271E2", "F272E0", "F273E0", "F274E0", "F274E1", "F274E2", "F274E3", "F274E4", "F274E5", "F274E6", "F274E7", "F274E8", "F274E9", "F274E10", "F274E11", "F274E12", "F274E13", "F274E14", "F274E15", "F274E16", "F274E17", "F274E18", "F275E0", "F275E1", "F275E2", "F275E3", "F275E4", "F275E5", "F275E6", "F276E0", "F276E1", "F276E2", "F276E3", "F276E4", "F276E5", "F276E6", "F276E7", "F276E8", "F276E9", "F277E0", "F277E1", "F277E2", "F277E3", "F278E0", "F279E0", "F279E1", "F279E2", "F279E3", "F279E4", "F279E5", "F279E6", "F280E0", "F280E1", "F280E2", "F280E3", "F281E0", "F281E1", "F281E2", "F281E3", "F281E4", "F281E5", "F281E6", "F281E7", "F281E8", "F281E9", "F281E10", "F282E0", "F282E1", "F282E2", "F282E3", "F282E4", "F282E5", "F282E6", "F282E7", "F282E8", "F282E9", "F282E10", "F283E0", "F283E1", "F283E2", "F283E3", "F283E4", "F283E5", "F283E6", "F284E0", "F284E1", "F285E0", "F285E1", "F285E2", "F285E3", "F285E4", "F285E5", "F285E6", "F285E7", "F285E8", "F285E9", "F285E10", "F285E11", "F286E0", "F286E1", "F286E2", "F286E3", "F286E4", "F286E5", "F286E6", "F287E0", "F287E1", "F288E0", "F288E1", "F289E0", "F289E1", "F289E2", "F289E3", "F289E4", "F289E5", "F289E6", "F289E7", "F289E8", "F289E9", "F290E0", "F290E1", "F290E2", "F290E3", "F290E4", "F291E0", "F291E1", "F292E0", "F292E1", "F292E2", "F292E3", "F292E4", "F292E5", "F292E6", "F292E7", "F292E8", "F292E9", "F292E10", "F292E11", "F292E12", "F292E13", "F292E14", "F292E15", "F292E16", "F292E17", "F292E18", "F293E0", "F293E1", "F293E2", "F293E3", "F293E4", "F294E0", "F294E1", "F294E2", "F295E0", "F295E1", "F295E2", "F295E3", "F295E4", "F295E5", "F295E6", "F295E7", "F296E0", "F296E1", "F296E2", "F296E3", "F296E4", "F296E5", "F296E6", "F297E0", "F297E1", "F297E2", "F297E3", "F298E0", "F298E1", "F298E2", "F298E3", "F298E4", "F299E0", "F299E1", "F299E2", "F299E3", "F299E4", "F299E5", "F299E6", "F299E7", "F299E8", "F299E9", "F300E0", "F300E1", "F300E2", "F300E3", "F300E4", "F300E5", "F300E6", "F300E7", "F300E8", "F300E9", "F300E10", "F300E11", "F300E12", "F301E0", "F301E1", "F301E2", "F301E3", "F301E4", "F301E5", "F302E0", "F302E1", "F302E2", "F302E3", "F302E4", "F302E5", "F302E6", "F302E7", "F303E0", "F303E1", "F303E2", "F303E3", "F303E4", "F304E0", "F305E0", "F305E1", "F305E2", "F305E3", "F305E4", "F305E5", "F305E6", "F305E7", "F306E0", "F306E1", "F306E2", "F306E3", "F306E4", "F306E5", "F306E6", "F306E7", "F307E0", "F307E1", "F307E2", "F308E0", "F308E1", "F308E2", "F308E3", "F308E4", "F309E0", "F310E0", "F310E1", "F310E2", "F310E3", "F310E4", "F310E5", "F310E6", "F310E7", "F310E8", "F310E9", "F310E10", "F310E11", "F310E12", "F310E13", "F310E14", "F310E15", "F310E16", "F310E17", "F310E18", "F310E19", "F310E20", "F310E21", "F310E22", "F311E0", "F311E1", "F311E2", "F311E3", "F312E0", "F312E1", "F312E2", "F312E3", "F313E0", "F313E1", "F313E2", "F313E3", "F313E4", "F313E5", "F314E0", "F314E1", "F315E0", "F316E0", "F316E1", "F317E0", "F317E1", "F317E2", "F318E0", "F318E1", "F318E2", "F318E3", "F318E4", "F318E5", "F318E6", "F318E7", "F318E8", "F318E9", "F318E10", "F318E11", "F318E12", "F318E13", "F318E14", "F319E0", "F319E1", "F319E2", "F319E3", "F319E4", "F319E5", "F319E6", "F319E7", "F320E0", "F320E1", "F320E2", "F320E3", "F320E4", "F320E5", "F321E0", "F321E1", "F321E2", "F321E3", "F321E4", "F321E5", "F321E6", "F321E7", "F321E8", "F321E9", "F322E0", "F322E1", "F323E0", "F323E1", "F324E0", "F324E1", "F324E2", "F324E3", "F324E4", "F324E5", "F325E0", "F325E1", "F326E0", "F326E1", "F326E2", "F326E3", "F326E4", "F326E5", "F326E6", "F326E7", "F326E8", "F326E9", "F327E0", "F327E1", "F327E2", "F327E3", "F328E0", "F328E1", "F328E2", "F328E3", "F328E4", "F328E5", "F328E6", "F328E7", "F328E8", "F328E9", "F329E0", "F329E1", "F329E2", "F329E3", "F329E4", "F329E5", "F329E6", "F329E7", "F329E8", "F329E9", "F329E10", "F329E11", "F329E12", "F329E13", "F329E14", "F329E15", "F330E0", "F330E1", "F330E2", "F330E3", "F330E4", "F330E5", "F330E6", "F330E7", "F330E8", "F330E9", "F330E10", "F330E11", "F331E0", "F332E0", "F332E1", "F332E2", "F332E3", "F332E4", "F332E5", "F332E6", "F332E7", "F332E8", "F333E0", "F333E1", "F333E2", "F333E3", "F333E4", "F333E5", "F333E6", "F334E0", "F334E1", "F334E2", "F334E3", "F334E4", "F334E5", "F335E0", "F335E1", "F335E2", "F335E3", "F336E0", "F336E1", "F336E2", "F336E3", "F336E4", "F336E5", "F336E6", "F336E7", "F336E8", "F337E0", "F337E1", "F337E2", "F337E3", "F337E4", "F337E5", "F337E6", "F337E7", "F337E8", "F337E9", "F337E10", "F337E11", "F337E12", "F337E13", "F337E14", "F338E0", "F338E1", "F338E2", "F339E0", "F339E1", "F339E2", "F339E3", "F339E4", "F340E0", "F340E1", "F340E2", "F340E3", "F340E4", "F341E0", "F342E0", "F342E1", "F342E2", "F342E3", "F343E0", "F343E1", "F344E0", "F344E1", "F344E2", "F345E0", "F345E1", "F345E2", "F345E3", "F345E4", "F346E0", "F346E1", "F346E2", "F346E3", "F346E4", "F346E5", "F346E6", "F346E7", "F346E8", "F346E9", "F346E10", "F346E11", "F346E12", "F347E0", "F347E1", "F347E2", "F347E3", "F347E4", "F347E5", "F347E6", "F347E7", "F347E8", "F347E9", "F347E10", "F347E11", "F347E12", "F347E13", "F347E14", "F347E15", "F347E16", "F347E17", "F347E18", "F347E19", "F347E20", "F347E21", "F347E22", "F347E23", "F348E0", "F348E1", "F348E2", "F348E3", "F348E4", "F349E0", "F349E1", "F350E0", "F350E1", "F350E2", "F350E3", "F350E4", "F351E0", "F351E1", "F352E0", "F352E1", "F352E2", "F352E3", "F352E4", "F353E0", "F353E1", "F353E2", "F354E0", "F355E0", "F355E1", "F355E2", "F355E3", "F355E4", "F355E5", "F355E6", "F356E0", "F356E1", "F356E2", "F356E3", "F356E4", "F356E5", "F357E0", "F357E1", "F357E2", "F357E3", "F357E4", "F357E5", "F357E6", "F357E7", "F357E8", "F358E0", "F358E1", "F359E0", "F359E1", "F359E2", "F359E3", "F359E4", "F360E0", "F360E1", "F360E2", "F360E3", "F360E4", "F361E0", "F361E1", "F361E2", "F361E3", "F361E4", "F362E0", "F362E1", "F362E2", "F363E0", "F363E1", "F363E2", "F363E3", "F363E4", "F363E5", "F363E6", "F363E7", "F364E0", "F364E1", "F364E2", "F364E3", "F364E4", "F364E5", "F364E6", "F364E7", "F364E8", "F364E9", "F364E10", "F365E0", "F365E1", "F365E2", "F365E3", "F365E4", "F366E0", "F366E1", "F366E2", "F366E3", "F366E4", "F366E5", "F366E6", "F367E0", "F367E1", "F367E2", "F367E3", "F368E0", "F368E1", "F368E2", "F368E3", "F368E4", "F368E5", "F368E6", "F368E7", "F368E8", "F368E9", "F369E0", "F369E1", "F370E0", "F370E1", "F371E0", "F371E1", "F371E2", "F371E3", "F371E4", "F371E5", "F372E0", "F372E1", "F372E2", "F372E3", "F372E4", "F372E5", "F372E6", "F372E7", "F372E8", "F372E9", "F372E10", "F372E11", "F372E12", "F372E13", "F372E14", "F372E15", "F372E16", "F372E17", "F372E18", "F373E0", "F373E1", "F373E2", "F373E3", "F373E4", "F373E5", "F373E6", "F374E0", "F374E1", "F374E2", "F374E3", "F374E4", "F374E5", "F374E6", "F374E7", "F374E8", "F374E9", "F374E10", "F374E11", "F374E12", "F374E13", "F374E14", "F374E15", "F374E16", "F374E17", "F374E18", "F374E19", "F374E20", "F374E21", "F374E22", "F374E23", "F374E24", "F375E0", "F375E1", "F376E0", "F376E1", "F376E2", "F376E3", "F376E4", "F377E0", "F378E0", "F378E1", "F378E2", "F378E3", "F378E4", "F378E5", "F378E6", "F378E7", "F379E0", "F379E1", "F379E2", "F379E3", "F379E4", "F379E5", "F379E6", "F380E0", "F380E1", "F380E2", "F380E3", "F380E4", "F380E5", "F381E0", "F381E1", "F381E2", "F381E3", "F381E4", "F381E5", "F382E0", "F382E1", "F383E0", "F383E1", "F383E2", "F383E3", "F384E0", "F384E1", "F384E2", "F384E3", "F384E4", "F384E5", "F384E6", "F384E7", "F384E8", "F384E9", "F384E10", "F384E11", "F384E12", "F384E13", "F384E14", "F385E0", "F385E1", "F385E2", "F385E3", "F385E4", "F385E5", "F385E6", "F385E7", "F385E8", "F386E0", "F386E1", "F386E2", "F386E3", "F386E4", "F386E5", "F387E0", "F387E1", "F387E2", "F387E3", "F387E4", "F387E5", "F387E6", "F387E7", "F387E8", "F387E9", "F387E10", "F388E0", "F389E0", "F389E1", "F389E2", "F389E3", "F389E4", "F389E5", "F389E6", "F389E7", "F389E8", "F389E9", "F389E10", "F389E11", "F389E12", "F389E13", "F389E14", "F389E15", "F389E16", "F389E17", "F389E18", "F389E19", "F389E20", "F389E21", "F389E22", "F389E23", "F389E24", "F389E25", "F390E0", "F390E1", "F390E2", "F390E3", "F390E4", "F391E0", "F391E1", "F391E2", "F392E0", "F392E1", "F392E2", "F392E3", "F392E4", "F392E5", "F393E0", "F393E1", "F393E2", "F393E3", "F393E4", "F394E0", "F395E0", "F395E1", "F396E0", "F396E1", "F396E2", "F396E3", "F397E0", "F397E1", "F398E0", "F399E0", "F399E1", "F400E0", "F400E1", "F400E2", "F400E3", "F400E4", "F400E5", "F401E0", "F401E1", "F401E2", "F401E3", "F402E0", "F403E0", "F403E1", "F403E2", "F403E3", "F403E4", "F403E5", "F403E6", "F403E7", "F403E8", "F404E0", "F404E1", "F404E2", "F404E3", "F404E4", "F404E5", "F404E6", "F405E0", "F405E1", "F406E0", "F406E1", "F406E2", "F407E0", "F407E1", "F407E2", "F407E3", "F407E4", "F407E5", "F407E6", "F407E7", "F408E0", "F408E1", "F409E0", "F409E1", "F409E2", "F410E0", "F410E1", "F410E2", "F410E3", "F410E4", "F411E0", "F411E1", "F412E0", "F412E1", "F412E2", "F412E3", "F412E4", "F413E0", "F413E1", "F413E2", "F413E3", "F413E4", "F414E0", "F414E1", "F414E2", "F414E3", "F414E4", "F414E5", "F414E6", "F414E7", "F414E8", "F415E0", "F415E1", "F415E2", "F415E3", "F415E4", "F415E5", "F416E0", "F416E1", "F416E2", "F416E3", "F416E4", "F416E5", "F416E6", "F416E7", "F416E8", "F417E0", "F417E1", "F417E2", "F417E3", "F417E4", "F417E5", "F417E6", "F417E7", "F417E8", "F417E9", "F418E0", "F418E1", "F418E2", "F418E3", "F418E4", "F418E5", "F419E0", "F419E1", "F419E2", "F420E0", "F420E1", "F421E0", "F421E1", "F421E2", "F422E0", "F422E1", "F422E2", "F422E3", "F422E4", "F422E5", "F422E6", "F422E7", "F422E8", "F422E9", "F422E10", "F422E11", "F422E12", "F422E13", "F422E14", "F422E15", "F422E16", "F422E17", "F422E18", "F422E19", "F422E20", "F422E21", "F423E0", "F423E1", "F423E2", "F423E3", "F423E4", "F423E5", "F423E6", "F423E7", "F423E8", "F423E9", "F423E10", "F423E11", "F423E12", "F423E13", "F424E0", "F424E1", "F424E2", "F424E3", "F424E4", "F424E5", "F424E6", "F424E7", "F425E0", "F425E1", "F425E2", "F425E3", "F425E4", "F426E0", "F426E1", "F427E0", "F427E1", "F427E2", "F427E3", "F427E4", "F427E5", "F427E6", "F427E7", "F428E0", "F429E0", "F429E1", "F429E2", "F429E3", "F429E4", "F429E5", "F429E6", "F429E7", "F429E8", "F429E9", "F429E10", "F429E11", "F430E0", "F430E1", "F430E2", "F430E3", "F430E4", "F430E5", "F430E6", "F430E7", "F430E8", "F430E9", "F430E10", "F430E11", "F430E12", "F430E13", "F430E14", "F431E0", "F431E1", "F431E2", "F431E3", "F432E0", "F433E0", "F433E1", "F434E0", "F434E1", "F434E2", "F435E0", "F435E1", "F435E2", "F436E0", "F436E1", "F436E2", "F437E0", "F437E1", "F437E2", "F437E3", "F437E4", "F437E5", "F437E6", "F437E7", "F437E8", "F437E9", "F437E10", "F437E11", "F438E0", "F438E1", "F438E2", "F439E0", "F439E1", "F439E2", "F439E3", "F439E4", "F439E5", "F440E0", "F440E1", "F440E2", "F440E3", "F441E0", "F441E1", "F441E2", "F441E3", "F442E0", "F442E1", "F442E2", "F442E3", "F442E4", "F443E0", "F443E1", "F443E2", "F443E3", "F443E4", "F443E5", "F444E0", "F444E1", "F444E2", "F444E3", "F445E0", "F445E1", "F445E2", "F445E3", "F446E0", "F446E1", "F446E2", "F446E3", "F446E4", "F446E5", "F447E0", "F447E1", "F447E2", "F447E3", "F448E0", "F448E1", "F449E0", "F449E1", "F449E2", "F449E3", "F449E4", "F449E5", "F449E6", "F449E7", "F450E0", "F450E1", "F450E2", "F450E3", "F451E0", "F451E1", "F451E2", "F451E3", "F451E4", "F451E5", "F451E6", "F451E7", "F451E8", "F451E9", "F451E10", "F452E0", "F452E1", "F452E2", "F452E3", "F453E0", "F453E1", "F453E2", "F453E3", "F454E0", "F454E1", "F454E2", "F454E3", "F454E4", "F454E5", "F454E6", "F454E7", "F454E8", "F454E9", "F454E10", "F454E11", "F454E12", "F455E0", "F455E1", "F455E2", "F456E0", "F456E1", "F456E2", "F456E3", "F456E4", "F456E5", "F456E6", "F456E7", "F456E8", "F456E9", "F456E10", "F456E11", "F456E12", "F456E13", "F456E14", "F456E15", "F456E16", "F456E17", "F456E18", "F456E19", "F456E20", "F456E21", "F456E22", "F456E23", "F456E24", "F456E25", "F456E26", "F456E27", "F456E28", "F456E29", "F456E30", "F456E31", "F456E32", "F457E0", "F457E1", "F457E2", "F457E3", "F458E0", "F458E1", "F458E2", "F458E3", "F458E4", "F458E5", "F458E6", "F458E7", "F459E0", "F459E1", "F459E2", "F459E3", "F460E0", "F460E1", "F460E2", "F461E0", "F461E1", "F461E2", "F462E0", "F463E0", "F463E1", "F463E2", "F463E3", "F463E4", "F463E5", "F463E6", "F463E7", "F463E8", "F463E9", "F463E10", "F463E11", "F463E12", "F464E0", "F464E1", "F464E2", "F464E3", "F464E4", "F464E5", "F464E6", "F464E7", "F464E8", "F464E9", "F464E10", "F465E0", "F465E1", "F465E2", "F465E3", "F465E4", "F466E0", "F466E1", "F466E2", "F466E3", "F466E4", "F466E5", "F466E6", "F466E7", "F467E0", "F467E1", "F467E2", "F467E3", "F467E4", "F467E5", "F467E6", "F467E7", "F467E8", "F467E9", "F467E10", "F467E11", "F467E12", "F467E13", "F467E14", "F467E15", "F467E16", "F467E17", "F467E18", "F467E19", "F467E20", "F467E21", "F468E0", "F468E1", "F468E2", "F469E0", "F469E1", "F469E2", "F469E3", "F469E4", "F469E5", "F469E6", "F470E0", "F470E1", "F470E2", "F470E3", "F470E4", "F471E0", "F471E1", "F471E2", "F472E0", "F472E1", "F472E2", "F472E3", "F472E4", "F473E0", "F473E1", "F473E2", "F473E3", "F474E0", "F474E1", "F474E2", "F474E3", "F474E4", "F474E5", "F474E6", "F474E7", "F474E8", "F474E9", "F474E10", "F474E11", "F474E12", "F474E13", "F475E0", "F475E1", "F476E0", "F476E1", "F477E0", "F477E1", "F477E2", "F477E3", "F477E4", "F478E0", "F479E0", "F479E1", "F479E2", "F480E0", "F480E1", "F480E2", "F480E3", "F480E4", "F480E5", "F480E6", "F480E7", "F481E0", "F481E1", "F481E2", "F481E3", "F481E4", "F481E5", "F481E6", "F482E0", "F482E1", "F482E2", "F482E3", "F482E4", "F482E5", "F483E0", "F483E1", "F483E2", "F483E3", "F483E4", "F483E5", "F483E6", "F483E7", "F483E8", "F483E9", "F483E10", "F484E0", "F484E1", "F484E2", "F484E3", "F484E4", "F484E5", "F484E6", "F484E7", "F484E8", "F484E9", "F484E10", "F484E11", "F485E0", "F485E1", "F485E2", "F485E3", "F485E4", "F485E5", "F485E6", "F485E7", "F485E8", "F485E9", "F485E10", "F485E11", "F485E12", "F485E13", "F485E14", "F485E15", "F485E16", "F485E17", "F485E18", "F485E19", "F485E20", "F485E21", "F486E0", "F487E0", "F487E1", "F488E0", "F488E1", "F488E2", "F489E0", "F490E0", "F490E1", "F490E2", "F490E3", "F490E4", "F490E5", "F490E6", "F490E7", "F491E0", "F491E1", "F491E2", "F492E0", "F492E1", "F492E2", "F492E3", "F492E4", "F492E5", "F492E6", "F492E7", "F493E0", "F493E1", "F493E2", "F493E3", "F494E0", "F494E1", "F494E2", "F494E3", "F494E4", "F494E5", "F494E6", "F494E7", "F494E8", "F494E9", "F494E10", "F494E11", "F494E12", "F494E13", "F494E14", "F494E15", "F494E16", "F494E17", "F494E18", "F494E19", "F494E20", "F494E21", "F494E22", "F494E23", "F494E24", "F494E25", "F494E26", "F494E27", "F494E28", "F494E29", "F494E30", "F494E31", "F494E32", "F494E33", "F494E34", "F494E35", "F494E36", "F494E37", "F494E38", "F494E39", "F494E40", "F494E41", "F494E42", "F494E43", "F494E44", "F494E45", "F494E46", "F494E47", "F494E48", "F494E49", "F494E50", "F495E0", "F495E1", "F495E2", "F496E0", "F496E1", "F496E2", "F496E3", "F496E4", "F496E5", "F496E6", "F496E7", "F497E0", "F497E1", "F497E2", "F497E3", "F497E4", "F497E5", "F498E0", "F498E1", "F498E2", "F498E3", "F498E4", "F499E0", "F499E1", "F499E2", "F499E3", "F499E4", "F499E5", "F499E6", "F499E7", "F499E8", "F499E9", "F499E10", "F499E11", "F499E12", "F499E13", "F499E14", "F499E15", "F499E16", "F499E17", "F499E18", "F499E19", "F499E20", "F499E21", "F499E22", "F499E23", "F500E0", "F500E1", "F500E2", "F500E3", "F501E0", "F501E1", "F501E2", "F501E3", "F501E4", "F501E5", "F502E0", "F502E1", "F502E2", "F502E3", "F502E4", "F502E5", "F502E6", "F503E0", "F503E1", "F503E2", "F503E3", "F504E0", "F504E1", "F504E2", "F504E3", "F504E4", "F504E5", "F505E0", "F505E1", "F505E2", "F506E0", "F506E1", "F506E2", "F506E3", "F506E4", "F506E5", "F506E6", "F507E0", "F507E1", "F507E2", "F507E3", "F508E0", "F508E1", "F508E2", "F509E0", "F509E1", "F509E2", "F509E3", "F510E0", "F510E1", "F510E2", "F510E3", "F511E0", "F511E1", "F511E2", "F511E3", "F511E4", "F511E5", "F511E6", "F512E0", "F512E1", "F512E2", "F512E3", "F512E4", "F512E5", "F512E6", "F512E7", "F512E8", "F512E9", "F512E10", "F513E0", "F513E1", "F513E2", "F513E3", "F513E4", "F513E5", "F513E6", "F513E7", "F513E8", "F513E9", "F513E10", "F513E11", "F513E12", "F513E13", "F513E14", "F513E15", "F513E16", "F513E17", "F513E18", "F514E0", "F514E1", "F514E2", "F514E3", "F514E4", "F514E5", "F515E0", "F515E1", "F515E2", "F515E3", "F515E4", "F515E5", "F516E0", "F516E1", "F516E2", "F516E3", "F517E0", "F517E1", "F518E0", "F518E1", "F518E2", "F518E3", "F518E4", "F518E5", "F518E6", "F519E0", "F520E0", "F520E1", "F520E2", "F520E3", "F520E4", "F521E0", "F521E1", "F521E2", "F521E3", "F522E0", "F522E1", "F522E2", "F522E3", "F522E4", "F522E5", "F523E0", "F524E0", "F524E1", "F524E2", "F524E3", "F524E4", "F524E5", "F525E0", "F525E1", "F525E2", "F525E3", "F525E4", "F525E5", "F525E6", "F525E7", "F526E0", "F526E1", "F526E2", "F526E3", "F526E4", "F526E5", "F527E0", "F527E1", "F527E2", "F527E3", "F527E4", "F527E5", "F528E0", "F529E0", "F529E1", "F529E2", "F529E3", "F529E4", "F529E5", "F529E6", "F529E7", "F529E8", "F530E0", "F531E0", "F531E1", "F531E2", "F532E0", "F532E1", "F533E0", "F533E1", "F533E2", "F533E3", "F534E0", "F534E1", "F534E2", "F534E3", "F534E4", "F534E5", "F534E6", "F534E7", "F534E8", "F534E9", "F535E0", "F535E1", "F535E2", "F535E3", "F535E4", "F535E5", "F535E6", "F536E0", "F536E1", "F537E0", "F537E1", "F537E2", "F537E3", "F538E0", "F538E1", "F538E2", "F538E3", "F538E4", "F539E0", "F539E1", "F539E2", "F539E3", "F540E0", "F540E1", "F540E2", "F540E3", "F540E4", "F540E5", "F541E0", "F541E1", "F541E2", "F541E3", "F541E4", "F542E0", "F542E1", "F542E2", "F543E0", "F543E1", "F543E2", "F543E3", "F543E4", "F544E0", "F545E0", "F545E1", "F545E2", "F545E3", "F545E4", "F546E0", "F546E1", "F547E0", "F547E1", "F547E2", "F547E3", "F547E4", "F547E5", "F547E6", "F548E0", "F548E1", "F548E2", "F549E0", "F549E1", "F550E0", "F550E1", "F550E2", "F550E3", "F550E4", "F550E5", "F551E0", "F552E0", "F552E1", "F552E2", "F552E3", "F552E4", "F553E0", "F554E0", "F554E1", "F554E2", "F554E3", "F554E4", "F554E5", "F554E6", "F554E7", "F554E8", "F554E9", "F554E10", "F554E11", "F554E12", "F554E13", "F555E0", "F555E1", "F556E0", "F556E1", "F556E2", "F556E3", "F557E0", "F558E0", "F558E1", "F558E2", "F558E3", "F558E4", "F558E5", "F558E6", "F558E7", "F558E8", "F558E9", "F558E10", "F558E11", "F558E12", "F558E13", "F559E0", "F559E1", "F560E0", "F560E1", "F560E2", "F560E3", "F560E4", "F560E5", "F560E6", "F560E7", "F560E8", "F560E9", "F560E10", "F560E11", "F560E12", "F560E13", "F560E14", "F561E0", "F561E1", "F561E2", "F561E3", "F561E4", "F561E5", "F561E6", "F561E7", "F561E8", "F561E9", "F561E10", "F561E11", "F561E12", "F561E13", "F561E14", "F561E15", "F561E16", "F562E0", "F562E1", "F562E2", "F562E3", "F562E4", "F562E5", "F563E0", "F563E1", "F563E2", "F563E3", "F563E4", "F564E0", "F564E1", "F564E2", "F564E3", "F564E4", "F564E5", "F565E0", "F565E1", "F565E2", "F565E3", "F565E4", "F566E0", "F566E1", "F566E2", "F566E3", "F566E4", "F566E5", "F566E6", "F566E7", "F567E0", "F567E1", "F567E2", "F567E3", "F567E4", "F567E5", "F567E6", "F567E7", "F567E8", "F567E9", "F567E10", "F567E11", "F567E12", "F567E13", "F567E14", "F567E15", "F567E16", "F567E17", "F567E18", "F567E19", "F567E20", "F567E21", "F567E22", "F567E23", "F567E24", "F567E25", "F567E26", "F567E27", "F567E28", "F567E29", "F567E30", "F567E31", "F567E32", "F567E33", "F567E34", "F567E35", "F567E36", "F567E37", "F568E0", "F568E1", "F569E0", "F569E1", "F569E2", "F569E3", "F569E4", "F569E5", "F569E6", "F570E0", "F570E1", "F570E2", "F570E3", "F570E4", "F570E5", "F571E0", "F572E0", "F572E1", "F572E2", "F572E3", "F572E4", "F573E0", "F573E1", "F573E2", "F573E3", "F574E0", "F574E1", "F574E2", "F574E3", "F574E4", "F574E5", "F574E6", "F574E7", "F574E8", "F574E9", "F574E10", "F575E0", "F575E1", "F575E2", "F575E3", "F575E4", "F575E5", "F575E6", "F575E7", "F575E8", "F575E9", "F575E10", "F575E11", "F575E12", "F575E13", "F575E14", "F575E15", "F575E16", "F575E17", "F575E18", "F575E19", "F576E0", "F576E1", "F576E2", "F576E3", "F576E4", "F577E0", "F577E1", "F577E2", "F577E3", "F577E4", "F578E0", "F578E1", "F578E2", "F578E3", "F579E0", "F579E1", "F579E2", "F579E3", "F579E4", "F579E5", "F579E6", "F579E7", "F579E8", "F579E9", "F579E10", "F580E0", "F580E1", "F580E2", "F580E3", "F580E4", "F580E5", "F580E6", "F580E7", "F580E8", "F580E9", "F581E0", "F581E1", "F581E2", "F581E3", "F582E0", "F583E0", "F584E0", "F584E1", "F584E2", "F584E3", "F584E4", "F584E5", "F584E6", "F584E7", "F584E8", "F584E9", "F585E0", "F585E1", "F585E2", "F585E3", "F585E4", "F585E5", "F585E6", "F585E7", "F585E8", "F585E9", "F585E10", "F585E11", "F585E12", "F585E13", "F585E14", "F585E15", "F586E0", "F586E1", "F586E2", "F586E3", "F586E4", "F586E5", "F586E6", "F587E0", "F587E1", "F587E2", "F587E3", "F587E4", "F587E5", "F587E6", "F587E7", "F588E0", "F588E1", "F588E2", "F588E3", "F588E4", "F588E5", "F588E6", "F589E0", "F589E1", "F589E2", "F589E3", "F589E4", "F589E5", "F589E6", "F589E7", "F589E8", "F589E9", "F589E10", "F589E11", "F589E12", "F589E13", "F589E14", "F589E15", "F589E16", "F590E0", "F590E1", "F590E2", "F590E3", "F590E4", "F590E5", "F591E0", "F591E1", "F591E2", "F591E3", "F591E4", "F592E0", "F592E1", "F592E2", "F592E3", "F592E4", "F592E5", "F592E6", "F592E7", "F593E0", "F593E1", "F593E2", "F593E3", "F593E4", "F593E5", "F593E6", "F593E7", "F593E8", "F593E9", "F593E10", "F593E11", "F593E12", "F594E0", "F594E1", "F594E2", "F594E3", "F594E4", "F594E5", "F594E6", "F594E7", "F594E8", "F595E0", "F595E1", "F595E2", "F595E3", "F595E4", "F595E5", "F595E6", "F595E7", "F595E8", "F595E9", "F595E10", "F595E11", "F595E12", "F595E13", "F595E14", "F596E0", "F596E1", "F596E2", "F596E3", "F596E4", "F596E5", "F596E6", "F596E7", "F597E0", "F597E1", "F598E0", "F598E1", "F598E2", "F598E3", "F598E4", "F598E5", "F598E6", "F598E7", "F598E8", "F599E0", "F600E0", "F600E1", "F600E2", "F600E3", "F600E4", "F600E5", "F600E6", "F600E7", "F600E8", "F600E9", "F600E10", "F600E11", "F600E12", "F600E13", "F600E14", "F600E15", "F600E16", "F600E17", "F600E18", "F600E19", "F600E20", "F600E21", "F600E22", "F600E23", "F600E24", "F600E25", "F600E26", "F600E27", "F600E28", "F600E29", "F600E30", "F600E31", "F600E32", "F600E33", "F600E34", "F601E0", "F601E1", "F601E2", "F601E3", "F601E4", "F601E5", "F601E6", "F602E0", "F602E1", "F602E2", "F602E3", "F602E4", "F602E5", "F603E0", "F603E1", "F604E0", "F604E1", "F604E2", "F604E3", "F604E4", "F604E5", "F605E0", "F605E1", "F605E2", "F606E0", "F606E1", "F606E2", "F606E3", "F606E4", "F606E5", "F606E6", "F606E7", "F606E8", "F607E0", "F608E0", "F608E1", "F608E2", "F608E3", "F608E4", "F608E5", "F608E6", "F608E7", "F608E8", "F608E9", "F608E10", "F609E0", "F609E1", "F609E2", "F609E3", "F610E0", "F610E1", "F610E2", "F611E0", "F611E1", "F611E2", "F611E3", "F611E4", "F611E5", "F611E6", "F611E7", "F611E8", "F611E9", "F612E0", "F612E1", "F612E2", "F612E3", "F613E0", "F613E1", "F613E2", "F613E3", "F613E4", "F613E5", "F614E0", "F614E1", "F615E0", "F615E1", "F615E2", "F615E3", "F615E4", "F615E5", "F615E6", "F615E7", "F615E8", "F616E0", "F617E0", "F617E1", "F617E2", "F617E3", "F617E4", "F617E5", "F617E6", "F617E7", "F617E8", "F617E9", "F617E10", "F617E11", "F617E12", "F618E0", "F619E0", "F620E0", "F620E1", "F621E0", "F621E1", "F621E2", "F621E3", "F621E4", "F621E5", "F621E6", "F621E7", "F621E8", "F621E9", "F621E10", "F621E11", "F621E12", "F621E13", "F621E14", "F622E0", "F622E1", "F622E2", "F623E0", "F623E1", "F623E2", "F623E3", "F623E4", "F623E5", "F624E0", "F624E1", "F624E2", "F624E3", "F625E0", "F625E1", "F625E2", "F625E3", "F625E4", "F625E5", "F625E6", "F625E7", "F625E8", "F625E9", "F625E10", "F625E11", "F625E12", "F625E13", "F625E14", "F625E15", "F625E16", "F625E17", "F625E18", "F625E19", "F625E20", "F625E21", "F625E22", "F625E23", "F625E24", "F625E25", "F625E26", "F625E27", "F625E28", "F625E29", "F625E30", "F625E31", "F625E32", "F625E33", "F625E34", "F625E35", "F625E36", "F625E37", "F625E38", "F625E39", "F625E40", "F625E41", "F625E42", "F625E43", "F625E44", "F625E45", "F625E46", "F625E47", "F625E48", "F625E49", "F625E50", "F625E51", "F625E52", "F625E53", "F625E54", "F625E55", "F625E56", "F625E57", "F625E58", "F625E59", "F625E60", "F625E61", "F625E62", "F625E63", "F625E64", "F625E65", "F625E66", "F625E67", "F625E68", "F625E69", "F625E70", "F625E71", "F625E72", "F625E73", "F625E74", "F625E75", "F625E76", "F625E77", "F626E0", "F627E0", "F627E1", "F627E2", "F627E3", "F627E4", "F627E5", "F627E6", "F628E0", "F628E1", "F629E0", "F629E1", "F629E2", "F629E3", "F629E4", "F629E5", "F629E6", "F629E7", "F630E0", "F630E1", "F631E0", "F631E1", "F631E2", "F631E3", "F631E4", "F632E0", "F632E1", "F632E2", "F632E3", "F632E4", "F632E5", "F632E6", "F632E7", "F632E8", "F632E9", "F632E10", "F632E11", "F633E0", "F633E1", "F634E0", "F634E1", "F634E2", "F634E3", "F634E4", "F634E5", "F634E6", "F634E7", "F634E8", "F634E9", "F634E10", "F634E11", "F634E12", "F634E13", "F634E14", "F634E15", "F634E16", "F634E17", "F634E18", "F634E19", "F634E20", "F634E21", "F634E22", "F634E23", "F634E24", "F634E25", "F634E26", "F634E27", "F634E28", "F634E29", "F634E30", "F634E31", "F634E32", "F634E33", "F634E34", "F634E35", "F634E36", "F634E37", "F634E38", "F634E39", "F634E40", "F634E41", "F634E42", "F634E43", "F634E44", "F634E45", "F634E46", "F634E47", "F634E48", "F634E49", "F634E50", "F634E51", "F635E0", "F635E1", "F635E2", "F635E3", "F636E0", "F637E0", "F637E1", "F637E2", "F637E3", "F637E4", "F637E5", "F637E6", "F637E7", "F637E8", "F637E9", "F637E10", "F637E11", "F637E12", "F637E13", "F637E14", "F637E15", "F637E16", "F637E17", "F637E18", "F637E19", "F637E20", "F637E21", "F637E22", "F637E23", "F637E24", "F637E25", "F637E26", "F637E27", "F637E28", "F637E29", "F637E30", "F638E0", "F638E1", "F638E2", "F638E3", "F638E4", "F638E5", "F638E6", "F638E7", "F638E8", "F638E9", "F638E10", "F638E11", "F638E12", "F638E13", "F638E14", "F638E15", "F638E16", "F638E17", "F638E18", "F638E19", "F638E20", "F638E21", "F638E22", "F638E23", "F638E24", "F638E25", "F638E26", "F638E27", "F638E28", "F638E29", "F638E30", "F638E31", "F638E32", "F638E33", "F638E34", "F638E35", "F638E36", "F638E37", "F638E38", "F638E39", "F638E40", "F638E41", "F638E42", "F638E43", "F638E44", "F638E45", "F638E46", "F638E47", "F638E48", "F638E49", "F638E50", "F638E51", "F638E52", "F638E53", "F639E0", "F639E1", "F639E2", "F640E0", "F640E1", "F640E2", "F640E3", "F640E4", "F640E5", "F640E6", "F640E7", "F640E8", "F641E0", "F641E1", "F641E2", "F641E3", "F641E4", "F641E5", "F641E6", "F641E7", "F641E8", "F641E9", "F641E10", "F641E11", "F642E0", "F642E1", "F642E2", "F642E3", "F642E4", "F643E0", "F643E1", "F643E2", "F643E3", "F643E4", "F643E5", "F643E6", "F643E7", "F643E8", "F643E9", "F644E0", "F644E1", "F644E2", "F645E0", "F645E1", "F645E2", "F646E0", "F646E1", "F646E2", "F646E3", "F646E4", "F647E0", "F647E1", "F647E2", "F647E3", "F647E4", "F648E0", "F648E1", "F648E2", "F648E3", "F648E4", "F648E5", "F648E6", "F648E7", "F648E8", "F649E0", "F649E1", "F649E2", "F650E0", "F650E1", "F651E0", "F652E0", "F652E1", "F652E2", "F652E3", "F652E4", "F652E5", "F652E6", "F652E7", "F652E8", "F652E9", "F653E0", "F653E1", "F653E2", "F653E3", "F653E4", "F653E5", "F653E6", "F653E7", "F653E8", "F653E9", "F653E10", "F654E0", "F654E1", "F654E2", "F654E3", "F654E4", "F654E5", "F654E6", "F654E7", "F654E8", "F654E9", "F654E10", "F655E0", "F655E1", "F656E0", "F656E1", "F656E2", "F656E3", "F656E4", "F657E0", "F658E0", "F658E1", "F658E2", "F658E3", "F658E4", "F658E5", "F658E6", "F658E7", "F658E8", "F658E9", "F658E10", "F659E0", "F659E1", "F659E2", "F659E3", "F659E4", "F659E5", "F659E6", "F659E7", "F659E8", "F659E9", "F660E0", "F660E1", "F660E2", "F660E3", "F660E4", "F660E5", "F660E6", "F660E7", "F660E8", "F660E9", "F660E10", "F660E11", "F660E12", "F660E13", "F660E14", "F660E15", "F660E16", "F660E17", "F660E18", "F660E19", "F660E20", "F660E21", "F660E22", "F660E23", "F660E24", "F660E25", "F660E26", "F660E27", "F660E28", "F660E29", "F660E30", "F660E31", "F660E32", "F660E33", "F660E34", "F660E35", "F661E0", "F661E1", "F662E0", "F662E1", "F662E2", "F662E3", "F662E4", "F662E5", "F663E0", "F664E0", "F664E1", "F664E2", "F664E3", "F664E4", "F664E5", "F665E0", "F665E1", "F665E2", "F665E3", "F665E4", "F666E0", "F666E1", "F666E2", "F667E0", "F667E1", "F667E2", "F667E3", "F667E4", "F667E5", "F667E6", "F667E7", "F667E8", "F667E9", "F667E10", "F668E0", "F668E1", "F668E2", "F668E3", "F668E4", "F668E5", "F668E6", "F668E7", "F669E0", "F669E1", "F669E2", "F669E3", "F670E0", "F670E1", "F670E2", "F670E3", "F670E4", "F670E5", "F670E6", "F670E7", "F670E8", "F670E9", "F670E10", "F671E0", "F671E1", "F671E2", "F671E3", "F671E4", "F671E5", "F671E6", "F671E7", "F671E8", "F671E9", "F671E10", "F672E0", "F672E1", "F672E2", "F672E3", "F672E4", "F672E5", "F672E6", "F673E0", "F673E1", "F673E2", "F673E3", "F673E4", "F673E5", "F673E6", "F673E7", "F673E8", "F674E0", "F674E1", "F674E2", "F674E3", "F674E4", "F674E5", "F674E6", "F674E7", "F674E8", "F674E9", "F674E10", "F674E11", "F674E12", "F674E13", "F675E0", "F675E1", "F675E2", "F675E3", "F675E4", "F676E0", "F676E1", "F676E2", "F676E3", "F676E4", "F676E5", "F676E6", "F677E0", "F677E1", "F678E0", "F678E1", "F678E2", "F679E0", "F679E1", "F679E2", "F679E3", "F679E4", "F679E5", "F680E0", "F680E1", "F680E2", "F680E3", "F680E4", "F681E0", "F681E1", "F681E2", "F681E3", "F681E4", "F681E5", "F681E6", "F681E7", "F681E8", "F681E9", "F681E10", "F681E11", "F681E12", "F681E13", "F681E14", "F681E15", "F681E16", "F681E17", "F681E18", "F681E19", "F681E20", "F681E21", "F681E22", "F681E23", "F681E24", "F681E25", "F681E26", "F681E27", "F681E28", "F681E29", "F681E30", "F681E31", "F681E32", "F681E33", "F681E34", "F681E35", "F681E36", "F681E37", "F681E38", "F681E39", "F681E40", "F681E41", "F681E42", "F681E43", "F681E44", "F681E45", "F681E46", "F681E47", "F681E48", "F681E49", "F681E50", "F681E51", "F681E52", "F681E53", "F681E54", "F681E55", "F681E56", "F681E57", "F681E58", "F681E59", "F681E60", "F681E61", "F681E62", "F681E63", "F681E64", "F681E65", "F681E66", "F681E67", "F681E68", "F681E69", "F681E70", "F681E71", "F681E72", "F681E73", "F681E74", "F681E75", "F681E76", "F681E77", "F681E78", "F681E79", "F681E80", "F681E81", "F681E82", "F681E83", "F681E84", "F681E85", "F681E86", "F681E87", "F681E88", "F681E89", "F681E90", "F681E91", "F681E92", "F681E93", "F681E94", "F681E95", "F681E96", "F681E97", "F681E98", "F681E99", "F681E100", "F681E101", "F682E0", "F683E0", "F683E1", "F684E0", "F684E1", "F684E2", "F684E3", "F684E4", "F684E5", "F684E6", "F685E0", "F686E0", "F686E1", "F687E0", "F688E0", "F689E0", "F689E1", "F689E2", "F689E3", "F689E4", "F689E5", "F689E6", "F689E7", "F690E0", "F690E1", "F690E2", "F690E3", "F691E0", "F692E0", "F693E0", "F693E1", "F693E2", "F693E3", "F693E4", "F693E5", "F693E6", "F694E0", "F694E1", "F694E2", "F694E3", "F694E4", "F694E5", "F694E6", "F694E7", "F694E8", "F694E9", "F694E10", "F694E11", "F694E12", "F694E13", "F694E14", "F694E15", "F694E16", "F694E17", "F695E0", "F695E1", "F696E0", "F696E1", "F696E2", "F696E3", "F696E4", "F696E5", "F697E0", "F697E1", "F697E2", "F697E3", "F697E4", "F698E0", "F698E1", "F699E0", "F699E1", "F699E2", "F699E3", "F699E4", "F699E5", "F699E6", "F699E7", "F699E8", "F699E9", "F699E10", "F700E0", "F700E1", "F700E2", "F700E3", "F700E4", "F700E5", "F700E6", "F700E7", "F700E8", "F700E9", "F700E10", "F700E11", "F700E12", "F701E0", "F701E1", "F702E0", "F702E1", "F702E2", "F702E3", "F702E4", "F702E5", "F703E0", "F703E1", "F703E2", "F703E3", "F703E4", "F703E5", "F703E6", "F704E0", "F704E1", "F704E2", "F704E3", "F705E0", "F705E1", "F705E2", "F705E3", "F706E0", "F706E1", "F706E2", "F706E3", "F706E4", "F706E5", "F707E0", "F707E1", "F708E0", "F708E1", "F708E2", "F708E3", "F708E4", "F708E5", "F708E6", "F709E0", "F709E1", "F709E2", "F709E3", "F709E4", "F709E5", "F710E0", "F710E1", "F711E0", "F711E1", "F711E2", "F711E3", "F711E4", "F711E5", "F711E6", "F711E7", "F711E8", "F711E9", "F712E0", "F712E1", "F712E2", "F712E3", "F712E4", "F712E5", "F712E6", "F712E7", "F712E8", "F712E9", "F713E0", "F713E1", "F713E2", "F713E3", "F713E4", "F713E5", "F713E6", "F713E7", "F713E8", "F713E9", "F713E10", "F713E11", "F713E12", "F713E13", "F713E14", "F714E0", "F714E1", "F714E2", "F714E3", "F714E4", "F714E5", "F714E6", "F714E7", "F714E8", "F715E0", "F715E1", "F715E2", "F715E3", "F715E4", "F715E5", "F715E6", "F715E7", "F716E0", "F716E1", "F716E2", "F716E3", "F717E0", "F717E1", "F717E2", "F717E3", "F717E4", "F718E0", "F718E1", "F718E2", "F718E3", "F719E0", "F719E1", "F719E2", "F720E0", "F720E1", "F720E2", "F720E3", "F720E4", "F720E5", "F720E6", "F721E0", "F721E1", "F721E2", "F721E3", "F722E0", "F722E1", "F722E2", "F722E3", "F723E0", "F723E1", "F723E2", "F723E3", "F723E4", "F723E5", "F723E6", "F723E7", "F723E8", "F723E9", "F723E10", "F723E11", "F723E12", "F723E13", "F723E14", "F723E15", "F723E16", "F723E17", "F723E18", "F723E19", "F723E20", "F723E21", "F723E22", "F723E23", "F723E24", "F723E25", "F723E26", "F723E27", "F724E0", "F724E1", "F724E2", "F724E3", "F724E4", "F724E5", "F724E6", "F725E0", "F725E1", "F725E2", "F725E3", "F725E4", "F725E5", "F725E6", "F725E7", "F725E8", "F725E9", "F725E10", "F725E11", "F726E0", "F726E1", "F726E2", "F726E3", "F726E4", "F726E5", "F726E6", "F726E7", "F726E8", "F726E9", "F727E0", "F727E1", "F727E2", "F727E3", "F728E0", "F728E1", "F728E2", "F728E3", "F728E4", "F728E5", "F728E6", "F728E7", "F728E8", "F729E0", "F729E1", "F729E2", "F729E3", "F729E4", "F729E5", "F730E0", "F730E1", "F730E2", "F730E3", "F730E4", "F730E5", "F730E6", "F730E7", "F731E0", "F731E1", "F731E2", "F731E3", "F731E4", "F731E5", "F731E6", "F731E7", "F732E0", "F732E1", "F733E0", "F733E1", "F733E2", "F733E3", "F733E4", "F734E0", "F734E1", "F734E2", "F735E0", "F735E1", "F735E2", "F735E3", "F735E4", "F735E5", "F735E6", "F735E7", "F735E8", "F735E9", "F735E10", "F735E11", "F736E0", "F737E0", "F738E0", "F738E1", "F738E2", "F738E3", "F739E0", "F739E1", "F739E2", "F739E3", "F739E4", "F739E5", "F739E6", "F740E0", "F740E1", "F741E0", "F741E1", "F741E2", "F741E3", "F742E0", "F742E1", "F742E2", "F742E3", "F742E4", "F742E5", "F742E6", "F742E7", "F742E8", "F742E9", "F743E0", "F743E1", "F743E2", "F743E3", "F743E4", "F743E5", "F744E0", "F744E1", "F744E2", "F744E3", "F744E4", "F744E5", "F744E6", "F745E0", "F745E1", "F745E2", "F745E3", "F746E0", "F746E1", "F746E2", "F746E3", "F747E0", "F747E1", "F747E2", "F748E0", "F748E1", "F748E2", "F748E3", "F749E0", "F749E1", "F750E0", "F750E1", "F750E2", "F750E3", "F751E0", "F752E0", "F752E1", "F752E2", "F752E3", "F752E4", "F752E5", "F752E6", "F753E0", "F753E1", "F753E2", "F753E3", "F754E0", "F754E1", "F755E0", "F755E1", "F755E2", "F755E3", "F755E4", "F756E0", "F756E1", "F756E2", "F756E3", "F756E4", "F756E5", "F756E6", "F756E7", "F756E8", "F756E9", "F756E10", "F756E11", "F756E12", "F756E13", "F756E14", "F756E15", "F756E16", "F757E0", "F757E1", "F757E2", "F757E3", "F757E4", "F757E5", "F758E0", "F758E1", "F758E2", "F758E3", "F758E4", "F758E5", "F758E6", "F758E7", "F759E0", "F759E1", "F759E2", "F759E3", "F759E4", "F759E5", "F760E0", "F760E1", "F760E2", "F760E3", "F760E4", "F760E5", "F761E0", "F761E1", "F761E2", "F761E3", "F761E4", "F762E0", "F762E1", "F762E2", "F762E3", "F762E4", "F762E5", "F763E0", "F764E0", "F764E1", "F765E0", "F765E1", "F765E2", "F765E3", "F765E4", "F765E5", "F766E0", "F766E1", "F766E2", "F767E0", "F767E1", "F767E2", "F767E3", "F768E0", "F769E0", "F769E1", "F769E2", "F769E3", "F769E4", "F769E5", "F769E6", "F769E7", "F769E8", "F770E0", "F770E1", "F770E2", "F770E3", "F770E4", "F770E5", "F770E6", "F770E7", "F770E8", "F770E9", "F770E10", "F770E11", "F770E12", "F770E13", "F770E14", "F770E15", "F770E16", "F771E0", "F771E1", "F771E2", "F771E3", "F771E4", "F772E0", "F772E1", "F772E2", "F772E3", "F772E4", "F773E0", "F773E1", "F773E2", "F773E3", "F773E4", "F773E5", "F773E6", "F773E7", "F773E8", "F773E9", "F773E10", "F773E11", "F773E12", "F773E13", "F774E0", "F774E1", "F774E2", "F774E3", "F774E4", "F774E5", "F774E6", "F774E7", "F774E8", "F774E9", "F774E10", "F774E11", "F774E12", "F774E13", "F774E14", "F774E15", "F774E16", "F774E17", "F774E18", "F775E0", "F775E1", "F775E2", "F775E3", "F775E4", "F775E5", "F775E6", "F775E7", "F775E8", "F775E9", "F776E0", "F776E1", "F776E2", "F776E3", "F776E4", "F776E5", "F776E6", "F777E0", "F777E1", "F777E2", "F777E3", "F777E4", "F777E5", "F777E6", "F777E7", "F777E8", "F777E9", "F777E10", "F777E11", "F777E12", "F777E13", "F778E0", "F778E1", "F778E2", "F778E3", "F778E4", "F779E0", "F779E1", "F779E2", "F779E3", "F780E0", "F780E1", "F780E2", "F780E3", "F781E0", "F781E1", "F781E2", "F781E3", "F781E4", "F781E5", "F781E6", "F781E7", "F782E0", "F782E1", "F782E2", "F782E3", "F783E0", "F783E1", "F783E2", "F783E3", "F783E4", "F784E0", "F784E1", "F784E2", "F784E3", "F784E4", "F784E5", "F784E6", "F784E7", "F785E0", "F785E1", "F786E0", "F786E1", "F786E2", "F786E3", "F786E4", "F786E5", "F786E6", "F786E7", "F786E8", "F786E9", "F786E10", "F786E11", "F786E12", "F786E13", "F787E0", "F787E1", "F787E2", "F787E3", "F788E0", "F789E0", "F789E1", "F789E2", "F789E3", "F789E4", "F789E5", "F790E0", "F790E1", "F791E0", "F791E1", "F791E2", "F791E3", "F792E0", "F792E1", "F792E2", "F792E3", "F792E4", "F792E5", "F792E6", "F792E7", "F792E8", "F792E9", "F792E10", "F792E11", "F793E0", "F793E1", "F793E2", "F793E3", "F793E4", "F793E5", "F793E6", "F794E0", "F795E0", "F795E1", "F795E2", "F795E3", "F795E4", "F796E0", "F796E1", "F796E2", "F796E3", "F796E4", "F796E5", "F797E0", "F797E1", "F797E2", "F797E3", "F797E4", "F797E5", "F797E6", "F797E7", "F797E8", "F797E9", "F797E10", "F797E11", "F797E12", "F797E13", "F797E14", "F797E15", "F797E16", "F797E17", "F797E18", "F797E19", "F797E20", "F797E21", "F798E0", "F798E1", "F798E2", "F798E3", "F798E4", "F798E5", "F798E6", "F798E7", "F798E8", "F799E0", "F799E1", "F799E2", "F799E3", "F799E4", "F799E5", "F799E6", "F799E7", "F799E8", "F799E9", "F799E10", "F800E0", "F800E1", "F800E2", "F800E3", "F800E4", "F800E5", "F800E6", "F800E7", "F800E8", "F801E0", "F801E1", "F801E2", "F801E3", "F802E0", "F802E1", "F802E2", "F803E0", "F803E1", "F803E2", "F803E3", "F804E0", "F804E1", "F804E2", "F804E3", "F804E4", "F805E0", "F805E1", "F805E2", "F805E3", "F805E4", "F805E5", "F805E6", "F805E7", "F805E8", "F805E9", "F806E0", "F806E1", "F806E2", "F806E3", "F806E4", "F806E5", "F806E6", "F806E7", "F806E8", "F806E9", "F806E10", "F806E11", "F806E12", "F807E0", "F807E1", "F807E2", "F808E0", "F808E1", "F808E2", "F808E3", "F809E0", "F809E1", "F809E2", "F809E3", "F810E0", "F810E1", "F810E2", "F810E3", "F810E4", "F811E0", "F811E1", "F811E2", "F811E3", "F811E4", "F811E5", "F811E6", "F811E7", "F811E8", "F811E9", "F811E10", "F812E0", "F812E1", "F812E2", "F812E3", "F812E4", "F812E5", "F812E6", "F812E7", "F813E0", "F813E1", "F813E2", "F813E3", "F814E0", "F814E1", "F814E2", "F814E3", "F814E4", "F814E5", "F814E6", "F814E7", "F814E8", "F814E9", "F814E10", "F815E0", "F815E1", "F815E2", "F815E3", "F815E4", "F816E0", "F816E1", "F816E2", "F816E3", "F816E4", "F816E5", "F816E6", "F816E7", "F816E8", "F816E9", "F816E10", "F817E0", "F817E1", "F818E0", "F819E0", "F820E0", "F820E1", "F820E2", "F820E3", "F820E4", "F820E5", "F820E6", "F820E7", "F821E0", "F821E1", "F821E2", "F821E3", "F821E4", "F822E0", "F822E1", "F822E2", "F822E3", "F822E4", "F822E5", "F823E0", "F823E1", "F823E2", "F823E3", "F823E4", "F823E5", "F824E0", "F824E1", "F824E2", "F825E0", "F825E1", "F825E2", "F826E0", "F827E0", "F827E1", "F827E2", "F827E3", "F828E0", "F828E1", "F828E2", "F828E3", "F828E4", "F828E5", "F828E6", "F828E7", "F829E0", "F829E1", "F829E2", "F829E3", "F829E4", "F829E5", "F829E6", "F830E0", "F830E1", "F830E2", "F830E3", "F830E4", "F831E0", "F831E1", "F831E2", "F831E3", "F832E0", "F832E1", "F832E2", "F832E3", "F832E4", "F832E5", "F833E0", "F833E1", "F833E2", "F833E3", "F833E4", "F833E5", "F833E6", "F833E7", "F834E0", "F834E1", "F834E2", "F834E3", "F834E4", "F834E5", "F835E0", "F835E1", "F835E2", "F835E3", "F835E4", "F835E5", "F835E6", "F835E7", "F835E8", "F835E9", "F835E10", "F835E11", "F835E12", "F836E0", "F836E1", "F836E2", "F837E0", "F837E1", "F837E2", "F838E0", "F839E0", "F839E1", "F839E2", "F839E3", "F839E4", "F840E0", "F840E1", "F841E0", "F841E1", "F841E2", "F841E3", "F841E4", "F841E5", "F841E6", "F841E7", "F841E8", "F841E9", "F841E10", "F841E11", "F841E12", "F841E13", "F842E0", "F842E1", "F842E2", "F843E0", "F843E1", "F843E2", "F843E3", "F843E4", "F844E0", "F844E1", "F844E2", "F845E0", "F845E1", "F846E0", "F846E1", "F846E2", "F846E3", "F846E4", "F847E0", "F848E0", "F849E0", "F849E1", "F849E2", "F849E3", "F849E4", "F850E0", "F850E1", "F851E0", "F851E1", "F851E2", "F851E3", "F851E4", "F852E0", "F852E1", "F852E2", "F852E3", "F853E0", "F853E1", "F853E2", "F853E3", "F853E4", "F853E5", "F853E6", "F853E7", "F853E8", "F853E9", "F853E10", "F853E11", "F853E12", "F853E13", "F853E14", "F853E15", "F853E16", "F854E0", "F854E1", "F854E2", "F854E3", "F855E0", "F855E1", "F855E2", "F855E3", "F855E4", "F855E5", "F855E6", "F855E7", "F855E8", "F856E0", "F856E1", "F856E2", "F857E0", "F857E1", "F857E2", "F857E3", "F857E4", "F857E5", "F857E6", "F858E0", "F858E1", "F858E2", "F859E0", "F859E1", "F859E2", "F859E3", "F859E4", "F860E0", "F860E1", "F860E2", "F861E0", "F862E0", "F862E1", "F862E2", "F862E3", "F862E4", "F862E5", "F863E0", "F863E1", "F863E2", "F863E3", "F863E4", "F863E5", "F863E6", "F863E7", "F863E8", "F864E0", "F864E1", "F865E0", "F865E1", "F865E2", "F865E3", "F865E4", "F866E0", "F866E1", "F866E2", "F866E3", "F867E0", "F867E1", "F867E2", "F868E0", "F868E1", "F868E2", "F869E0", "F870E0", "F870E1", "F871E0", "F871E1", "F871E2", "F871E3", "F871E4", "F871E5", "F872E0", "F872E1", "F873E0", "F873E1", "F873E2", "F873E3", "F873E4", "F873E5", "F873E6", "F873E7", "F873E8", "F873E9", "F873E10", "F873E11", "F873E12", "F873E13", "F874E0", "F875E0", "F875E1", "F876E0", "F876E1", "F876E2", "F876E3", "F876E4", "F876E5", "F876E6", "F876E7", "F876E8", "F877E0", "F877E1", "F878E0", "F878E1", "F878E2", "F878E3", "F878E4", "F878E5", "F878E6", "F878E7", "F879E0", "F879E1", "F879E2", "F879E3", "F879E4", "F879E5", "F879E6", "F879E7", "F879E8", "F879E9", "F880E0", "F880E1", "F880E2", "F880E3", "F880E4", "F880E5", "F880E6", "F880E7", "F880E8", "F880E9", "F881E0", "F881E1", "F881E2", "F881E3", "F881E4", "F881E5", "F882E0", "F882E1", "F882E2", "F882E3", "F883E0", "F883E1", "F883E2", "F883E3", "F883E4", "F883E5", "F883E6", "F883E7", "F883E8", "F883E9", "F883E10", "F883E11", "F883E12", "F883E13", "F884E0", "F884E1", "F884E2", "F884E3", "F884E4", "F884E5", "F884E6", "F884E7", "F885E0", "F885E1", "F885E2", "F885E3", "F885E4", "F885E5", "F885E6", "F885E7", "F885E8", "F886E0", "F886E1", "F886E2", "F886E3", "F886E4", "F886E5", "F886E6", "F886E7", "F886E8", "F886E9", "F886E10", "F886E11", "F886E12", "F886E13", "F886E14", "F887E0", "F887E1", "F887E2", "F887E3", "F888E0", "F888E1", "F888E2", "F888E3", "F888E4", "F888E5", "F889E0", "F889E1", "F890E0", "F890E1", "F890E2", "F891E0", "F891E1", "F891E2", "F891E3", "F891E4", "F891E5", "F891E6", "F891E7", "F892E0", "F892E1", "F892E2", "F892E3", "F892E4", "F893E0", "F893E1", "F893E2", "F893E3", "F893E4", "F893E5", "F893E6", "F893E7", "F893E8", "F893E9", "F893E10", "F894E0", "F894E1", "F894E2", "F894E3", "F894E4", "F894E5", "F894E6", "F894E7", "F894E8", "F895E0", "F895E1", "F895E2", "F895E3", "F895E4", "F895E5", "F896E0", "F896E1", "F896E2", "F896E3", "F896E4", "F896E5", "F896E6", "F896E7", "F896E8", "F897E0", "F897E1", "F897E2", "F898E0", "F898E1", "F899E0", "F899E1", "F899E2", "F899E3", "F899E4", "F900E0", "F901E0", "F901E1", "F901E2", "F901E3", "F902E0", "F902E1", "F902E2", "F902E3", "F903E0", "F903E1", "F903E2", "F903E3", "F903E4", "F903E5", "F903E6", "F904E0", "F904E1", "F904E2", "F905E0", "F905E1", "F906E0", "F906E1", "F906E2", "F907E0", "F907E1", "F907E2", "F907E3", "F907E4", "F907E5", "F907E6", "F907E7", "F907E8", "F907E9", "F907E10", "F907E11", "F907E12", "F908E0", "F908E1", "F908E2", "F908E3", "F908E4", "F909E0", "F909E1", "F909E2", "F909E3", "F909E4", "F910E0", "F910E1", "F910E2", "F910E3", "F910E4", "F910E5", "F910E6", "F910E7", "F911E0", "F911E1", "F912E0", "F912E1", "F912E2", "F912E3", "F912E4", "F912E5", "F912E6", "F912E7", "F912E8", "F912E9", "F912E10", "F913E0", "F913E1", "F913E2", "F913E3", "F913E4", "F913E5", "F914E0", "F914E1", "F914E2", "F914E3", "F914E4", "F914E5", "F914E6", "F914E7", "F915E0", "F915E1", "F915E2", "F915E3", "F915E4", "F915E5", "F916E0", "F917E0", "F917E1", "F917E2", "F917E3", "F917E4", "F917E5", "F917E6", "F917E7", "F917E8", "F917E9", "F917E10", "F917E11", "F918E0", "F918E1", "F918E2", "F919E0", "F919E1", "F919E2", "F919E3", "F919E4", "F920E0", "F920E1", "F920E2", "F920E3", "F920E4", "F920E5", "F920E6", "F920E7", "F920E8", "F921E0", "F921E1", "F922E0", "F922E1", "F923E0", "F923E1", "F923E2", "F924E0", "F924E1", "F925E0", "F925E1", "F925E2", "F925E3", "F925E4", "F925E5", "F925E6", "F925E7", "F926E0", "F926E1", "F926E2", "F926E3", "F926E4", "F926E5", "F926E6", "F926E7", "F926E8", "F926E9", "F926E10", "F926E11", "F926E12", "F926E13", "F926E14", "F926E15", "F926E16", "F926E17", "F926E18", "F926E19", "F926E20", "F926E21", "F927E0", "F927E1", "F927E2", "F928E0", "F929E0", "F929E1", "F929E2", "F929E3", "F930E0", "F930E1", "F930E2", "F930E3", "F931E0", "F931E1", "F931E2", "F931E3", "F931E4", "F932E0", "F932E1", "F932E2", "F932E3", "F932E4", "F933E0", "F933E1", "F933E2", "F933E3", "F933E4", "F933E5", "F933E6", "F933E7", "F933E8", "F934E0", "F935E0", "F935E1", "F935E2", "F935E3", "F935E4", "F935E5", "F936E0", "F936E1", "F936E2", "F936E3", "F936E4", "F937E0", "F937E1", "F937E2", "F937E3", "F937E4", "F937E5", "F938E0", "F938E1", "F938E2", "F938E3", "F938E4", "F938E5", "F938E6", "F938E7", "F938E8", "F938E9", "F938E10", "F938E11", "F938E12", "F938E13", "F938E14", "F938E15", "F938E16", "F938E17", "F938E18", "F938E19", "F938E20", "F938E21", "F939E0", "F939E1", "F939E2", "F939E3", "F940E0", "F940E1", "F940E2", "F940E3", "F940E4", "F940E5", "F941E0", "F941E1", "F942E0", "F942E1", "F943E0", "F943E1", "F943E2", "F943E3", "F943E4", "F943E5", "F943E6", "F943E7", "F943E8", "F943E9", "F943E10", "F943E11", "F943E12", "F943E13", "F943E14", "F944E0", "F944E1", "F944E2", "F944E3", "F944E4", "F945E0", "F945E1", "F945E2", "F945E3", "F945E4", "F946E0", "F946E1", "F946E2", "F946E3", "F946E4", "F946E5", "F946E6", "F947E0", "F947E1", "F947E2", "F947E3", "F947E4", "F948E0", "F948E1", "F948E2", "F948E3", "F948E4", "F949E0", "F949E1", "F949E2", "F949E3", "F949E4", "F949E5", "F949E6", "F949E7", "F950E0", "F950E1", "F950E2", "F950E3", "F950E4", "F950E5", "F950E6", "F950E7", "F951E0", "F951E1", "F951E2", "F951E3", "F951E4", "F951E5", "F951E6", "F951E7", "F951E8", "F952E0", "F952E1", "F952E2", "F953E0", "F953E1", "F953E2", "F953E3", "F953E4", "F953E5", "F953E6", "F953E7", "F953E8", "F953E9", "F953E10", "F953E11", "F953E12", "F953E13", "F953E14", "F953E15", "F953E16", "F953E17", "F953E18", "F953E19", "F953E20", "F953E21", "F953E22", "F953E23", "F953E24", "F953E25", "F953E26", "F953E27", "F953E28", "F953E29", "F953E30", "F953E31", "F953E32", "F953E33", "F953E34", "F953E35", "F953E36", "F953E37", "F953E38", "F953E39", "F953E40", "F953E41", "F953E42", "F953E43", "F953E44", "F953E45", "F953E46", "F953E47", "F953E48", "F953E49", "F953E50", "F953E51", "F953E52", "F953E53", "F953E54", "F953E55", "F953E56", "F953E57", "F953E58", "F953E59", "F953E60", "F953E61", "F953E62", "F953E63", "F953E64", "F953E65", "F953E66", "F953E67", "F953E68", "F954E0", "F954E1", "F954E2", "F954E3", "F955E0", "F955E1", "F955E2", "F955E3", "F956E0", "F956E1", "F956E2", "F956E3", "F956E4", "F957E0", "F957E1", "F957E2", "F957E3", "F957E4", "F957E5", "F957E6", "F957E7", "F957E8", "F957E9", "F957E10", "F957E11", "F957E12", "F957E13", "F957E14", "F957E15", "F957E16", "F957E17", "F957E18", "F957E19", "F957E20", "F957E21", "F958E0", "F958E1", "F958E2", "F959E0", "F959E1", "F959E2", "F959E3", "F960E0", "F960E1", "F960E2", "F961E0", "F961E1", "F961E2", "F961E3", "F961E4", "F961E5", "F961E6", "F961E7", "F961E8", "F961E9", "F961E10", "F961E11", "F961E12", "F961E13", "F962E0", "F962E1", "F963E0", "F963E1", "F963E2", "F964E0", "F964E1", "F964E2", "F964E3", "F964E4", "F964E5", "F964E6", "F965E0", "F965E1", "F965E2", "F965E3", "F966E0", "F966E1", "F966E2", "F966E3", "F966E4", "F966E5", "F966E6", "F967E0", "F968E0", "F968E1", "F968E2", "F968E3", "F968E4", "F968E5", "F968E6", "F969E0", "F969E1", "F969E2", "F969E3", "F970E0", "F970E1", "F970E2", "F971E0", "F971E1", "F971E2", "F971E3", "F971E4", "F971E5", "F971E6", "F972E0", "F972E1", "F972E2", "F973E0", "F973E1", "F973E2", "F973E3", "F974E0", "F974E1", "F974E2", "F975E0", "F975E1", "F975E2", "F975E3", "F975E4", "F975E5", "F975E6", "F975E7", "F975E8", "F975E9", "F975E10", "F975E11", "F975E12", "F975E13", "F975E14", "F975E15", "F975E16", "F975E17", "F975E18", "F975E19", "F975E20", "F975E21", "F975E22", "F975E23", "F975E24", "F975E25", "F975E26", "F975E27", "F976E0", "F976E1", "F976E2", "F977E0", "F977E1", "F977E2", "F977E3", "F977E4", "F977E5", "F977E6", "F978E0", "F978E1", "F978E2", "F979E0", "F979E1", "F979E2", "F980E0", "F980E1", "F980E2", "F981E0", "F981E1", "F981E2", "F981E3", "F981E4", "F981E5", "F981E6", "F981E7", "F982E0", "F982E1", "F982E2", "F983E0", "F983E1", "F983E2", "F983E3", "F984E0", "F984E1", "F984E2", "F984E3", "F984E4", "F984E5", "F984E6", "F984E7", "F984E8", "F984E9", "F984E10", "F984E11", "F984E12", "F984E13", "F984E14", "F984E15", "F985E0", "F985E1", "F986E0", "F986E1", "F987E0", "F987E1", "F987E2", "F988E0", "F988E1", "F988E2", "F988E3", "F989E0", "F989E1", "F989E2", "F989E3", "F989E4", "F989E5", "F990E0", "F990E1", "F990E2", "F990E3", "F990E4", "F990E5", "F990E6", "F990E7", "F990E8", "F990E9", "F990E10", "F990E11", "F990E12", "F990E13", "F991E0", "F991E1", "F991E2", "F991E3", "F991E4", "F992E0", "F992E1", "F992E2", "F992E3", "F992E4", "F992E5", "F992E6", "F992E7", "F993E0", "F993E1", "F993E2", "F993E3", "F993E4", "F993E5", "F994E0", "F994E1", "F994E2", "F994E3", "F994E4", "F994E5", "F994E6", "F994E7", "F994E8", "F994E9", "F994E10", "F994E11", "F994E12", "F994E13", "F994E14", "F994E15", "F994E16", "F994E17", "F995E0", "F995E1", "F995E2", "F995E3", "F996E0", "F996E1", "F996E2", "F996E3", "F996E4", "F997E0", "F997E1", "F997E2", "F997E3", "F997E4", "F997E5", "F997E6", "F997E7", "F997E8", "F997E9", "F997E10", "F997E11", "F997E12", "F997E13", "F998E0", "F999E0", "F999E1", "F999E2", "F999E3", "F999E4", "F999E5", "F999E6", "F999E7", "F999E8", "F999E9", "F999E10", "F999E11", "F1000E0", "F1000E1", "F1000E2", "F1000E3", "F1000E4", "F1000E5", "F1000E6", "F1000E7", "F1000E8", "F1000E9", "F1000E10", "F1000E11", "F1000E12", "F1000E13", "F1001E0", "F1001E1", "F1001E2", "F1001E3", "F1002E0", "F1002E1", "F1002E2", "F1003E0", "F1003E1", "F1003E2", "F1003E3", "F1003E4", "F1003E5", "F1004E0", "F1004E1", "F1004E2", "F1004E3", "F1004E4", "F1004E5", "F1004E6", "F1004E7", "F1004E8", "F1004E9", "F1004E10", "F1004E11", "F1004E12", "F1004E13", "F1005E0", "F1005E1", "F1006E0", "F1006E1", "F1006E2", "F1007E0", "F1007E1", "F1008E0", "F1008E1", "F1009E0", "F1010E0", "F1010E1", "F1010E2", "F1010E3", "F1011E0", "F1011E1", "F1012E0", "F1012E1", "F1012E2", "F1012E3", "F1012E4", "F1012E5", "F1012E6", "F1012E7", "F1012E8", "F1012E9", "F1012E10", "F1012E11", "F1012E12", "F1012E13", "F1012E14", "F1012E15", "F1012E16", "F1012E17", "F1012E18", "F1012E19", "F1012E20", "F1012E21", "F1012E22", "F1012E23", "F1012E24", "F1012E25", "F1012E26", "F1012E27", "F1012E28", "F1012E29", "F1012E30", "F1012E31", "F1012E32", "F1012E33", "F1012E34", "F1012E35", "F1012E36", "F1012E37", "F1012E38", "F1012E39", "F1012E40", "F1012E41", "F1012E42", "F1012E43", "F1012E44", "F1012E45", "F1012E46", "F1012E47", "F1012E48", "F1012E49", "F1012E50", "F1012E51", "F1012E52", "F1012E53", "F1012E54", "F1012E55", "F1012E56", "F1012E57", "F1012E58", "F1012E59", "F1012E60", "F1012E61", "F1012E62", "F1012E63", "F1012E64", "F1012E65", "F1012E66", "F1012E67", "F1012E68", "F1012E69", "F1012E70", "F1012E71", "F1012E72", "F1012E73", "F1012E74", "F1012E75", "F1012E76", "F1012E77", "F1012E78", "F1012E79", "F1012E80", "F1012E81", "F1012E82", "F1012E83", "F1012E84", "F1012E85", "F1012E86", "F1012E87", "F1012E88", "F1012E89", "F1012E90", "F1012E91", "F1012E92", "F1012E93", "F1012E94", "F1012E95", "F1012E96", "F1012E97", "F1012E98", "F1012E99", "F1013E0", "F1013E1", "F1013E2", "F1013E3", "F1013E4", "F1014E0", "F1014E1", "F1015E0", "F1015E1", "F1015E2", "F1015E3", "F1015E4", "F1015E5", "F1016E0", "F1017E0", "F1017E1", "F1017E2", "F1017E3", "F1017E4", "F1017E5", "F1017E6", "F1017E7", "F1017E8", "F1017E9", "F1017E10", "F1017E11", "F1017E12", "F1017E13", "F1017E14", "F1017E15", "F1017E16", "F1017E17", "F1017E18", "F1017E19", "F1017E20", "F1017E21", "F1017E22", "F1017E23", "F1017E24", "F1017E25", "F1018E0", "F1018E1", "F1018E2", "F1018E3", "F1018E4", "F1018E5", "F1018E6", "F1018E7", "F1018E8", "F1018E9", "F1018E10", "F1018E11", "F1018E12", "F1018E13", "F1018E14", "F1018E15", "F1018E16", "F1018E17", "F1019E0", "F1020E0", "F1020E1", "F1020E2", "F1020E3", "F1020E4", "F1020E5", "F1020E6", "F1020E7", "F1020E8", "F1020E9", "F1021E0", "F1021E1", "F1021E2", "F1021E3", "F1021E4", "F1022E0", "F1022E1", "F1022E2", "F1022E3", "F1023E0", "F1023E1", "F1023E2", "F1023E3", "F1023E4", "F1023E5", "F1024E0", "F1024E1", "F1024E2", "F1024E3", "F1024E4", "F1024E5", "F1024E6", "F1024E7", "F1025E0", "F1025E1", "F1025E2", "F1026E0", "F1026E1", "F1026E2", "F1026E3", "F1026E4", "F1026E5", "F1026E6", "F1026E7", "F1026E8", "F1026E9", "F1026E10", "F1026E11", "F1027E0", "F1027E1", "F1028E0", "F1028E1", "F1029E0", "F1029E1", "F1029E2", "F1029E3", "F1029E4", "F1030E0", "F1030E1", "F1030E2", "F1030E3", "F1030E4", "F1030E5", "F1030E6", "F1030E7", "F1030E8", "F1030E9", "F1031E0", "F1031E1", "F1031E2", "F1031E3", "F1031E4", "F1032E0", "F1032E1", "F1032E2", "F1032E3", "F1032E4", "F1032E5", "F1032E6", "F1032E7", "F1033E0", "F1033E1", "F1033E2", "F1033E3", "F1033E4", "F1033E5", "F1033E6", "F1033E7", "F1033E8", "F1033E9", "F1033E10", "F1033E11", "F1033E12", "F1033E13", "F1033E14", "F1033E15", "F1034E0", "F1034E1", "F1034E2", "F1034E3", "F1034E4", "F1034E5", "F1034E6", "F1034E7", "F1034E8", "F1034E9", "F1034E10", "F1034E11", "F1034E12", "F1034E13", "F1034E14", "F1034E15", "F1034E16", "F1034E17", "F1034E18", "F1035E0", "F1035E1", "F1035E2", "F1035E3", "F1035E4", "F1035E5", "F1036E0", "F1036E1", "F1037E0", "F1037E1", "F1037E2", "F1037E3", "F1037E4", "F1037E5", "F1038E0", "F1038E1", "F1038E2", "F1038E3", "F1039E0", "F1039E1", "F1039E2", "F1039E3", "F1039E4", "F1040E0", "F1040E1", "F1040E2", "F1040E3", "F1040E4", "F1041E0", "F1041E1", "F1042E0", "F1042E1", "F1042E2", "F1042E3", "F1042E4", "F1042E5", "F1043E0", "F1043E1", "F1043E2", "F1043E3", "F1043E4", "F1044E0", "F1044E1", "F1044E2", "F1044E3", "F1045E0", "F1045E1", "F1045E2", "F1045E3", "F1045E4", "F1045E5", "F1046E0", "F1046E1", "F1046E2", "F1046E3", "F1046E4", "F1047E0", "F1047E1", "F1047E2", "F1047E3", "F1047E4", "F1047E5", "F1048E0", "F1048E1", "F1048E2", "F1048E3", "F1048E4", "F1048E5", "F1048E6", "F1048E7", "F1048E8", "F1049E0", "F1049E1", "F1049E2", "F1049E3", "F1050E0", "F1050E1", "F1050E2", "F1051E0", "F1051E1", "F1051E2", "F1051E3", "F1051E4", "F1051E5", "F1051E6", "F1052E0", "F1052E1", "F1052E2", "F1053E0", "F1053E1", "F1053E2", "F1053E3", "F1053E4", "F1054E0", "F1054E1", "F1054E2", "F1054E3", "F1055E0", "F1055E1", "F1055E2", "F1055E3", "F1055E4", "F1055E5", "F1055E6", "F1055E7", "F1056E0", "F1056E1", "F1056E2", "F1056E3", "F1056E4", "F1057E0", "F1058E0", "F1058E1", "F1058E2", "F1058E3", "F1058E4", "F1058E5", "F1059E0", "F1059E1", "F1059E2", "F1060E0", "F1060E1", "F1060E2", "F1060E3", "F1061E0", "F1061E1", "F1062E0", "F1062E1", "F1062E2", "F1062E3", "F1062E4", "F1062E5", "F1062E6", "F1062E7", "F1062E8", "F1062E9", "F1063E0", "F1063E1", "F1063E2", "F1063E3", "F1064E0", "F1064E1", "F1064E2", "F1064E3", "F1064E4", "F1064E5", "F1064E6", "F1064E7", "F1064E8", "F1064E9", "F1064E10", "F1064E11", "F1065E0", "F1065E1", "F1065E2", "F1065E3", "F1065E4", "F1065E5", "F1065E6", "F1065E7", "F1065E8", "F1065E9", "F1065E10", "F1065E11", "F1065E12", "F1066E0", "F1066E1", "F1066E2", "F1066E3", "F1066E4", "F1066E5", "F1066E6", "F1067E0", "F1067E1", "F1067E2", "F1067E3", "F1067E4", "F1067E5", "F1068E0", "F1068E1", "F1068E2", "F1068E3", "F1068E4", "F1069E0", "F1069E1", "F1069E2", "F1069E3", "F1069E4", "F1069E5", "F1070E0", "F1070E1", "F1070E2", "F1070E3", "F1070E4", "F1070E5", "F1071E0", "F1071E1", "F1071E2", "F1071E3", "F1071E4", "F1072E0", "F1072E1", "F1072E2", "F1072E3", "F1072E4", "F1072E5", "F1072E6", "F1072E7", "F1073E0", "F1073E1", "F1073E2", "F1073E3", "F1073E4", "F1073E5", "F1073E6", "F1073E7", "F1074E0", "F1075E0", "F1075E1", "F1075E2", "F1075E3", "F1075E4", "F1076E0", "F1076E1", "F1076E2", "F1076E3", "F1076E4", "F1076E5", "F1076E6", "F1076E7", "F1076E8", "F1076E9", "F1076E10", "F1076E11", "F1076E12", "F1076E13", "F1077E0", "F1078E0", "F1078E1", "F1078E2", "F1078E3", "F1079E0", "F1079E1", "F1079E2", "F1079E3", "F1079E4", "F1079E5", "F1079E6", "F1080E0", "F1080E1", "F1080E2", "F1080E3", "F1080E4", "F1081E0", "F1081E1", "F1081E2", "F1081E3", "F1081E4", "F1081E5", "F1082E0", "F1082E1", "F1082E2", "F1082E3", "F1082E4", "F1082E5", "F1082E6", "F1082E7", "F1082E8", "F1082E9", "F1082E10", "F1082E11", "F1082E12", "F1082E13", "F1083E0", "F1083E1", "F1084E0", "F1084E1", "F1084E2", "F1084E3", "F1084E4", "F1084E5", "F1084E6", "F1084E7", "F1085E0", "F1085E1", "F1085E2", "F1085E3", "F1085E4", "F1086E0", "F1086E1", "F1086E2", "F1086E3", "F1086E4", "F1086E5", "F1087E0", "F1087E1", "F1087E2", "F1087E3", "F1087E4", "F1087E5", "F1087E6", "F1088E0", "F1089E0", "F1089E1", "F1089E2", "F1089E3", "F1089E4", "F1089E5", "F1089E6", "F1089E7", "F1089E8", "F1089E9", "F1090E0", "F1090E1", "F1090E2", "F1090E3", "F1090E4", "F1090E5", "F1090E6", "F1090E7", "F1090E8", "F1090E9", "F1090E10", "F1090E11", "F1090E12", "F1090E13", "F1090E14", "F1090E15", "F1090E16", "F1090E17", "F1090E18", "F1090E19", "F1090E20", "F1090E21", "F1090E22", "F1090E23", "F1091E0", "F1091E1", "F1091E2", "F1091E3", "F1092E0", "F1092E1", "F1092E2", "F1092E3", "F1092E4", "F1092E5", "F1092E6", "F1092E7", "F1092E8", "F1093E0", "F1094E0", "F1094E1", "F1094E2", "F1094E3", "F1094E4", "F1094E5", "F1094E6", "F1095E0", "F1095E1", "F1095E2", "F1096E0", "F1096E1", "F1097E0", "F1098E0", "F1098E1", "F1099E0", "F1099E1", "F1099E2", "F1099E3", "F1100E0", "F1100E1", "F1100E2", "F1100E3", "F1100E4", "F1100E5", "F1100E6", "F1100E7", "F1100E8", "F1100E9", "F1100E10", "F1101E0", "F1101E1", "F1101E2", "F1101E3", "F1101E4", "F1101E5", "F1102E0", "F1102E1", "F1102E2", "F1102E3", "F1102E4", "F1102E5", "F1102E6", "F1102E7", "F1102E8", "F1102E9", "F1102E10", "F1102E11", "F1103E0", "F1103E1", "F1103E2", "F1103E3", "F1104E0", "F1104E1", "F1105E0", "F1105E1", "F1105E2", "F1105E3", "F1105E4", "F1105E5", "F1106E0", "F1106E1", "F1106E2", "F1106E3", "F1107E0", "F1107E1", "F1107E2", "F1107E3", "F1107E4", "F1107E5", "F1107E6", "F1107E7", "F1107E8", "F1107E9", "F1108E0", "F1108E1", "F1108E2", "F1109E0", "F1109E1", "F1109E2", "F1109E3", "F1109E4", "F1109E5", "F1109E6", "F1109E7", "F1110E0", "F1110E1", "F1110E2", "F1110E3", "F1110E4", "F1110E5", "F1110E6", "F1110E7", "F1110E8", "F1110E9", "F1110E10", "F1111E0", "F1111E1", "F1111E2", "F1111E3", "F1111E4", "F1111E5", "F1111E6", "F1111E7", "F1111E8", "F1111E9", "F1111E10", "F1111E11", "F1111E12", "F1111E13", "F1111E14", "F1112E0", "F1112E1", "F1112E2", "F1112E3", "F1113E0", "F1113E1", "F1113E2", "F1113E3", "F1113E4", "F1113E5", "F1114E0", "F1114E1", "F1114E2", "F1114E3", "F1114E4", "F1114E5", "F1115E0", "F1115E1", "F1115E2", "F1115E3", "F1116E0", "F1117E0", "F1117E1", "F1118E0", "F1118E1", "F1118E2", "F1118E3", "F1118E4", "F1119E0", "F1119E1", "F1119E2", "F1119E3", "F1120E0", "F1120E1", "F1120E2", "F1121E0", "F1122E0", "F1122E1", "F1122E2", "F1122E3", "F1122E4", "F1123E0", "F1123E1", "F1123E2", "F1123E3", "F1123E4", "F1123E5", "F1123E6", "F1123E7", "F1123E8", "F1123E9", "F1123E10", "F1123E11", "F1123E12", "F1123E13", "F1123E14", "F1123E15", "F1123E16", "F1123E17", "F1123E18", "F1123E19", "F1123E20", "F1123E21", "F1123E22", "F1123E23", "F1123E24", "F1124E0", "F1124E1", "F1124E2", "F1124E3", "F1124E4", "F1124E5", "F1124E6", "F1124E7", "F1124E8", "F1125E0", "F1125E1", "F1125E2", "F1125E3", "F1125E4", "F1125E5", "F1125E6", "F1125E7", "F1125E8", "F1125E9", "F1126E0", "F1127E0", "F1127E1", "F1128E0", "F1128E1", "F1128E2", "F1129E0", "F1129E1", "F1129E2", "F1129E3", "F1130E0", "F1130E1", "F1131E0", "F1131E1", "F1132E0", "F1132E1", "F1132E2", "F1132E3", "F1132E4", "F1132E5", "F1132E6", "F1132E7", "F1132E8", "F1132E9", "F1133E0", "F1133E1", "F1133E2", "F1133E3", "F1134E0", "F1134E1", "F1135E0", "F1135E1", "F1135E2", "F1136E0", "F1136E1", "F1136E2", "F1136E3", "F1137E0", "F1137E1", "F1137E2", "F1137E3", "F1137E4", "F1137E5", "F1137E6", "F1137E7", "F1137E8", "F1137E9", "F1137E10", "F1137E11", "F1137E12", "F1137E13", "F1137E14", "F1137E15", "F1137E16", "F1137E17", "F1137E18", "F1137E19", "F1137E20", "F1137E21", "F1137E22", "F1137E23", "F1137E24", "F1137E25", "F1137E26", "F1137E27", "F1137E28", "F1137E29", "F1137E30", "F1137E31", "F1137E32", "F1137E33", "F1137E34", "F1137E35", "F1137E36", "F1137E37", "F1137E38", "F1137E39", "F1137E40", "F1137E41", "F1137E42", "F1137E43", "F1137E44", "F1137E45", "F1138E0", "F1138E1", "F1138E2", "F1139E0", "F1139E1", "F1139E2", "F1139E3", "F1139E4", "F1140E0", "F1140E1", "F1140E2", "F1140E3", "F1140E4", "F1140E5", "F1141E0", "F1141E1", "F1141E2", "F1142E0", "F1142E1", "F1143E0", "F1143E1", "F1143E2", "F1143E3", "F1143E4", "F1144E0", "F1144E1", "F1144E2", "F1144E3", "F1144E4", "F1144E5", "F1144E6", "F1144E7", "F1144E8", "F1144E9", "F1144E10", "F1144E11", "F1144E12", "F1144E13", "F1144E14", "F1144E15", "F1144E16", "F1144E17", "F1144E18", "F1144E19", "F1144E20", "F1144E21", "F1144E22", "F1144E23", "F1144E24", "F1145E0", "F1146E0", "F1146E1", "F1146E2", "F1146E3", "F1147E0", "F1147E1", "F1147E2", "F1147E3", "F1148E0", "F1148E1", "F1148E2", "F1148E3", "F1148E4", "F1148E5", "F1148E6", "F1148E7", "F1148E8", "F1148E9", "F1148E10", "F1148E11", "F1148E12", "F1148E13", "F1148E14", "F1148E15", "F1148E16", "F1148E17", "F1148E18", "F1148E19", "F1148E20", "F1148E21", "F1148E22", "F1148E23", "F1148E24", "F1148E25", "F1148E26", "F1148E27", "F1148E28", "F1148E29", "F1148E30", "F1148E31", "F1148E32", "F1148E33", "F1148E34", "F1148E35", "F1148E36", "F1148E37", "F1148E38", "F1148E39", "F1148E40", "F1148E41", "F1148E42", "F1148E43", "F1148E44", "F1148E45", "F1148E46", "F1148E47", "F1148E48", "F1148E49", "F1148E50", "F1148E51", "F1148E52", "F1148E53", "F1148E54", "F1148E55", "F1148E56", "F1148E57", "F1148E58", "F1148E59", "F1148E60", "F1148E61", "F1148E62", "F1148E63", "F1148E64", "F1148E65", "F1148E66", "F1148E67", "F1148E68", "F1148E69", "F1148E70", "F1149E0", "F1149E1", "F1149E2", "F1149E3", "F1149E4", "F1149E5", "F1149E6", "F1149E7", "F1149E8", "F1149E9", "F1149E10", "F1149E11", "F1149E12", "F1149E13", "F1149E14", "F1149E15", "F1150E0", "F1150E1", "F1150E2", "F1150E3", "F1150E4", "F1150E5", "F1151E0", "F1151E1", "F1151E2", "F1152E0", "F1152E1", "F1152E2", "F1153E0", "F1153E1", "F1153E2", "F1153E3", "F1153E4", "F1153E5", "F1154E0", "F1154E1", "F1154E2", "F1154E3", "F1155E0", "F1155E1", "F1155E2", "F1155E3", "F1155E4", "F1155E5", "F1155E6", "F1155E7", "F1155E8", "F1155E9", "F1155E10", "F1155E11", "F1155E12", "F1155E13", "F1155E14", "F1155E15", "F1156E0", "F1156E1", "F1156E2", "F1156E3", "F1156E4", "F1156E5", "F1157E0", "F1157E1", "F1157E2", "F1157E3", "F1157E4", "F1157E5", "F1157E6", "F1158E0", "F1158E1", "F1158E2", "F1158E3", "F1159E0", "F1159E1", "F1160E0", "F1160E1", "F1160E2", "F1161E0", "F1161E1", "F1162E0", "F1162E1", "F1162E2", "F1162E3", "F1162E4", "F1163E0", "F1163E1", "F1163E2", "F1163E3", "F1163E4", "F1163E5", "F1163E6", "F1164E0", "F1164E1", "F1165E0", "F1165E1", "F1165E2", "F1166E0", "F1166E1", "F1167E0", "F1167E1", "F1167E2", "F1167E3", "F1167E4", "F1167E5", "F1167E6", "F1167E7", "F1167E8", "F1167E9", "F1167E10", "F1167E11", "F1167E12", "F1167E13", "F1167E14", "F1167E15", "F1167E16", "F1167E17", "F1167E18", "F1167E19", "F1167E20", "F1167E21", "F1168E0", "F1168E1", "F1168E2", "F1168E3", "F1168E4", "F1168E5", "F1168E6", "F1168E7", "F1169E0", "F1169E1", "F1169E2", "F1169E3", "F1170E0", "F1170E1", "F1170E2", "F1170E3", "F1170E4", "F1170E5", "F1170E6", "F1170E7", "F1170E8", "F1170E9", "F1170E10", "F1170E11", "F1171E0", "F1171E1", "F1171E2", "F1171E3", "F1171E4", "F1171E5", "F1171E6", "F1171E7", "F1171E8", "F1171E9", "F1171E10", "F1171E11", "F1171E12", "F1171E13", "F1171E14", "F1171E15", "F1171E16", "F1171E17", "F1171E18", "F1171E19", "F1171E20", "F1171E21", "F1171E22", "F1171E23", "F1171E24", "F1171E25", "F1171E26", "F1171E27", "F1171E28", "F1171E29", "F1171E30", "F1171E31", "F1171E32", "F1171E33", "F1171E34", "F1171E35", "F1171E36", "F1171E37", "F1171E38", "F1171E39", "F1171E40", "F1171E41", "F1171E42", "F1172E0", "F1172E1", "F1172E2", "F1172E3", "F1172E4", "F1173E0", "F1173E1", "F1173E2", "F1173E3", "F1174E0", "F1174E1", "F1175E0", "F1175E1", "F1175E2", "F1175E3", "F1175E4", "F1175E5", "F1175E6", "F1175E7", "F1175E8", "F1175E9", "F1176E0", "F1176E1", "F1176E2", "F1176E3", "F1176E4", "F1177E0", "F1177E1", "F1177E2", "F1177E3", "F1177E4", "F1177E5", "F1177E6", "F1177E7", "F1177E8", "F1177E9", "F1177E10", "F1177E11", "F1178E0", "F1178E1", "F1178E2", "F1178E3", "F1178E4", "F1179E0", "F1179E1", "F1179E2", "F1179E3", "F1180E0", "F1180E1", "F1180E2", "F1180E3", "F1180E4", "F1181E0", "F1181E1", "F1181E2", "F1182E0", "F1182E1", "F1182E2", "F1182E3", "F1183E0", "F1183E1", "F1183E2", "F1183E3", "F1183E4", "F1183E5", "F1183E6", "F1184E0", "F1184E1", "F1184E2", "F1184E3", "F1185E0", "F1185E1", "F1185E2", "F1185E3", "F1186E0", "F1186E1", "F1186E2", "F1186E3", "F1186E4", "F1187E0", "F1187E1", "F1187E2", "F1187E3", "F1187E4", "F1187E5", "F1187E6", "F1187E7", "F1187E8", "F1187E9", "F1187E10", "F1187E11", "F1187E12", "F1188E0", "F1188E1", "F1188E2", "F1188E3", "F1189E0", "F1189E1", "F1189E2", "F1189E3", "F1190E0", "F1190E1", "F1190E2", "F1190E3", "F1190E4", "F1190E5", "F1190E6", "F1191E0", "F1191E1", "F1191E2", "F1191E3", "F1192E0", "F1192E1", "F1192E2", "F1192E3", "F1193E0", "F1193E1", "F1193E2", "F1193E3", "F1193E4", "F1193E5", "F1193E6", "F1193E7", "F1193E8", "F1193E9", "F1193E10", "F1193E11", "F1193E12", "F1194E0", "F1194E1", "F1195E0", "F1195E1", "F1195E2", "F1195E3", "F1195E4", "F1195E5", "F1195E6", "F1195E7", "F1195E8", "F1195E9", "F1196E0", "F1196E1", "F1196E2", "F1196E3", "F1197E0", "F1197E1", "F1197E2", "F1197E3", "F1197E4", "F1197E5", "F1197E6", "F1197E7", "F1197E8", "F1197E9", "F1197E10", "F1197E11", "F1197E12", "F1197E13", "F1197E14", "F1198E0", "F1198E1", "F1198E2", "F1199E0", "F1199E1", "F1199E2", "F1199E3", "F1199E4", "F1199E5", "F1200E0", "F1200E1", "F1200E2", "F1201E0", "F1201E1", "F1201E2", "F1201E3", "F1201E4", "F1201E5", "F1201E6", "F1201E7", "F1201E8", "F1201E9", "F1201E10", "F1201E11", "F1201E12", "F1201E13", "F1201E14", "F1201E15", "F1201E16", "F1201E17", "F1201E18", "F1201E19", "F1201E20", "F1201E21", "F1201E22", "F1202E0", "F1202E1", "F1202E2", "F1202E3", "F1202E4", "F1202E5", "F1203E0", "F1203E1", "F1203E2", "F1203E3", "F1204E0", "F1204E1", "F1204E2", "F1204E3", "F1204E4", "F1204E5", "F1204E6", "F1204E7", "F1205E0", "F1205E1", "F1205E2", "F1205E3", "F1205E4", "F1205E5", "F1205E6", "F1205E7", "F1205E8"}
