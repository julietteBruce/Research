needsPackage "MultiplicitySequence"

F0E0 =  R = QQ[x_1..x_9]

F0E1 =  I = minors(2, genericMatrix(R, 3, 3))

F0E2 =  multiplicitySequence I

F0E3 =  printHilbertSequence hilbertSequence grGr I

F1E0 =  R = QQ[x,y]

F1E1 =  I = ideal"x2,xy,y3"

F1E2 =  elapsedTime monAnalyticSpread I

F2E0 =  R = QQ[a..e, DegreeRank => 5]

F2E1 =  I = monomialIdeal "de,abe,ace,abcd"

F2E2 =  hilbertSequence I

F2E3 =  R = QQ[a..e]

F2E4 =  I = monomialIdeal "de,abe,ace,abcd"

F2E5 =  hilbertSequence I

F2E6 =  hilbertPolynomial I

F3E0 =  R = QQ[x,y,z]

F3E1 =  I = ideal"xy2,yz3,zx4"

F3E2 =  multiplicitySequence I

F3E3 =  analyticSpread I, jMult I

F3E4 =  S = QQ[a..d]

F3E5 =  J = ideal (a*d - b*c, c^2-b*d)

F3E6 =  R = S/J

F3E7 =  I = ideal(R_0^2,R_0*R_1,R_1^3)

F3E8 =  multiplicitySequence I

F3E9 =  multiplicitySequence_1 I

F4E0 =  R = QQ[x,y]

F4E1 =  I = ideal"x2,xy"

F4E2 =  A = grGr I

F4E3 =  describe A

F4E4 =  hilbertSeries A

F5E0 =  R = QQ[x,y]

F5E1 =  I = (ideal"xy5,x2y3,x3y2")^4

F5E2 =  elapsedTime monjMult I

F5E3 =  elapsedTime jMult I

F6E0 =  R = QQ[x,y]

F6E1 =  I = ideal"x2,xy,y3"

F6E2 =  J = monReduction I

F6E3 =  J == I

F6E4 =  K = minimalReduction I

F6E5 =  degree J, degree K

F7E0 =  R = QQ[x,y,z]

F7E1 =  I = ideal"xy,yz,zx"

F7E2 =  elapsedTime jMult I

F7E3 =  elapsedTime monjMult I

F7E4 =  elapsedTime multiplicitySequence I

F8E0 =  R = QQ[x,y,z]

F8E1 =  I = ideal"x2,y3,yz"

F8E2 =  P = NP I

F8E3 =  J = integralClosure(I,1)

F8E4 =  P == NP J

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F1E0", "F1E1", "F1E2", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F5E0", "F5E1", "F5E2", "F5E3", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4"}
