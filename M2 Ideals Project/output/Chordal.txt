needsPackage "Chordal"

F0E0 =  R = QQ[x,y,z,MonomialOrder=>GRevLex];

F0E1 =  I = ideal (x,y);

F0E2 =  J = toLex I

F0E3 =  describe ring J

F1E0 =  R = QQ[a..e,MonomialOrder=>Lex];

F1E1 =  I = ideal {a*b, b*c, c*d, a*e, d*e};

F1E2 =  N = chordalNet I;

F1E3 =  chordalTria N;

F1E4 =  topComponents N;

F1E5 =  N

F2E0 =  I = adjacentMinorsIdeal(QQ,2,4);

F2E1 =  N = chordalNet I;

F2E2 =  chordalTria N;

F2E3 =  codimCount N

F2E4 =  reduceNet N

F2E5 =  codimCount N

F3E0 =  G = graph(toList(0..9),{

         {0,{6,7}},{1,{4,9}},{2,{3,5}},{3,{7,8}},

         {4,{5,8}},{5,{8}},{6,{8,9}},{7,{8}},{8,{9}} });

F3E1 =  Gc = chordalGraph G

F3E2 =  tree = elimTree Gc

F3E3 =  leaves tree

F4E0 =  R = QQ[x_0..x_3];

F4E1 =  I = ideal {x_0^2*x_1*x_2 +2*x_1 +1, x_1^2 +x_2, x_1 +x_2, x_2*x_3};

F4E2 =  constraintGraph I

F5E0 =  R = QQ[a..j,MonomialOrder=>Lex];

F5E1 =  I = ideal {a*d - b*c, c*f - d*e, e*h - f*g, g*j - h*i, a*j - b*i};

F5E2 =  N = chordalNet I;

F5E3 =  chordalTria N;

F5E4 =  codimCount N

F5E5 =  reduceDimension(N,2);

F5E6 =  codimCount N

F5E7 =  reduceDimension(N,1);

F5E8 =  codimCount N

F6E0 =  G = cartesianProduct(cycleGraph 3, pathGraph 3);

F6E1 =  I = edgeIdeal G

F6E2 =  X = suggestVariableOrder I

F7E0 =  R = QQ[a..e,MonomialOrder=>Lex];

F7E1 =  I = ideal {a*b, b*c, c*d, a*e, d*e};

F7E2 =  N = chordalNet I;

F7E3 =  isTriangular N

F7E4 =  chordalTria N;

F7E5 =  isTriangular N

F8E0 =  I = toLex edgeIdeal cycleGraph 9;

F8E1 =  N = chordalNet I;

F8E2 =  chordalTria N;

F8E3 =  codimCount N

F8E4 =  nC = 0;

F8E5 =  C = nextChain N;

F8E6 =  while C=!=null do (C=nextChain(C,N)

i: nC=nC+1

i: )


F8E7 =  nC

F8E8 =  nC = 0;

F8E9 =  (C,data) = nextChain(5,N);

F8E10 =  while C=!=null do (C=nextChain(C,data,5,N)

i: nC=nC+1

i: )


F8E11 =  nC

F9E0 =  I = adjacentMinorsIdeal(QQ,2,6);

F9E1 =  X = gens ring I;

F9E2 =  J = I + (X_0 * X_(-1) - X_1*X_(-2));

F9E3 =  f = sum gbList J;

F9E4 =  N = chordalNet J;

F9E5 =  chordalTria N;

F9E6 =  f % N == 0

F10E0 =  I = adjacentMinorsIdeal(QQ,2,10);

F10E1 =  N = chordalNet I;

F10E2 =  chordalTria N;

F10E3 =  dim N

F11E0 =  R = QQ[x_0..x_3, MonomialOrder=>Lex];

F11E1 =  I = ideal {x_0^3-x_0, x_0*x_2-x_2, x_1-x_2, x_2^2-x_2, x_2*x_3^2-x_3};

F11E2 =  N = chordalNet I;

F11E3 =  chordalTria N;

F11E4 =  N

F11E5 =  nodes N

F11E6 =  nodes(N,x_0)

F12E0 =  I = chromaticIdeal(QQ, cycleGraph 10, 2);

F12E1 =  N = chordalNet I;

F12E2 =  chordalTria N;

F12E3 =  rootCount N

F13E0 =  G = graph(toList(0..9),{

         {0,{6,7}},{1,{4,9}},{2,{3,5}},{3,{7,8}},

         {4,{5,8}},{5,{8}},{6,{8,9}},{7,{8}},{8,{9}} });

F13E1 =  Gc = chordalGraph G

F13E2 =  treewidth Gc

F14E0 =  R = QQ[x_0..x_3, MonomialOrder=>Lex];

F14E1 =  I = ideal {x_0^3-x_0, x_0*x_2-x_2, x_1-x_2, x_2^2-x_2, x_2*x_3^2-x_3};

F14E2 =  N = chordalNet I

F14E3 =  S = QQ[y_0..y_3, MonomialOrder=>Lex];

F14E4 =  f = map(S,R,gens S)

F14E5 =  f N

F15E0 =  R = QQ[x_0..x_3, MonomialOrder=>Lex];

F15E1 =  I = ideal {x_0^3-x_0, x_0*x_2-x_2, x_1-x_2, x_2^2-x_2, x_2*x_3^2-x_3};

F15E2 =  N = chordalNet I;

F15E3 =  chordalTria N;

F15E4 =  size N

F15E5 =  N

F16E0 =  G = graph(toList(0..9),{

         {0,{6,7}},{1,{4,9}},{2,{3,5}},{3,{7,8}},

         {4,{5,8}},{5,{8}},{6,{8,9}},{7,{8}},{8,{9}} });

F16E1 =  Gc = chordalGraph G

F16E2 =  elimTree Gc

F17E0 =  I = adjacentMinorsIdeal(QQ,2,5)

F17E1 =  N = chordalNet I;

F17E2 =  chordalTria N;

F17E3 =  topComponents N;

F17E4 =  N

F17E5 =  isPrimeSimple N

F17E6 =  C = nextChain N

F17E7 =  isPrimeSimple triaSystem(N,C)

F18E0 =  R = QQ[a,b,c,d];

F18E1 =  I = ideal {a^2-1, a^2+a*b+1, a^3+c^2, b*d + d, c^3+c*d};

F18E2 =  G = constraintGraph I

F18E3 =  Gc = chordalGraph G

F18E4 =  I = chromaticIdeal(QQ, cycleGraph 10, 3);

F18E5 =  N = chordalNet I;

F18E6 =  chordalElim N;

F18E7 =  N

F18E8 =  sum for f in gbList I list #terms f

F18E9 =  I = adjacentMinorsIdeal(QQ,2,10);

F18E10 =  N = chordalNet I;

F18E11 =  chordalTria N;

F18E12 =  N

F18E13 =  dim N

F18E14 =  topComponents N

F18E15 =  codimCount N

F19E0 =  I = toLex edgeIdeal cycleGraph 8

F19E1 =  N = chordalNet I;

F19E2 =  chordalTria N;

F19E3 =  codimCount N

F19E4 =  components(N,1)

F19E5 =  components(N)

F20E0 =  G = wheelGraph(6)

F20E1 =  chordalGraph G

F20E2 =  G = graph(toList(0..9),{

         {0,{6,7}},{1,{4,9}},{2,{3,5}},{3,{7,8}},

         {4,{5,8}},{5,{8}},{6,{8,9}},{7,{8}},{8,{9}} });

F20E3 =  chordalGraph G

F21E0 =  R = QQ[x_0..x_3, MonomialOrder=>Lex];

F21E1 =  I = ideal {x_0^3-x_0, x_0*x_2-x_2, x_1-x_2, x_2^2-x_2, x_2*x_3^2-x_3};

F21E2 =  N = chordalNet I;

F21E3 =  chordalTria N;

F21E4 =  N

F21E5 =  I = adjacentMinorsIdeal(QQ,2,10);

F21E6 =  N = chordalNet I;

F21E7 =  chordalTria N;

F21E8 =  N

F22E0 =  I = adjacentMinorsIdeal(QQ,2,6)

F23E0 =  R = QQ[a,b,c,d,MonomialOrder=>Lex];

F23E1 =  I = ideal {a*b, a*c, b*c, c*d};

F23E2 =  N = chordalNet I;

F23E3 =  chordalTria N;

F23E4 =  reduceNet N;

F23E5 =  N

F23E6 =  nodes N / (Ni -> label Ni)

F23E7 =  digraph N

F24E0 =  G = cycleGraph 4;

F24E1 =  I = chromaticIdeal(QQ, G, 3)

F25E0 =  I = adjacentMinorsIdeal(QQ,2,10);

F25E1 =  N = chordalNet I;

F25E2 =  chordalTria N;

F25E3 =  topComponents N;

F25E4 =  N

F25E5 =  codimCount N

F25E6 =  G = cartesianProduct(cycleGraph 3, pathGraph 5);

F25E7 =  I = edgeIdeal G;

F25E8 =  N = chordalNet(I,"SuggestOrder");

F25E9 =  chordalTria N;

F25E10 =  topComponents N;

F25E11 =  N

F25E12 =  codimCount N

F26E0 =  R = QQ[a,b,c,d,MonomialOrder=>Lex];

F26E1 =  DG = digraph {{"a0","b0"}, {"a0","b1"}, {"a1","b2"}, {"b0","c1"}, {"b1","c0"}, {"b2","c0"}, {"c0","d0"}, {"c1","d1"}}

F26E2 =  G = chordalGraph digraph hashTable{a=>{b,c},b=>{c},c=>{d},d=>{}};

F26E3 =  tree = elimTree G

F26E4 =  rnk = hashTable{"a0"=>a, "a1"=>a, "b0"=>b, "b1"=>b, "b2"=>b,

                     "c0"=>c, "d0"=>d, "c1"=>c, "d1"=>d};

F26E5 =  eqs = hashTable{"a0" => ({a},{}), "a1" => ({},{}),

                     "b0" => ({b},{}), "b1" => ({},{}), "b2" => ({b},{}),

                     "c0" => ({c},{}), "c1" => ({},{}),

                     "d0" => ({},{}), "d1" => ({d},{}) };

F26E6 =  chordalNet(eqs,rnk,tree,DG)

F27E0 =  R = QQ[x_0..x_3, MonomialOrder=>Lex];

F27E1 =  I = ideal {x_0^4-1, x_0^2+x_2, x_1^2+x_2, x_2^2+x_3};

F27E2 =  N = chordalNet I;

F27E3 =  chordalElim N

F27E4 =  N

F27E5 =  gbList I

F27E6 =  R = QQ[x_0..x_2, MonomialOrder=>Lex];

F27E7 =  I = ideal {x_0*x_1+1, x_1+x_2, x_1*x_2};

F27E8 =  N = chordalNet I;

F27E9 =  chordalElim N

F27E10 =  N

F27E11 =  gbList I

F27E12 =  I = chromaticIdeal(QQ, cycleGraph 10, 3);

F27E13 =  N = chordalNet I;

F27E14 =  chordalElim N

F27E15 =  N

F28E0 =  I = subsetsProductsIdeal(QQ, 5, 3)

F29E0 =  L = {{0,1},{0,1,2},{2,3}};

F29E1 =  P = nextOrderedPartition (5,L)

F29E2 =  P = nextOrderedPartition (P,5,L)

F29E3 =  P = nextOrderedPartition (P,5,L)

F29E4 =  assert(nextOrderedPartition (P,5,L) === null)

F30E0 =  I = adjacentMinorsIdeal(QQ,2,5);

F30E1 =  N = chordalNet I;

F30E2 =  chordalTria N;

F30E3 =  codimCount N

F31E0 =  R = QQ[x_0..x_3, MonomialOrder=>Lex];

F31E1 =  I = ideal {x_0^3-x_0, x_0*x_2-x_2, x_1-x_2, x_2^2-x_2, x_2*x_3^2-x_3};

F31E2 =  N = chordalNet I

F31E3 =  G = cartesianProduct(cycleGraph 3, pathGraph 3);

F31E4 =  I = edgeIdeal G

F31E5 =  N = chordalNet(I,"SuggestOrder")

F32E0 =  I = toLex edgeIdeal cycleGraph 9

F32E1 =  N = chordalNet I;

F32E2 =  chordalTria N;

F32E3 =  codimCount N

F32E4 =  topComponents N

F32E5 =  codimCount N

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F3E0", "F3E1", "F3E2", "F3E3", "F4E0", "F4E1", "F4E2", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F6E0", "F6E1", "F6E2", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F8E8", "F8E9", "F8E10", "F8E11", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F10E0", "F10E1", "F10E2", "F10E3", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F11E5", "F11E6", "F12E0", "F12E1", "F12E2", "F12E3", "F13E0", "F13E1", "F13E2", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F16E0", "F16E1", "F16E2", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F17E7", "F18E0", "F18E1", "F18E2", "F18E3", "F18E4", "F18E5", "F18E6", "F18E7", "F18E8", "F18E9", "F18E10", "F18E11", "F18E12", "F18E13", "F18E14", "F18E15", "F19E0", "F19E1", "F19E2", "F19E3", "F19E4", "F19E5", "F20E0", "F20E1", "F20E2", "F20E3", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F21E5", "F21E6", "F21E7", "F21E8", "F22E0", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4", "F23E5", "F23E6", "F23E7", "F24E0", "F24E1", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F25E5", "F25E6", "F25E7", "F25E8", "F25E9", "F25E10", "F25E11", "F25E12", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F26E6", "F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F27E5", "F27E6", "F27E7", "F27E8", "F27E9", "F27E10", "F27E11", "F27E12", "F27E13", "F27E14", "F27E15", "F28E0", "F29E0", "F29E1", "F29E2", "F29E3", "F29E4", "F30E0", "F30E1", "F30E2", "F30E3", "F31E0", "F31E1", "F31E2", "F31E3", "F31E4", "F31E5", "F32E0", "F32E1", "F32E2", "F32E3", "F32E4", "F32E5"}
