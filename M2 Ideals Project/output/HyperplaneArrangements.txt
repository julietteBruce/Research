needsPackage "HyperplaneArrangements"

F0E0 =  R = QQ[x,y,z];

F0E1 =  B = arrangement("braid", R)

F0E2 =  rank B

F0E3 =  assert(rank B === rank matroid B)

F0E4 =  rank typeA 4

F0E5 =  M = arrangement("MacLane")

F0E6 =  rank M

F0E7 =  trivial = arrangement(map(R^(numgens R),R^0,0),R)

F0E8 =  rank trivial

F0E9 =  assert(rank trivial === 0)

F1E0 =  R = QQ[x,y];

F1E1 =  FA = EPY arrangement {x,y,x-y}

F1E2 =  betti res FA

F1E3 =  A = arrangement "prism"

F1E4 =  reduceHilbert hilbertSeries orlikSolomon A

F1E5 =  betti res EPY A

F2E0 =  R = QQ[x,y,z];

F2E1 =  der arrangement {x,y,z,x-y,x-z,y-z}

F2E2 =  prune image der typeA(3)

F2E3 =  prune image der typeB(4)

F2E4 =  R = QQ[x,y,z];

F2E5 =  A = arrangement {x,y,z,x+y+z}

F2E6 =  der A

F2E7 =  betti res prune image der A

F2E8 =  der(A, Strategy => Popescu)

F2E9 =  R = QQ[x,y]

F2E10 =  prune image der arrangement {x,y,x-y,y-x,y,2*x}   -- rank 2 => free

F2E11 =  prune image der(arrangement {x,y,x-y}, {2,2,2})  -- same

F3E0 =  randomArrangement(4,3,5)

F3E1 =  tally apply(12, i -> poincare randomArrangement(6,3,5))

F3E2 =  A = randomArrangement(6,3,5,Validate=>true)

F3E3 =  U = uniformMatroid(3,6);

F3E4 =  assert areIsomorphic(U, matroid A)

F4E0 =  A = typeA 6;

F4E1 =  F = flat(A, {0, 1, 6, 15, 20})

F4E2 =  G = flat(A, {0, 1, 2, 6, 7, 11})

F4E3 =  H = flat(A, {0, 1, 2, 3, 6, 7, 8, 11, 12, 15})

F4E4 =  F | G

F4E5 =  G | H

F4E6 =  F | H

F4E7 =  assert(vee(F, G) === F | G)

F4E8 =  assert(F | G === G | F)

F4E9 =  assert((F | G) | H === F | (G | H))

F4E10 =  assert(G | G === G)

F4E11 =  assert(rank F + rank G >= rank(F ^ G) + rank(F | G))

F4E12 =  assert(rank F + rank H >= rank(F ^ H) + rank(F | H))

F4E13 =  assert(rank H + rank G >= rank(H ^ G) + rank(H | G))

F5E0 =  A = typeA 3

F5E1 =  A'' = restriction(A,0) -- restrict A to its first hyperplane

F5E2 =  ring A''

F5E3 =  B = prune A''

F5E4 =  ring B

F6E0 =  A2 = typeA 2

F6E1 =  euler A2

F6E2 =  assert all(5, n -> euler typeA (n+1) === (-1)^(n) * n!)

F6E3 =  B2 = typeB 2

F6E4 =  euler B2

F6E5 =  assert all(4, n -> euler typeB (n+1) === (-1)^(n) * 2^n * n!)

F6E6 =  A4 = typeA 4

F6E7 =  F = flat(A4, {0,7})

F6E8 =  euler F

F6E9 =  assert(euler A4_F === euler F)

F6E10 =  euler flat(A4, {2,3,9})

F6E11 =  euler flat(A4, {0,1,2,4,5,7})

F6E12 =  euler flat(A4, {2,4,6,8})

F6E13 =  assert (euler arrangement({}, ring A2) === 3)

F7E0 =  coefficients typeA 3

F7E1 =  coefficients typeB 2

F7E2 =  coefficients typeD 4

F7E3 =  R = ZZ/101[x,y,z];

F7E4 =  A = arrangement("Pappus", R)

F7E5 =  coefficients A

F7E6 =  H = arrangement("Hessian")

F7E7 =  coefficients H

F7E8 =  B = arrangement(x*y*(x+y+1))

F7E9 =  coefficients B

F7E10 =  C = arrangement(x*y*z*(x+y+1)*(y+z-1))

F7E11 =  coefficients C

F7E12 =  R = ZZ[x,y,z];

F7E13 =  trivial = arrangement(map(R^(numgens R),R^0,0),R)

F7E14 =  coefficients trivial

F7E15 =  assert(coefficients trivial == 0)

F8E0 =  A3 = typeA 3

F8E1 =  F = flat(A3, {3,4,5})

F8E2 =  assert(toList F === {3,4,5})

F8E3 =  (hyperplanes A3)_(toList F)

F9E0 =  A = typeA 3

F9E1 =  F = closure(A,{0,1})

F9E2 =  A_F

F9E3 =  I = ideal((hyperplanes A)_{0,3}) -- one can also specify a linear ideal

F9E4 =  assert (F == closure(A,I))

F10E0 =  G = {{1,2},{2,3},{3,4},{4,1}}; -- a four-cycle

F10E1 =  AG = graphic G

F10E2 =  rank AG -- the number of vertices minus number of components

F10E3 =  ring AG

F10E4 =  AG' = graphic(G,QQ[x,y,z,w]) -- four variables because there are 4 vertices

F10E5 =  ring AG'

F10E6 =  V = {"a", "b", "c", "d"};

F10E7 =  E = {{"a","b"}, {"b", "c"}, {"c","d"}, {"d","a"}};

F10E8 =  graphic(E, V)

F10E9 =  R = QQ[a,b,c,d];

F10E10 =  arr = graphic({{a,b},{b,c},{c,d},{d,a}}, gens R, R)

F10E11 =  ring arr === R

F10E12 =  graphic({{1,2}, {1,2}})

F10E13 =  graphic({{1,1}, {1,2}})

F11E0 =  S = QQ[x,y];

F11E1 =  isCentral arrangement {x,y,x-1}

F12E0 =  A0 = typeD(3, ZZ)

F12E1 =  ring A0

F12E2 =  A1 = typeD(4, QQ)

F12E3 =  ring A1

F12E4 =  A3 = typeD(2, ZZ/2)

F12E5 =  trim A3

F12E6 =  ring A3

F12E7 =  A4 = typeD(3, ZZ[a,b,c,d])

F12E8 =  ring A4

F12E9 =  A5 = typeD(2, ZZ[t][x,y,z])

F12E10 =  ring A5

F12E11 =  A6 = typeD 3

F12E12 =  ring A6

F13E0 =  R = ZZ[x,y];

F13E1 =  A = arrangement{x,y,x-y}

F13E2 =  A' = A ** QQ

F13E3 =  ring A'

F13E4 =  assert(R =!= ring A')

F14E0 =  R = QQ[w,x];

F14E1 =  S = QQ[y,z];

F14E2 =  A = arrangement{w, x, w-x}

F14E3 =  B = arrangement{y, z, y+z}

F14E4 =  C = A ++ B

F14E5 =  gens ring C

F14E6 =  assert (degrees ring C === {{1}, {1}, {1}, {1}})

F15E0 =  R = QQ[x, y];

F15E1 =  A = arrangement{x,x,0_R,y,y,y,x+y,x+y,x+y,x+y,x+y}

F15E2 =  A' = trim A

F15E3 =  assert(ring A' === R)

F15E4 =  assert(trim A' == A')

F15E5 =  assert(trim A' == A')

F15E6 =  A'' = restriction(A, y)

F15E7 =  trim A''

F15E8 =  A''' = dual arrangement{x, y, x-y}

F15E9 =  trim A'''

F16E0 =  A = typeA 3

F16E1 =  circuits A

F16E2 =  circuits matroid A

F17E0 =  S = ZZ[w,x,y,z];

F17E1 =  A = arrangement(matrix{{1,1,1,0,0,0},{-1,0,0,1,1,0},{0,-1,0,-1,0,1},{0,0,-1,0,-1,-1}}, S)

F17E2 =  ring A

F17E3 =  assert(ring A === S)

F17E4 =  S' = ZZ/101[w,x,y,z];

F17E5 =  A' = typeA(3, S')

F17E6 =  ring A'

F17E7 =  assert(ring A' === S')

F17E8 =  assert(A' =!= A)

F17E9 =  R = S'/(w+x+y+z)

F17E10 =  A'' = sub(A, R) -- this changes the coordinate ring of the arrangement

F17E11 =  ring A''

F17E12 =  assert(rank A'' == dim ring A'')

F17E13 =  trivial = arrangement({}, S)

F17E14 =  assert(ring trivial === S)

F17E15 =  trivial' = arrangement({},R)

F17E16 =  assert(ring trivial' === R)

F18E0 =  A0 = typeA(3, ZZ)

F18E1 =  ring A0

F18E2 =  A1 = typeA(4, QQ)

F18E3 =  ring A1

F18E4 =  A3 = typeA(2, ZZ/2)

F18E5 =  ring A3

F18E6 =  A4 = typeA(3, ZZ[a,b,c,d])

F18E7 =  ring A4

F18E8 =  A5 = typeA(2, ZZ[t][x,y,z])

F18E9 =  ring A5

F18E10 =  A6 = typeA 2

F18E11 =  ring A6

F19E0 =  A = typeA 3

F19E1 =  R = ring A

F19E2 =  matrix A

F19E3 =  matrix typeB 2

F19E4 =  matrix typeD 4

F19E5 =  trivial = arrangement({},R)

F19E6 =  matrix trivial

F19E7 =  assert(matrix trivial == 0)

F20E0 =  A = typeA 2

F20E1 =  flat(A, {0,1,2})

F21E0 =  R = QQ[x,y,z]

F21E1 =  A = dual arrangement {x,y,x-y,z} -- the last element of this arrangement is 0

F21E2 =  compress A

F22E0 =  A = typeA 6;

F22E1 =  F = flat(A, {0, 1, 6, 15, 20})

F22E2 =  G = flat(A, {0, 1, 2, 6, 7, 11})

F22E3 =  H = flat(A, {0, 1, 2, 3, 6, 7, 8, 11, 12, 15})

F22E4 =  F ^ G

F22E5 =  G ^ H

F22E6 =  F ^ H

F22E7 =  assert(meet(F, G) === F ^ G)

F22E8 =  assert(F ^ G === G ^ F)

F22E9 =  assert((F ^ G) ^ H === F ^ (G ^ H))

F22E10 =  assert(G ^ G === G)

F22E11 =  assert(rank F + rank G >= rank(F ^ G) + rank(F | G))

F22E12 =  assert(rank F + rank H >= rank(F ^ H) + rank(F | H))

F22E13 =  assert(rank H + rank G >= rank(H ^ G) + rank(H | G))

F23E0 =  R = QQ[x,y]

F23E1 =  arr = arrangement{x,y,x-y}

F23E2 =  f = map(QQ[a,b], R, {a, a+b})

F23E3 =  sub(arr, f)

F23E4 =  arr ** f === sub(arr, f)

F23E5 =  S = QQ[x,y,z]

F23E6 =  arr' = sub(arr, S)

F23E7 =  ring arr' === S

F23E8 =  R = ZZ[x,y,z]

F23E9 =  A = arrangement("nonFano",R)

F23E10 =  f = map(ZZ/2[x,y,z],R);

F23E11 =  B = A**f

F23E12 =  flats(2,A)

F23E13 =  flats(2,B)

F24E0 =  R = QQ[x,y,z];

F24E1 =  orlikTerao arrangement {x,y,z,x+y+z}

F24E2 =  I = orlikTerao arrangement "braid"

F24E3 =  betti res I

F24E4 =  OT := comodule I;

F24E5 =  apply(1+dim OT, i-> 0 == Ext^i(OT, ring OT))

F24E6 =  p = poincare arrangement "braid"

F24E7 =  F = frac QQ[T]

F24E8 =  sub(f p, {T=>T/(1-T)})

F24E9 =  reduceHilbert hilbertSeries I

F25E0 =  sort keys arrangementLibrary

F25E1 =  A0 = arrangement "(9_3)_2"

F25E2 =  ring A0

F25E3 =  A1 = arrangement("bracelet", ZZ)

F25E4 =  ring A1

F25E5 =  A2 = arrangement("braid", ZZ/101)

F25E6 =  ring A2

F25E7 =  A3 = arrangement("Desargues", ZZ[vars(0..2)])

F25E8 =  ring A3

F25E9 =  A4 = arrangement("nonFano", QQ[a..c])

F25E10 =  ring A4

F25E11 =  A5 = arrangement("notTame", ZZ/32003[w,x,y,z])

F25E12 =  ring A5

F25E13 =  A6 = arrangement "MacLane"

F25E14 =  ring A6

F25E15 =  A7 = arrangement("Hessian", ZZ/31627[a,b,c])

F25E16 =  ring A7

F25E17 =  assert all(keys arrangementLibrary, s -> isCentral arrangement s)

F25E18 =  Z1 = arrangement "Ziegler1"

F25E19 =  Z2 = arrangement "Ziegler2"

F25E20 =  assert(matroid Z1 == matroid Z2) -- same underlying matroid

F25E21 =  I1 = orlikTerao Z1;

F25E22 =  I2 = orlikTerao Z2;

F25E23 =  assert(hilbertPolynomial I1 == hilbertPolynomial I2) -- same Hilbert polynomial

F25E24 =  hilbertPolynomial ideal super basis(2,I1)

F25E25 =  hilbertPolynomial ideal super basis(2,I2) -- but not (graded) isomorphic

F26E0 =  A = typeA(3)

F26E1 =  L = flats(2,A)

F26E2 =  A' = restriction first L

F26E3 =  x := (ring A)_0 -- the subspace need not be in the arrangement

F26E4 =  restriction(A,x)

F27E0 =  A = typeA(3)

F27E1 =  I = orlikSolomon(A,e)

F27E2 =  reduceHilbert hilbertSeries I

F27E3 =  characteristicPolynomial matroid A

F27E4 =  I' = orlikSolomon(A,Projective=>true,HypAtInfinity=>2)

F27E5 =  reduceHilbert hilbertSeries I'

F28E0 =  R = QQ[x,y,z]

F28E1 =  A = arrangement {x,y,z,x-y,x-z}

F28E2 =  (A'',m'') = eulerRestriction(A,{1,1,1,1,1},1)

F28E3 =  restriction(A,1)

F28E4 =  trim oo -- same underlying simple arrangement, different multiplicities

F28E5 =  m = {2,2,2,2,1}

F28E6 =  (A'',m'') = eulerRestriction(A,m,3)

F28E7 =  prune image der(A,m)

F28E8 =  prune image der(A,m')

F28E9 =  prune image der(A'',m'')

F28E10 =  A = arrangement "bracelet";

F28E11 =  (B,m) = eulerRestriction(A,{1,1,1,1,1,1,1,1,1},0)

F28E12 =  C = restriction(A,0)

F28E13 =  assert(isFreeModule prune image der B) -- one is free

F28E14 =  assert(not isFreeModule prune image der C) -- the other is not

F29E0 =  R = QQ[x,y,z]

F29E1 =  A = arrangement ((x^2 - y^2)*(x^2 - z^2)*(y^2 - z^2)*z)

F29E2 =  logCanonicalThreshold A

F30E0 =  R = QQ[x,y,z]

F30E1 =  A = arrangement ((x^2 - y^2)*(x^2 - z^2)*(y^2 - z^2)*z)

F30E2 =  multiplierIdeal(3/7,A)

F30E3 =  H = new MutableHashTable

F30E4 =  scan(39,i -> (

                 s := i/21;

                 I := multiplierIdeal(s,A);

                 if not H#?I then H#I = {s} else H#I = H#I|{s}))

F30E5 =  netList sort values H -- values of s giving same multiplier ideal

F31E0 =  poincare genericArrangement(3,5,QQ)

F32E0 =  A3 = typeA 3

F32E1 =  F = flat(A3,{3,4,5})

F32E2 =  assert(arrangement F === A3)

F33E0 =  A = arrangement "X3"

F33E1 =  dA = deCone(A,2)

F33E2 =  factor poincare A

F33E3 =  poincare dA

F33E4 =  ring dA

F33E5 =  dA' = prune dA

F33E6 =  ring dA'

F34E0 =  A3 = typeA 3

F34E1 =  F = flat(A3, {3,4,5})

F34E2 =  assert(rank F == 2)

F35E0 =  A = typeA(3)

F35E1 =  flats(2,A)

F35E2 =  flats A

F36E0 =  A = arrangement "braid"

F36E1 =  deletion(A,5)

F36E2 =  R = QQ[x,y]

F36E3 =  A = arrangement {x,y,x-y}

F36E4 =  deletion(A, x-y)

F36E5 =  A = arrangement {x, x-y, y, x-y, y-x}

F36E6 =  A1 = deletion(A, x-y)

F36E7 =  A2 = deletion(A, y-x)

F36E8 =  A3 = deletion(A, 2*(x-y))

F36E9 =  assert(A1 == A2)

F36E10 =  assert(A2 == A3)

F37E0 =  A = matrix{{1,1,0},{-1,0,1},{0,-1,-1}}

F37E1 =  arr = arrangement A

F37E2 =  matroid arr

F38E0 =  S = QQ[w,x,y,z];

F38E1 =  A = arrangement{x, y, x-y, x-1, y-1}

F38E2 =  assert not isCentral A

F38E3 =  cA = cone(A, z)

F38E4 =  assert isCentral cA

F38E5 =  assert(# hyperplanes cA === 1 + # hyperplanes A)

F38E6 =  assert(ring cA === ring A)

F38E7 =  deCone(cA, z)

F38E8 =  cA' = cone(A, w)

F38E9 =  assert isCentral cA'

F38E10 =  assert(cA != cA')

F38E11 =  assert(# hyperplanes cA' === 1 + # hyperplanes A)

F38E12 =  cone(A, x)

F38E13 =  cA'' = trim cone(A, x)

F38E14 =  assert isCentral cA''

F38E15 =  assert(# hyperplanes cA'' =!= 1 + # hyperplanes A)

F38E16 =  S = QQ[x,y];

F38E17 =  A = arrangement{x, y, x-y, x-1, y-1}

F38E18 =  assert not isCentral A

F38E19 =  cA = cone(A, symbol z)

F38E20 =  assert isCentral cA

F38E21 =  assert(# hyperplanes cA === 1 + # hyperplanes A)

F38E22 =  ring cA

F38E23 =  assert(ring cA =!= ring A)

F38E24 =  deCone(cA, 5)

F38E25 =  assert not isCentral A

F38E26 =  cA' = cone(A, symbol w)

F38E27 =  assert isCentral cA'

F38E28 =  assert(# hyperplanes cA' === 1 + # hyperplanes A)

F38E29 =  ring cA'

F39E0 =  A = arrangement "X2"

F39E1 =  coefficients A

F39E2 =  A' = dual A

F39E3 =  coefficients dual A

F39E4 =  assert (dual matroid A == matroid dual A)

F40E0 =  A0 = typeB(3, ZZ)

F40E1 =  ring A0

F40E2 =  A1 = typeB(4, QQ)

F40E3 =  ring A1

F40E4 =  A3 = typeB(2, ZZ/2)

F40E5 =  trim A3

F40E6 =  ring A3

F40E7 =  A4 = typeB(3, ZZ[a,b,c,d])

F40E8 =  ring A4

F40E9 =  A5 = typeB(2, ZZ[t][x,y,z])

F40E10 =  ring A5

F40E11 =  A6 = typeB 3

F40E12 =  ring A6

F40E13 =  A7 = typeB 1

F40E14 =  ring A7

F41E0 =  S = QQ[w, x, y, z];

F41E1 =  A3 = typeA(3, S)

F41E2 =  F1 = flat(A3, {3,4,5})

F41E3 =  A3' = subArrangement(A3, F1)

F41E4 =  assert(ring A3 === ring A3')

F41E5 =  subArrangement flat(A3, {0, 5})

F41E6 =  F2 = flat(A3, {0, 1, 3})

F41E7 =  assert(typeA(2, S) == A3_F2)

F41E8 =  assert(A3 === subArrangement flat(A3, {0,1,2,3,4,5}))

F41E9 =  B = arrangement("bracelet", S);

F41E10 =  B' = arrangement({w+x+y+z} | hyperplanes B)

F41E11 =  subArrangement flat(B', {0,1,2,6,8,9})

F41E12 =  subArrangement flat(B', {0,1,3,5,7,9})

F41E13 =  subArrangement flat(B', {0,2,3,4,7,8})

F42E0 =  R = QQ[x, y];

F42E1 =  A = arrangement{x, y, x+y}

F42E2 =  assert(A == A)

F42E3 =  B = arrangement{2*x, y, x+y}

F42E4 =  A == B

F42E5 =  assert not (A == B)

F42E6 =  assert( A != B )

F42E7 =  A' = arrangement{y, x, x+y}

F42E8 =  A == A'

F42E9 =  assert( A != A' )

F43E0 =  X3 = arrangement "X3"

F43E1 =  assert isDecomposable X3

F43E2 =  assert isDecomposable(X3, ZZ/5)

F43E3 =  assert not isDecomposable typeA 3

F44E0 =  A = typeA 3

F44E1 =  hyperplanes A

F45E0 =  A = arrangement "MacLane";

F45E1 =  poincare A

F45E2 =  characteristicPolynomial matroid A

F45E3 =  factor poincare typeA 3

F45E4 =  A = arrangement "Hessian";

F45E5 =  factor poincare A

F45E6 =  prune image der A

F46E0 =  S = QQ[w,x,y,z];

F46E1 =  A3 = arrangement(matrix{{1,1,1,0,0,0},{-1,0,0,1,1,0},{0,-1,0,-1,0,1},{0,0,-1,0,-1,-1}}, S)

F46E2 =  assert isCentral A3

F46E3 =  R = S/ideal(w+x+y+z);

F46E4 =  A3' = arrangement(matrix{{1,1,1,0,0,0},{-1,0,0,1,1,0},{0,-1,0,-1,0,1},{0,0,-1,0,-1,-1}}, R)

F46E5 =  ring A3'

F46E6 =  assert(rank A3' === dim ring A3')

F46E7 =  trivial = arrangement(map(S^4,S^0,0),S)

F46E8 =  ring trivial

F46E9 =  assert isCentral trivial

F47E0 =  S = QQ[w,x,y,z];

F47E1 =  A3 = arrangement {w-x, w-y, w-z, x-y, x-z, y-z}

F47E2 =  assert isCentral A3

F47E3 =  A3' = arrangement ((w-x)*(w-y)*(w-z)*(x-y)*(x-z)*(y-z))

F47E4 =  assert(A3 != A3')

F47E5 =  arrangement (x^2*y^2*(x^2-y^2)*(x^2-z^2))

F47E6 =  kk = toField(QQ[p]/(p^2+p+1)) -- toField is necessary so that M2 treats this as a field

F47E7 =  R = kk[s,t]

F47E8 =  arrangement (s^3-t^3)

F47E9 =  R = S/ideal(w+x+y+z);

F47E10 =  A3'' = arrangement({w-x,w-y,w-z,x-y,x-z,y-z}, R)

F47E11 =  ring A3''

F47E12 =  assert(rank A3'' === dim ring A3'')

F47E13 =  trivial = arrangement({},S)

F47E14 =  ring trivial

F47E15 =  assert isCentral trivial

F48E0 =  R = QQ[x, y, z];

F48E1 =  A = arrangement{x, y, x-y, z}

F48E2 =  makeEssential A

F48E3 =  assert(A == makeEssential A)

F48E4 =  A' = deletion(A, z)

F48E5 =  ring A'

F48E6 =  makeEssential A'

F48E7 =  ring makeEssential A'

F48E8 =  A = typeA 3

F48E9 =  ring A

F48E10 =  A' = makeEssential A

F48E11 =  ring A'

F48E12 =  B = typeB 3

F48E13 =  assert(B == makeEssential B)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F0E7", "F0E8", "F0E9", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F2E10", "F2E11", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F4E7", "F4E8", "F4E9", "F4E10", "F4E11", "F4E12", "F4E13", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F6E9", "F6E10", "F6E11", "F6E12", "F6E13", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F7E6", "F7E7", "F7E8", "F7E9", "F7E10", "F7E11", "F7E12", "F7E13", "F7E14", "F7E15", "F8E0", "F8E1", "F8E2", "F8E3", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F10E5", "F10E6", "F10E7", "F10E8", "F10E9", "F10E10", "F10E11", "F10E12", "F10E13", "F11E0", "F11E1", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F12E6", "F12E7", "F12E8", "F12E9", "F12E10", "F12E11", "F12E12", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F15E6", "F15E7", "F15E8", "F15E9", "F16E0", "F16E1", "F16E2", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F17E7", "F17E8", "F17E9", "F17E10", "F17E11", "F17E12", "F17E13", "F17E14", "F17E15", "F17E16", "F18E0", "F18E1", "F18E2", "F18E3", "F18E4", "F18E5", "F18E6", "F18E7", "F18E8", "F18E9", "F18E10", "F18E11", "F19E0", "F19E1", "F19E2", "F19E3", "F19E4", "F19E5", "F19E6", "F19E7", "F20E0", "F20E1", "F21E0", "F21E1", "F21E2", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F22E5", "F22E6", "F22E7", "F22E8", "F22E9", "F22E10", "F22E11", "F22E12", "F22E13", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4", "F23E5", "F23E6", "F23E7", "F23E8", "F23E9", "F23E10", "F23E11", "F23E12", "F23E13", "F24E0", "F24E1", "F24E2", "F24E3", "F24E4", "F24E5", "F24E6", "F24E7", "F24E8", "F24E9", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F25E5", "F25E6", "F25E7", "F25E8", "F25E9", "F25E10", "F25E11", "F25E12", "F25E13", "F25E14", "F25E15", "F25E16", "F25E17", "F25E18", "F25E19", "F25E20", "F25E21", "F25E22", "F25E23", "F25E24", "F25E25", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F27E5", "F28E0", "F28E1", "F28E2", "F28E3", "F28E4", "F28E5", "F28E6", "F28E7", "F28E8", "F28E9", "F28E10", "F28E11", "F28E12", "F28E13", "F28E14", "F29E0", "F29E1", "F29E2", "F30E0", "F30E1", "F30E2", "F30E3", "F30E4", "F30E5", "F31E0", "F32E0", "F32E1", "F32E2", "F33E0", "F33E1", "F33E2", "F33E3", "F33E4", "F33E5", "F33E6", "F34E0", "F34E1", "F34E2", "F35E0", "F35E1", "F35E2", "F36E0", "F36E1", "F36E2", "F36E3", "F36E4", "F36E5", "F36E6", "F36E7", "F36E8", "F36E9", "F36E10", "F37E0", "F37E1", "F37E2", "F38E0", "F38E1", "F38E2", "F38E3", "F38E4", "F38E5", "F38E6", "F38E7", "F38E8", "F38E9", "F38E10", "F38E11", "F38E12", "F38E13", "F38E14", "F38E15", "F38E16", "F38E17", "F38E18", "F38E19", "F38E20", "F38E21", "F38E22", "F38E23", "F38E24", "F38E25", "F38E26", "F38E27", "F38E28", "F38E29", "F39E0", "F39E1", "F39E2", "F39E3", "F39E4", "F40E0", "F40E1", "F40E2", "F40E3", "F40E4", "F40E5", "F40E6", "F40E7", "F40E8", "F40E9", "F40E10", "F40E11", "F40E12", "F40E13", "F40E14", "F41E0", "F41E1", "F41E2", "F41E3", "F41E4", "F41E5", "F41E6", "F41E7", "F41E8", "F41E9", "F41E10", "F41E11", "F41E12", "F41E13", "F42E0", "F42E1", "F42E2", "F42E3", "F42E4", "F42E5", "F42E6", "F42E7", "F42E8", "F42E9", "F43E0", "F43E1", "F43E2", "F43E3", "F44E0", "F44E1", "F45E0", "F45E1", "F45E2", "F45E3", "F45E4", "F45E5", "F45E6", "F46E0", "F46E1", "F46E2", "F46E3", "F46E4", "F46E5", "F46E6", "F46E7", "F46E8", "F46E9", "F47E0", "F47E1", "F47E2", "F47E3", "F47E4", "F47E5", "F47E6", "F47E7", "F47E8", "F47E9", "F47E10", "F47E11", "F47E12", "F47E13", "F47E14", "F47E15", "F48E0", "F48E1", "F48E2", "F48E3", "F48E4", "F48E5", "F48E6", "F48E7", "F48E8", "F48E9", "F48E10", "F48E11", "F48E12", "F48E13"}
