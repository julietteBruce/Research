needsPackage "VectorGraphics"

F0E0 =  Light{"fill"=>"yellow","opacity"=>1}

F0E1 =  v={[74.5571, 52.0137, -41.6631],[27.2634, -29.9211, 91.4409],[-81.3041, 57.8325, 6.71156],[-20.5165, -79.9251, -56.4894]};

F0E2 =  f={{v#2,v#1,v#0},{v#0,v#1,v#3},{v#0,v#3,v#2},{v#1,v#2,v#3}};

F0E3 =  c={"red","green","blue","yellow"};

F0E4 =  tetra=gList(apply(0..3,i->Polygon{f#i,"fill"=>c#i,"stroke"=>"none"}),

         Light{[110,0,0],Radius=>10,"opacity"=>"1"},ViewPort=>{vector{-110,-100},vector{110,100}},

         Size=>40,TransformMatrix=>rotation(-1.5,[4,1,0]))

F1E0 =  circ=Circle{Radius=>0.1,"fill"=>"red","stroke"=>"black"};

F1E1 =  (a,b,c)=apply(([-1,-1],[2,0],[0,2]),coord -> gNode(coord,circ,Draggable=>true))

F1E2 =  p=bisector(a,b,c)

F1E3 =  gList(Line{a,b},Line{a,c},Line{b,c},Line{p,a},Line{q,b},Line{r,c},Circle{o,projection(o,a,b)},a,b,c)

F2E0 =  GraphicsText{TextContent=>"Test","stroke"=>"red","fill"=>"none","stroke-width"=>0.5}

F2E1 =  gList(GraphicsText{[0,0],"P",FontSize=>14},GraphicsText{[7,0],"AUL",FontSize=>10})

F3E0 =  Line{Point1=>vector{0,0},Point2=>vector{2,1},"stroke"=>"green"}

F3E1 =  Line{[0,0],[2,1],"stroke-width"=>0.1} -- simplified syntax

F4E0 =  Polygon{PointList=>{[0,10],[100,10],[90,90],[0,80]},"stroke"=>"red","fill"=>"white"}

F5E0 =  R=RR[x,y];

F5E1 =  P=y^2-(x+1)*(x-1)*(x-2);

F5E2 =  plot2d(P,{-2,3},"stroke-width"=>0.05,"stroke"=>"red",Axes=>true)

F6E0 =  Circle{Radius=>25,Axes=>true}

F6E1 =  Circle{Radius=>25,Axes=>Frame}

F7E0 =  a=gList(Line{[-100, 15, 78], [-9, 100, 4]},

         Line{[-96, -49, -100], [46, -100, 52]},

         Line{[-100, -42, -51], [59, 100, 76]},

         Line{[-100, 66, 54], [83, -100, -27]})

F7E1 =  b=gList(Line{[-30, 100, 20], [9, -100, 8]},

         Line{[-78, -73, -100], [-64, 84, 100]},

         "stroke"=>"red")

F7E2 =  gList(a,b,Size=>30)

F8E0 =  listPlot apply(10,i->0.1*i^2)

F9E0 =  Circle{Center=>vector {10,10},Radius=>1,"fill"=>"green","stroke"=>"none"}

F9E1 =  Circle{[10,10],1} -- equivalent syntax for coordinates

F9E2 =  gList(oo,Circle{[0,0],[10,10]})

F10E0 =  Polyline{PointList=>{[0,10],[100,10],[90,90],[0,80]},"stroke"=>"red","fill"=>"white"}

F11E0 =  Ellipse{Center=>vector{10,10},RadiusX=>50,RadiusY=>20,"stroke"=>"none","fill"=>"red"}

F11E1 =  Ellipse{[10,10],50,20,"stroke"=>"blue"} -- equivalent syntax

F12E0 =  a=Polygon{{[-1,0],[1,0.1],[1,-0.1]},"fill"=>"red"}

F12E1 =  gList(a,a++{TransformMatrix=>rotation(2*pi/3)})

F13E0 =  (anim1=rotation(0.1,[0,0,1],[0,0])

i: anim2=rotation(-0.1,[0,0,1],[0,0])

i: )

F13E1 =  gList(Polygon{{[-1,0],[1,0.1],[1,-0.1]},"fill"=>"red",AnimMatrix=>anim1},Circle{[1,0],0.1},Circle{[0,0],1})

F13E2 =  gList(Polygon{{[-1,0],[1,0.1],[1,-0.1]},"fill"=>"red",AnimMatrix=>anim3},Circle{[1,0],0.1},Circle{[0,0],1})

F14E0 =  needsPackage "Graphs";

F14E1 =  R=QQ[x,y]; b=flatten entries basis(0,3,R)

F14E2 =  digraph select(b**b,a->a#1 % a#0 == 0 and first degree a#1 == first degree a#0 +1)

F15E0 =  random (RR^6,RR^10)

F15E1 =  matrixPlot oo

F15E2 =  matrixPlot apply(32,i->apply(i+1,j->binomial(i,j)%2))

F16E0 =  circ=Circle{Radius=>0.1,"fill"=>"red","stroke"=>"black"};

F16E1 =  (p1,p2)=apply(([-1,-1],[1,1]),coord -> gNode(coord,circ,Draggable=>true))

F16E2 =  gList(Polygon{{p1,place(p1,p2,0.7,0.3),p2,place(p1,p2,0.7,-0.3)}},p1,p2)

F17E0 =  c=Circle{Radius=>0.1,"fill"=>"black"};

F17E1 =  v1=gNode([0,0],c,Draggable=>true)

F17E2 =  gList(Path{{"M",v1,"C",v2,v3,v4}},v1,v2,v3,v4)

F18E0 =  a=gNode([0,0],Circle{Radius=>1})

F18E1 =  gList(a,b,Circle{mid,Radius=>1-1/sqrt 2})

F18E2 =  a=gNode([0,1],AnimMatrix=>rotation 0.1);

F18E3 =  gList(a,Circle{Radius=>1},Polygon{{a,[-1,0],[1,0]}})

F19E0 =  a=gNode([-1,-1],Circle{Radius=>0.1,"fill"=>"red","stroke"=>"black"})

F19E1 =  b=gNode([1,1],Circle{Radius=>0.1,"fill"=>"green","stroke"=>"black",Draggable=>true})

F19E2 =  gList(Line{a,b},a,b)

F19E3 =  l=null

F20E0 =  Ellipse{[60,60],40,30, "fill"=>radialGradient{("0%","stop-color:red"),("100%","stop-color:yellow")}}

F21E0 =  circ=Circle{Radius=>0.05,"fill"=>"green","stroke"=>"black","stroke-width"=>0.01,Size=>2};

F21E1 =  (a,b,c,d)=apply(1..4,i -> gNode([random RR,random RR],circ,Draggable=>true))

F21E2 =  gList(Line{a,b},Line{c,d},Circle{crossing(a,b,c,d),Radius=>0.05,"fill"=>"blue"},a,b,c,d)

F22E0 =  Ellipse{[60,60],40,30, "fill"=>linearGradient{("0%","stop-color:red"),("100%","stop-color:yellow")}}

F23E0 =  Polyline{PointList=>{[0,0],[50,50],[0,100],[50,150]},"stroke"=>"yellow","stroke-width"=>5,"marker-end"=>arrow(10,"fill"=>"orange"),Margin=>0.3}

F24E0 =  circ=Circle{Radius=>10,"fill"=>"red","stroke"=>"black",Draggable=>true,TransformMatrix => translation [100,100]};

F24E1 =  gList(Line{circ,projection(circ,vector{0,0},vector{0,1}),"stroke"=>"red"},Line{circ,projection(circ,vector{0,0},vector{1,0}),"stroke"=>"red"},circ,Axes=>true,Margin=>0.15)

F25E0 =  circ = Circle{Radius=>0.1,"fill"=>"red"}

F25E1 =  gList(Polygon{{[-1,0],[1,0.5],[1,-0.5]}},a,b,c)

F25E2 =  gList(Polygon{{a,b,c}},a,b,c)

F26E0 =  v={vector{7.456, 5.201, -4.166}, vector{2.7263, -2.992, 9.144},

        vector{-8.130, 5.783, 0.671}, vector {-2.052, -7.993, -5.649}};

F26E1 =  f={{v#2,v#1,v#0},{v#0,v#1,v#3},{v#0,v#3,v#2},{v#1,v#2,v#3}};

F26E2 =  tetra=gList(apply(4,i->Polygon{f#i,"fill"=>"white"}))

F26E3 =  g = memoize(n -> if n==0 then tetra else gList apply(4,i->g(n-1)++{TransformMatrix=>translation(2^(n-1)*v#i)}))

F26E4 =  apply(4,g)

F27E0 =  Circle{"fill"=>"red","stroke"=>"none",Margin=>0}

F27E1 =  Circle{"fill"=>"red","stroke"=>"none",Margin=>0.5}

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F1E0", "F1E1", "F1E2", "F1E3", "F2E0", "F2E1", "F3E0", "F3E1", "F4E0", "F5E0", "F5E1", "F5E2", "F6E0", "F6E1", "F7E0", "F7E1", "F7E2", "F8E0", "F9E0", "F9E1", "F9E2", "F10E0", "F11E0", "F11E1", "F12E0", "F12E1", "F13E0", "F13E1", "F13E2", "F14E0", "F14E1", "F14E2", "F15E0", "F15E1", "F15E2", "F16E0", "F16E1", "F16E2", "F17E0", "F17E1", "F17E2", "F18E0", "F18E1", "F18E2", "F18E3", "F19E0", "F19E1", "F19E2", "F19E3", "F20E0", "F21E0", "F21E1", "F21E2", "F22E0", "F23E0", "F24E0", "F24E1", "F25E0", "F25E1", "F25E2", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F27E0", "F27E1"}
