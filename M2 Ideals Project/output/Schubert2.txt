needsPackage "Schubert2"

F0E0 =  base(3, Bundle => (A,2,a), Bundle => (B,3,b))

F0E1 =  segre_3 B

F0E2 =  segre(2,A**B)

F1E0 =  p = base(r,s)

F1E1 =  P5 = projectiveBundle(5,p)

F1E2 =  Y = sectionZeroLocus OO_P5(3) -- cubic fourfold

F1E3 =  x = chern(1,OO_Y(1)) -- hyperplane class

F1E4 =  S = intersectionRing p -- important that we use the same base ring

F1E5 =  B1 = S[e_1..e_4,h, Join => false]

F1E6 =  I1 = (ideal vars B1)^3 -- relations imposed by dimension

F1E7 =  I2 = ideal flatten (for i from 0 to 4 list (for j from i+1 to 4 list (B1_i * B1_j))) -- relations imposed by non-intersection

F1E8 =  I3 = ideal for i from 1 to 4 list (e_i^2 + h^2) -- relations that make each exceptional divisor a (-1)-curve

F1E9 =  I = trim (I1 + I2 + I3)

F1E10 =  B = B1/I

F1E11 =  integral B := b -> coefficient((B_4)^2, b)

F1E12 =  K = -(3*h - e_1 - e_2 - e_3 - e_4)

F1E13 =  tX = 1 - K + 7*h^2

F1E14 =  A = intersectionRing Y

F1E15 =  f = map(B, A, {K, -K, K^2, -K^3, K^4, -K^5})

F1E16 =  i = inclusion(f,

         SubTangent => tX,

         SubDimension => 2,

         Base => p)

F1E17 =  X = source i

F1E18 =  Z = target i

F1E19 =  (Ztilde, PN, PNmap, Zmap) = blowup(i)

F1E20 =  AZtilde = intersectionRing Ztilde

F1E21 =  exc = chern(1,exceptionalDivisor Ztilde) -- exceptional class

F1E22 =  EBA = intersectionRing Z

F1E23 =  hyp = Zmap^* promote(x, EBA) -- hyperplane class of Ztilde

F1E24 =  L = OO_Ztilde(2*hyp - exc)

F1E25 =  chi L

F1E26 =  integral ((chern(1,L))^4)

F1E27 =  (r', s') = ((r_A, s_A) / (elt ->  promote(elt, EBA))) / Zmap^*

F1E28 =  L = OO_Ztilde(r' * hyp + s' * exc)

F1E29 =  chi L

F1E30 =  integral ((chern(1,L))^4)

F2E0 =  Gc = flagBundle({2,3}, VariableNames => {,c})

F2E1 =  (Sc,Qc) = bundles Gc

F2E2 =  B = symmetricPower(2,Qc)

F2E3 =  X = projectiveBundle'(dual B, VariableNames => {,{z}})

F2E4 =  A = symmetricPower_5 Qc - symmetricPower_3 Qc ** OO(-z)

F2E5 =  c11 = chern(rank A, A)

F2E6 =  X.StructureMap_* c11

F2E7 =  integral oo

F3E0 =  X = abstractProjectiveSpace 1

F3E1 =  F = OO_X(1) ++ OO_X(1) ++ OO_X(3)

F3E2 =  det F

F3E3 =  chern oo

F3E4 =  rank ooo

F4E0 =  x = chern_3 E

F4E1 =  chern_3 E <- 444

F4E2 =  E

F4E3 =  x

F4E4 =  value x

F5E0 =  Gc = flagBundle({3,2}, VariableNames => {,c})

F5E1 =  (Sc,Qc) = bundles Gc

F5E2 =  B = symmetricPower(5,Qc)

F5E3 =  c6 = chern(rank B,B)

F5E4 =  integral c6

F6E0 =  X = abstractProjectiveSpace_3 point

F6E1 =  Y = abstractProjectiveSpace_4 X

F6E2 =  Y.StructureMap

F6E3 =  X.StructureMap * Y.StructureMap

F7E0 =  base(3, Bundle => (A,2,a), Bundle => (B,3,b))

F7E1 =  chern B

F7E2 =  chern(-A)

F7E3 =  pt = base(n,p,q)

F7E4 =  P2 = abstractProjectiveSpace'_2 pt

F7E5 =  E = abstractSheaf(P2, Rank=>2, ChernClass=>1+p*h+q*h^2)

F7E6 =  chern E(n*h)

F8E0 =  chern_3 E

F8E1 =  chern_3 E <- 444

F8E2 =  chern_3 E

F9E0 =  base(0, Bundle=>(A, n=8, a))

F9E1 =  F = flagBundle ({5,q=3},A)

F9E2 =  CH = intersectionRing F;

F9E3 =  F_(1,3,5)

F9E4 =  {n-q+0-1,n-q+1-3,n-q+2-5}

F9E5 =  F_oo

F10E0 =  X = abstractProjectiveSpace 3

F10E1 =  A =intersectionRing X

F10E2 =  A.VarietyDimension

F11E0 =  intersectionRing abstractProjectiveSpace' 3

F11E1 =  H_(1,1)

F11E2 =  use ooo

F11E3 =  H_(1,1), H_(1,2), H_(1,3)

F12E0 =  P = abstractProjectiveSpace' 3

F12E1 =  tangentBundle P

F12E2 =  chern tangentBundle P

F12E3 =  todd P

F12E4 =  chi OO_P(3)

F12E5 =  pt = base n

F12E6 =  Q = abstractProjectiveSpace'_4 pt

F12E7 =  chi OO_Q(n)

F12E8 =  S = abstractProjectiveSpace'(4, VariableName => h)

F12E9 =  P = abstractProjectiveSpace'(3, S, VariableName => H)

F12E10 =  dim P

F12E11 =  todd P

F13E0 =  X = flagBundle({2,3,4})

F13E1 =  L = bundles X

F13E2 =  rank \ L

F14E0 =  G = flagBundle({2,2}, VariableNames => {,c})

F14E1 =  (S,Q) = bundles G

F14E2 =  B = symmetricPower(3,Q)

F14E3 =  c = chern(rank B,B)

F14E4 =  integral c

F14E5 =  f = n -> (

          G := flagBundle({n-1,2});

          integral chern symmetricPower_(2*n-3) last bundles G

          )

F14E6 =  for n from 2 to 10 list time f n

F15E0 =  G = abstractProjectiveSpace 7

F15E1 =  G.Bundles

F15E2 =  rank \ oo

F15E3 =  X = flagBundle {1,2,3}

F15E4 =  X.Bundles

F15E5 =  rank \ oo

F16E0 =  X = abstractProjectiveSpace' 4

F16E1 =  f = X.StructureMap

F16E2 =  OO_X(1)

F16E3 =  f_* oo

F16E4 =  ch OO_X(1)

F16E5 =  f_* oo

F17E0 =  chern_3 E

F17E1 =  E

F17E2 =  peek E

F17E3 =  chern_3 symbol E <- 44

F17E4 =  chern_3 E

F17E5 =  peek E

F17E6 =  E = 55

F17E7 =  chern_3 symbol E <- 44

F18E0 =  base(7, Bundle => (E,4,c))

F18E1 =  E

F18E2 =  exteriorPower E

F18E3 =  chern oo

F19E0 =  euler abstractProjectiveSpace 5

F19E1 =  euler flagBundle {1,1,1,1,1}

F20E0 =  base(4, Bundle => (A,2,c), Bundle => (B,3,d))

F20E1 =  chern A

F20E2 =  segre B

F20E3 =  chern(A**B)

F20E4 =  chern_3 symmetricPower_3 dual A

F20E5 =  segre_2 Hom(exteriorPower_2 A,exteriorPower_2 B)

F21E0 =  G = flagBundle({2,2})

F21E1 =  (S,T,U) = schubertRing G

F21E2 =  c = schubertCycle({1,0},G)

F21E3 =  a = T c

F21E4 =  a^2

F21E5 =  U oo

F22E0 =  F1 = flagBundle({1,2,2,1,3})

F22E1 =  F2 = flagBundle({3,3,3})

F22E2 =  f = map(F2,F1)

F23E0 =  X = abstractProjectiveSpace' 2

F23E1 =  chi OO_X(-1), chi OO_X(0), chi OO_X(1), chi OO_X(2), chi OO_X(3)

F23E2 =  Y = abstractProjectiveSpace'(2, base n)

F23E3 =  chi OO_Y(n)

F24E0 =  F = abstractProjectiveSpace 2

F24E1 =  f = F.StructureMap

F24E2 =  source f

F24E3 =  f_* OO_F

F24E4 =  f_* OO_F(1)

F24E5 =  target f

F24E6 =  f^* OO_point

F25E0 =  Gc = flagBundle({3,3}, VariableNames => {,c})

F25E1 =  (Sc,Qc) = bundles Gc

F25E2 =  B = symmetricPower_3 Qc

F25E3 =  X = projectiveBundle'(dual B, VariableNames => {,{z}})

F25E4 =  A = symmetricPower_6 Qc - symmetricPower_3 Qc ** OO(-z)

F25E5 =  integral chern A

F26E0 =  A = QQ[x]

F26E1 =  B = QQ[y]

F26E2 =  c = 2_B

F26E3 =  f = map(B,A,gens B)

F26E4 =  extensionAlgebra(f,c)

F26E5 =  oo.PullBack

F27E0 =  base(4,Bundle => (A,2,a), Bundle => (B,3,b))

F27E1 =  netList chern(2,4,B-A)

F28E0 =  base(4, Bundle => (B,3,b))

F28E1 =  chern B

F28E2 =  segre B

F29E0 =  pt = base(n)

F29E1 =  X = abstractProjectiveSpace'_4 pt

F29E2 =  chern_1 OO_X(1)

F29E3 =  F = abstractSheaf(X, Rank => 2, ChernClass => 1 + 5*h + 10*h^2)

F29E4 =  F' = 2 * (exteriorPower_2 cotangentBundle X)(2) - 5 * OO_X(-1) - 5 * OO_X

F29E5 =  chern F'

F29E6 =  rank F'

F29E7 =  F === dual F'(-2)

F29E8 =  chi F(n*h)

F30E0 =  p = point

F30E1 =  S = intersectionRing p

F30E2 =  Y = projectiveBundle(5,p)

F30E3 =  A = intersectionRing Y

F30E4 =  B = S[h, Join => false]/h^3 -- A^*(P2), but using 2 times a line as the generating class:

F30E5 =  integral B := (b) -> (4 * coefficient((B_0)^2, b))

F30E6 =  c = 1 + (9/2)*h + (15/2)*h^2 -- normal class

F30E7 =  f = map(B,A,{-h, h, h^2, h^3, h^4, h^5})

F30E8 =  i = inclusion(f,

         NormalClass => c,

         Codimension => 3,

         Base => p) -- Base not necessary, will be correctly computed

F30E9 =  Z = target i

F30E10 =  X = source i

F30E11 =  Xstruct = X / point

F30E12 =  rank Xstruct_* tangentBundle X

F30E13 =  integral chern tangentBundle Z

F31E0 =  base(3, Bundle => (A,2,a), Bundle => (B,3,b))

F31E1 =  chern_3 B

F31E2 =  chern(2,A**B)

F32E0 =  X = abstractProjectiveSpace 1

F32E1 =  F = OO_X(1)

F32E2 =  chi F^10

F33E0 =  X = abstractProjectiveSpace 1

F33E1 =  Hom(OO_X(3),OO_X)

F33E2 =  chi oo

F34E0 =  X = abstractProjectiveSpace 1

F34E1 =  OO_X(1) - OO_X(2)

F34E2 =  chi oo

F35E0 =  X = abstractProjectiveSpace' 4

F35E1 =  OO_X(3)

F35E2 =  chi oo

F35E3 =  pt = base n

F35E4 =  Y = abstractProjectiveSpace'(4,pt)

F35E5 =  OO_Y(n)

F35E6 =  chi oo

F35E7 =  A = intersectionRing Y

F35E8 =  chern OO_Y(1)

F35E9 =  OO(h)

F35E10 =  chern oo

F36E0 =  X = abstractProjectiveSpace 4

F36E1 =  id_X

F37E0 =  X = abstractProjectiveSpace 4

F37E1 =  X.Base

F37E2 =  Y = abstractProjectiveSpace_3 X

F37E3 =  Y.Base

F38E0 =  base(3,Bundle => (E,4,c))

F38E1 =  F = flagBundle({2,2},E)

F38E2 =  bundles F

F38E3 =  rank \ oo

F38E4 =  chern \ ooo

F38E5 =  product toList oo

F38E6 =  intersectionRing flagBundle({2,2},E,VariableNames=>{{a,b},t})

F39E0 =  X = abstractVariety(1,QQ[r,s,e_1,f_1,D,K,Degrees=>{2:0,4:1}])

F39E1 =  X.TangentBundle = abstractSheaf(X,Rank=>1,ChernClass=>1-K)

F39E2 =  chi OO_X

F39E3 =  chi OO(D)

F39E4 =  E = abstractSheaf(X,Rank => r, ChernClass => 1+e_1)

F39E5 =  F = abstractSheaf(X,Rank => s, ChernClass => 1+f_1)

F39E6 =  chi Hom(E,F)

F40E0 =  X = abstractProjectiveSpace' 1

F40E1 =  dual OO_X(-1)

F40E2 =  chi oo

F41E0 =  X = abstractProjectiveSpace' 3

F41E1 =  L = OO_X(1)

F41E2 =  chern L

F41E3 =  ch L

F42E0 =  x = chern_3 E

F42E1 =  R = QQ[chern_1 E,chern_2 E,chern_3 E]

F42E2 =  R_x

F43E0 =  X = abstractProjectiveSpace'(4,base n,VariableName => h)

F43E1 =  F = abstractSheaf(X, Rank => 2, ChernClass => 1 + 5*h + 10*h^2)

F43E2 =  chi (F ** OO(n*h))

F44E0 =  F = flagBundle({3,2},VariableNames => {{chern_1 S .. chern_3 S},{chern_1 Q,chern_2 Q}})

F44E1 =  A = intersectionRing F

F44E2 =  (S,Q) = bundles F

F44E3 =  chern Q

F44E4 =  chern S

F45E0 =  base(0, Bundle=>(A, n=8, a))

F45E1 =  F = flagBundle ({r=5,3},A)

F45E2 =  CH = intersectionRing F;

F45E3 =  schubertCycle((0,1,5,6,7),F)

F45E4 =  {n-r+0-0,n-r+1-1,n-r+2-5,n-r+3-6,n-r+4-7}

F45E5 =  schubertCycle(oo,F)

F46E0 =  chern_3 E

F47E0 =  X = abstractProjectiveSpace 4

F47E1 =  f = X.StructureMap

F47E2 =  target f

F48E0 =  X = projectiveBundle' 4

F48E1 =  F = OO_X(2) ++ OO_X(3) ++ OO_X(4)

F48E2 =  Y = projectiveBundle' F

F48E3 =  dim Y

F48E4 =  integral (chern_1 OO_Y(1))^(dim Y)

F48E5 =  bundles X/rank

F49E0 =  X = projectiveBundle 4

F49E1 =  F = OO_X(2) ++ OO_X(3) ++ OO_X(4)

F49E2 =  Y = projectiveBundle F

F49E3 =  dim Y

F49E4 =  integral (chern_1 OO_Y(1))^(dim Y)

F49E5 =  bundles X/rank

F50E0 =  X = abstractProjectiveSpace 1

F50E1 =  OO_X(1) * OO_X(2)

F50E2 =  chi oo

F51E0 =  X = abstractProjectiveSpace 0

F51E1 =  Y = abstractProjectiveSpace 2

F51E2 =  i = map(Y,X,OO_X)

F51E3 =  (Ytilde, PN, PNmap, Ymap) = blowup(i)

F51E4 =  Ediv = chern(1, exceptionalDivisor Ytilde) -- the class of the exceptional divisor

F51E5 =  integral (Ediv^2)

F51E6 =  B = base(r,s,t)

F51E7 =  X = abstractProjectiveSpace(1, B)

F51E8 =  Y = abstractProjectiveSpace(3, B)

F51E9 =  i = map(Y,X,OO_X(3)) --includes P^1 into P^3 as the twisted cubic

F51E10 =  (Ytilde, PN, PNmap, Ymap) = blowup(i)

F51E11 =  Ediv = chern(1, exceptionalDivisor Ytilde)

F51E12 =  hyperplane = chern(1,OO_Y(1))

F51E13 =  (rsurf, ssurf, tsurf) = (x -> hyperplane * x) \ (r,s,t) --classes of surfaces of degrees r,s,t

F51E14 =  (ptr, pts, ptt) = (x -> (Ymap^* x) - Ediv) \ oo --proper transforms of each surface

F51E15 =  integral(ptr * pts * ptt)

F52E0 =  I = incidenceCorrespondence({1,2,3})

F52E1 =  source I

F52E2 =  target I

F53E0 =  S = base(2,p,q, Bundle =>(A,1,a), Bundle => (B,2,"b"))

F53E1 =  intersectionRing S

F53E2 =  degrees oo

F53E3 =  chern (A*B)

F53E4 =  integral oo

F53E5 =  X = abstractProjectiveSpace'(3,S,VariableName => H)

F53E6 =  intersectionRing X

F53E7 =  f = X.StructureMap

F53E8 =  x = chern f_* (f^* OO_S(p*a_1) * OO_X(q*H))

F53E9 =  y = chern f_* OO_X((f^*(p*a_1))+q*H)

F53E10 =  x == y

F54E0 =  Gb = flagBundle({2,2}, base n, VariableNames => {,b})

F54E1 =  Qb = last bundles Gb

F54E2 =  chi symmetricPower_n Qb

F54E3 =  chi OO_Gb(n*b_1)

F54E4 =  P5 = abstractProjectiveSpace'(5,base n,VariableName=>H)

F54E5 =  chi(OO(n*H)-OO((n-2)*H))

F55E0 =  X = abstractProjectiveSpace 2

F55E1 =  - OO_X(1)

F55E2 =  chern oo

F56E0 =  S = base(n, Bundle => (E,3,c))

F56E1 =  E

F56E2 =  n

F56E3 =  n = E = 4;

F56E4 =  E

F56E5 =  n

F56E6 =  use S

F56E7 =  E

F56E8 =  n

F57E0 =  tangentBundle abstractProjectiveSpace 4

F57E1 =  exteriorPower_4 oo

F57E2 =  chern oo

F58E0 =  G = flagBundle {2,2}

F58E1 =  dim G

F58E2 =  A = intersectionRing G

F58E3 =  f = (chern_1 OO_G(1))^4

F58E4 =  integral f

F58E5 =  pt = base n

F58E6 =  F = flagBundle_{2,2} pt

F58E7 =  integral (chern_1 OO_F(n))^4

F59E0 =  todd abstractProjectiveSpace 6

F60E0 =  base(3, Bundle => (E,3,c))

F60E1 =  chern E

F60E2 =  chern schur_{1,1,1} E

F60E3 =  chern schur_{2,1} E

F60E4 =  chern schur_{3} E

F61E0 =  X = base(5, Bundle => (L,1,{l}), Bundle => (M,1,{m}), Bundle => (N,1,{n}))

F61E1 =  degeneracyLocus2(0,L+M+N,OO_X)

F61E2 =  degeneracyLocus2(1,L+M+N,2*OO_X)

F61E3 =  degeneracyLocus2(2,L+M+N,3*OO_X)

F61E4 =  X = base(5, Bundle => (A,3,a), Bundle => (B,3,b))

F61E5 =  degeneracyLocus2(0,B,OO_X)

F61E6 =  degeneracyLocus2(1,B,2*OO_X)

F61E7 =  degeneracyLocus2(2,B,3*OO_X)

F61E8 =  degeneracyLocus2(1,B,A)

F61E9 =  degeneracyLocus2(2,B,A)

F61E10 =  degeneracyLocus2(3,B,A)

F62E0 =  G = flagBundle{2,3}

F62E1 =  (S,Q) = bundles G

F62E2 =  B = symmetricPower(2,Q)

F62E3 =  X = projectiveBundle'(dual B, VariableNames => {,{z}})

F62E4 =  A = symmetricPower_5 Q - symmetricPower_3 Q ** OO(-z)

F62E5 =  integral chern A

F63E0 =  f = (n,d,e) -> (

         X = base(n,

              Bundle => (symbol D,d,chern_1 symbol D .. chern_d symbol D),

              Bundle => (symbol E,e,chern_1 symbol E .. chern_e symbol E));

         p := chern(exteriorPower dual D * E) - 1;

         assert( p % ctop D == 0 );

         p // ctop D );

F63E1 =  n = 4;

F63E2 =  for d from 1 to 3 do for e from 1 to 4 do << endl << "d=" << d << " e=" << e << " P(D,E) = " << f(n,d,e) << endl

F64E0 =  A=QQ[t]/ideal(t^3)

F64E1 =  X=abstractVariety(2,A)

F64E2 =  OO_X

F64E3 =  chern OO_X

F64E4 =  X.TangentBundle  = abstractSheaf(X,Rank=>2, ChernClass=>(1+t)^3)

F64E5 =  todd X

F64E6 =  integral A := f -> coefficient(t^2,f);

F64E7 =  chi OO_X(2*t)

F65E0 =  P = abstractProjectiveSpace 3

F65E1 =  tangentBundle P

F65E2 =  chern tangentBundle P

F65E3 =  todd P

F65E4 =  chi OO_P(3)

F65E5 =  PP = abstractProjectiveSpace

F65E6 =  X = PP 4

F65E7 =  pt = base n

F65E8 =  Q = abstractProjectiveSpace_4 pt

F65E9 =  chi OO_Q(n)

F65E10 =  S = abstractProjectiveSpace(4, VariableName => symbol h)

F65E11 =  P = abstractProjectiveSpace(3, S, VariableName => H)

F65E12 =  dim P

F65E13 =  todd P

F66E0 =  X = abstractProjectiveSpace 4

F66E1 =  f = X.StructureMap

F66E2 =  source f

F67E0 =  F = flagBundle {1,1,2}

F67E1 =  F.SubBundles

F67E2 =  rank \ oo

F67E3 =  netList \\ chern \ ooo

F68E0 =  chern_1 E .. chern_10 E

F69E0 =  S = base(4, Bundle => (E,4,c) )

F69E1 =  X = flagBundle( {2,2}, E )

F69E2 =  f = X.StructureMap

F69E3 =  chern E

F69E4 =  f^* oo

F69E5 =  f^* E

F69E6 =  chern oo

F70E0 =  X = base(5, Bundle => (A,3,a), Bundle => (B,3,b))

F70E1 =  Z = degeneracyLocus(2,B,A)

F70E2 =  Z/X

F70E3 =  (Z/X)_* 1

F71E0 =  X = abstractProjectiveSpace 4

F71E1 =  OO_X

F71E2 =  rank oo

F71E3 =  chi ooo

F72E0 =  rank tangentBundle abstractProjectiveSpace 4

F73E0 =  X = abstractVariety(2,QQ[r,D,d_1,K,c_2,d_2,Degrees=>{0,3:1,2:2}])

F73E1 =  X.TangentBundle = abstractSheaf(X,Rank=>2,ChernClass=>1-K+c_2)

F73E2 =  todd X

F73E3 =  chi OO_X

F73E4 =  E = abstractSheaf(X,Rank => r, ChernClass => 1+d_1+d_2)

F73E5 =  chi ( E - rank E * OO_X )

F73E6 =  chi ( OO(D) - OO_X )

F73E7 =  chi OO_D

F73E8 =  p_a = D -> 1 - chi OO_D;

F73E9 =  p_a D

F73E10 =  Y = abstractProjectiveSpace'_2 base n

F73E11 =  factor p_a (n*h)

F73E12 =  Z = abstractProjectiveSpace'_(1,VariableName => k) abstractProjectiveSpace'_1 base(m,n)

F73E13 =  factor p_a (m*h + n*k)

F74E0 =  X = flagBundle({2,2}) --the Grassmannian GG(1,3)

F74E1 =  (S,Q) = bundles X

F74E2 =  L = exteriorPower(2,dual S)

F74E3 =  P = flagBundle({5,1}) --Grothendieck-style PP^5

F74E4 =  f = map(P,X,L) -- Plücker embedding of GG(1,3) in PP^5

F74E5 =  H = last bundles P

F74E6 =  f^* (chern(1,H)) -- hyperplane section, should be sigma_1

F74E7 =  f_* chern(0,S) --expect 2 times hyperplane class since GG(1,3) has degree 2

F75E0 =  P3 = flagBundle({1,3},VariableNames => H)

F75E1 =  GG13 = flagBundle({2,2},VariableNames => K)

F75E2 =  I = incidenceCorrespondence(GG13,P3)

F75E3 =  c = chern(1, last bundles P3) --the hyperplane class

F75E4 =  I_* (c^2) --the class in GG13 corresponding to lines meeting a given line, i.e. sigma_1

F75E5 =  d = (chern(2, last bundles GG13))^2 --the class of a point in GG13

F75E6 =  I^* d --the class in $P3$ of points lying in the line corresponding to d, i.e. c^2

F76E0 =  X = abstractVariety(3, QQ[c,d,e,Degrees=>{1,2,3}])

F76E1 =  F = abstractSheaf(X, ChernCharacter => 1 + c + d + e)

F76E2 =  adams_3 F

F76E3 =  ch oo

F77E0 =  X = abstractProjectiveSpace 4

F77E1 =  f = X.StructureMap

F77E2 =  sectionClass f

F77E3 =  integral oo

F77E4 =  G = flagBundle {2,2}

F77E5 =  G.StructureMap

F77E6 =  sectionClass oo

F77E7 =  integral oo

F78E0 =  Ph = abstractProjectiveSpace'_3 base n

F78E1 =  factor chi OO(n*h)

F78E2 =  todd Ph

F79E0 =  F = flagBundle {1,1,2}

F79E1 =  F.QuotientBundles

F79E2 =  rank \ oo

F79E3 =  netList \\ chern \ ooo

F80E0 =  X = base(5, Bundle => (A,3,a), Bundle => (B,3,b))

F80E1 =  E = kernelBundle(2,B,A)

F80E2 =  Z = variety E

F80E3 =  i = Z/X

F80E4 =  i_* 1

F80E5 =  i_* chern_1 E

F80E6 =  i_* (chern_1 E)^2

F80E7 =  i_* (chern_1 E)^3

F80E8 =  i_* E

F80E9 =  integral (chern_1 E)^4

F80E10 =  integral ch E

F80E11 =  F = kernelBundle(1,B,A)

F80E12 =  W = variety F

F80E13 =  j = W/X

F80E14 =  j_* chern_1 F

F81E0 =  point

F81E1 =  dim point

F81E2 =  intersectionRing point

F81E3 =  X = abstractProjectiveSpace 4

F81E4 =  f = X.StructureMap

F81E5 =  target f

F82E0 =  B = flagBundle({3,1})

F82E1 =  E = first bundles B

F82E2 =  incidenceCorrespondence({1,2},E)

F83E0 =  A = flagBundle({3,3},VariableNames => H)

F83E1 =  S = first bundles A

F83E2 =  G = flagBundle({1,2},S,VariableNames => K)

F83E3 =  RG = intersectionRing G

F83E4 =  c = H_(2,3)*((K_(2,1))^2) + H_(1,1)*K_(2,2)

F83E5 =  toSchubertBasis c

F84E0 =  tangentBundle abstractProjectiveSpace 4

F84E1 =  symmetricPower_4 oo

F84E2 =  chern oo

F84E3 =  pt = base n

F84E4 =  X = abstractProjectiveSpace'_2 pt

F84E5 =  tangentBundle X

F84E6 =  F = symmetricPower_n oo

F84E7 =  chern F

F84E8 =  ch F

F84E9 =  chi F

F85E0 =  X = abstractProjectiveSpace 1

F85E1 =  OO_X(1) + OO_X(2)

F85E2 =  chi oo

F85E3 =  1 + OO_X(1)

F85E4 =  chi oo

F85E5 =  ch OO_X(1)

F85E6 =  Y = abstractProjectiveSpace'(3,X,VariableName=>k)

F85E7 =  ch OO_Y(2)

F85E8 =  OO_Y(2) ++ OO_X(1)

F85E9 =  ch oo

F85E10 =  chi ooo

F86E0 =  X = abstractProjectiveSpace 3

F86E1 =  try X.TautologicalLineBundle else print "bundle not found"

F86E2 =  L = tautologicalLineBundle X

F86E3 =  L === X.TautologicalLineBundle

F86E4 =  rank L

F86E5 =  chern L

F86E6 =  OO_X(1)

F86E7 =  L === oo

F86E8 =  tautologicalLineBundle X

F86E9 =  L === oo

F87E0 =  X = abstractProjectiveSpace' 2

F87E1 =  Y = abstractProjectiveSpace'_2 X

F87E2 =  tangentBundle Y

F87E3 =  chern oo

F87E4 =  tangentBundle Y.StructureMap

F87E5 =  chern oo

F88E0 =  X = base(5, n, Bundle => (E,3,c), Bundle => (T,5,t), Bundle => (L,1,{h}))

F88E1 =  X.TangentBundle = T

F88E2 =  Y = sectionZeroLocus E

F88E3 =  Y.TautologicalLineBundle = OO_Y(h)

F88E4 =  chern tangentBundle Y

F88E5 =  integral oo

F88E6 =  chi ((tangentBundle Y)(n))

F89E0 =  X = abstractVariety(3, QQ[c,d,Degrees=>{1,2}])

F89E1 =  F = abstractSheaf(X, ChernCharacter => 3+c+d)

F89E2 =  chern F

F89E3 =  integral oo

F90E0 =  X = point

F90E1 =  RX = intersectionRing X

F90E2 =  Y = abstractProjectiveSpace 3

F90E3 =  RY = intersectionRing Y

F90E4 =  fUpper = map(RX, RY, splice{4:0_RX})

F90E5 =  fLower = method()

F90E6 =  fLower RX := a -> promote(a,RY) * ctop last bundles Y;

F90E7 =  incl = abstractVarietyMap(Y,X,fUpper,fLower)

F90E8 =  integral incl_* 1_RX

F90E9 =  X = point

F90E10 =  Y = abstractProjectiveSpace 3

F90E11 =  incl = map(Y,X,OO_X)

F91E0 =  X = abstractProjectiveSpace_3 point

F91E1 =  Y = abstractProjectiveSpace_2 X

F91E2 =  Z = abstractProjectiveSpace_1 Y

F91E3 =  Z/Z

F91E4 =  Z/Y

F91E5 =  Z/X

F91E6 =  Z/point

F92E0 =  T = abstractProjectiveSpace 2

F92E1 =  S = abstractProjectiveSpace 0

F92E2 =  i = map(T,S,OO_S) -- inclusion of a point in P^2

F92E3 =  X = first blowup(i)

F92E4 =  exceptionalDivisor X

F92E5 =  chern oo

F93E0 =  X = abstractProjectiveSpace' 2

F93E1 =  Y = abstractProjectiveSpace'_2 X

F93E2 =  cotangentBundle Y

F93E3 =  chern oo

F93E4 =  cotangentBundle Y.StructureMap

F93E5 =  chern oo

F94E0 =  X = abstractVariety(3,QQ[K,c_2,c_3, Degrees => {1..3}][D,Join=>false])

F94E1 =  X.TangentBundle = abstractSheaf(X,Rank=>3,ChernClass=>1-K+c_2+c_3)

F94E2 =  chi OO(D)

F95E0 =  dim abstractProjectiveSpace 4

F96E0 =  dim abstractProjectiveSpace 4

F97E0 =  X = abstractProjectiveSpace' 3

F97E1 =  L = OO_X(1)

F97E2 =  chern L

F97E3 =  ch_1 L, ch_2 L, ch_3 L

F98E0 =  X = abstractVariety(3, QQ[c])

F98E1 =  F = abstractSheaf(X, ChernCharacter => 3 + c)

F98E2 =  ch F

F98E3 =  chern F

F99E0 =  G = flagBundle{3,2}

F99E1 =  B = symmetricPower_5 last bundles G

F99E2 =  ctop B

F99E3 =  degree oo

F99E4 =  integral ooo

F100E0 =  chern_3 E <- 44

F100E1 =  E

F100E2 =  chern_3 E

F101E0 =  X = abstractProjectiveSpace' 4

F101E1 =  h

F101E2 =  F = OO_h

F101E3 =  chern F

F101E4 =  ch F

F102E0 =  Gd = flagBundle({1,3}, VariableNames => {,"d"})

F102E1 =  (Sd,Qd) = bundles Gd

F102E2 =  f = projectiveBundle'(dual symmetricPower_2 Qd, VariableNames => {,{e}})

F102E3 =  integral (2*d1 + e)^8

F103E0 =  X = abstractVariety(3, QQ[c,d,e,Degrees=>{1,2,3}])

F103E1 =  adams(3, 1 + c + d + e)

F104E0 =  G = abstractProjectiveSpace 7

F104E1 =  G.BundleRanks

F104E2 =  X = flagBundle {1,2,3}

F104E3 =  X.BundleRanks

F105E0 =  pt = base n

F105E1 =  X = abstractProjectiveSpace'(3,pt)

F105E2 =  A = intersectionRing X

F105E3 =  ch ((OO_X(1)) ^** 2)

F105E4 =  ch ((OO_X(1)) ^** 3)

F105E5 =  ch ((OO_X(1)) ^** n)

F106E0 =  X = abstractProjectiveSpace 4

F106E1 =  tangentBundle X

F106E2 =  variety oo

exampleIDS = {"F0E0", "F0E1", "F0E2", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F1E10", "F1E11", "F1E12", "F1E13", "F1E14", "F1E15", "F1E16", "F1E17", "F1E18", "F1E19", "F1E20", "F1E21", "F1E22", "F1E23", "F1E24", "F1E25", "F1E26", "F1E27", "F1E28", "F1E29", "F1E30", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F6E0", "F6E1", "F6E2", "F6E3", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F7E6", "F8E0", "F8E1", "F8E2", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F10E0", "F10E1", "F10E2", "F11E0", "F11E1", "F11E2", "F11E3", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F12E6", "F12E7", "F12E8", "F12E9", "F12E10", "F12E11", "F13E0", "F13E1", "F13E2", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F16E5", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F17E7", "F18E0", "F18E1", "F18E2", "F18E3", "F19E0", "F19E1", "F20E0", "F20E1", "F20E2", "F20E3", "F20E4", "F20E5", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F21E5", "F22E0", "F22E1", "F22E2", "F23E0", "F23E1", "F23E2", "F23E3", "F24E0", "F24E1", "F24E2", "F24E3", "F24E4", "F24E5", "F24E6", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F25E5", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F27E0", "F27E1", "F28E0", "F28E1", "F28E2", "F29E0", "F29E1", "F29E2", "F29E3", "F29E4", "F29E5", "F29E6", "F29E7", "F29E8", "F30E0", "F30E1", "F30E2", "F30E3", "F30E4", "F30E5", "F30E6", "F30E7", "F30E8", "F30E9", "F30E10", "F30E11", "F30E12", "F30E13", "F31E0", "F31E1", "F31E2", "F32E0", "F32E1", "F32E2", "F33E0", "F33E1", "F33E2", "F34E0", "F34E1", "F34E2", "F35E0", "F35E1", "F35E2", "F35E3", "F35E4", "F35E5", "F35E6", "F35E7", "F35E8", "F35E9", "F35E10", "F36E0", "F36E1", "F37E0", "F37E1", "F37E2", "F37E3", "F38E0", "F38E1", "F38E2", "F38E3", "F38E4", "F38E5", "F38E6", "F39E0", "F39E1", "F39E2", "F39E3", "F39E4", "F39E5", "F39E6", "F40E0", "F40E1", "F40E2", "F41E0", "F41E1", "F41E2", "F41E3", "F42E0", "F42E1", "F42E2", "F43E0", "F43E1", "F43E2", "F44E0", "F44E1", "F44E2", "F44E3", "F44E4", "F45E0", "F45E1", "F45E2", "F45E3", "F45E4", "F45E5", "F46E0", "F47E0", "F47E1", "F47E2", "F48E0", "F48E1", "F48E2", "F48E3", "F48E4", "F48E5", "F49E0", "F49E1", "F49E2", "F49E3", "F49E4", "F49E5", "F50E0", "F50E1", "F50E2", "F51E0", "F51E1", "F51E2", "F51E3", "F51E4", "F51E5", "F51E6", "F51E7", "F51E8", "F51E9", "F51E10", "F51E11", "F51E12", "F51E13", "F51E14", "F51E15", "F52E0", "F52E1", "F52E2", "F53E0", "F53E1", "F53E2", "F53E3", "F53E4", "F53E5", "F53E6", "F53E7", "F53E8", "F53E9", "F53E10", "F54E0", "F54E1", "F54E2", "F54E3", "F54E4", "F54E5", "F55E0", "F55E1", "F55E2", "F56E0", "F56E1", "F56E2", "F56E3", "F56E4", "F56E5", "F56E6", "F56E7", "F56E8", "F57E0", "F57E1", "F57E2", "F58E0", "F58E1", "F58E2", "F58E3", "F58E4", "F58E5", "F58E6", "F58E7", "F59E0", "F60E0", "F60E1", "F60E2", "F60E3", "F60E4", "F61E0", "F61E1", "F61E2", "F61E3", "F61E4", "F61E5", "F61E6", "F61E7", "F61E8", "F61E9", "F61E10", "F62E0", "F62E1", "F62E2", "F62E3", "F62E4", "F62E5", "F63E0", "F63E1", "F63E2", "F64E0", "F64E1", "F64E2", "F64E3", "F64E4", "F64E5", "F64E6", "F64E7", "F65E0", "F65E1", "F65E2", "F65E3", "F65E4", "F65E5", "F65E6", "F65E7", "F65E8", "F65E9", "F65E10", "F65E11", "F65E12", "F65E13", "F66E0", "F66E1", "F66E2", "F67E0", "F67E1", "F67E2", "F67E3", "F68E0", "F69E0", "F69E1", "F69E2", "F69E3", "F69E4", "F69E5", "F69E6", "F70E0", "F70E1", "F70E2", "F70E3", "F71E0", "F71E1", "F71E2", "F71E3", "F72E0", "F73E0", "F73E1", "F73E2", "F73E3", "F73E4", "F73E5", "F73E6", "F73E7", "F73E8", "F73E9", "F73E10", "F73E11", "F73E12", "F73E13", "F74E0", "F74E1", "F74E2", "F74E3", "F74E4", "F74E5", "F74E6", "F74E7", "F75E0", "F75E1", "F75E2", "F75E3", "F75E4", "F75E5", "F75E6", "F76E0", "F76E1", "F76E2", "F76E3", "F77E0", "F77E1", "F77E2", "F77E3", "F77E4", "F77E5", "F77E6", "F77E7", "F78E0", "F78E1", "F78E2", "F79E0", "F79E1", "F79E2", "F79E3", "F80E0", "F80E1", "F80E2", "F80E3", "F80E4", "F80E5", "F80E6", "F80E7", "F80E8", "F80E9", "F80E10", "F80E11", "F80E12", "F80E13", "F80E14", "F81E0", "F81E1", "F81E2", "F81E3", "F81E4", "F81E5", "F82E0", "F82E1", "F82E2", "F83E0", "F83E1", "F83E2", "F83E3", "F83E4", "F83E5", "F84E0", "F84E1", "F84E2", "F84E3", "F84E4", "F84E5", "F84E6", "F84E7", "F84E8", "F84E9", "F85E0", "F85E1", "F85E2", "F85E3", "F85E4", "F85E5", "F85E6", "F85E7", "F85E8", "F85E9", "F85E10", "F86E0", "F86E1", "F86E2", "F86E3", "F86E4", "F86E5", "F86E6", "F86E7", "F86E8", "F86E9", "F87E0", "F87E1", "F87E2", "F87E3", "F87E4", "F87E5", "F88E0", "F88E1", "F88E2", "F88E3", "F88E4", "F88E5", "F88E6", "F89E0", "F89E1", "F89E2", "F89E3", "F90E0", "F90E1", "F90E2", "F90E3", "F90E4", "F90E5", "F90E6", "F90E7", "F90E8", "F90E9", "F90E10", "F90E11", "F91E0", "F91E1", "F91E2", "F91E3", "F91E4", "F91E5", "F91E6", "F92E0", "F92E1", "F92E2", "F92E3", "F92E4", "F92E5", "F93E0", "F93E1", "F93E2", "F93E3", "F93E4", "F93E5", "F94E0", "F94E1", "F94E2", "F95E0", "F96E0", "F97E0", "F97E1", "F97E2", "F97E3", "F98E0", "F98E1", "F98E2", "F98E3", "F99E0", "F99E1", "F99E2", "F99E3", "F99E4", "F100E0", "F100E1", "F100E2", "F101E0", "F101E1", "F101E2", "F101E3", "F101E4", "F102E0", "F102E1", "F102E2", "F102E3", "F103E0", "F103E1", "F104E0", "F104E1", "F104E2", "F104E3", "F105E0", "F105E1", "F105E2", "F105E3", "F105E4", "F105E5", "F106E0", "F106E1", "F106E2"}
