needsPackage "ChainComplexExtras"

F0E0 =  R = ZZ/101[a,b]

F0E1 =  I = monomialIdeal (ideal vars R)^3

F0E2 =  T2 = taylor(2,I)

F0E3 =  T3 = taylor(3,I)

F1E0 =  S = ZZ/101[a,b,c]

F1E1 =  kRes = res coker vars S

F1E2 =  multBya = extend(kRes,kRes,matrix{{a}})

F1E3 =  isChainComplexMap(multBya)

F1E4 =  T = chainComplex(map(S^1,S^1,a))

F1E5 =  T' = chainComplex{map(S^1/(ideal a),S^1, 1), map(S^1,S^1, -a)}[1]

F1E6 =  phi = chainComplexMap(T',T,apply(toList(min T..max T), i->id_(T_i)))

F1E7 =  isChainComplexMap phi

F2E0 =  S=ZZ/101[x,y]/ideal(x*y)

F2E1 =  C=chainComplex(matrix{{x}},matrix{{y}}**S^{ -1},matrix{{x}}**S^{ -2})[1]

F2E2 =  isChainComplex C

F2E3 =  C'=prependZeroMap appendZeroMap C

F2E4 =  min C', nonzeroMin C'

F2E5 =  max C', nonzeroMax C'

F3E0 =  S = ZZ/32003[a,b,c]

F3E1 =  red = map(S,S,toList(numgens S:0_S))

F3E2 =  C = koszul gens (ideal vars S)^2

F3E3 =  G = S^{0,-1,-2,-3,-4,-5,-6}

F3E4 =  D = apply(length C+1, i-> C_i++G++G)

F3E5 =  zG = map(G,G,0)

F3E6 =  difs0 = apply(length C, i-> (map(D_i, D_(i+1), matrix{{C.dd_(i+1), map(C_i,G,0), map(C_i,G,0)},{map(G,C_(i+1),0), zG, zG},{map(G,C_(i+1),0), id_G, zG}})));

F3E7 =  len = #difs0

F3E8 =  Q = apply(len, i-> random(target difs0_i, target difs0_i))|

F3E9 =  difs1 = apply(len, i-> Q_i*difs0_i*Q_(i+1)^(-1));

F3E10 =  E = chainComplex difs1

F3E11 =  isMinimalChainComplex E

F3E12 =  time m = minimize (E[1]);

F3E13 =  isQuasiIsomorphism m

F3E14 =  E[1] == source m

F3E15 =  E' = target m

F3E16 =  isChainComplex E'

F3E17 =  isMinimalChainComplex E'

F4E0 =  R = ZZ/101[a,b,c]

F4E1 =  K = koszulComplex(ideal vars R)

F5E0 =  kk= ZZ/101

F5E1 =  S = kk[a,b,c]

F5E2 =  R = S/ideal"ab2,a2c3"

F5E3 =  f = map(R,S,vars R)

F5E4 =  C = res(R^1/(ideal vars R))**(R^1/(ideal vars R)^5);

F5E5 =  mods = for i from 0 to max C list pushForward(f, C_i);

F5E6 =  C = chainComplex for i from min C+1 to max C list map(mods_(i-1),mods_i,substitute(matrix C.dd_i,S));

F5E7 =  time m = resolutionOfChainComplex C;

F5E8 =  time n = cartanEilenbergResolution C;

F5E9 =  betti source m

F5E10 =  betti source n

F5E11 =  betti target minimize source n

F5E12 =  C=koszul (gens (ideal vars S)^2)

F5E13 =  betti source resolutionOfChainComplex C

F5E14 =  betti source cartanEilenbergResolution C

F6E0 =  R = ZZ/101[a,b,c]

F6E1 =  kRes = res coker vars R

F6E2 =  multBya = extend(kRes,kRes,matrix{{a}})

F6E3 =  isQuasiIsomorphism(multBya)

F6E4 =  F = extend(kRes,kRes,matrix{{1_R}})

F6E5 =  isQuasiIsomorphism(F)

F7E0 =  R = ZZ/101[a,b,c]

F7E1 =  kRes = res coker vars R

F7E2 =  multBya = extend(kRes,kRes,matrix{{a}})

F7E3 =  mapList = apply((min kRes..max kRes), i -> multBya_i)

F7E4 =  multBya2 = chainComplexMap(kRes,kRes,toList mapList)

F7E5 =  multBya2 == multBya

F8E0 =  R = ZZ/32003[a..d]

F8E1 =  I = monomialCurveIdeal(R,{1,2,3})

F8E2 =  C = koszulComplex(ideal vars R) ** (R^1/I);

F8E3 =  m = res C;

F8E4 =  isQuasiIsomorphism m

F8E5 =  betti source m

F8E6 =  C == target m

F9E0 =  S=ZZ/101[x,y]/ideal(x*y)

F9E1 =  C=prependZeroMap appendZeroMap chainComplex(matrix{{x}},matrix{{y}}**S^{ -1},matrix{{x}}**S^{ -2})[1]

F9E2 =  removeZeroTrailingTerms C

F9E3 =  S=ZZ

F9E4 =  C=prependZeroMap  chainComplex( map(S^0,S^1,0))[3]

F9E5 =  removeZeroTrailingTerms C

F10E0 =  R = ZZ/101[a,b,c]

F10E1 =  kRes = res coker vars R

F10E2 =  Hom(kRes,kRes)

F11E0 =  R = ZZ/101[a,b,c]

F11E1 =  S = R/ideal{a^2,b^2,c^2}

F11E2 =  kRes = res coker vars R

F11E3 =  kResS = substitute(kRes, S)

F12E0 =  S=ZZ/101[x,y]/ideal(x*y)

F12E1 =  C=chainComplex(matrix{{x}},matrix{{y}}**S^{ -1},matrix{{x}}**S^{ -2})[1]

F12E2 =  prependZeroMap C

F12E3 =  appendZeroMap C

F13E0 =  kk= ZZ/101

F13E1 =  S = kk[a,b,c]

F13E2 =  R = S/ideal(a^3)

F13E3 =  M = R^1/ideal(a)

F13E4 =  C = chainComplex{map(M,R^0,0)}

F13E5 =  m=cartanEilenbergResolution (C, LengthLimit => 10)

F13E6 =  isQuasiIsomorphism(m, LengthLimit=> 10)

F13E7 =  isQuasiIsomorphism(m, LengthLimit => 12)

F14E0 =  kk= ZZ/101

F14E1 =  S = kk[a,b,c]

F14E2 =  R = S/ideal(a^3)

F14E3 =  M = R^1/ideal(a)

F14E4 =  C = chainComplex{map(M,R^0,0)}

F14E5 =  n =resolutionOfChainComplex (C, LengthLimit => 10)

F14E6 =  isExact(cone n, LengthLimit=> 10)

F14E7 =  isExact(cone n, LengthLimit=> 12)

F15E0 =  R = QQ[a,b,c,d,e];

F15E1 =  I = monomialIdeal(b^4*c^3, a*b^3*c*d^2*e, a*b^2*c^2*d*e^2, a^2*d^3*e^5, b*c^2*d^5*e^4);

F15E2 =  s = scarfComplex I

F15E3 =  s.dd

F15E4 =  (betti s, betti res I)

F15E5 =  I = monomialIdeal(a^2*b^11*c^7*d*e, a^5*b^10*c^2*d^3*e^2, a^6*b^8*c^11*d^2*e^3, a^3*b^5*c^3*d^5*e^4, a^8*b^2*c*d^4*e^7);

F15E6 =  isExact(prependZeroMap scarfComplex I)

F15E7 =  isMinimalChainComplex scarfComplex I

F15E8 =  betti scarfComplex I == betti res I

F15E9 =  scarfComplex I == res I

F16E0 =  S=ZZ/101[x,y]/ideal(x*y)

F16E1 =  C=chainComplex(matrix{{x}},matrix{{y}}**S^{ -1},matrix{{x}}**S^{ -2})[1]

F16E2 =  isChainComplex C

F16E3 =  C'=prependZeroMap appendZeroMap C

F16E4 =  min C', nonzeroMin C'

F16E5 =  max C', nonzeroMax C'

F17E0 =  S=ZZ/101[x,y]/ideal(x*y)

F17E1 =  C=chainComplex(matrix{{x}},matrix{{y}}**S^{ -1},matrix{{x}}**S^{ -2})[1]

F17E2 =  appendZeroMap C

F17E3 =  prependZeroMap C

F18E0 =  R = ZZ/101[a,b,c]

F18E1 =  k = coker vars R

F18E2 =  kRes = res k

F18E3 =  isExact kRes

F18E4 =  trivialCx = chainComplex matrix {{1_R}}

F18E5 =  isExact trivialCx

F19E0 =  R = ZZ/101[a,b]

F19E1 =  I = monomialIdeal (ideal vars R)^3

F19E2 =  T = taylorResolution(I)

F19E3 =  T.dd

F20E0 =  E=ZZ/101[e_0,e_1,SkewCommutative=>true]

F20E1 =  C=dual res (coker transpose F.dd_3,LengthLimit=>8)[-3]

F20E2 =  C1=trivialHomologicalTruncation(C,-2,2)

F20E3 =  C2=trivialHomologicalTruncation(C1,-3,3)

F20E4 =  C3=removeZeroTrailingTerms C2

F20E5 =  C4=trivialHomologicalTruncation(C3,2,2)

F21E0 =  S=ZZ/101[x,y]

F21E1 =  C=res ideal vars S, C'=chainComplex(matrix{{x}},matrix{{y}})

F21E2 =  isChainComplex C, isChainComplex C'

F21E3 =  kk=ZZ/101

F21E4 =  E=kk[e_0..e_n,SkewCommutative =>true]

F21E5 =  m=map(E^{0,1},,matrix{{ e_0,e_1*e_2},{e_3*e_4,e_0*e_1*e_4}})

F21E6 =  fm=res coker m

F21E7 =  isChainComplex fm

F21E8 =  dualfm = dual fm

F21E9 =  isChainComplex dualfm

F21E10 =  f2=res( coker dualfm.dd_(-5),LengthLimit=> 6)[6]

F21E11 =  betti f2

F21E12 =  betti dual fm

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F3E10", "F3E11", "F3E12", "F3E13", "F3E14", "F3E15", "F3E16", "F3E17", "F4E0", "F4E1", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F5E9", "F5E10", "F5E11", "F5E12", "F5E13", "F5E14", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F10E0", "F10E1", "F10E2", "F11E0", "F11E1", "F11E2", "F11E3", "F12E0", "F12E1", "F12E2", "F12E3", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F13E6", "F13E7", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F14E7", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F15E6", "F15E7", "F15E8", "F15E9", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F16E5", "F17E0", "F17E1", "F17E2", "F17E3", "F18E0", "F18E1", "F18E2", "F18E3", "F18E4", "F18E5", "F19E0", "F19E1", "F19E2", "F19E3", "F20E0", "F20E1", "F20E2", "F20E3", "F20E4", "F20E5", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F21E5", "F21E6", "F21E7", "F21E8", "F21E9", "F21E10", "F21E11", "F21E12"}
