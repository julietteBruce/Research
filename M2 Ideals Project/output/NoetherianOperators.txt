needsPackage "NoetherianOperators"

F0E0 =  R = QQ[x_1,x_2,x_3,x_4]

F0E1 =  MM = matrix {{x_3,x_1,x_2},{x_1,x_2,x_4}}

F0E2 =  P = minors(2,MM)

F0E3 =  M = ideal{x_1^2,x_2^2,x_3^2,x_4^2}

F0E4 =  Q = joinIdeals(P,M);

F0E5 =  L1 = noetherianOperators(Q) -- A set of Noetherian operators

F0E6 =  Q1 = getIdealFromNoetherianOperators(L1, P);

F0E7 =  Q == Q1

F0E8 =  L2 = noetherianOperators(M) -- Another set of Noetherian operators

F0E9 =  Q2 = getIdealFromNoetherianOperators(L2, P);

F0E10 =  Q == Q2

F0E11 =  Q = ideal(3*x_1^2*x_2^2-x_2^3*x_3-x_1^3*x_4-3*x_1*x_2*x_3*x_4+2*x_3^2*x_4^2,3*x_1^3*x_2*x_4-3*x_1*x_2^2*x_3*x_4-3*x_1^2*x_3*x_4^2+3*x_2*x_3^2*x_4^2+2*x_2^3-2*x_3*x_4^2,3*x_2^4*x_3-6*x_1*x_2^2*x_3*x_4+3*x_1^2*x_3*x_4^2+x_2^3-x_3*x_4^2,4*x_1*x_2^3*x_3+x_1^4*x_4-6*x_1^2*x_2*x_3*x_4-3*x_2^2*x_3^2*x_4+4*x_1*x_3^2*x_4^2,x_2^5-x_1*x_2^3*x_4-x_2^2*x_3*x_4^2+x_1*x_3*x_4^3,x_1*x_2^4-x_2^3*x_3*x_4-x_1*x_2*x_3*x_4^2+x_3^2*x_4^3,x_1^4*x_2-x_2^3*x_3^2-2*x_1^3*x_3*x_4+2*x_1*x_2*x_3^2*x_4,x_1^5-4*x_1^3*x_2*x_3+3*x_1*x_2^2*x_3^2+2*x_1^2*x_3^2*x_4-2*x_2*x_3^3*x_4,3*x_1^4*x_3*x_4-6*x_1^2*x_2*x_3^2*x_4+3*x_2^2*x_3^3*x_4+2*x_1^3*x_2+6*x_1*x_2^2*x_3-6*x_1^2*x_3*x_4-2*x_2*x_3^2*x_4,4*x_2^3*x_3^3+4*x_1^3*x_3^2*x_4-12*x_1*x_2*x_3^3*x_4+4*x_3^4*x_4^2-x_1^4+6*x_1^2*x_2*x_3+3*x_2^2*x_3^2-8*x_1*x_3^2*x_4)

F0E12 =  L = noetherianOperators(Q)

F0E13 =  Q' = getIdealFromNoetherianOperators(L, P);

F0E14 =  Q == Q'

F0E15 =  R = QQ[x_1, x_2, x_3]

F0E16 =  Q = ideal(x_1^2, x_2^2, x_1-x_2*x_3)

F0E17 =  L = noetherianOperators(Q)

F0E18 =  Q' = getIdealFromNoetherianOperators(L,radical Q)

F0E19 =  Q == Q'

F0E20 =  R = QQ[x_1..x_9]

F0E21 =  MM = genericMatrix(R, 3, 3)

F0E22 =  P = minors(2, MM)

F0E23 =  M = ideal(x_1^2, x_5^2, x_9^2, x_2, x_3, x_4, x_6, x_7, x_8)

F0E24 =  Q = joinIdeals(P, M)

F0E25 =  L = noetherianOperators(Q)

F0E26 =  Q' = getIdealFromNoetherianOperators(L, radical Q)

F0E27 =  Q == Q'

F1E0 =  R = QQ[x_1,x_2,x_3]

F1E1 =  U = image matrix {{x_1^2,x_1*x_2,x_1*x_3}, {x_2^2,x_2*x_3,x_3^2}}

F1E2 =  differentialPrimaryDecomposition U

F2E0 =  R = CC[x,y];

F2E1 =  I = ideal {x,y};

F2E2 =  D = zeroDimensionalDual(origin R, I^3)

F2E3 =  truncate(D, {0}, 1)

F3E0 =  R = QQ[x,y,t];

F3E1 =  I1 = ideal(x^2, y^2-x*t);

F3E2 =  I2 = ideal((x-t)^2);

F3E3 =  I = intersect(I1, I2);

F3E4 =  noetherianOperators(I, radical I1)

F3E5 =  noetherianOperators(I, radical I2) == noetherianOperators(I2)

F4E0 =  R = QQ[x,y,t];

F4E1 =  I = ideal(x^2, y^2-x*t);

F4E2 =  p = point{{0_CC,0, 3}};

F4E3 =  noetherianOperators(I, Strategy => "Hybrid", Sampler => I -> p)

F5E0 =  R = CC[x,y];

F5E1 =  I = ideal{x^2-y^2}

F5E2 =  p = point matrix{{1,1}};

F5E3 =  gCorners(p, I)

F5E4 =  S = gCorners(p, I, StandardBasis=>true)

F5E5 =  R = CC[x,y,z];

F5E6 =  J = ideal{z*(x*y-4), x-y}

F5E7 =  q = point matrix{{1.4142136, 1.4142136, 0}};

F5E8 =  gCorners(q, J, Tolerance=>1e-5)

F5E9 =  gCorners(q, J, StandardBasis=>true)

F6E0 =  R = QQ[a,b];

F6E1 =  I = ideal{a^3,b^3}

F6E2 =  D = zeroDimensionalDual(origin(R), I)

F6E3 =  dim D

F6E4 =  S = CC[x,y];

F6E5 =  J = ideal{(y-2)^2,y-x^2}

F6E6 =  p = point matrix{{1.4142136_CC,2_CC}};

F6E7 =  D = zeroDimensionalDual(p, J)

F6E8 =  dim D

F7E0 =  R = QQ[x,y]

F7E1 =  S = diffOpRing R

F7E2 =  D = diffOp((x+y)*dx + (3+x) * dx*dy^2)

F7E3 =  (x^2+3) * D

F7E4 =  D + D

F7E5 =  D(x^5*y^2)

F7E6 =  D = diffOp(matrix{{x*dx}, {y*dy}})

F7E7 =  f = matrix{{x^2}, {y^2}}

F7E8 =  D f

F8E0 =  R = QQ[x_1..x_3, a,b];

F8E1 =  S = diffOpRing R;

F8E2 =  gens S

F8E3 =  coefficientRing S

F8E4 =  ring diffOp(dx_3^2) === S

F8E5 =  ring diffOp(a_R) === S

F8E6 =  diffOpRing R === S

F9E0 =  R = QQ[x,y,z];

F9E1 =  I = (ideal(x,y,z))^3;

F9E2 =  noetherianOperators(I, Strategy => "MacaulayMatrix")

F9E3 =  noetherianOperators(I, Strategy => "MacaulayMatrix", DegreeLimit => 1)

F10E0 =  R = CC[x,y];

F10E1 =  I = ideal{x^2,x*y}

F10E2 =  d = localHilbertRegularity(origin R, I)

F10E3 =  D = truncatedDual(origin R, I, 3)

F10E4 =  L = hilbertFunction({0,1,2,3}, D)

F11E0 =  R = CC[x]

F11E1 =  pts = {point{{0}},point{{1}},point{{2}}, point{{3}}, point{{4}}}

F11E2 =  vals = {-1, 1/2, 1, 5/4, 7/5}

F11E3 =  rationalInterpolation(pts, vals, R)

F12E0 =  R = QQ[x_1,x_2,x_3,x_4]

F12E1 =  k = 3

F12E2 =  J = ideal((x_1^2-x_2*x_3)^k,(x_1*x_2-x_3*x_4)^k,(x_2^2-x_1*x_4)^k)

F12E3 =  Q = saturate(J,ideal(x_1*x_2*x_3*x_4))

F12E4 =  isPrimary Q

F12E5 =  elapsedTime noetherianOperators(Q, Strategy => "PunctualQuot")

F13E0 =  R = QQ[x_1, x_2, x_3]

F13E1 =  Q = ideal(x_1^2, x_2^2, x_1-x_2*x_3)

F13E2 =  mapToPunctualHilbertScheme Q

F14E0 =  S = diffOpRing (QQ[x,y,t]);

F14E1 =  D = diffOp(3*x^3*dx^2*dt + (x+y)*dt^2)

F14E2 =  normalize D

F14E3 =  I = ideal(x^2,y^2 - x*t);

F14E4 =  nops = noetherianOperators(I, Strategy => "MacaulayMatrix");

F14E5 =  nops / normalize == {diffOp 1_S, diffOp dy, diffOp(t*dy^2 + 2*dx), diffOp(t*dy^3 + 6*dx*dy)}

F15E0 =  R = QQ[x1,x2,x3,x4]

F15E1 =  U = image matrix{{x1*x2,x2*x3,x3*x4,x4*x1}, {x1^2,x2^2,x3^2,x4^2}}

F15E2 =  amult U

F15E3 =  I = ideal( x1^3*x3^2-x2^5, x2^2*x4^3-x3^5, x1^5*x4^2-x2^7, x1^2*x4^5-x3^7 )

F15E4 =  amult I

F16E0 =  R=QQ[x_1,x_2,x_3,x_4]

F16E1 =  Q = ideal(x_1^2,x_1*x_2,x_1*x_3,x_1*x_4-x_3^2+x_1,x_3^2*x_4-x_2^2,x_3^2*x_4-x_3^2-x_2*x_3+2*x_1)

F16E2 =  isPrimary Q

F16E3 =  noetherianOperators(Q, Strategy => "PunctualQuot")

F17E0 =  R = CC[x,y];

F17E1 =  S = polySpace matrix{{x+y,2*x+y^2}};

F17E2 =  D = dualSpace(matrix{{1,x,y}}, origin R);

F17E3 =  M = pairingMatrix(S, D)

F17E4 =  pairingMatrix(S, 1+x)

F17E5 =  pairingMatrix(x, D)

F17E6 =  pairingMatrix(x, 1+x)

F18E0 =  R = QQ[x_1,x_2,x_3]

F18E1 =  U = image matrix {{x_1, x_2^2, 0}, {x_3, x_3^2, x_2^2-x_1*x_3}}

F18E2 =  noetherianOperators U

F19E0 =  R = CC[x,y];

F19E1 =  I = ideal{x^2-y^3}

F19E2 =  eliminatingDual(origin R, I, {0}, 2)

F19E3 =  eliminatingDual(origin R, I, {0,1}, 2)

F20E0 =  R = CC[x,y];

F20E1 =  I = (ideal {x,y})^4;

F20E2 =  D = zeroDimensionalDual(origin R, I)

F20E3 =  hilbertFunction D

F21E0 =  R = QQ[x,y,t];

F21E1 =  Q1 = ideal(x^2, y^2 + x*t);

F21E2 =  Q2 = ideal((x+t)^2);

F21E3 =  I = intersect(Q1, Q2);

F21E4 =  P = radical Q1;

F21E5 =  pt = point{{0,0,2}};

F21E6 =  A = specializedNoetherianOperators(I, pt, DependentSet => {x,y}) / normalize

F21E7 =  B = noetherianOperators(I, P) /

F21E8 =  A == B

F21E9 =  S = CC[x,y,t]

F21E10 =  pt = point{{0,0,2.1}}

F21E11 =  specializedNoetherianOperators(sub(I, S), pt, DependentSet => {x,y})

F22E0 =  R = CC[x,y];

F22E1 =  I = ideal {x-y};

F22E2 =  D = truncatedDual(origin R, I, 5)

F22E3 =  truncate(D, 3)

F23E0 =  R = QQ[x,y,z]

F23E1 =  U = image matrix{{x,y,z},{y,z,x}}

F23E2 =  P = first associatedPrimes comodule U

F23E3 =  noetherianOperators(U, P)

F23E4 =  associatedPrimes comodule U /

F23E5 =  netList differentialPrimaryDecomposition U

F24E0 =  R = QQ[x_1..x_4]

F24E1 =  M = matrix{{x_1*x_3, x_1*x_2, x_1^2*x_2}, {x_1^2, x_2^2, x_1^2*x_4}}

F24E2 =  U = image M

F24E3 =  sols = solvePDE M

F24E4 =  netList sols

F24E5 =  amult U == sum(sols / last / (l -> #l))

F25E0 =  R = QQ[x1,x2,x3,x4]

F25E1 =  U = image matrix{{x1*x2,x2*x3,x3*x4,x4*x1}, {x1^2,x2^2,x3^2,x4^2}}

F25E2 =  dpd = differentialPrimaryDecomposition U

F25E3 =  M = dpd / (L -> getModuleFromNoetherianOperators(first L, last L)) // intersect

F25E4 =  M == U

F26E0 =  R = QQ[x,y];

F26E1 =  S = diffOpRing R;

F26E2 =  D = diffOp(x*dx+y*dy^3)

F26E3 =  evaluate(D, point{{1,2}})

F27E0 =  R = QQ[x,y,t];

F27E1 =  I = ideal(x^2, y^2-x*t);

F27E2 =  noetherianOperators I

F28E0 =  R = QQ[x,y];

F28E1 =  I = ideal((x+y)^2);

F28E2 =  P = radical I;

F28E3 =  A = noetherianOperators(I, P, DependentSet => {x})

F28E4 =  B = noetherianOperators(I, P, DependentSet => {y})

F28E5 =  getIdealFromNoetherianOperators(A, P) == getIdealFromNoetherianOperators(B, P)

F29E0 =  R = QQ[x_1,x_2]

F29E1 =  S = diffOpRing R

F29E2 =  diffOp matrix {{(x_1 * x_2 + 3)*dx_1*dx_2^2}, {dx_2^2}}

F29E3 =  diffOp (x_1^2*dx_1^2)

F30E0 =  R = CC[x,y]

F30E1 =  pts = {point{{1,0}}, point{{0,1}}, point{{1,1}}, point{{-1,-1}}, point{{-1,0}}}

F30E2 =  vals = {1, 0, 1/2, -1/2, -1}

F30E3 =  numBasis = matrix{{x,y}}

F30E4 =  denBasis = matrix{{x^2,y^2}}

F30E5 =  rationalInterpolation(pts, vals, numBasis, denBasis)

F31E0 =  R = QQ[x,y,t]

F31E1 =  I = ideal(x^2, y^2 - x*t)

F31E2 =  P = radical I

F31E3 =  N = noetherianOperators I

F31E4 =  phi = map(R, R, diagonalMatrix apply(numgens R, i -> random QQ))

F31E5 =  N' = coordinateChangeOps_phi N

F31E6 =  I' = phi I

F31E7 =  P' = phi P

F31E8 =  I' == getIdealFromNoetherianOperators(N', P')

F32E0 =  R = CC[x,y];

F32E1 =  I = ideal{x^2, y*x}

F32E2 =  truncatedDual(origin(R),I,3)

F32E3 =  p = point matrix{{0_CC, 1_CC}}

F32E4 =  truncatedDual(p,I,3)

F32E5 =  q = point matrix{{0_CC + 1e-10, 1_CC}}

F32E6 =  tol = 1e-6;

F32E7 =  S = truncatedDual(q,I,3, Tolerance => tol)

F32E8 =  (m,c) = coefficients gens S;

F32E9 =  m*clean(tol, c)

F33E0 =  R = QQ[x,y,t]

F33E1 =  I = intersect(ideal((y+t)^2), ideal(x^2, y^2 - t*x))

F33E2 =  radI = radical I

F33E3 =  primes = associatedPrimes I

F33E4 =  L = primes / (P -> (P, noetherianOperators(I, P)))

F33E5 =  N = noethOpsFromComponents L

F33E6 =  all(flatten table(N, I_*, (D, f) -> (D f) % radI == 0), identity)

F34E0 =  R = QQ[x,y]

F34E1 =  S = diffOpRing R

F34E2 =  D = diffOp matrix{{x*dx}, {(y+1)*dx*dy}}

F34E3 =  f = matrix{{x+y}, {x*y*(y+1)}}

F34E4 =  D f

F34E5 =  D = diffOp dx^2

F34E6 =  D(x^3+y*x^2)

F35E0 =  R = CC[x,y];

F35E1 =  T = polySpace matrix{{1,x,y}};

F35E2 =  D = dualSpace(matrix{{x-y}}, origin R);

F35E3 =  S = orthogonalInSubspace(D, T, 1e-6)

F36E0 =  R = QQ[x_1..x_9]

F36E1 =  MM = genericMatrix(R, 3, 3)

F36E2 =  P = minors(2, MM)

F36E3 =  M = ideal(x_1^2, x_2^2, x_3^2, x_4, x_5, x_6, x_7, x_8, x_9)

F36E4 =  Q = joinIdeals(P, M)

F36E5 =  isPrimary Q

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F0E7", "F0E8", "F0E9", "F0E10", "F0E11", "F0E12", "F0E13", "F0E14", "F0E15", "F0E16", "F0E17", "F0E18", "F0E19", "F0E20", "F0E21", "F0E22", "F0E23", "F0E24", "F0E25", "F0E26", "F0E27", "F1E0", "F1E1", "F1E2", "F2E0", "F2E1", "F2E2", "F2E3", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F4E0", "F4E1", "F4E2", "F4E3", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F5E9", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F7E6", "F7E7", "F7E8", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F9E0", "F9E1", "F9E2", "F9E3", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F11E0", "F11E1", "F11E2", "F11E3", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F13E0", "F13E1", "F13E2", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F16E0", "F16E1", "F16E2", "F16E3", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F18E0", "F18E1", "F18E2", "F19E0", "F19E1", "F19E2", "F19E3", "F20E0", "F20E1", "F20E2", "F20E3", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F21E5", "F21E6", "F21E7", "F21E8", "F21E9", "F21E10", "F21E11", "F22E0", "F22E1", "F22E2", "F22E3", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4", "F23E5", "F24E0", "F24E1", "F24E2", "F24E3", "F24E4", "F24E5", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F26E0", "F26E1", "F26E2", "F26E3", "F27E0", "F27E1", "F27E2", "F28E0", "F28E1", "F28E2", "F28E3", "F28E4", "F28E5", "F29E0", "F29E1", "F29E2", "F29E3", "F30E0", "F30E1", "F30E2", "F30E3", "F30E4", "F30E5", "F31E0", "F31E1", "F31E2", "F31E3", "F31E4", "F31E5", "F31E6", "F31E7", "F31E8", "F32E0", "F32E1", "F32E2", "F32E3", "F32E4", "F32E5", "F32E6", "F32E7", "F32E8", "F32E9", "F33E0", "F33E1", "F33E2", "F33E3", "F33E4", "F33E5", "F33E6", "F34E0", "F34E1", "F34E2", "F34E3", "F34E4", "F34E5", "F34E6", "F35E0", "F35E1", "F35E2", "F35E3", "F36E0", "F36E1", "F36E2", "F36E3", "F36E4", "F36E5"}
