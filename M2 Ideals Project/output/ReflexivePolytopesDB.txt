needsPackage "ReflexivePolytopesDB"

F0E0 =  e = KSEntry "4 5  M:53 5 N:9 5 H:3,43 [-80] id:0

F0E1 =  str = toExternalString e

F0E2 =  e1 = value str

F0E3 =  e1 === e

F1E0 =  str = " 1   0   0   0   0   1   2   1   0  -2   0  -2

F1E1 =  A = matrixFromString str

F1E2 =  str = "[[1, -1, -1, 1, -1, -1, -1, 1, 1, 0], [0, 1, 0, -1, 1, 0, 0, -1, -1, 0],

       [-1, 0, 0, 0, 1, 1, 0, 0, 0, 0], [2, 0, 0, 1, -1, -1, -1, -1, 0, 0]]"

F1E3 =  matrixFromString str

F1E4 =  str = "

F1E5 =  matrixFromString str

F2E0 =  topes = kreuzerSkarke(5,Limit=>1);

F2E1 =  A = matrix topes_0

F2E2 =  header = description topes_0

F2E3 =  needsPackage "Polyhedra";

F2E4 =  P = convexHull A

F2E5 =  LP = latticePoints P

F2E6 =  #LP

F2E7 =  vertices P

F2E8 =  numColumns vertices P

F2E9 =  P2 = polar P

F2E10 =  LP2 = latticePoints P2

F2E11 =  #LP2

F2E12 =  vertices P2

F2E13 =  numColumns vertices P2

F3E0 =  e = KSEntry "4 5  M:53 5 N:9 5 H:3,43 [-80] id:0

F3E1 =  toString e

F4E0 =  topes = kreuzerSkarkeDim3();

F4E1 =  #topes

F4E2 =  tope = topes_100

F4E3 =  header = description tope

F4E4 =  A = matrix tope

F4E5 =  needsPackage "Polyhedra"

F4E6 =  P = convexHull A

F4E7 =  P2 = polar P

F4E8 =  # latticePoints P

F4E9 =  # latticePoints P2

F4E10 =  # vertices P

F4E11 =  # vertices P2

F4E12 =  isReflexive P

F4E13 =  needsPackage "NormalToricVarieties"

F4E14 =  V0 = normalToricVariety normalFan P

F4E15 =  dim V0

F4E16 =  max V0

F4E17 =  rays V0

F4E18 =  V = makeSimplicial V0

F4E19 =  isSimplicial V

F4E20 =  isProjective V

F4E21 =  isSmooth V

F4E22 =  dim V

F5E0 =  e = KSEntry "4 5  M:53 5 N:9 5 H:3,43 [-80] id:0

F5E1 =  description e

F5E2 =  A = matrix e

F6E0 =  e = KSEntry "4 5  M:53 5 N:9 5 H:3,43 [-80] id:0

F6E1 =  A = matrix e

F6E2 =  topes = kreuzerSkarke(300, Limit=>3)

F6E3 =  netList topes

F6E4 =  topes/matrix

F7E0 =  L = kreuzerSkarke(3, Limit=>5)

F7E1 =  netList L

F7E2 =  A = matrix L_0

F7E3 =  e = KSEntry "4 5  M:53 5 N:9 5 H:3,43 [-80] id:0

F7E4 =  A = matrix e

F8E0 =  topes = kreuzerSkarke(9, 21);

F8E1 =  topes_1

F8E2 =  A = matrix topes_1

F8E3 =  description topes_1

F8E4 =  needsPackage "Polyhedra"

F8E5 =  P = convexHull A

F8E6 =  assert isReflexive P

F8E7 =  P2 = polar P

F8E8 =  (numColumns vertices P, numColumns vertices P2)

F8E9 =  (# latticePoints P, # latticePoints P2)

F8E10 =  L = topes/matrix;

F8E11 =  netList L

F9E0 =  topes = kreuzerSkarke(5, 53, Limit=>4)

F9E1 =  assert(#topes == 4)

F9E2 =  tope = topes_3

F9E3 =  header = description tope

F9E4 =  A = matrix tope

F9E5 =  availableOffline()

F9E6 =  str = "4 12  M:34 12 N:17 8 H:17,30 [-26] id:0

F9E7 =  L = kreuzerSkarke str

F9E8 =  matrix first L

F10E0 =  availableOffline()

F10E1 =  kreuzerSkarke 491

F10E2 =  kreuzerSkarke(11, 24, Limit => 10)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F2E10", "F2E11", "F2E12", "F2E13", "F3E0", "F3E1", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F4E7", "F4E8", "F4E9", "F4E10", "F4E11", "F4E12", "F4E13", "F4E14", "F4E15", "F4E16", "F4E17", "F4E18", "F4E19", "F4E20", "F4E21", "F4E22", "F5E0", "F5E1", "F5E2", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F8E8", "F8E9", "F8E10", "F8E11", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F9E8", "F10E0", "F10E1", "F10E2"}
