needsPackage "Divisor"

F0E0 =  R = QQ[x, y, u, v]/ideal(x * y  - u * v);

F0E1 =  D = divisor({1, -3, -5, 8}, {ideal(x, u), ideal(y, v), ideal(x, v), ideal(y, u)})

F0E2 =  nonCartierLocus( D )

F0E3 =  R = QQ[x, y, u, v]/ideal(x * y  - u * v);

F0E4 =  D = divisor({1, -3, -5, 8}, {ideal(x, u), ideal(y, v), ideal(x, v), ideal(y, u)})

F0E5 =  nonCartierLocus( D, IsGraded => true )

F1E0 =  R = QQ[x,y,u,v]/ideal(x*y-u*v);

F1E1 =  D = divisor(x)

F1E2 =  primes(D)

F1E3 =  E = divisor(x*u)

F1E4 =  primes(E)

F1E5 =  F = divisor({0}, {ideal(x,u)})

F1E6 =  primes(F)

F1E7 =  primes(cleanSupport F)

F1E8 =  primes(1*F)

F2E0 =  R = QQ[x,y,z]/ideal(x*y-z^2);

F2E1 =  D = divisor({1,0,-2}, {ideal(x, z), ideal(x-z,y-z), ideal(y+z, z)});

F2E2 =  cleanSupport(D)

F2E3 =  trim(D)

F2E4 =  D == trim(D)

F3E0 =  R = QQ[x,y,u,v]/ideal(x*y-u*v);

F3E1 =  E = divisor(x*u)

F3E2 =  coefficient({u, x}, E)

F3E3 =  coefficient({x, u}, E)

F4E0 =  R = QQ[x,y,z];

F4E1 =  D = divisor(x);

F4E2 =  isPrincipal(D)

F4E3 =  peek (D#cache)

F4E4 =  E = clearCache(D);

F4E5 =  peek (E#cache)

F5E0 =  R = QQ[x, y];

F5E1 =  D1 = divisor(x^2 * y)

F5E2 =  D2 = divisor(x^2)

F5E3 =  D3 = divisor(y)

F5E4 =  isPrime( D1 )

F5E5 =  isPrime( D2 )

F5E6 =  isPrime( D3 )

F6E0 =  R = QQ[x,y,z];

F6E1 =  canonicalDivisor(R)

F6E2 =  canonicalDivisor(R, IsGraded=>true)

F6E3 =  R = QQ[a,b,c,d]/ideal(c^2-b*d, b*c-a*d, b^2-a*c);

F6E4 =  canonicalDivisor(R)

F7E0 =  R = ZZ/5[x, y];

F7E1 =  D = divisor(x);

F7E2 =  E = toQWeilDivisor(D)

F7E3 =  toQWeilDivisor(E)

F7E4 =  F = divisor({3, 0, -2}, {ideal(x), ideal(y), ideal(x+y)})

F8E0 =  R = QQ[x, y, u, v] / ideal(x * y - u * v);

F8E1 =  D = divisor({1, -2, 3, -4}, {ideal(x, u), ideal(y, u), ideal(x, v), ideal(y, v)})

F8E2 =  positivePart( D )

F8E3 =  negativePart( D )

F8E4 =  D == positivePart(D) - negativePart(D)

F8E5 =  E = divisor({0, 1}, {ideal(x,u), ideal(y,u)})

F8E6 =  positivePart(E)

F8E7 =  negativePart(E)

F8E8 =  E == positivePart(E) - negativePart(E)

F9E0 =  R = ZZ/5[x,y];

F9E1 =  D = divisor({2, 0, -4}, {ideal(x), ideal(y), ideal(x-y)})

F9E2 =  E = (1/2)*D

F9E3 =  F = toRWeilDivisor(D)

F9E4 =  G = toRWeilDivisor(E)

F9E5 =  F == 2*G

F10E0 =  R = QQ[x, y, z];

F10E1 =  D = divisor({1, 2, -3, 4}, {ideal(x), ideal(y), ideal(z), ideal(y)});

F10E2 =  isZeroDivisor( D )

F10E3 =  R = QQ[x, y, z];

F10E4 =  E = divisor({1, 2, -3, 4, 5, -9, 13, 2, -15}, {ideal(x), ideal(x), ideal(x), ideal(y), ideal(y), ideal(y), ideal(z), ideal(z), ideal(z)});

F10E5 =  isZeroDivisor( E )

F11E0 =  R = QQ[x,y];

F11E1 =  m = ideal(x,y);

F11E2 =  M = (R^1/m) ++ R^1

F11E3 =  prune torsionSubmodule M

F12E0 =  R = QQ[x, y, z] / ideal(x * y - z^2);

F12E1 =  D = zeroDivisor( R )

F13E0 =  R = QQ[x, y, z];

F13E1 =  I = ideal(x * y - z^2 )

F13E2 =  isSmooth( I )

F13E3 =  R = QQ[x, y, u, v];

F13E4 =  I = ideal(x * y - u * v)

F13E5 =  isSmooth( I )

F13E6 =  R = QQ[x, y, z];

F13E7 =  J = ideal( x )

F13E8 =  isSmooth( J )

F13E9 =  R = QQ[x, y, z];

F13E10 =  I = ideal(x * y - z^2 )

F13E11 =  isSmooth(I)

F13E12 =  isSmooth(I, IsGraded => true)

F13E13 =  R = QQ[x, y, u, v];

F13E14 =  I = ideal(x * y - u * v)

F13E15 =  isSmooth(I)

F13E16 =  isSmooth(I, IsGraded => true)

F14E0 =  R = QQ[x];

F14E1 =  S = QQ[y];

F14E2 =  f = map(S, R, {y^3});

F14E3 =  ramificationDivisor(f)

F14E4 =  R = QQ[x,y];

F14E5 =  T = QQ[a,b,c,d];

F14E6 =  h = map(R, T, {x^3, x^2*y, x*y^2, y^3});

F14E7 =  S = T/ker h;

F14E8 =  f = map(R, S, {x^3, x^2*y, x*y^2, y^3});

F14E9 =  ramificationDivisor(f)

F14E10 =  R = ZZ/2[t];

F14E11 =  S = ZZ/2[x];

F14E12 =  f = map(S, R, {x^2*(1+x)});

F14E13 =  ramificationDivisor(f)

F14E14 =  R = QQ[x,y];

F14E15 =  S = reesAlgebra(ideal(x,y^2));

F14E16 =  f = map(S, R);

F14E17 =  ramificationDivisor(f,IsGraded=>true)

F15E0 =  R = QQ[x,y,u,v]/ideal(x*y-u*v);

F15E1 =  D = divisor(x)

F15E2 =  coefficient(ideal(x,u), D)

F15E3 =  E = divisor(x*u)

F15E4 =  coefficient(ideal(x,u), E)

F16E0 =  R = QQ[x, y, z];

F16E1 =  D1 = divisor({1/1, 2/2, -6/3}, {ideal(x), ideal(y), ideal(z)}, CoefficientType=>QQ)

F16E2 =  D2 = divisor({1/2, 3/4, 5/6}, {ideal(y), ideal(z), ideal(x)}, CoefficientType=>QQ)

F16E3 =  isWeilDivisor( D1 )

F16E4 =  isWeilDivisor( D2 )

F17E0 =  R=QQ[x];

F17E1 =  D=divisor({3/2}, {ideal(x)}, CoefficientType=>QQ)

F17E2 =  E=divisor({1.5}, {ideal(x)}, CoefficientType=>RR)

F17E3 =  toWeilDivisor(2*D)

F17E4 =  toWeilDivisor(2*E)

F17E5 =  isWeilDivisor(D)

F17E6 =  try toWeilDivisor(D) then print "converted to a WeilDivisor" else print "can't be converted to a WeilDivisor"

F18E0 =  R = QQ[x,y];

F18E1 =  D = divisor(x^2*y/(x+y));

F18E2 =  E = divisor({1/2, -5/3}, {ideal(x), ideal(y)}, CoefficientType=>QQ)

F18E3 =  F = divisor({1.5, 0, -3.2}, {ideal(x), ideal(y), ideal(x^2-y^3)}, CoefficientType=>RR)

F18E4 =  8*D

F18E5 =  (-2/3)*D

F18E6 =  0.0*D

F18E7 =  (3/2)*E

F18E8 =  (-1.414)*E

F18E9 =  6*F

F18E10 =  (-3/2)*F

F19E0 =  R = QQ[x,y,z]/ideal(x^2-y*z);

F19E1 =  m = ideal(x,y,z);

F19E2 =  reflexify(m)

F19E3 =  I = ideal(x,y);

F19E4 =  reflexify(I)

F19E5 =  reflexify(I^2)

F19E6 =  reflexify(I^3)

F19E7 =  R = QQ[x,y,z]/ideal(x^2-y*z);

F19E8 =  m = ideal(x,y,z);

F19E9 =  prune reflexify(m*R^2)

F19E10 =  I = ideal(x,y);

F19E11 =  prune reflexify(I*R^1)

F19E12 =  prune reflexify(I^2*R^1)

F19E13 =  R = QQ[x,y];

F19E14 =  m = ideal(x,y);

F19E15 =  M = m*R^1;

F19E16 =  f = reflexify( M, ReturnMap => true )

F19E17 =  source f

F19E18 =  target f

F19E19 =  R = QQ[x,y,z]/ideal(-y^2*z +x^3 + x^2*z + x*z^2+z^3);

F19E20 =  I = ideal(x-z,y-2*z);

F19E21 =  J = I^21;

F19E22 =  time reflexify(J);

F19E23 =  time reflexify(J*R^1);

F19E24 =  R = ZZ/13[x,y,z]/ideal(x^3 + y^3-z^11*x*y);

F19E25 =  I = ideal(x-4*y, z);

F19E26 =  J = I^20;

F19E27 =  M = J*R^1;

F19E28 =  J1 = time reflexify( J, Strategy=>IdealStrategy )

F19E29 =  J2 = time reflexify( J, Strategy=>ModuleStrategy )

F19E30 =  J1 == J2

F19E31 =  time reflexify( M, Strategy=>IdealStrategy );

F19E32 =  time reflexify( M, Strategy=>ModuleStrategy );

F19E33 =  R = QQ[x,y,u,v]/ideal(x*y-u*v);

F19E34 =  I = ideal(x,u);

F19E35 =  J = I^20;

F19E36 =  M = I^20*R^1;

F19E37 =  time reflexify( J, Strategy=>IdealStrategy )

F19E38 =  time reflexify( J, Strategy=>ModuleStrategy )

F19E39 =  time reflexify( M, Strategy=>IdealStrategy );

F19E40 =  time reflexify( M, Strategy=>ModuleStrategy );

F19E41 =  R = QQ[x,y]/ideal(x*y);

F19E42 =  I = ideal(x,y);

F19E43 =  reflexify(I, KnownDomain=>false)

F19E44 =  reflexify(I, KnownDomain=>true)

F19E45 =  J = ideal(x-y, x+y);

F19E46 =  reflexify(J, KnownDomain=>false)

F19E47 =  reflexify(I, KnownDomain=>true)

F20E0 =  R = QQ[x, y, z];

F20E1 =  D = divisor({1, 2, 3}, {ideal(x * y - z^2), ideal(y * z - x^2), ideal(x * z - y^2)})

F20E2 =  isHomogeneous( D )

F20E3 =  R = QQ[x, y, z];

F20E4 =  D = divisor({1, 2}, {ideal(x * y - z^2), ideal(y^2 - z^3)})

F20E5 =  isHomogeneous( D )

F21E0 =  R = QQ[x, y, z] / ideal(x *y - z^2);

F21E1 =  D = divisor({1/2, 4/3}, {ideal(x, z), ideal(y, z)}, CoefficientType => QQ)

F21E2 =  ceiling( D )

F21E3 =  floor( D )

F21E4 =  E = divisor({0.3, -0.7}, {ideal(x, z), ideal(y,z)}, CoefficientType => RR)

F21E5 =  ceiling( E )

F21E6 =  floor( E )

F22E0 =  R = QQ[x,y,u,v]/ideal(x*y-u*v);

F22E1 =  D = divisor( ideal(x, u) )

F22E2 =  mapToProjectiveSpace(D)

F22E3 =  R = ZZ/7[x,y,z];

F22E4 =  D = divisor(x*y)

F22E5 =  mapToProjectiveSpace(D, Variable=>"Z")

F23E0 =  R = QQ[x, y, z]/ ideal(x * y - z^2);

F23E1 =  D1 = divisor({3, 8}, {ideal(x, z), ideal(y, z)})

F23E2 =  D2 = divisor({8, 1}, {ideal(y, z), ideal(x, z)})

F23E3 =  isLinearEquivalent(D1, D2)

F23E4 =  R = QQ[x, y, z]/ ideal(x * y - z^2);

F23E5 =  D1 = divisor({3, 8}, {ideal(x, z), ideal(y, z)})

F23E6 =  D2 = divisor({8, 1}, {ideal(y, z), ideal(x, z)})

F23E7 =  isLinearEquivalent(D1, D2, IsGraded => true)

F24E0 =  R = QQ[x, y, z];

F24E1 =  D = divisor({-8, 2, 0}, {ideal(x), ideal(y), ideal(x^2+z)})

F24E2 =  getPrimeDivisors( D )

F24E3 =  getPrimeDivisors( cleanSupport D )

F25E0 =  R = QQ[x,y,z];

F25E1 =  D = divisor({1,2,3}, {ideal(x), ideal(y), ideal(z)})

F25E2 =  E = divisor(x*y^2*z^3)

F25E3 =  F = divisor(ideal(x*y^2*z^3))

F25E4 =  G = divisor({{1, ideal(x)}, {2, ideal(y)}, {3, ideal(z)}})

F25E5 =  H = divisor(x) + 2*divisor(y) + 3*divisor(z)

F25E6 =  R = QQ[x,y,z]/ideal(x^2-y*z);

F25E7 =  D = divisor({2}, {ideal(x,y)})

F25E8 =  E = divisor(y)

F25E9 =  R = QQ[x,y,z];

F25E10 =  S = QQ[x3,x2y, x2z, xy2, xyz, xz2, y3, y2z, yz2, z3];

F25E11 =  f = map(R, S, {x^3, x^2*y, x^2*z, x*y^2, x*y*z, x*z^2, y^3, y^2*z, y*z^2, z^3});

F25E12 =  A = S/(ker f);

F25E13 =  D = divisor(x3)

F25E14 =  E = divisor(y2z)

F25E15 =  R = ZZ/7[x,y];

F25E16 =  D = divisor({-1/2, 2/1}, {ideal(y^2-x^3), ideal(x)}, CoefficientType=>QQ)

F25E17 =  D = (-1/2)*divisor(y^2-x^3) + (2/1)*divisor(x)

F25E18 =  R = ZZ/11[x,y,u,v]/ideal(x*y-u*v);

F25E19 =  D = divisor({1.1, -3.14159}, {ideal(x,u), ideal(x, v)}, CoefficientType=>RR)

F25E20 =  D = 1.1*divisor(ideal(x,u)) - 3.14159*divisor(ideal(x,v))

F25E21 =  R = QQ[x,y];

F25E22 =  divisor(x)

F25E23 =  divisor(x/y)

F25E24 =  R = QQ[x,y,z]/ideal(x^2-y*z);

F25E25 =  M = (ideal(y*x,y*z))*R^1;

F25E26 =  divisor(M)

F25E27 =  divisor(M, IsGraded=>true)

F25E28 =  R = QQ[x,y,u,v]/ideal(x*y-u*v);

F25E29 =  M = (ideal(x,u))*R^1;

F25E30 =  matr = map(M, R^1, {{1},{0}});

F25E31 =  divisor(matr)

F25E32 =  divisor(M, Section=>matr)

F25E33 =  R = QQ[x,y,u,v]/ideal(x*y-u*v)

F25E34 =  D = divisor(ideal(x,u), Section=>x)

F25E35 =  R = QQ[x];

F25E36 =  D = divisor(R^1, Section=>matrix{{x^2}})

F26E0 =  R = ZZ/7[x,y,Degrees=>{3, 5}];

F26E1 =  output = findElementOfDegree(1, R)

F26E2 =  output#0/output#1

F26E3 =  findElementOfDegree(-2, R)

F26E4 =  R = QQ[x,y,Degrees=>{{1,2}, {3, 5}}];

F26E5 =  output = findElementOfDegree({1, 3}, R)

F26E6 =  output#0/output#1

F27E0 =  R = QQ[x, y, z];

F27E1 =  D = divisor(x);

F27E2 =  isPrincipal(D, IsGraded => true)

F27E3 =  R = QQ[x, y, z]/ideal(x^2 - y*z);

F27E4 =  D = divisor(x);

F27E5 =  E = divisor(ideal(x,z));

F27E6 =  isPrincipal( D )

F27E7 =  isPrincipal( E )

F28E0 =  R = QQ[x, y, u, v] / ideal(x * y - u * v);

F28E1 =  D1 = divisor({1, -2, 3, -4}, {ideal(x, u), ideal(x, v), ideal(y, u), ideal(y, v)})

F28E2 =  ideal( D1 )

F28E3 =  D2 = divisor(ideal(x,u))

F28E4 =  ideal(D2)

F28E5 =  R = QQ[x,y,z]/(ideal(x^3 + y^3 - z^3));

F28E6 =  D1 = 1.3*divisor(ideal(x, y-z))

F28E7 =  ideal D1

F28E8 =  I1 = ideal (ceiling(D1))

F28E9 =  I2 = ideal (-ceiling(D1))

F28E10 =  reflexify(I1*I2)

F29E0 =  R = QQ[x, y, z]/ideal(x^3 + y^3 - z^3);

F29E1 =  D = divisor(ideal(x, y-z));

F29E2 =  isVeryAmple(D)

F29E3 =  isVeryAmple(2*D)

F29E4 =  isVeryAmple(3*D)

F30E0 =  debugLevel = 1;

F30E1 =  R = QQ[x,y];

F30E2 =  isWellDefined(divisor({1}, {ideal(x)} ))

F30E3 =  isWellDefined(divisor({1/2}, {ideal(x)} ))

F30E4 =  isWellDefined(divisor({1/2}, {ideal(x)}, CoefficientType=>QQ))

F30E5 =  isWellDefined(divisor({1}, {ideal(x,y)}))

F30E6 =  isWellDefined(divisor({1}, {ideal(x^2)}))

F30E7 =  S = QQ[a,b];

F30E8 =  isWellDefined(divisor({1,2}, {ideal(x), ideal(a)}))

F31E0 =  R = QQ[x,y,z];

F31E1 =  D = divisor(x*y^2*z^3)

F31E2 =  H = new HashTable from D

F31E3 =  (2/3)*D

F31E4 =  0.6*D

F32E0 =  R = QQ[x,y,z,w]/ideal(z^2-y*w,y*z-x*w,y^2-x*z);

F32E1 =  T = QQ[a,b];

F32E2 =  f = map(T, R, {a^3, a^2*b, a*b^2, b^3});

F32E3 =  D = divisor(y*z)

F32E4 =  pullback(f, D, Strategy=>Primes)

F32E5 =  pullback(f, D, Strategy=>Sheaves)

F32E6 =  R = QQ[x,y];

F32E7 =  S = QQ[a,b];

F32E8 =  f = map(S, R, {a*b, b});

F32E9 =  D = divisor(x*y*(x+y));

F32E10 =  D1 = pullback(f, D)

F32E11 =  f^* D

F33E0 =  R = QQ[x, y, z] / ideal(x * y - z^2 );

F33E1 =  D1 = divisor({1, 2}, {ideal(x, z), ideal(y, z)})

F33E2 =  D2 = divisor({1/2, 3/4}, {ideal(y, z), ideal(x, z)}, CoefficientType => QQ)

F33E3 =  isQCartier(10, D1)

F33E4 =  isQCartier(10, D2)

F33E5 =  R = QQ[x, y, u, v] / ideal(x * y - u * v);

F33E6 =  D1 = divisor({1, 2}, {ideal(x, u), ideal(y, v)})

F33E7 =  D2 = divisor({1/2, -3/4}, {ideal(y, u), ideal(x, v)}, CoefficientType => QQ)

F33E8 =  isQCartier(10, D1)

F33E9 =  isQCartier(10, D2)

F33E10 =  R = QQ[x, y, z] / ideal(x * y - z^2 );

F33E11 =  D1 = divisor({1, 2}, {ideal(x, z), ideal(y, z)})

F33E12 =  D2 = divisor({1/2, 3/4}, {ideal(y, z), ideal(x, z)}, CoefficientType => QQ)

F33E13 =  isQCartier(10, D1, IsGraded => true)

F33E14 =  isQCartier(10, D2, IsGraded => true)

F34E0 =  R = QQ[x, y, z];

F34E1 =  D1 = divisor(x^2 * y^3 * z)

F34E2 =  D2 = divisor(x * y * z)

F34E3 =  isReduced( D1 )

F34E4 =  isReduced( D2 )

F35E0 =  R = QQ[x,y,u,v]/ideal(x*y-u*v);

F35E1 =  D = divisor(x);

F35E2 =  coefficients(D)

F35E3 =  E = divisor(x*u);

F35E4 =  coefficients(E)

F35E5 =  F = divisor({0, 1/2, -2/3}, {ideal(y, u), ideal(x,u), ideal(x,v)}, CoefficientType => QQ)

F35E6 =  coefficients(F)

F35E7 =  G = divisor({0.5, -0.667}, {ideal(x,u), ideal(x,v)}, CoefficientType => RR)

F35E8 =  coefficients(G)

F36E0 =  R = QQ[x,y,z]/ideal(x^2-y*z);

F36E1 =  m = ideal(x,y,z);

F36E2 =  isReflexive(m)

F36E3 =  isReflexive(m*R^1)

F36E4 =  I = ideal(x,y);

F36E5 =  isReflexive(I)

F36E6 =  isReflexive(I*R^1)

F37E0 =  R = QQ[x, y, u, v] / ideal(x * y - u * v);

F37E1 =  I = ideal(x, u);

F37E2 =  idealPower(5, I)

F37E3 =  I^5

F38E0 =  R = QQ[x, y, z] / ideal(x * y - z^2 );

F38E1 =  D = divisor({1, -2}, {ideal(x, z), ideal(y, z)})

F38E2 =  isSNC( D )

F38E3 =  R = QQ[x, y];

F38E4 =  D = divisor(x*y*(x+y))

F38E5 =  isSNC( D )

F38E6 =  R = QQ[x, y];

F38E7 =  D = divisor(x*y*(x+1))

F38E8 =  isSNC( D )

F38E9 =  R = QQ[x, y, z] / ideal(x * y - z^2 );

F38E10 =  D = divisor({1, -2}, {ideal(x, z), ideal(y, z)})

F38E11 =  isSNC( D, IsGraded => true )

F38E12 =  R = QQ[x, y];

F38E13 =  D = divisor(x*y*(x+y))

F38E14 =  isSNC( D, IsGraded => true )

F38E15 =  R = QQ[x,y,z];

F38E16 =  D = divisor(x*y*(x+y))

F38E17 =  isSNC( D, IsGraded => true)

F39E0 =  R = QQ[x,y,z]/ideal(x^2-y*z);

F39E1 =  m = ideal(x,y,z);

F39E2 =  dualize(m)

F39E3 =  I = ideal(x,y);

F39E4 =  dualize(I)

F39E5 =  dualize(I^2)

F39E6 =  dualize(I^3)

F39E7 =  R = ZZ/2[x,y,z]/ideal(z^2-x*y*z-x^2*y-x*y^2);

F39E8 =  m = ideal(x,y,z);

F39E9 =  J = m^9;

F39E10 =  M = J*R^1;

F39E11 =  time dualize(J, Strategy=>IdealStrategy);

F39E12 =  time dualize(J, Strategy=>ModuleStrategy);

F39E13 =  time dualize(M, Strategy=>IdealStrategy);

F39E14 =  time dualize(M, Strategy=>ModuleStrategy);

F39E15 =  time embedAsIdeal dualize(M, Strategy=>ModuleStrategy);

F39E16 =  R = ZZ/7[x,y,u,v]/ideal(x*y-u*v);

F39E17 =  I = ideal(x,u);

F39E18 =  J = I^15;

F39E19 =  time dualize(J, Strategy=>IdealStrategy);

F39E20 =  time dualize(J, Strategy=>ModuleStrategy);

F39E21 =  R = QQ[x,y]/ideal(x*y);

F39E22 =  J = ideal(x,y);

F39E23 =  dualize(J, KnownDomain=>true)

F39E24 =  dualize(J, KnownDomain=>false)

F40E0 =  R = QQ[x,y,z]/ideal(x^2-y*z)

F40E1 =  isDomain(R)

F40E2 =  S = ZZ/5[x,y]/ideal(x^2*y^3)

F40E3 =  isDomain(S)

F41E0 =  R = QQ[x,y,u,v]/ideal(x*y-u*v);

F41E1 =  D = divisor( ideal(x,u) )

F41E2 =  baseLocus(D)

F41E3 =  R = QQ[x,y,z]/ideal(y^2*z-x*(x+z)*(x-z));

F41E4 =  D = divisor(ideal(y, x))

F41E5 =  baseLocus(D)

F41E6 =  baseLocus(2*D)

F42E0 =  R = QQ[x,y,z]/ideal(x^2-y*z);

F42E1 =  J = ideal(x,y);

F42E2 =  reflexivePower(5, J)

F42E3 =  reflexivePower(6, J)

F42E4 =  R = QQ[x,y,z]/ideal(-y^2*z +x^3 + x^2*z + x*z^2+z^3);

F42E5 =  I = ideal(x-z,y-2*z);

F42E6 =  time J20a = reflexivePower(20, I);

F42E7 =  I20 = I^20;

F42E8 =  time J20b = reflexify(I20);

F42E9 =  J20a == J20b

F42E10 =  R = QQ[x,y,z]/ideal(-y^2*z +x^3 + x^2*z + x*z^2+z^3);

F42E11 =  I = ideal(x-z,y-2*z);

F42E12 =  time J1 = reflexivePower(20, I, Strategy=>IdealStrategy);

F42E13 =  time J2 = reflexivePower(20, I, Strategy=>ModuleStrategy);

F42E14 =  J1 == J2

F43E0 =  R = QQ[x, y, u, v] / ideal(x * y - u * v);

F43E1 =  D = divisor({2, -3}, {ideal(x, u), ideal(y, v)})

F43E2 =  isCartier( D )

F43E3 =  R = QQ[x, y, z] / ideal(x * y - z^2 );

F43E4 =  D = divisor({1, 2}, {ideal(x, z), ideal(y, z)})

F43E5 =  isCartier( D )

F43E6 =  R = QQ[x, y, z];

F43E7 =  D = divisor({1, 2}, {ideal(x), ideal(y)})

F43E8 =  isCartier( D )

F43E9 =  R = QQ[x, y, u, v] / ideal(x * y - u * v);

F43E10 =  D = divisor({2, -3}, {ideal(x, u), ideal(y, v)})

F43E11 =  isCartier(D, IsGraded => true)

F43E12 =  R = QQ[x, y, z] / ideal(x * y - z^2);

F43E13 =  D = divisor({1, 2}, {ideal(x, z), ideal(y, z)})

F43E14 =  isCartier(D, IsGraded => true)

F44E0 =  R = ZZ/7[x,y,u,v]/ideal(x*y-u*v);

F44E1 =  D = divisor(x)

F44E2 =  gbs(D)

F44E3 =  R = ZZ/2[x,y,z]/ideal(z^2+x*y*z+x^2*y+x*y^2);

F44E4 =  J = ideal(x+y, x^2+z);

F44E5 =  D = divisor({2}, {J})

F44E6 =  gbs(D)

F44E7 =  primes(D)

F45E0 =  R = ZZ/7[x,y,z];

F45E1 =  D = divisor(x);

F45E2 =  OO(D)

F45E3 =  OO(2*D)

F45E4 =  OO(0*D)

F45E5 =  OO(-3*D)

F45E6 =  R = QQ[x, y, u, v] / ideal(x * y - u * v);

F45E7 =  D1 = divisor(ideal(x, u))

F45E8 =  D2 = divisor(ideal(x, v))

F45E9 =  OO( D1 )

F45E10 =  OO(D1 + D2)

F45E11 =  R = QQ[x, y, u, v] / ideal(x * y - u * v);

F45E12 =  D2 = divisor({3/5, -4/7, 9/4, -7/8}, {ideal(x, u), ideal(x, v), ideal(y, u), ideal(y, v)}, CoefficientType=>QQ)

F45E13 =  OO( D2 )

F45E14 =  OO( floor(D2) )

F45E15 =  R = ZZ/11[x,y];

F45E16 =  D = divisor(x*y/(x+y))

F45E17 =  divisor(OO(D))

F45E18 =  divisor(OO(D), IsGraded=>true)

F46E0 =  R = QQ[x, y, z] / ideal(x * y - z^2 );

F46E1 =  D = divisor({1, 2}, {ideal(x, z), ideal(y, z)})

F46E2 =  ring( D )

F47E0 =  colList = {{1,3,7}, {2,4,-31}, {1,6,101}, {3,-2,47}, {8,9,1}};

F47E1 =  A = transpose matrix colList;

F47E2 =  b = {1, 2, 3}

F47E3 =  getLinearDiophantineSolution(b, A)

F47E4 =  sol = getLinearDiophantineSolution(b, colList )

F47E5 =  sum apply(#sol, i->(sol#i)*(colList#i) )

F47E6 =  A = matrix{ {1, 0, 0, 0, 0}, {0, 2, 0, 0, 0}, {3, 4, 5, 6, 8} }

F47E7 =  b = {1, 2, 3}

F47E8 =  getLinearDiophantineSolution(b, A, Safe => false)

F48E0 =  R = QQ[x,y,u,v]/ideal(x*y-u*v);

F48E1 =  D = divisor(x)

F48E2 =  getPrimeCount(D)

F48E3 =  E = divisor(x*u)

F48E4 =  getPrimeCount(E)

F48E5 =  F = divisor({0}, {ideal(x,u)})

F48E6 =  getPrimeCount(F)

F48E7 =  getPrimeCount(cleanSupport F)

F48E8 =  getPrimeCount(1*F)

F49E0 =  R = QQ[x,y,z];

F49E1 =  D = divisor({1,0,-2}, {ideal(x), ideal(y), ideal(z)})

F49E2 =  cleanSupport(D)

F50E0 =  R = QQ[x,y]

F50E1 =  M = (ideal(x^2,x*y))*R^1

F50E2 =  embedAsIdeal(M)

F50E3 =  R = QQ[x,y]/ideal(x*y);

F50E4 =  M = (ideal(x^3, y^5))*R^1;

F50E5 =  embedAsIdeal(M)

F50E6 =  N = (ideal(x,y))*R^1;

F50E7 =  embedAsIdeal(N)

F50E8 =  R = QQ[x,y];

F50E9 =  M = R^{-3};

F50E10 =  embedAsIdeal(M, IsGraded=>true)

F50E11 =  R = QQ[x,y];

F50E12 =  M = ideal(x^2, x*y)*R^1;

F50E13 =  L = embedAsIdeal(M, ReturnMap=>true)

F50E14 =  target L#1

F50E15 =  source L#1

F50E16 =  R = QQ[x,y];

F50E17 =  M = (ideal(x^2,x*y))*R^1;

F50E18 =  mat = map(M, R^1, {{1}, {1}});

F50E19 =  embedAsIdeal(mat)

F50E20 =  embedAsIdeal(M, Section=>mat)

F51E0 =  R = QQ[x,y];

F51E1 =  D = divisor(x*y);

F51E2 =  E = divisor(x);

F51E3 =  F = divisor(y);

F51E4 =  D == E

F51E5 =  D == E+F

F51E6 =  R = QQ[x,y];

F51E7 =  D = (1/2)*divisor(x)

F51E8 =  D == 2*D

F51E9 =  D + D == 2*D

F51E10 =  E = divisor(x)

F51E11 =  D == E

F51E12 =  2*D == E

F52E0 =  R = QQ[x, y, z] / ideal(x * y - z^2);

F52E1 =  D = divisor({1/2, 3/4}, {ideal(x, z), ideal(y, z)}, CoefficientType => QQ)

F52E2 =  E = divisor({3/4, 5/2}, {ideal(y, z), ideal(x, z)}, CoefficientType => QQ)

F52E3 =  isQLinearEquivalent(10, D, E)

F52E4 =  R = QQ[x,y,z] / ideal(x * y - z^2);

F52E5 =  D = divisor(x);

F52E6 =  E = divisor(ideal(x,z));

F52E7 =  isQLinearEquivalent(1, D, E)

F52E8 =  isQLinearEquivalent(3, D, E)

F52E9 =  R = QQ[x, y, z] / ideal(x * y - z^2);

F52E10 =  D = divisor({1/2, 3/4}, {ideal(x, z), ideal(y, z)}, CoefficientType => QQ)

F52E11 =  E = divisor({3/2, -1/4}, {ideal(y, z), ideal(x, z)}, CoefficientType => QQ)

F52E12 =  isQLinearEquivalent(10, D, E, IsGraded => true)

F52E13 =  isQLinearEquivalent(10, 3*D, E, IsGraded => true)

F53E0 =  R = ZZ/31[x, y, u, v] / ideal(x * y - u * v);

F53E1 =  D1 = divisor({1, -2, 3, -4}, {ideal(x, u), ideal(x, v), ideal(y, u), ideal(y, v)})

F53E2 =  D2 = divisor({1, 39, 5, 27}, {ideal(x, v), ideal(y, v), ideal(x, u), ideal(x, u)})

F53E3 =  isEffective( D1 )

F53E4 =  isEffective( D2 )

F54E0 =  R = QQ[x, y, z];

F54E1 =  D1 = divisor({1, 3, 2}, {ideal(x), ideal(y), ideal(z)})

F54E2 =  D2 = divisor({-2, 3, -5}, {ideal(z), ideal(y), ideal(x)})

F54E3 =  D1 + D2

F54E4 =  D1 - D2

F54E5 =  R = QQ[x,y];

F54E6 =  D1 = divisor({3, 1}, {ideal(x), ideal(y)})

F54E7 =  D2 = divisor({3/2, -1}, {ideal(x), ideal(y)}, CoefficientType=>QQ)

F54E8 =  D3 = divisor({1.25}, {ideal(x)}, CoefficientType=>RR)

F54E9 =  D1+D2

F54E10 =  D1+D3

F54E11 =  D2+D3

F54E12 =  R = ZZ/3[x,y,z]/ideal(x^2-y*z);

F54E13 =  D = divisor({3, 0, -1}, {ideal(x,z), ideal(y,z), ideal(x-y, x-z)})

F54E14 =  -D

F54E15 =  E = divisor({3/2, -2/3}, {ideal(x, z), ideal(y, z)})

F54E16 =  -E

F55E0 =  R = QQ[x, y, z];

F55E1 =  D = divisor(x*y^2/z)

F55E2 =  applyToCoefficients(D, u->5*u)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F3E0", "F3E1", "F3E2", "F3E3", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F8E8", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F10E5", "F11E0", "F11E1", "F11E2", "F11E3", "F12E0", "F12E1", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F13E6", "F13E7", "F13E8", "F13E9", "F13E10", "F13E11", "F13E12", "F13E13", "F13E14", "F13E15", "F13E16", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F14E7", "F14E8", "F14E9", "F14E10", "F14E11", "F14E12", "F14E13", "F14E14", "F14E15", "F14E16", "F14E17", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F18E0", "F18E1", "F18E2", "F18E3", "F18E4", "F18E5", "F18E6", "F18E7", "F18E8", "F18E9", "F18E10", "F19E0", "F19E1", "F19E2", "F19E3", "F19E4", "F19E5", "F19E6", "F19E7", "F19E8", "F19E9", "F19E10", "F19E11", "F19E12", "F19E13", "F19E14", "F19E15", "F19E16", "F19E17", "F19E18", "F19E19", "F19E20", "F19E21", "F19E22", "F19E23", "F19E24", "F19E25", "F19E26", "F19E27", "F19E28", "F19E29", "F19E30", "F19E31", "F19E32", "F19E33", "F19E34", "F19E35", "F19E36", "F19E37", "F19E38", "F19E39", "F19E40", "F19E41", "F19E42", "F19E43", "F19E44", "F19E45", "F19E46", "F19E47", "F20E0", "F20E1", "F20E2", "F20E3", "F20E4", "F20E5", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F21E5", "F21E6", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F22E5", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4", "F23E5", "F23E6", "F23E7", "F24E0", "F24E1", "F24E2", "F24E3", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F25E5", "F25E6", "F25E7", "F25E8", "F25E9", "F25E10", "F25E11", "F25E12", "F25E13", "F25E14", "F25E15", "F25E16", "F25E17", "F25E18", "F25E19", "F25E20", "F25E21", "F25E22", "F25E23", "F25E24", "F25E25", "F25E26", "F25E27", "F25E28", "F25E29", "F25E30", "F25E31", "F25E32", "F25E33", "F25E34", "F25E35", "F25E36", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F26E6", "F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F27E5", "F27E6", "F27E7", "F28E0", "F28E1", "F28E2", "F28E3", "F28E4", "F28E5", "F28E6", "F28E7", "F28E8", "F28E9", "F28E10", "F29E0", "F29E1", "F29E2", "F29E3", "F29E4", "F30E0", "F30E1", "F30E2", "F30E3", "F30E4", "F30E5", "F30E6", "F30E7", "F30E8", "F31E0", "F31E1", "F31E2", "F31E3", "F31E4", "F32E0", "F32E1", "F32E2", "F32E3", "F32E4", "F32E5", "F32E6", "F32E7", "F32E8", "F32E9", "F32E10", "F32E11", "F33E0", "F33E1", "F33E2", "F33E3", "F33E4", "F33E5", "F33E6", "F33E7", "F33E8", "F33E9", "F33E10", "F33E11", "F33E12", "F33E13", "F33E14", "F34E0", "F34E1", "F34E2", "F34E3", "F34E4", "F35E0", "F35E1", "F35E2", "F35E3", "F35E4", "F35E5", "F35E6", "F35E7", "F35E8", "F36E0", "F36E1", "F36E2", "F36E3", "F36E4", "F36E5", "F36E6", "F37E0", "F37E1", "F37E2", "F37E3", "F38E0", "F38E1", "F38E2", "F38E3", "F38E4", "F38E5", "F38E6", "F38E7", "F38E8", "F38E9", "F38E10", "F38E11", "F38E12", "F38E13", "F38E14", "F38E15", "F38E16", "F38E17", "F39E0", "F39E1", "F39E2", "F39E3", "F39E4", "F39E5", "F39E6", "F39E7", "F39E8", "F39E9", "F39E10", "F39E11", "F39E12", "F39E13", "F39E14", "F39E15", "F39E16", "F39E17", "F39E18", "F39E19", "F39E20", "F39E21", "F39E22", "F39E23", "F39E24", "F40E0", "F40E1", "F40E2", "F40E3", "F41E0", "F41E1", "F41E2", "F41E3", "F41E4", "F41E5", "F41E6", "F42E0", "F42E1", "F42E2", "F42E3", "F42E4", "F42E5", "F42E6", "F42E7", "F42E8", "F42E9", "F42E10", "F42E11", "F42E12", "F42E13", "F42E14", "F43E0", "F43E1", "F43E2", "F43E3", "F43E4", "F43E5", "F43E6", "F43E7", "F43E8", "F43E9", "F43E10", "F43E11", "F43E12", "F43E13", "F43E14", "F44E0", "F44E1", "F44E2", "F44E3", "F44E4", "F44E5", "F44E6", "F44E7", "F45E0", "F45E1", "F45E2", "F45E3", "F45E4", "F45E5", "F45E6", "F45E7", "F45E8", "F45E9", "F45E10", "F45E11", "F45E12", "F45E13", "F45E14", "F45E15", "F45E16", "F45E17", "F45E18", "F46E0", "F46E1", "F46E2", "F47E0", "F47E1", "F47E2", "F47E3", "F47E4", "F47E5", "F47E6", "F47E7", "F47E8", "F48E0", "F48E1", "F48E2", "F48E3", "F48E4", "F48E5", "F48E6", "F48E7", "F48E8", "F49E0", "F49E1", "F49E2", "F50E0", "F50E1", "F50E2", "F50E3", "F50E4", "F50E5", "F50E6", "F50E7", "F50E8", "F50E9", "F50E10", "F50E11", "F50E12", "F50E13", "F50E14", "F50E15", "F50E16", "F50E17", "F50E18", "F50E19", "F50E20", "F51E0", "F51E1", "F51E2", "F51E3", "F51E4", "F51E5", "F51E6", "F51E7", "F51E8", "F51E9", "F51E10", "F51E11", "F51E12", "F52E0", "F52E1", "F52E2", "F52E3", "F52E4", "F52E5", "F52E6", "F52E7", "F52E8", "F52E9", "F52E10", "F52E11", "F52E12", "F52E13", "F53E0", "F53E1", "F53E2", "F53E3", "F53E4", "F54E0", "F54E1", "F54E2", "F54E3", "F54E4", "F54E5", "F54E6", "F54E7", "F54E8", "F54E9", "F54E10", "F54E11", "F54E12", "F54E13", "F54E14", "F54E15", "F54E16", "F55E0", "F55E1", "F55E2"}
