needsPackage "Polyhedra"

F0E0 =  M = matrix {{1,1,-1,-1},{1,-1,1,-1}}

F0E1 =  P = convexHull M

F0E2 =  r = matrix {{1},{2}}

F0E3 =  P =convexHull(M,r)

F0E4 =  N = matrix {{-2,-2,0},{0,-2,-2}}

F0E5 =  Q = convexHull(M|N)

F0E6 =  Q1 = convexHull(M|N,r)

F0E7 =  P1 = convexHull {P,N}

F0E8 =  P1 == Q1

F0E9 =  P1 = convexHull(P,Q)

F0E10 =  P1 == Q1

F1E0 =  P = cyclicPolytope(3,5)

F1E1 =  interiorPoint P

F2E0 =  P = crossPolytope(3,3/2)

F2E1 =  vertices P

F3E0 =  M = matrix {{0,1,2}}

F3E1 =  L = {{0,1},{1,2}}

F3E2 =  PC = polyhedralComplex(M,L)

F3E3 =  C = hypercube 2

F3E4 =  F = faces(1,C)

F3E5 =  V = vertices C

F3E6 =  L = linealitySpace C

F3E7 =  PC = polyhedralComplex(V,L,F)

F3E8 =  vertices PC

F3E9 =  maxPolyhedra PC

F3E10 =  dim PC

F4E0 =  P = polyhedronFromHData(matrix{{1,-1},{0,-1},{-1,-1},{0,1}}, matrix{{0},{-1},{0},{1}})

F4E1 =  vertices P

F4E2 =  PC = skeleton(2,polyhedralComplex hypercube 3)

F4E3 =  vertices PC

F5E0 =  F1 = normalFan hypercube 1

F5E1 =  F2 = normalFan hypercube 2

F5E2 =  F = F1 * F2

F5E3 =  F == normalFan hypercube 3

F6E0 =  convexHull(matrix {{0,0,-1,-1},{2,-2,1,-1},{0,0,0,0}},matrix {{1},{0},{0}})

F6E1 =  V = matrix {{1,1,-1,-1},{1,-1,1,-1}}

F6E2 =  convexHull V

F6E3 =  R = matrix {{1},{1}}

F6E4 =  convexHull(V,R)

F6E5 =  HS = transpose V

F6E6 =  v = R || R

F6E7 =  P = polyhedronFromHData(HS,v)

F6E8 =  vertices P

F6E9 =  HS = HS | matrix {{0},{0},{0},{0}}

F6E10 =  hyperplanesTmp = matrix {{0,0,1}}

F6E11 =  w = matrix {{1}}

F6E12 =  P = polyhedronFromHData(HS,v,hyperplanesTmp,w)

F6E13 =  vertices P

F7E0 =  P = cyclicPolytope(3,5)

F7E1 =  vertices P

F8E0 =  P1 = convexHull matrix {{1,0,0},{1,1,0}};

F8E1 =  P2 = convexHull matrix {{1,0,0},{0,-1,0}};

F8E2 =  P3 = convexHull matrix {{-1,0,0},{0,1,0}};

F8E3 =  P4 = convexHull matrix {{1,1,0},{0,1,0}};

F8E4 =  P5 = convexHull matrix {{1,2,0},{2,1,0}};

F8E5 =  L = {P1,P2,P3,P4,P5};

F8E6 =  Lpairs = incompPolyhedra L

F8E7 =  Lpairs == {(P1,P4),(P1,P5)}

F9E0 =  P =convexHull matrix {{1},{-1}}

F9E1 =  C = coneFromVData matrix {{1,2},{2,1}}

F9E2 =  Q = P * C

F9E3 =  (vertices Q,rays Q)

F10E0 =  C = coneFromVData matrix {{1,2},{2,1}}

F10E1 =  hilbertBasis C

F11E0 =  SR = stanleyReisnerRing normalFan hypercube 2

F12E0 =  P = convexHull matrix{{2,1,-1,-2,-1,1},{0,1,1,0,-1,-1}}

F12E1 =  (C,L,M) = minkSummandCone P

F12E2 =  rays C

F12E3 =  apply(values L,vertices)

F12E4 =  M

F13E0 =  C = coneFromVData matrix {{1},{2},{0}}

F13E1 =  P = hypercube 3

F13E2 =  Q = C + P

F13E3 =  (vertices Q,rays Q)

F14E0 =  P = crossPolytope 3

F14E1 =  w =  matrix {{1,2,2,2,2,2,1}}

F14E2 =  L = regularSubdivision(P,w)

F14E3 =  apply(L,vertices)

F14E4 =  M = matrix {{1,0,1,0},{1,1,0,0}};

F14E5 =  w = matrix {{1,0,0,1}};

F14E6 =  S = regularSubdivision (M,w)

F15E0 =  P = hypercube 2

F15E1 =  barycentricTriangulation P

F16E0 =  C = coneFromVData matrix {{1,0,0},{0,1,0},{0,0,1}}

F16E1 =  v = coneFromVData matrix {{-1},{-1},{-1}}

F16E2 =  F = fan {C,v}

F16E3 =  isPure F

F16E4 =  C1 = coneFromVData (rays C)_((faces(1,C))#0)

F16E5 =  C1 = coneFromVData(C1, v)

F16E6 =  F = addCone(C1,F)

F16E7 =  isPure F

F17E0 =  P = convexHull matrix {{-2,0,2,4},{-8,-2,2,8}}

F17E1 =  A = matrix {{-5,2},{3,-1}}

F17E2 =  v = matrix {{5},{-3}}

F17E3 =  Q = affineImage(A,P,v)

F17E4 =  vertices Q

F18E0 =  C = hypercube 2

F18E1 =  nVertices C

F19E0 =  P = hypercube 3

F19E1 =  p = matrix {{1},{0},{0}}

F19E2 =  smallestFace(p,P)

F20E0 =  P = cyclicPolytope(3,5)

F20E1 =  L = faces(2,P)

F20E2 =  vertP = vertices P

F20E3 =  apply(L, f -> vertP_(f#0))

F21E0 =  P = convexHull matrix {{3,0,0,0,1},{0,3,0,0,1},{0,0,3,0,1}}

F21E1 =  isSimplicial P

F21E2 =  P = hypercube 2

F21E3 =  isSimplicial P

F21E4 =  C = coneFromVData matrix {{1,0,0,1},{0,1,0,1},{0,0,1,1}}

F21E5 =  isSimplicial C

F21E6 =  C = coneFromVData matrix {{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}}

F21E7 =  isSimplicial C

F21E8 =  F = normalFan hypercube 3

F21E9 =  isSimplicial F

F21E10 =  PC = skeleton(2,polyhedralComplex crossPolytope 3)

F21E11 =  isSimplicial PC

F22E0 =  normalFan crossPolytope 3

F22E1 =  C1 = coneFromVData matrix {{2,2},{1,-1}};

F22E2 =  C2 = coneFromVData matrix {{2,-2},{1,1}};

F22E3 =  C3 = coneFromVData matrix {{-2,-2},{1,-1}};

F22E4 =  C4 = coneFromVData matrix {{-2,2},{-1,-1}};

F22E5 =  F = fan {C1,C2,C3,C4}

F23E0 =  P = cyclicPolytope(3,5)

F23E1 =  p = matrix{{2},{4},{8}}

F23E2 =  q = matrix{{2},{6},{20}}

F23E3 =  inInterior(p,P)

F23E4 =  inInterior(q,P)

F24E0 =  P = crossPolytope 2

F24E1 =  Q = hypercube 2

F24E2 =  mixedVolume {P,Q}

F25E0 =  C1 = coneFromVData matrix {{1,0},{0,1}};

F25E1 =  C2 = coneFromVData matrix {{1,-1},{0,-2}};

F25E2 =  C3 = coneFromVData matrix {{0,-2},{1,-1}};

F25E3 =  C4 = coneFromVData matrix {{-1,-2},{-2,-1}};

F25E4 =  F = fan{C1,C2,C3,C4}

F25E5 =  isPolytopal F

F26E0 =  polyhedralComplex crossPolytope 3

F26E1 =  P1 = convexHull matrix {{2,2,0},{1,-1,0}};

F26E2 =  P2 = convexHull matrix {{2,-2,0},{1,1,0}};

F26E3 =  P3 = convexHull matrix {{-2,-2,0},{1,-1,0}};

F26E4 =  P4 = convexHull matrix {{-2,2,0},{-1,-1,0}};

F26E5 =  F = polyhedralComplex {P1,P2,P3,P4}

F27E0 =  P = cyclicPolytope(3,5)

F27E1 =  vertexEdgeMatrix P

F28E0 =  P = hypercube 2

F28E1 =  C = coneFromVData matrix {{1},{2}}

F28E2 =  Q = P + C

F28E3 =  (vertices Q,rays Q)

F29E0 =  fC = facets posOrthant 2

F29E1 =  fP = facets hypercube 2

F30E0 =  P = emptyPolyhedron 3

F31E0 =  P = hypercube 3

F31E1 =  Q = convexHull matrix{{1,1,1},{1,1,-1},{1,-1,1}}

F31E2 =  isFace(Q,P)

F31E3 =  v = matrix{{1},{-1},{-1}};

F31E4 =  Q = convexHull{Q,v}

F31E5 =  isFace(Q,P)

F32E0 =  C = coneFromVData matrix {{2,1,-1,-3},{1,1,1,1},{0,1,-1,0}}

F32E1 =  M = matrix {{1,0,0},{0,1,0}}

F32E2 =  F = imageFan(M,C)

F32E3 =  rays F

F33E0 =  latticeVolume hypercube 3

F34E0 =  C = coneFromVData matrix {{1,0,0},{1,1,0},{1,0,1},{1,1,1}}

F34E1 =  rays C

F34E2 =  facets C

F34E3 =  (facets C) * (rays C)

F34E4 =  (hyperplanes C) * (rays C)

F34E5 =  (facets C) * (linealitySpace C)

F34E6 =  P = hypercube(2,0,1)

F34E7 =  V = vertices P

F34E8 =  (A, b) = facets P

F34E9 =  A * V

F34E10 =  for i from 0 to numColumns V - 1 do (

            test := b - A*V_{i};

            << "Vertex " << i << " " << (flatten entries V_{i}) << ": " << all(flatten entries test, e -> e>= 0) << endl;

         )

F34E11 =  P = convexHull(matrix{{1,0},{0,1},{2,2}}, matrix {{1},{1},{2}})

F34E12 =  vertices P

F34E13 =  rays P

F34E14 =  (A, b) = facets P

F34E15 =  A * (vertices P)

F34E16 =  A * (rays P)

F34E17 =  (E, v) = hyperplanes P

F34E18 =  E * (rays P)

F34E19 =  E * (vertices P)

F34E20 =  C == coneFromVData(rays C, linealitySpace C)

F34E21 =  C == coneFromRays(rays C, linealitySpace C)

F34E22 =  C == coneFromHData(facets C, hyperplanes C)

F34E23 =  C == coneFromInequalities(facets C, hyperplanes C)

F34E24 =  P == convexHull (vertices P, rays P, linealitySpace P)

F34E25 =  F = facets P

F34E26 =  H = hyperplanes P

F34E27 =  P == polyhedronFromHData(F#0, F#1, H#0, H#1)

F34E28 =  P == polyhedronFromInequalities(F#0, F#1, H#0, H#1)

F35E0 =  P = crossPolytope 3

F35E1 =  k = 3

F35E2 =  Q = k * P

F35E3 =  vertices Q

F36E0 =  C = coneFromVData  matrix {{1,-1,0},{1,1,0},{1,1,1}}

F36E1 =  F = fan C

F36E2 =  F1 = smoothSubfan F

F36E3 =  raysF1 = rays F1

F36E4 =  apply(maxCones F1, mc -> raysF1_mc)

F37E0 =  C1 = coneFromVData matrix {{1,0},{0,1}};

F37E1 =  C2 = coneFromVData matrix {{1,-1},{0,-1}};

F37E2 =  C3 = coneFromVData matrix {{1,-1},{2,-1}};

F37E3 =  commonFace(C1,C2)

F37E4 =  commonFace(C2,C3)

F37E5 =  commonFace(C3,C1)

F38E0 =  C = coneFromVData matrix {{1,2,3},{3,1,2},{2,3,1}}

F38E1 =  isSmooth C

F38E2 =  F = hirzebruch 3

F38E3 =  isSmooth F

F39E0 =  P = cyclicPolytope(3,4)

F39E1 =  C = coneFromVData P

F39E2 =  interiorVector C

F40E0 =  C = coneFromVData matrix {{1,2,3},{3,1,2},{2,3,1}}

F40E1 =  A = matrix  {{-5,7,1},{1,-5,7},{7,1,-5}}

F40E2 =  C1 = affinePreimage(A,C)

F40E3 =  rays C1

F41E0 =  F = normalFan hypercube 2

F41E1 =  rays F

F41E2 =  maxCones F

F41E3 =  PC = polyhedralComplex F

F41E4 =  vertices PC

F41E5 =  rays PC

F41E6 =  maxPolyhedra PC

F42E0 =  F = normalFan hypercube 3

F42E1 =  L = cones(2,F)

F42E2 =  raysF = rays F

F42E3 =  apply(L, c -> raysF_c)

F43E0 =  P = convexHull matrix {{-2,0,2,4},{-8,-2,2,8}}

F43E1 =  A = matrix {{-5,2},{3,-1}}

F43E2 =  v = matrix {{5},{-3}}

F43E3 =  Q = affinePreimage(A,P,v)

F43E4 =  vertices Q

F44E0 =  F = fan {coneFromVData matrix {{1,0},{0,1}},coneFromVData matrix {{0,-1},{1,1}},coneFromVData matrix {{-1,-1},{0,1}},coneFromVData matrix {{-1,1},{0,-1}},coneFromVData matrix {{1,1},{0,-1}}}

F44E1 =  P = polytope F

F45E0 =  C = hypercube 2

F45E1 =  S = simplex 2

F45E2 =  CS = intersection(C,S)

F46E0 =  C = coneFromVData matrix {{2,3},{3,2}}

F46E1 =  dim C

F46E2 =  F = hirzebruch 3

F46E3 =  dim F

F46E4 =  P = convexHull matrix {{1,-1,0,0},{0,0,1,-1}}

F46E5 =  dim P

F46E6 =  PC = polyhedralComplex crossPolytope 3

F46E7 =  dim PC

F47E0 =  R = QQ[a,b,c]

F47E1 =  I = ideal (a-b,a-c,b-c)

F47E2 =  statePolytope I

F48E0 =  P = crossPolytope(3,2)

F48E1 =  interiorLatticePoints P

F48E2 =  Q = cyclicPolytope(2,4)

F48E3 =  interiorLatticePoints Q

F49E0 =  P = convexHull matrix {{1,1,1,1,2,2,2,2},{0,0,1,1,0,0,1,1},{0,1,0,1,0,1,0,1}};

F49E1 =  PC = polyhedralComplex P

F49E2 =  P = hypercube 3;

F49E3 =  incompPolyhedra(P,PC)

F49E4 =  P1 = convexHull matrix {{1,1,1,1,-1,-1,-1,-1},{0,0,1,1,0,0,1,1},{0,1,0,1,0,1,0,1}};

F49E5 =  P2 = convexHull matrix {{1,1,1,1,-1,-1,-1,-1},{0,1,1,-1,0,1,1,-1},{0,0,-1,-1,0,0,-1,-1}};

F49E6 =  P3 = convexHull matrix {{1,1,1,1,-1,-1,-1,-1},{0,0,-1,-1,0,0,-1,-1},{0,1,1,-1,0,1,1,-1}};

F49E7 =  P == convexHull {P1,P2,P3}

F49E8 =  PC = addPolyhedron({P1,P2,P3},PC)

F50E0 =  P1 = convexHull matrix {{1,0,0},{0,1,0}}

F50E1 =  P2 = convexHull matrix {{-1,0,0},{0,-1,0}}

F50E2 =  P = P1 + P2

F50E3 =  vertices P

F51E0 =  C1 = coneFromVData matrix {{1,0},{0,1},{1,1}}

F51E1 =  C2 = coneFromVData matrix {{1,0,1},{0,1,0},{1,1,0}}

F51E2 =  C1 ? C2

F52E0 =  M = matrix {{1,1,1},{0,1,0},{-1,1,-1},{-1,-1,-1},{0,-1,0},{1,-1,1}};

F52E1 =  v = matrix {{2},{1},{2},{2},{1},{2}};

F52E2 =  P = polyhedronFromHData(M,v)

F52E3 =  linealitySpace P

F52E4 =  C = dualCone coneFromHData M

F52E5 =  linealitySpace C

F53E0 =  P = hypercube 3

F53E1 =  f = first faces(1,P)

F53E2 =  f = convexHull (vertices P)_(f#0)

F53E3 =  fv = polarFace(f, P)

F53E4 =  vertices fv

F53E5 =  P = hypercube 3

F53E6 =  polarFace(P, P)

F54E0 =  C = hypercube 2

F54E1 =  F = faces(1,C)

F54E2 =  V = vertices C

F54E3 =  L = linealitySpace C

F54E4 =  PC = polyhedralComplex(V,L,F)

F54E5 =  vertices PC

F54E6 =  maxPolyhedra PC

F54E7 =  dim PC

F55E0 =  P = hypercube 2

F55E1 =  vertices P

F55E2 =  C = cone P

F55E3 =  rays C

F56E0 =  coneFromVData matrix {{1,2},{2,1}}

F56E1 =  convexHull matrix {{1,1,0,0},{1,0,1,0}}

F56E2 =  hirzebruch 3

F56E3 =  polyhedralComplex crossPolytope 3

F57E0 =  P = hypercube 2

F57E1 =  F = faceFan P

F57E2 =  raysF = rays F

F57E3 =  apply(maxCones F, mc -> raysF_mc)

F58E0 =  P = hypercube 3

F58E1 =  Q = convexHull matrix {{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}}

F58E2 =  C = normalCone(P,Q)

F58E3 =  rays C

F59E0 =  PC = skeleton(1,polyhedralComplex hypercube 2)

F59E1 =  L = maxPolyhedra PC

F59E2 =  vertPC = vertices PC

F59E3 =  apply(L, mp -> vertPC_(mp#0))

F60E0 =  C = posOrthant 2

F60E1 =  rays C

F60E2 =  P = polyhedron C

F60E3 =  vertices P

F60E4 =  rays P

F61E0 =  P = convexHull transpose matrix {{0,0,0},{1,0,0},{0,1,0},{1,1,3}}

F61E1 =  sublatticeBasis P

F62E0 =  F = hirzebruch 3

F62E1 =  raysF = rays F

F62E2 =  apply(maxCones F, mc -> raysF_mc)

F63E0 =  P = hypercube 3

F63E1 =  Q = polar P

F63E2 =  Q == crossPolytope 3

F64E0 =  V = matrix {{0,2,-2,0},{-1,1,1,1}}

F64E1 =  P = convexHull V

F64E2 =  vertices P

F64E3 =  (HS,v) = facets P

F64E4 =  hyperplanes P

F64E5 =  isFullDimensional P

F64E6 =  ambDim P

F64E7 =  dim P

F64E8 =  rays P

F64E9 =  linealitySpace P

F64E10 =  C = cone P

F64E11 =  rays C

F64E12 =  vertices P

F64E13 =  R = matrix {{1},{0},{0}}

F64E14 =  V1 = V || matrix {{1,1,1,1}}

F64E15 =  P1 = convexHull(V1,R)

F64E16 =  vertices P1

F64E17 =  isCompact P1

F64E18 =  isFullDimensional P1

F64E19 =  rays P1

F64E20 =  hyperplanes P1

F64E21 =  inequalities = transpose (V || matrix {{-1,2,0,1}})

F64E22 =  v = matrix {{1},{1},{1},{1}}

F64E23 =  equations = matrix {{1,1,1}}

F64E24 =  w = matrix {{3}}

F64E25 =  P2 = polyhedronFromHData(inequalities,v,equations,w)

F64E26 =  isFullDimensional P2

F64E27 =  vertices P2

F64E28 =  P3 = polyhedronFromHData(inequalities,v)

F64E29 =  vertices P3

F64E30 =  linealitySpace P3

F64E31 =  isFullDimensional P3

F64E32 =  P4 = hypercube(3,2)

F64E33 =  vertices P4

F64E34 =  P5 = crossPolytope(3,3)

F64E35 =  vertices P5

F64E36 =  P6 = stdSimplex 2

F64E37 =  vertices P6

F64E38 =  P7 = convexHull(P4,P5)

F64E39 =  vertices P7

F64E40 =  P8 = intersection(P4,P5)

F64E41 =  vertices P8

F64E42 =  P9 = convexHull {(V1,R),P2,P6}

F64E43 =  vertices P9

F64E44 =  Q = convexHull (-V)

F64E45 =  P10 = P + Q

F64E46 =  vertices P10

F64E47 =  (C,L,M) = minkSummandCone P10

F64E48 =  apply(values L, vertices)

F64E49 =  P11 = P * Q

F64E50 =  vertices P11

F64E51 =  ambDim P11

F64E52 =  fVector P11

F64E53 =  L = faces(1,P11)

F64E54 =  vertP11 = vertices P11

F64E55 =  apply(L, l -> vertP11_(l#0))

F64E56 =  L = latticePoints P11

F64E57 =  #L

F64E58 =  C = tailCone P1

F64E59 =  rays C

F64E60 =  P12 = polar P11

F64E61 =  vertices P12

F65E0 =  P = crossPolytope 3

F65E1 =  volume P

F66E0 =  P = crossPolytope 3

F66E1 =  w = matrix {{1},{-1},{0}}

F66E2 =  F = maxFace(w,P)

F66E3 =  vertices F

F67E0 =  C = hypercube 2

F67E1 =  dim C

F67E2 =  ambDim C

F67E3 =  isFullDimensional C

F67E4 =  F = normalFan hypercube 2

F67E5 =  dim F

F67E6 =  ambDim F

F67E7 =  isFullDimensional F

F67E8 =  S = stdSimplex 2

F67E9 =  vertices S

F67E10 =  dim S

F67E11 =  ambDim S

F67E12 =  isFullDimensional S

F68E0 =  P = convexHull matrix{{1,0,0},{0,1,0}}

F68E1 =  F = normalFan P

F68E2 =  raysF = rays F

F68E3 =  apply(maxCones F, mc -> raysF_mc)

F69E0 =  P1 = convexHull matrix {{0,1,-1},{0,-1,-1}}

F69E1 =  P2 = convexHull matrix {{0,1,-1},{0,1,1}}

F69E2 =  Q = minkowskiSum(P1,P2)

F69E3 =  vertices Q

F70E0 =  P = convexHull transpose matrix {{0,0,0},{1,0,0},{0,1,0},{1,1,3}}

F70E1 =  toSublattice P

F71E0 =  R = matrix {{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}}

F71E1 =  F = ccRefinement R

F71E2 =  rays F

F72E0 =  P = hypercube 2

F72E1 =  Q = bipyramid P

F72E2 =  vertices Q

F73E0 =  C1 = coneFromVData matrix {{1,0},{0,1}};

F73E1 =  C2 = coneFromVData matrix {{1,-1},{0,-2}};

F73E2 =  C3 = coneFromVData matrix {{0,-2},{1,-1}};

F73E3 =  F = fan {C1,C2,C3}

F73E4 =  isComplete F

F73E5 =  C4 = coneFromVData matrix {{-1,-2},{-2,-1}};

F73E6 =  F = addCone(C4,F)

F73E7 =  isComplete F

F74E0 =  C1 = coneFromVData matrix {{1,2,3},{2,3,1},{3,1,2}}

F74E1 =  C2 = coneFromVData matrix {{1},{0},{0}}

F74E2 =  C = C1 + C2

F74E3 =  rays C

F75E0 =  P = polyhedronFromHData(matrix{{1,1,1},{0,1,0},{-1,-1,-1},{-1,-1,-1},{0,-1,0},{1,-1,1}},matrix{{2},{1},{2},{2},{1},{2}})

F75E1 =  isCompact P

F76E0 =  S = minimalNonFaces normalFan hypercube 2

F77E0 =  facesAsPolyhedra(1, hypercube 2)

F78E0 =  C = coneFromVData matrix {{1,2},{2,1}}

F78E1 =  Cv = dualCone C

F78E2 =  rays Cv

F79E0 =  P = cyclicPolytope(3,5)

F79E1 =  vertexFacetMatrix P

F80E0 =  T = regularTriangulation hypercube 2

F81E0 =  F = normalFan hypercube 2

F81E1 =  r = matrix {{1},{1}}

F81E2 =  F1 = stellarSubdivision(F,r)

F82E0 =  P = hypercube 3

F82E1 =  w = matrix {{1},{2},{0}}

F82E2 =  F = minFace(w,P)

F82E3 =  vertices F

F83E0 =  P = convexHull(matrix {{1,-1,2,-2},{1,1,2,2}}, matrix {{0},{1}})

F83E1 =  rays P

F83E2 =  C = coneFromVData P

F83E3 =  rays C

F83E4 =  F = normalFan P

F83E5 =  rays F

F84E0 =  coneFromVData matrix {{0,0,-1,-1,1},{2,-2,1,-1,0},{1,1,1,1,0}}

F84E1 =  R = matrix{{1,2,3,1},{2,3,1,1},{3,1,2,1}}

F84E2 =  C = coneFromVData R

F84E3 =  rays C

F84E4 =  LS = matrix{{1},{1},{-2}}

F84E5 =  C = coneFromVData(R,LS)

F84E6 =  rays C

F84E7 =  HS = transpose R

F84E8 =  C = coneFromHData HS

F84E9 =  rays C

F84E10 =  hyperplanesTmp = transpose LS

F84E11 =  C = coneFromHData(HS,hyperplanesTmp)

F84E12 =  rays C

F85E0 =  P = convexHull matrix {{1,-1,0},{0,-1,0}}

F85E1 =  PC = polyhedralComplex P

F85E2 =  P1 = convexHull matrix {{1,0,0},{0,1,0}};

F85E3 =  P2 = convexHull matrix {{0,-1,0},{1,-1,0}};

F85E4 =  PC = polyhedralComplex {PC,P1,P2}

F86E0 =  P = hypercube 3

F86E1 =  vertices P

F86E2 =  P = hypercube(3,2)

F86E3 =  vertices P

F86E4 =  P = hypercube(3,0,1)

F86E5 =  vertices P

F87E0 =  P = stdSimplex 3

F87E1 =  Q = affineHull P

F87E2 =  linealitySpace Q

F88E0 =  L = facesAsCones(1, posOrthant 2)

F88E1 =  rays L#0

F88E2 =  rays L#1

F88E3 =  F = normalFan hypercube 2

F88E4 =  L = facesAsCones(1, F)

F88E5 =  rays L#0

F89E0 =  C1 = coneFromVData matrix{{1,0},{1,1}};

F89E1 =  C2 = coneFromVData matrix{{1,0},{0,-1}};

F89E2 =  C3 = coneFromVData matrix{{-1,0},{0,1}};

F89E3 =  C4 = coneFromVData matrix{{1,1},{0,1}};

F89E4 =  C5 = coneFromVData matrix {{1,2},{2,1}};

F89E5 =  L = {C1,C2,C3,C4,C5};

F89E6 =  Lpairs = incompCones L

F89E7 =  Lpairs == {(C1,C4),(C1,C5)}

F90E0 =  P = convexHull matrix {{0,1,0,0,1,0,1,2,0,0},{0,0,1,0,1,0,2,2,0,-1},{0,0,0,1,2,0,1,2,0,-1},{0,0,0,0,-1,1,0,-1,0,1},{0,0,0,0,0,0,-1,-1,1,1}}

F90E1 =  isVeryAmple P

F91E0 =  P1 = convexHull matrix {{1,-1,0,0},{0,0,1,-1}}

F91E1 =  P2 = convexHull matrix {{1},{-1}}

F91E2 =  P = P1 * P2

F91E3 =  vertices P

F92E0 =  C = coneFromVData matrix {{1,-1},{0,-1}}

F92E1 =  F = fan C

F92E2 =  C1 = coneFromVData matrix {{1,0},{0,1}};

F92E3 =  C2 = coneFromVData matrix {{0,-1},{1,-1}};

F92E4 =  F = fan {C,C1,C2}

F93E0 =  P = hypercube 2

F93E1 =  Q = pyramid P

F93E2 =  vertices Q

F94E0 =  C1 = coneFromVData matrix {{1,0},{0,1}};

F94E1 =  C2 = coneFromVData matrix {{1,-1},{0,-1}};

F94E2 =  C3 = coneFromVData matrix {{1,-1},{2,-1}};

F94E3 =  areCompatible(C1,C2)

F94E4 =  areCompatible(C2,C3)

F94E5 =  areCompatible(C3,C1)

F95E0 =  C = coneFromHData(matrix{{1,1,-1},{-1,-1,-1}})

F95E1 =  isPointed C

F95E2 =  C = intersection{C, coneFromHData(matrix{{1,-1,-1}})}

F95E3 =  isPointed C

F96E0 =  C1 = coneFromVData matrix {{1,2},{2,1}}

F96E1 =  C2 = coneFromVData matrix {{1}}

F96E2 =  C = C1 * C2

F96E3 =  rays C

F97E0 =  P = convexHull transpose matrix {{0,0,0},{1,0,0},{0,1,0},{1,1,3}}

F97E1 =  ehrhart P

F98E0 =  P = hypercube 1

F98E1 =  Q = hypercube 2

F98E2 =  directProduct(P,Q) == hypercube 3

F99E0 =  P = stdSimplex 2

F99E1 =  hyperplanes P

F99E2 =  C = coneFromVData matrix {{1,2,4},{2,3,5},{3,4,6}}

F99E3 =  hyperplanes C

F100E0 =  R = matrix {{1,1,2,2},{2,3,1,3},{3,2,3,1}};

F100E1 =  V = matrix {{1,-1},{0,0},{0,0}};

F100E2 =  C = coneFromVData R

F100E3 =  halfspaces C

F100E4 =  P = convexHull(V,R)

F100E5 =  halfspaces P

F101E0 =  P = polyhedronFromHData(matrix{{1,0},{0,1},{-1,-1}},matrix{{-1},{1},{-1}})

F101E1 =  isEmpty P

F102E0 =  M = matrix{{1,0},{0,1}}

F102E1 =  L = {{0,1}}

F102E2 =  F = fan(M,L)

F102E3 =  N = matrix{{1},{1}}

F102E4 =  F1 = fan(M,N,L)

F103E0 =  F = normalFan crossPolytope 3

F103E1 =  L = maxCones F

F103E2 =  raysF = rays F

F103E3 =  apply(L, mc -> raysF_mc)

F104E0 =  P = crossPolytope 3

F104E1 =  p = matrix {{1},{2},{3}}

F104E2 =  q = proximum(p,P)

F105E0 =  isWellDefined normalFan hypercube 3

F106E0 =  S = simplex 2

F106E1 =  S = simplex(2,2)

F107E0 =  P = convexHull matrix {{1,0,-1},{0,1,-1}}

F107E1 =  isReflexive P

F108E0 =  P = crossPolytope 3

F108E1 =  latticePoints P

F108E2 =  Q = cyclicPolytope(2,4)

F108E3 =  latticePoints Q

F109E0 =  F1 = normalFan hypercube 1

F109E1 =  F2 = normalFan hypercube 2

F109E2 =  F = directProduct(F1,F2)

F109E3 =  F == normalFan hypercube 3

F110E0 =  P = convexHull matrix{{1,0,0,0},{0,1,0,0},{0,0,1,0}}

F110E1 =  F = normalFan P

F110E2 =  F1 = skeleton(2,F)

F110E3 =  raysF = rays F

F110E4 =  apply(maxCones F1, mc -> raysF_mc)

F110E5 =  PC = polyhedralComplex hypercube 3

F110E6 =  PC1 = skeleton(2,PC)

F110E7 =  vertPC1 = vertices PC1

F110E8 =  apply(maxPolyhedra PC1, mp -> vertPC1_(mp#0))

F111E0 =  P = hypercube 3

F111E1 =  Q = convexHull matrix {{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}}

F111E2 =  v = objectiveVector(P,Q)

F111E3 =  Q == maxFace(v,P)

F112E0 =  C = posOrthant 3

F112E1 =  rays C

F113E0 =  PC = polyhedralComplex hypercube 3

F113E1 =  L = polyhedra(2,PC)

F113E2 =  vertPC = vertices PC

F113E3 =  apply(L, l -> vertPC_(l#0))

F114E0 =  C = coneFromVData matrix {{1,2},{2,1}}

F114E1 =  P =convexHull matrix {{1},{-1}}

F114E2 =  Q = C * P

F114E3 =  (vertices Q,rays Q)

F115E0 =  P = convexHull matrix{{1,0},{0,1}}

F115E1 =  ambDim P

F116E0 =  R = matrix {{1,1,2},{2,1,1}}

F116E1 =  C = coneFromVData R

F116E2 =  ambDim C

F116E3 =  rays C

F116E4 =  HS = facets C

F116E5 =  hyperplanes C

F116E6 =  isFullDimensional C

F116E7 =  R1 = R || matrix {{0,0,0}}

F116E8 =  LS = matrix {{1},{1},{1}}

F116E9 =  C1 = coneFromVData(R1,LS)

F116E10 =  rays C1

F116E11 =  HS = transpose R1

F116E12 =  equations = matrix {{1,1,1}}

F116E13 =  C2 = coneFromHData(HS,equations)

F116E14 =  dim C2

F116E15 =  ambDim C2

F116E16 =  rays C2

F116E17 =  C3 = coneFromHData HS

F116E18 =  rays C3

F116E19 =  linealitySpace C3

F116E20 =  isFullDimensional C3

F116E21 =  C4 = posOrthant 3

F116E22 =  rays C4

F116E23 =  C5 = intersection(C1,C2)

F116E24 =  rays C5

F116E25 =  dim C5

F116E26 =  C6 = coneFromVData(C1,C2)

F116E27 =  rays C6

F116E28 =  linealitySpace C6

F116E29 =  R2 = matrix {{2,-1},{-1,2},{-1,-1}}

F116E30 =  C7 = coneFromVData {R2,C3,C4}

F116E31 =  rays C7

F116E32 =  linealitySpace C7

F116E33 =  C6 == C1 + C2

F116E34 =  P = crossPolytope 3

F116E35 =  P1 = C6 + P

F116E36 =  (vertices P1,rays P1)

F116E37 =  C8 = C * C1

F116E38 =  rays C8

F116E39 =  linealitySpace C8

F116E40 =  ambDim C8

F116E41 =  ambDim C8

F116E42 =  fVector C8

F116E43 =  L = faces(1,C8)

F116E44 =  raysC8 = rays C8

F116E45 =  apply(L, l -> raysC8_l)

F116E46 =  isSmooth C8

F116E47 =  C9 = dualCone C8

F116E48 =  rays C9

F117E0 =  P = crossPolytope 2

F117E1 =  Q = secondaryPolytope P

F117E2 =  vertices Q

F118E0 =  C = coneFromVData matrix {{1,0,0},{0,1,1},{0,0,1}};

F118E1 =  F = fan C

F118E2 =  C = coneFromVData matrix {{-1,0,0},{0,1,0},{0,0,1}};

F118E3 =  incompCones(C,F)

F118E4 =  C1 = intersection {C, coneFromHData(matrix {{0,1,-1}})};

F118E5 =  C2 = intersection {C, coneFromHData(matrix {{0,-1,1}})};

F118E6 =  F = addCone({C1,C2},F)

F119E0 =  P = polyhedronFromHData(matrix{{-1,0},{1,0},{0,-1},{-1,-1},{1,-1}},matrix{{2},{2},{-1},{0},{0}}) 

F119E1 =  C = tailCone P

F119E2 =  rays C

F120E0 =  C = coneFromVData matrix {{1,2,3},{3,1,2},{2,3,1}}

F120E1 =  A = matrix  {{-5,7,1},{1,-5,7},{7,1,-5}}

F120E2 =  C1 = affineImage(A,C)

F120E3 =  rays C1

F121E0 =  P = cyclicPolytope(3,5)

F121E1 =  fVector P

F122E0 =  R = QQ[a,b,c]

F122E1 =  f = (a-b)*(a-c)*(b-c)

F122E2 =  P = newtonPolytope f

F123E0 =  C = coneFromVData matrix {{1,0,0},{0,1,0},{0,0,1}}

F123E1 =  F = fan C

F123E2 =  maxCones F

F123E3 =  C1 = coneFromVData matrix {{1,0,0},{1,1,0},{0,0,-1}}

F123E4 =  commonFace(C,C1)

F123E5 =  (b,C2) = areCompatible(C,C1)

F123E6 =  rays C2

F123E7 =  C1 = coneFromVData matrix {{1,0,0},{0,1,0},{0,0,-1}}

F123E8 =  F = addCone(C1,F)

F123E9 =  C2 = coneFromVData matrix {{-1,0,0},{0,1,0},{0,0,1}};

F123E10 =  C3 = coneFromVData matrix {{-1,0,0},{0,1,0},{0,0,-1}};

F123E11 =  C4 = coneFromVData matrix {{-1,0,0},{0,-1,0},{0,0,1}};

F123E12 =  C5 = coneFromVData matrix {{-1,0,0},{0,-1,0},{0,0,-1}};

F123E13 =  F1 = fan {C2,C3,C4,C5}

F123E14 =  C6 = coneFromVData matrix {{1,0,0},{0,-1,0},{0,0,1}};

F123E15 =  C7 = coneFromVData matrix {{1,0,0},{0,-1,0},{0,0,-1}};

F123E16 =  F1 = addCone( {C6,C7}, F1)

F123E17 =  P = hypercube 4

F123E18 =  F2 = normalFan P

F123E19 =  F3 = fan {coneFromVData matrix {{1}},coneFromVData matrix {{-1}}}

F123E20 =  F1 = F3 * F1

F123E21 =  ambDim F1

F123E22 =  F1 == F2

F124E0 =  P = polyhedronFromHData(matrix{{2,0},{0,-3},{-3,0},{0,2}},matrix{{1},{1},{1},{1}})

F124E1 =  isLatticePolytope P

F124E2 =  P = polyhedronFromHData(matrix{{2,0},{0,-3},{-3,0},{0,2}},matrix{{4},{6},{3},{6}})

F124E3 =  isLatticePolytope P

F125E0 =  P = stdSimplex 2

F125E1 =  vertices P

F126E0 =  P = hypercube 3

F126E1 =  Q = crossPolytope 3

F126E2 =  contains(Q,P)

F126E3 =  contains(P,Q)

F126E4 =  C = coneFromVData matrix {{1,0,0},{0,1,0},{0,0,1}};

F126E5 =  contains(C,P)

F126E6 =  P = affineImage(P,matrix{{1},{1},{1}})

F126E7 =  contains(C,P)

F127E0 =  C1 = coneFromVData matrix {{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}};

F127E1 =  C2 = coneFromVData matrix {{1,1,1},{0,1,-1},{-1,1,1}};

F127E2 =  C3 = coneFromVData matrix {{-1,-1,-1},{0,1,-1},{-1,1,1}};

F127E3 =  C4 = coneFromVData matrix {{1,-1},{0,0},{-1,-1}};

F127E4 =  F = fan {C1,C2,C3,C4}

F127E5 =  isComplete F

F127E6 =  isPure F

F127E7 =  C5 = coneFromVData matrix {{1,-1,1,-1},{-1,-1,0,0},{1,1,-1,-1}};

F127E8 =  C6 = coneFromVData matrix {{1,-1,1,-1},{1,1,0,0},{1,1,-1,-1}};

F127E9 =  F = addCone({C5,C6},F)

F127E10 =  isComplete F

F127E11 =  isPolytopal F

F128E0 =  R = matrix {{1,2},{2,1},{0,0}}

F128E1 =  C = coneFromVData R

F128E2 =  LS = matrix {{0},{0},{1}}

F128E3 =  C1 = coneFromVData (R,LS)

F128E4 =  r = matrix {{0},{1},{2}}

F128E5 =  C2 = coneFromVData {C,r}

F128E6 =  r = coneFromVData r

F128E7 =  C3 = coneFromVData(C,r)

F128E8 =  C3 == C2

F129E0 =  fC = faces hypercube 2

F129E1 =  fC#1

F130E0 =  P = convexHull transpose matrix {{0,0,0},{1,0,0},{0,1,0},{1,1,3}}

F130E1 =  isNormal P

F131E0 =  S = simplex 2

F131E1 =  facets S

F131E2 =  SCopy = polyhedronFromHData facets S

F131E3 =  assert(vertices S == vertices SCopy)

F131E4 =  S = stdSimplex 2

F131E5 =  facets S

F131E6 =  hyperplanes S

F131E7 =  SCopy = polyhedronFromHData(join(facets S, hyperplanes S))

F131E8 =  assert(vertices S == vertices SCopy)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F0E7", "F0E8", "F0E9", "F0E10", "F1E0", "F1E1", "F2E0", "F2E1", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F3E10", "F4E0", "F4E1", "F4E2", "F4E3", "F5E0", "F5E1", "F5E2", "F5E3", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F6E9", "F6E10", "F6E11", "F6E12", "F6E13", "F7E0", "F7E1", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F9E0", "F9E1", "F9E2", "F9E3", "F10E0", "F10E1", "F11E0", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F13E0", "F13E1", "F13E2", "F13E3", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F15E0", "F15E1", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F16E5", "F16E6", "F16E7", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F18E0", "F18E1", "F19E0", "F19E1", "F19E2", "F20E0", "F20E1", "F20E2", "F20E3", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F21E5", "F21E6", "F21E7", "F21E8", "F21E9", "F21E10", "F21E11", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F22E5", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4", "F24E0", "F24E1", "F24E2", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F25E5", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F27E0", "F27E1", "F28E0", "F28E1", "F28E2", "F28E3", "F29E0", "F29E1", "F30E0", "F31E0", "F31E1", "F31E2", "F31E3", "F31E4", "F31E5", "F32E0", "F32E1", "F32E2", "F32E3", "F33E0", "F34E0", "F34E1", "F34E2", "F34E3", "F34E4", "F34E5", "F34E6", "F34E7", "F34E8", "F34E9", "F34E10", "F34E11", "F34E12", "F34E13", "F34E14", "F34E15", "F34E16", "F34E17", "F34E18", "F34E19", "F34E20", "F34E21", "F34E22", "F34E23", "F34E24", "F34E25", "F34E26", "F34E27", "F34E28", "F35E0", "F35E1", "F35E2", "F35E3", "F36E0", "F36E1", "F36E2", "F36E3", "F36E4", "F37E0", "F37E1", "F37E2", "F37E3", "F37E4", "F37E5", "F38E0", "F38E1", "F38E2", "F38E3", "F39E0", "F39E1", "F39E2", "F40E0", "F40E1", "F40E2", "F40E3", "F41E0", "F41E1", "F41E2", "F41E3", "F41E4", "F41E5", "F41E6", "F42E0", "F42E1", "F42E2", "F42E3", "F43E0", "F43E1", "F43E2", "F43E3", "F43E4", "F44E0", "F44E1", "F45E0", "F45E1", "F45E2", "F46E0", "F46E1", "F46E2", "F46E3", "F46E4", "F46E5", "F46E6", "F46E7", "F47E0", "F47E1", "F47E2", "F48E0", "F48E1", "F48E2", "F48E3", "F49E0", "F49E1", "F49E2", "F49E3", "F49E4", "F49E5", "F49E6", "F49E7", "F49E8", "F50E0", "F50E1", "F50E2", "F50E3", "F51E0", "F51E1", "F51E2", "F52E0", "F52E1", "F52E2", "F52E3", "F52E4", "F52E5", "F53E0", "F53E1", "F53E2", "F53E3", "F53E4", "F53E5", "F53E6", "F54E0", "F54E1", "F54E2", "F54E3", "F54E4", "F54E5", "F54E6", "F54E7", "F55E0", "F55E1", "F55E2", "F55E3", "F56E0", "F56E1", "F56E2", "F56E3", "F57E0", "F57E1", "F57E2", "F57E3", "F58E0", "F58E1", "F58E2", "F58E3", "F59E0", "F59E1", "F59E2", "F59E3", "F60E0", "F60E1", "F60E2", "F60E3", "F60E4", "F61E0", "F61E1", "F62E0", "F62E1", "F62E2", "F63E0", "F63E1", "F63E2", "F64E0", "F64E1", "F64E2", "F64E3", "F64E4", "F64E5", "F64E6", "F64E7", "F64E8", "F64E9", "F64E10", "F64E11", "F64E12", "F64E13", "F64E14", "F64E15", "F64E16", "F64E17", "F64E18", "F64E19", "F64E20", "F64E21", "F64E22", "F64E23", "F64E24", "F64E25", "F64E26", "F64E27", "F64E28", "F64E29", "F64E30", "F64E31", "F64E32", "F64E33", "F64E34", "F64E35", "F64E36", "F64E37", "F64E38", "F64E39", "F64E40", "F64E41", "F64E42", "F64E43", "F64E44", "F64E45", "F64E46", "F64E47", "F64E48", "F64E49", "F64E50", "F64E51", "F64E52", "F64E53", "F64E54", "F64E55", "F64E56", "F64E57", "F64E58", "F64E59", "F64E60", "F64E61", "F65E0", "F65E1", "F66E0", "F66E1", "F66E2", "F66E3", "F67E0", "F67E1", "F67E2", "F67E3", "F67E4", "F67E5", "F67E6", "F67E7", "F67E8", "F67E9", "F67E10", "F67E11", "F67E12", "F68E0", "F68E1", "F68E2", "F68E3", "F69E0", "F69E1", "F69E2", "F69E3", "F70E0", "F70E1", "F71E0", "F71E1", "F71E2", "F72E0", "F72E1", "F72E2", "F73E0", "F73E1", "F73E2", "F73E3", "F73E4", "F73E5", "F73E6", "F73E7", "F74E0", "F74E1", "F74E2", "F74E3", "F75E0", "F75E1", "F76E0", "F77E0", "F78E0", "F78E1", "F78E2", "F79E0", "F79E1", "F80E0", "F81E0", "F81E1", "F81E2", "F82E0", "F82E1", "F82E2", "F82E3", "F83E0", "F83E1", "F83E2", "F83E3", "F83E4", "F83E5", "F84E0", "F84E1", "F84E2", "F84E3", "F84E4", "F84E5", "F84E6", "F84E7", "F84E8", "F84E9", "F84E10", "F84E11", "F84E12", "F85E0", "F85E1", "F85E2", "F85E3", "F85E4", "F86E0", "F86E1", "F86E2", "F86E3", "F86E4", "F86E5", "F87E0", "F87E1", "F87E2", "F88E0", "F88E1", "F88E2", "F88E3", "F88E4", "F88E5", "F89E0", "F89E1", "F89E2", "F89E3", "F89E4", "F89E5", "F89E6", "F89E7", "F90E0", "F90E1", "F91E0", "F91E1", "F91E2", "F91E3", "F92E0", "F92E1", "F92E2", "F92E3", "F92E4", "F93E0", "F93E1", "F93E2", "F94E0", "F94E1", "F94E2", "F94E3", "F94E4", "F94E5", "F95E0", "F95E1", "F95E2", "F95E3", "F96E0", "F96E1", "F96E2", "F96E3", "F97E0", "F97E1", "F98E0", "F98E1", "F98E2", "F99E0", "F99E1", "F99E2", "F99E3", "F100E0", "F100E1", "F100E2", "F100E3", "F100E4", "F100E5", "F101E0", "F101E1", "F102E0", "F102E1", "F102E2", "F102E3", "F102E4", "F103E0", "F103E1", "F103E2", "F103E3", "F104E0", "F104E1", "F104E2", "F105E0", "F106E0", "F106E1", "F107E0", "F107E1", "F108E0", "F108E1", "F108E2", "F108E3", "F109E0", "F109E1", "F109E2", "F109E3", "F110E0", "F110E1", "F110E2", "F110E3", "F110E4", "F110E5", "F110E6", "F110E7", "F110E8", "F111E0", "F111E1", "F111E2", "F111E3", "F112E0", "F112E1", "F113E0", "F113E1", "F113E2", "F113E3", "F114E0", "F114E1", "F114E2", "F114E3", "F115E0", "F115E1", "F116E0", "F116E1", "F116E2", "F116E3", "F116E4", "F116E5", "F116E6", "F116E7", "F116E8", "F116E9", "F116E10", "F116E11", "F116E12", "F116E13", "F116E14", "F116E15", "F116E16", "F116E17", "F116E18", "F116E19", "F116E20", "F116E21", "F116E22", "F116E23", "F116E24", "F116E25", "F116E26", "F116E27", "F116E28", "F116E29", "F116E30", "F116E31", "F116E32", "F116E33", "F116E34", "F116E35", "F116E36", "F116E37", "F116E38", "F116E39", "F116E40", "F116E41", "F116E42", "F116E43", "F116E44", "F116E45", "F116E46", "F116E47", "F116E48", "F117E0", "F117E1", "F117E2", "F118E0", "F118E1", "F118E2", "F118E3", "F118E4", "F118E5", "F118E6", "F119E0", "F119E1", "F119E2", "F120E0", "F120E1", "F120E2", "F120E3", "F121E0", "F121E1", "F122E0", "F122E1", "F122E2", "F123E0", "F123E1", "F123E2", "F123E3", "F123E4", "F123E5", "F123E6", "F123E7", "F123E8", "F123E9", "F123E10", "F123E11", "F123E12", "F123E13", "F123E14", "F123E15", "F123E16", "F123E17", "F123E18", "F123E19", "F123E20", "F123E21", "F123E22", "F124E0", "F124E1", "F124E2", "F124E3", "F125E0", "F125E1", "F126E0", "F126E1", "F126E2", "F126E3", "F126E4", "F126E5", "F126E6", "F126E7", "F127E0", "F127E1", "F127E2", "F127E3", "F127E4", "F127E5", "F127E6", "F127E7", "F127E8", "F127E9", "F127E10", "F127E11", "F128E0", "F128E1", "F128E2", "F128E3", "F128E4", "F128E5", "F128E6", "F128E7", "F128E8", "F129E0", "F129E1", "F130E0", "F130E1", "F131E0", "F131E1", "F131E2", "F131E3", "F131E4", "F131E5", "F131E6", "F131E7", "F131E8"}
