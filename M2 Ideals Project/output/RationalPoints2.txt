needsPackage "RationalPoints2"

F0E0 =  P = Proj(QQ[x,y,z]);

F0E1 =  pt = P(1,2,3)

F0E2 =  pt == P{2,4,6}

F0E3 =  ring pt

F1E0 =  QQ[x]

F1E1 =  minpoly a

F1E2 =  charpoly(a^2+1, Variable=>y)

F1E3 =  minpoly(a^2+1, Variable=>y)

F1E4 =  GF 81; minpoly(a+1)

F1E5 =  minpoly F

F2E0 =  globalHeight {1/1,2/3,5/8}

F2E1 =  PP = Proj(QQ[x,y,z])

F2E2 =  globalHeight pt

F2E3 =  F = toField(QQ[u]/(u^3-5));

F2E4 =  globalHeight {u,u^2/5,1_F}

F3E0 =  QQ[x]

F3E1 =  baseRing F

F3E2 =  i^2 + 1 == 0

F3E3 =  QQ[q]

F3E4 =  q^2 == 2

F3E5 =  baseRing F'

F3E6 =  j = baseChange_F' i

F3E7 =  j^2 + 1 == 0

F3E8 =  QQ[symbol x]

F3E9 =  extField {4*x^2+1}; x

F3E10 =  QQ[x]

F3E11 =  F' = extField {p, p}; #zeros_F' p

F3E12 =  F' = splittingField p; #zeros_F' p

F3E13 =  ZZ/11[x]

F3E14 =  x

F3E15 =  x^4 + 1 == 0

F4E0 =  F = toField(QQ[q]/(q^2+3));

F4E1 =  hermiteNormalForm 1_F

F4E2 =  hermiteNormalForm(q/3)

F5E0 =  ZZ/2[x,y,z]; rationalPoints(ideal(y^2*z+y*z^2-x^3-x*z^2), Projective=>true)

F5E1 =  QQ[x,y]; rationalPoints(ideal(x^2+y^2-1), Bound=>5)

F5E2 =  QQ[x,y]

F5E3 =  rationalPoints(I, Verbose=>true)

F5E4 =  rationalPoints(I, Split=>true, Verbose=>true)

F6E0 =  R = ZZ/5[x,y,z]

F6E1 =  rationalPoints I

F6E2 =  #rationalPoints Spec(R/I)

F6E3 =  #rationalPoints_(GF 25) I

F6E4 =  ZZ/5[x,y,z,w]

F6E5 =  rationalPoints(I, Projective => true)

F6E6 =  #rationalPoints variety I

F6E7 =  #rationalPoints_(GF 25) variety I

F6E8 =  ZZ/101[u_0..u_10]

F6E9 =  time rationalPoints(I, Amount => true)

F6E10 =  QQ[x,y,z]

F6E11 =  rationalPoints(variety I, Bound=>12)

F6E12 =  globalHeight \ oo

F6E13 =  rationalPoints(variety I, Bound=>12, KeepAll=>true)

F6E14 =  globalHeight \ oo

F6E15 =  QQ[x,y]; rationalPoints(ideal(x-2), Bound=>2)

F6E16 =  R = QQ[x,y]

F6E17 =  rationalPoints(I, Verbose => true)

F6E18 =  rationalPoints(I, Verbose => true, Split => true)

F6E19 =  ring \ first oo

F6E20 =  F = toField(QQ[q]/(q^4-10*q^2+20))

F6E21 =  I = ideal "64(x-w)(x4-4x3w-10x2y2-4x2w2+16xw3-20xy2w+5y4+16w4-20y2w2)-5q(2z-qw)(4(x2+y2-z2)+(1+3(5-q2))w2)2";

F6E22 =  nodes = I + ideal jacobian I;

F6E23 =  time rationalPoints(variety nodes, Split=>true, Verbose=>true);

F6E24 =  #oo

F6E25 =  nodes' = baseChange_32003 nodes;

F6E26 =  time #rationalPoints(variety nodes', Split=>true, Verbose=>true)

F7E0 =  QQ[x]

F7E1 =  F = toField(QQ[q]/(q^2-2)); zeros_F p

F7E2 =  F = splittingField p; #zeros_F p

F7E3 =  last zeros_F p

F7E4 =  (map(F, ring p, {oo})) p

F7E5 =  q = baseChange_13 p; zeros q

F7E6 =  F = splittingField q; describe F

F7E7 =  #zeros_F q

F8E0 =  integers QQ

F8E1 =  integers toField(QQ[i]/(i^2+1))

F8E2 =  integers toField(QQ[a]/(a^2+3))

F8E3 =  discriminant toField(QQ[a]/(a^2+3))

F8E4 =  discriminant toField(QQ[a]/(a^4-a+2))

F9E0 =  F = toField(QQ[c]/(c^3-2));

F9E1 =  QQ[x]

F9E2 =  c' = baseChange_F' c

F9E3 =  c'^3 == 2

F9E4 =  F[x,y]

F9E5 =  baseChange_F' I

F9E6 =  F'[x]

F9E7 =  baseChange(F', I, PrimitiveElement => c'')

F9E8 =  QQ[x]; baseChange_7 (x^3-2)

F9E9 =  F[x]; baseChange_7 ideal(x-c)

F9E10 =  baseChange_CC c

F9E11 =  oo^3

F9E12 =  baseChange_CC (c^3)

F9E13 =  baseChange(CC, c, PrimitiveElement => -.6+1.1*ii)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F3E10", "F3E11", "F3E12", "F3E13", "F3E14", "F3E15", "F4E0", "F4E1", "F4E2", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F6E9", "F6E10", "F6E11", "F6E12", "F6E13", "F6E14", "F6E15", "F6E16", "F6E17", "F6E18", "F6E19", "F6E20", "F6E21", "F6E22", "F6E23", "F6E24", "F6E25", "F6E26", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F7E6", "F7E7", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F9E8", "F9E9", "F9E10", "F9E11", "F9E12", "F9E13"}
