needsPackage "CompleteIntersectionResolutions"

F30E0 =  setRandomSeed 0

F30E1 =  c = 2;

F30E2 =  S = ZZ/101[x_1..x_c, a_(1,1)..a_(c,c)];

F30E3 =  X = matrix{{x_1..x_c}};

F30E4 =  ff = X*map(source X, , genericMatrix(S,a_(1,1),c,c));

F30E5 =  R = S/ideal ff;

F30E6 =  mbound = mfBound coker (R**X)

F30E7 =  F = res(coker (R**X) , LengthLimit =>mbound+1);

F30E8 =  M = coker F.dd_(mbound+1);

F30E9 =  MF = matrixFactorization(ff,M)

F30E10 =  netList BRanks MF

F30E11 =  netList ARanks MF

F30E12 =  netList bMaps MF

F30E13 =  netList dMaps MF

F30E14 =  netList psiMaps MF

F30E15 =  netList hMaps MF

F30E16 =  betti res M

F30E17 =  infiniteBettiNumbers(MF,7)

F30E18 =  betti res pushForward(map(R,S),M)

F30E19 =  finiteBettiNumbers MF

F30E20 =  G = makeFiniteResolution (ff,MF)

F30E21 =  G' = res(pushForward(map(R,S),M))

exampleIDS = {"F30E0", "F30E1", "F30E2", "F30E3", "F30E4", "F30E5", "F30E6", "F30E7", "F30E8", "F30E9", "F30E10", "F30E11", "F30E12", "F30E13", "F30E14", "F30E15", "F30E16", "F30E17", "F30E18", "F30E19", "F30E20", "F30E21"}
