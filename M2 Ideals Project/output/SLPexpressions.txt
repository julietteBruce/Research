needsPackage "SLPexpressions"

F0E0 =  declareVariable X

F0E1 =  F = Y^2-X^3-X

F0E2 =  diff(X,F)

F0E3 =  J = diff(gateMatrix{{X,Y}},gateMatrix{{F}})

F0E4 =  (numrows J, numcols J)

F1E0 =  declareVariable X

F1E1 =  XpC = X+C

F1E2 =  XXC = productGate{X,X,C}

F1E3 =  detXCCX = detGate{{X,C},{C,X}}

F1E4 =  XoC = X/C

F1E5 =  slp = makeInterpretedSLProgram(matrix{{C,X}},matrix{{XXC,detXCCX,XoC,XpC+2}})

F1E6 =  inp = mutableMatrix{{1.2,-1}}

F1E7 =  out = mutableMatrix(ring inp,1,4)

F1E8 =  evaluate(slp,inp,out)

F1E9 =  clean_0.001(out - mutableMatrix {{1.2, -.44, -.833333, 2.2}}) == 0

F1E10 =  inp = mutableMatrix{{-5_QQ,3}}

F1E11 =  ring inp

F1E12 =  out = mutableMatrix(ring inp,1,4)

F1E13 =  evaluate(slp, inp, out)

F1E14 =  out

F2E0 =  declareVariable \ {a,b,c}

F2E1 =  x = inputGate 1

F2E2 =  y = inputGate 2

F2E3 =  G = gateMatrix{{(x+y)+3+4+b+4+c+4*(a+b+2)}}

F2E4 =  cG = compress G

F2E5 =  depth G

F2E6 =  depth cG

F2E7 =  countGates G

F2E8 =  countGates cG

F3E0 =  R = RR[x,y]

F3E1 =  M = gateMatrix basis(3, R)

F3E2 =  numcols M, numrows M

F3E3 =  M_0

F3E4 =  M#0

F3E5 =  M#0#0

F3E6 =  entries M

F3E7 =  N = gateMatrix {delete(x^2*y^2, flatten entries basis(4, R))}

F3E8 =  M | N

F3E9 =  M || N

F3E10 =  P = transpose M*M

F3E11 =  det P

F4E0 =  declareVariable X

F4E1 =  declareVariable Y

F4E2 =  h = valueHashTable({X,Y},{1,ii})

F4E3 =  peek h

F5E0 =  R = QQ[x,y]

F5E1 =  getVarGates R

F6E0 =  R = QQ[x,y]

F6E1 =  f = random(3, R)

F6E2 =  gatePolynomial f

F7E0 =  declareVariable x

F7E1 =  x + 1

F7E2 =  undeclareVariable x

F7E3 =  x

F8E0 =  declareVariable x

F8E1 =  f = x + 1

F8E2 =  n = 12;

F8E3 =  for i from 1 to n do f = f*f -- f = (x+1)^(2^n)

F8E4 =  depth f

F8E5 =  x = symbol x

F8E6 =  n = 8

F8E7 =  varGates = declareVariable \ for i from 1 to n list x_i

F8E8 =  G1 = gateMatrix{{x_1+x_2+x_3+x_4+x_5+x_6+x_7+x_8}}

F8E9 =  G2 = gateMatrix{{((x_1+x_2)+(x_3+x_4))+((x_5+x_6)+(x_7+x_8))}}

F8E10 =  depth G1

F8E11 =  depth G2

F8E12 =  countGates G1

F8E13 =  countGates G2

F9E0 =  declareVariable x

F9E1 =  f = x + 1

F9E2 =  n = 12;

F9E3 =  for i from 1 to n do f = f*f -- f = (x+1)^(2^n)

F9E4 =  slp = makeInterpretedSLProgram({x},{f})

F9E5 =  time A = evaluate(slp,matrix{{1}});

F9E6 =  ZZ[y];

F9E7 =  time B = sub((y+1)^(2^n),{y=>1})

F9E8 =  A == B

F10E0 =  declareVariable X

F10E1 =  m1 = Y*Y

F10E2 =  m2 = X^3

F10E3 =  F = m1-m2-X

F10E4 =  X + 2

F10E5 =  M = matrix {{X, Y}}

F10E6 =  3*M

F10E7 =  transpose M * M

F11E0 =  declareVariable X

F11E1 =  declareVariable Y

F11E2 =  C = sumGate {X+Y,Y,X}

F11E3 =  D = productGate {X*Y,Y,C}

F11E4 =  h = valueHashTable({X,Y},{1,ii})

F11E5 =  v = value(D,h)

F11E6 =  v == product{value(X*Y,h),value(Y,h),value(C,h)}

F12E0 =  declareVariable X

F12E1 =  isConstant X

F12E2 =  isConstant 3

F13E0 =  declareVariable X

F13E1 =  XpC = X+C

F13E2 =  XXC = productGate{X,X,C}

F13E3 =  detXCCX = detGate{{X,C},{C,X}}

F13E4 =  XoC = X/C

F13E5 =  slp = makeInterpretedSLProgram(matrix{{C,X}},matrix{{XXC,detXCCX,XoC,XpC+2}})

F14E0 =  declareVariable x

F14E1 =  A = matrix { apply(5,i->i*x) }

F14E2 =  A#0

F14E3 =  A#0#0

F14E4 =  B = matrix { apply(4,i->y^i) }

F14E5 =  C = transpose A * B

F14E6 =  numrows C, numcols C

F15E0 =  declareVariable x

F15E1 =  x + 1

F16E0 =  declareVariable X

F16E1 =  declareVariable Y

F16E2 =  inputGate 3

F16E3 =  X + 1

F16E4 =  sumGate{X,Y}

F16E5 =  2*Y

F16E6 =  productGate{X,-X,Y}

F16E7 =  X / Y

F16E8 =  detGate {{X, Y}, {-Y, X}}

F16E9 =  det matrix{{Y, 1}, {-1, X}}

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F1E10", "F1E11", "F1E12", "F1E13", "F1E14", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F3E10", "F3E11", "F4E0", "F4E1", "F4E2", "F4E3", "F5E0", "F5E1", "F6E0", "F6E1", "F6E2", "F7E0", "F7E1", "F7E2", "F7E3", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F8E8", "F8E9", "F8E10", "F8E11", "F8E12", "F8E13", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F9E8", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F10E5", "F10E6", "F10E7", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F11E5", "F11E6", "F12E0", "F12E1", "F12E2", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F15E0", "F15E1", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F16E5", "F16E6", "F16E7", "F16E8", "F16E9"}
