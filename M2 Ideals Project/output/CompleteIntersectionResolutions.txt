needsPackage "CompleteIntersectionResolutions"

F0E0 =  c = 3;d=2

F0E1 =  R = setupRings(c,d);

F0E2 =  Rc = R_c

F0E3 =  M = coker matrix{{Rc_0,Rc_1,Rc_2},{Rc_1,Rc_2,Rc_0}}

F0E4 =  regularitySequence(R,M)

F1E0 =  kk= ZZ/101

F1E1 =  S = kk[x,y,z]

F1E2 =  I2 = ideal"x3,yz"

F1E3 =  R2 = S/I2

F1E4 =  M2 = R2^1/ideal"x2,y,z"

F1E5 =  betti res (M2, LengthLimit =>10)

F1E6 =  E = ExtModule M2

F1E7 =  apply(toList(0..10), i->hilbertFunction(i, E))

F1E8 =  Eeven = evenExtModule M2

F1E9 =  apply(toList(0..5), i->hilbertFunction(i, Eeven))

F2E0 =  setRandomSeed 0

F2E1 =  sumTwoMonomials(2,3)

F3E0 =  kk = ZZ/101

F3E1 =  S = kk[a,b,c]

F3E2 =  f = matrix"a4,b4,c4"

F3E3 =  R = S/ideal f

F3E4 =  p = map(R,S)

F3E5 =  M = coker map(R^2, R^{3:-1}, {{a,b,c},{b,c,a}})

F3E6 =  betti (FF =res( M, LengthLimit =>6))

F3E7 =  MS = prune pushForward(p, coker FF.dd_6);

F3E8 =  resFld := pushForward(p, coker vars R);

F3E9 =  T = exteriorTorModule(f,MS);

F3E10 =  E = exteriorExtModule(f,MS);

F3E11 =  hf(-4..0,E)

F3E12 =  betti res MS

F3E13 =  betti res (PE = prune E)

F3E14 =  betti res (PT = prune T)

F3E15 =  E1 = prune exteriorExtModule(f, MS, resFld);

F3E16 =  ring E1

F3E17 =  exRing = kk[e_0,e_1,e_2, SkewCommutative =>true]

F3E18 =  E1 = prune exteriorExtModule(f, MS, resFld);

F3E19 =  ring E1

F3E20 =  exRing = kk[e_0,e_1,e_2, SkewCommutative =>true]

F3E21 =  q = map(exRing, ring E1, {3:0,e_0,e_1,e_2}, DegreeMap => d -> {d_1})

F3E22 =  E2 = coker q presentation E1;

F3E23 =  hf(-5..5,E2) == hf(-5..5,E)

F4E0 =  setRandomSeed 0

F4E1 =  S = ZZ/101[a,b,c];

F4E2 =  ff = matrix"a3,b3";

F4E3 =  R = S/ideal ff;

F4E4 =  M = highSyzygy (R^1/ideal vars R);

F4E5 =  mf = matrixFactorization (ff, M)

F4E6 =  G = makeFiniteResolution(ff,mf)

F4E7 =  F = res pushForward(map(R,S),M)

F4E8 =  G.dd_1

F4E9 =  F.dd_1

F4E10 =  G.dd_2

F4E11 =  F.dd_2

F4E12 =  S = ZZ/101[a,b,c,d]

F4E13 =  ff1 = matrix"a3,b3,c3,d3"

F4E14 =  ff =ff1*random(source ff1, source ff1)

F4E15 =  R = S/ideal ff

F4E16 =  M = highSyzygy (R^1/ideal"a2b2")

F4E17 =  complexity M

F4E18 =  mf = matrixFactorization (ff, M)

F4E19 =  complexity mf

F4E20 =  BRanks mf

F4E21 =  G = makeFiniteResolution(ff,mf);

F4E22 =  codim ring G

F4E23 =  R1 = ring G

F4E24 =  F = res prune pushForward(map(R,R1),M)

F4E25 =  betti F

F4E26 =  betti G

F5E0 =  S = ZZ/101[a,b,c]

F5E1 =  ff = matrix "a2,b2,c2"

F5E2 =  R = S/(ideal ff)

F5E3 =  N = highSyzygy(R^1/ideal(a*b,c))

F5E4 =  E = extVsCohomology(ff,highSyzygy N);

F6E0 =  S = ZZ/101[a,b,c]

F6E1 =  ff = matrix"a3, b3, c3"

F6E2 =  R = S/ideal ff

F6E3 =  M = syzygyModule(2,coker vars R)

F6E4 =  (FF, aug) = layeredResolution(ff,M,5)

F6E5 =  betti FF

F6E6 =  betti res(M, LengthLimit=>5)

F6E7 =  C = chainComplex flatten {{aug} |apply(4, i-> FF.dd_(i+1))}

F6E8 =  apply(4, i ->FF.dd_(i+1))

F6E9 =  apply(5, j-> prune HH_j C == 0)

F6E10 =  MS = pushForward(map(R,S), M);

F6E11 =  (GG, aug) = layeredResolution(ff,MS)

F6E12 =  (GG, aug) = layeredResolution(ff,MS, Verbose =>true)

F6E13 =  betti GG

F6E14 =  betti res MS

F6E15 =  C = chainComplex flatten {{aug} |apply(length GG -1, i-> GG.dd_(i+1))}

F6E16 =  apply(length GG +1 , j-> prune HH_j C == 0)

F7E0 =  kk=ZZ/101

F7E1 =  S = kk[a,b]

F7E2 =  ff = matrix"a4,b4"

F7E3 =  R = S/ideal ff

F7E4 =  N = R^1/ideal"a2, ab, b3"

F7E5 =  N = coker vars R

F7E6 =  M = highSyzygy N

F7E7 =  MS = pushForward(map(R,S),M)

F7E8 =  mf = matrixFactorization(ff, M)

F7E9 =  G = makeFiniteResolutionCodim2(ff,mf)

F7E10 =  F = G#"resolution"

F8E0 =  E = ZZ/101[a,b,c,d, SkewCommutative => true]

F8E1 =  P = E^1/ideal(a*b,c)

F8E2 =  betti res P

F8E3 =  hf(0..3, P)

F8E4 =  S = ZZ/101[x,y,z,w]

F8E5 =  betti BGGL(P,S)

F9E0 =  kk = ZZ/101

F9E1 =  S = kk[a,b,c]

F9E2 =  ff = matrix"a2,b2,c2"

F9E3 =  R = S/ideal ff

F9E4 =  M = R^1/ideal"a,bc"

F9E5 =  k = 1

F9E6 =  m = k+5

F9E7 =  F = res(M, LengthLimit => m)

F9E8 =  syzygies = apply(1..m, i->coker F.dd_i);

F9E9 =  t1 = makeT(ff,F,k+4);

F9E10 =  t2 = makeT(ff,F,k+2);

F9E11 =  T2Components = flatten for i from 0 to 1 list(for j from i+1 to 2 list map(F_k, F_(k+4), t2_i*t1_j-t2_j*t1_i));

F9E12 =  g = map(syzygies_k, syzygies_(k+4), T2Components_2)

F9E13 =  isStablyTrivial g

F10E0 =  SE = ZZ/101[a,b,c,x,y,Degrees=>toList(3:{1,0})|toList(2:{1,1}), SkewCommutative=>{x,y}]

F10E1 =  RE = SE/ideal"a2,b2,c2"

F10E2 =  T = hashTable {{0,RE^1},{1,RE^{2:{ -1,-1}}}, {2,RE^{{ -2,-2}}}}

F10E3 =  E = matrix{{x,y}}

F10E4 =  F=apply(2, j-> source E_{j})

F10E5 =  phi = hashTable{ {{0,0}, map(T#1, F_0**T#0, T#1_{0})},{{1,0}, map(T#1, F_1**T#0, T#1_{1})},{{0,1}, map(T#2, F_0**T#1, T#1^{1})}, {{1,1}, -map(T#2, F_1**T#1, T#1^{0})}}

F10E6 =  apply(keys phi, k->isHomogeneous phi#k)

F10E7 =  X = makeModule(T,E,phi)

F10E8 =  isHomogeneous X

F10E9 =  q = map(ZZ/101[x,y, SkewCommutative => true, DegreeMap => d->{d_1}], ring X, {3:0,x,y})

F10E10 =  prune coker q presentation X

F11E0 =  kk= ZZ/101

F11E1 =  S = kk[x,y,z]

F11E2 =  I1 = ideal "x3y"

F11E3 =  R1 = S/I1

F11E4 =  M1 = R1^1/ideal(x^2)

F11E5 =  betti res (M1, LengthLimit =>5)

F11E6 =  E = ExtModule M1

F11E7 =  apply(toList(0..10), i->hilbertFunction(i, E))

F11E8 =  Eeven = evenExtModule(M1)

F11E9 =  apply(toList(0..5), i->hilbertFunction(i, Eeven))

F11E10 =  Eodd = oddExtModule(M1)

F11E11 =  apply(toList(0..5), i->hilbertFunction(i, Eodd))

F11E12 =  use S

F11E13 =  I2 = ideal"x3,yz"

F11E14 =  R2 = S/I2

F11E15 =  M2 = R2^1/ideal"x2,y,z"

F11E16 =  betti res (M2, LengthLimit =>10)

F11E17 =  E = ExtModule M2

F11E18 =  apply(toList(0..10), i->hilbertFunction(i, E))

F11E19 =  Eeven = evenExtModule M2

F11E20 =  apply(toList(0..5), i->hilbertFunction(i, Eeven))

F11E21 =  Eodd = oddExtModule M2

F11E22 =  apply(toList(0..5), i->hilbertFunction(i, Eodd))

F12E0 =  S = ZZ/101[x,y,z];

F12E1 =  ff = matrix"x3,y3,z3";

F12E2 =  R = S/ideal ff;

F12E3 =  M = coker matrix"x,y,z

F12E4 =  betti (F = res M)

F12E5 =  T = makeT(ff,F,3);

F12E6 =  netList T

F12E7 =  isHomogeneous T_2

F13E0 =  setRandomSeed 100

F13E1 =  S = ZZ/101[x,y,z]

F13E2 =  f = matrix"x3,y3+x3,z3+x3+y3"

F13E3 =  ff = f*random(source f, source f)

F13E4 =  R = S/ideal f

F13E5 =  M0 = R^1/ideal"x2z2,xyz"

F13E6 =  betti res (M0, LengthLimit => 7)

F13E7 =  mfBound M0

F13E8 =  M = betti res highSyzygy M0

F13E9 =  netList BRanks matrixFactorization(ff, highSyzygy M0)

F14E0 =  n = 3

F14E1 =  R = ZZ/101[x_0..x_(n-1)]

F14E2 =  Rbar = R/(ideal apply(c, i-> R_i^3))

F14E3 =  Mbar = Nbar = coker vars Rbar

F14E4 =  E = newExt(Mbar,Nbar)

F14E5 =  tally degrees E

F14E6 =  annihilator E

F14E7 =  setRandomSeed 0

F14E8 =  n = 3

F14E9 =  c = 3

F14E10 =  kk = ZZ/101

F14E11 =  R = kk[x_0..x_(n-1)]

F14E12 =  I = ideal apply(c, i->R_i^2)

F14E13 =  ff = gens I

F14E14 =  Rbar = R/I

F14E15 =  bar = map(Rbar, R)

F14E16 =  K = coker vars Rbar

F14E17 =  Mbar = prune coker random(Rbar^2, Rbar^{-2,-2})

F14E18 =  ES = newExt(Mbar,K,Lift => true)

F14E19 =  S = ring ES

F14E20 =  EE = Ext(Mbar,K);

F14E21 =  S' = ring EE -- note that S' is the polynomial ring

F14E22 =  A = res ES

F14E23 =  B = res EE

F14E24 =  all(length A+1, i-> sort degrees A_i == sort degrees B_i)

F14E25 =  ann EE

F14E26 =  ann ES

F14E27 =  EEtoES = map(ring ES,ring EE, gens ring ES)

F14E28 =  EE' = coker EEtoES presentation EE

F14E29 =  H = Hom(EE',ES);

F14E30 =  Q = positions(degrees target presentation H, i-> i == {0,0})

F14E31 =  f = sum(Q, p-> random (S^1, S^1)**homomorphism H_{p})

F15E0 =  setRandomSeed 0

F15E1 =  S = ZZ/101[a,b,c,d];

F15E2 =  ff1 = matrix"a3,b3,c3,d3";

F15E3 =  ff =ff1*random(source ff1, source ff1);

F15E4 =  R = S/ideal ff;

F15E5 =  M = highSyzygy (R^1/ideal"a2b2");

F15E6 =  complexity M

F15E7 =  mf = matrixFactorization (ff, M)

F15E8 =  complexity mf

F15E9 =  betti res (R^1/ideal"a2b2", LengthLimit=>10)

F16E0 =  S = ZZ/101[a,b,c];

F16E1 =  R = S/ideal"a3,b3,c3";

F16E2 =  M = module ideal vars R;

F16E3 =  betti presentation M

F16E4 =  betti (F = cosyzygyRes(3,M))

F16E5 =  cosyzygyRes M

F17E0 =  kk= ZZ/101

F17E1 =  S = kk[x,y,z]

F17E2 =  I2 = ideal"x3,yz"

F17E3 =  R2 = S/I2

F17E4 =  M2 = R2^1/ideal"x2,y,z"

F17E5 =  betti res (M2, LengthLimit =>10)

F17E6 =  E = ExtModule M2

F17E7 =  apply(toList(0..10), i->hilbertFunction(i, E))

F17E8 =  Eodd = oddExtModule M2

F17E9 =  apply(toList(0..5), i->hilbertFunction(i, Eodd))

F18E0 =  kk = ZZ/101;

F18E1 =  S = kk[a,b,c];

F18E2 =  ff = matrix{{a^4, b^4,c^4}};

F18E3 =  R = S/ideal ff;

F18E4 =  Ops = kk[x_1,x_2,x_3];

F18E5 =  MM = Ops^1/(x_1*ideal(x_2^2,x_3));

F18E6 =  N = moduleAsExt(MM,R);

F18E7 =  betti res( N, LengthLimit => 10)

F18E8 =  hfModuleAsExt(12,MM,3)

F19E0 =  setRandomSeed 100

F19E1 =  S = ZZ/101[a,b,c,d];

F19E2 =  f = map(S^1, S^4, (i,j) -> S_j^3)

F19E3 =  R = S/ideal f;

F19E4 =  M = R^1/ideal"ab2+cd2";

F19E5 =  betti (F = res(M, LengthLimit => 5))

F19E6 =  E = ExtModuleData M;

F19E7 =  E_2

F19E8 =  E_3

F19E9 =  r = max(2*E_2,2*E_3+1)

F19E10 =  Er = ExtModuleData coker F.dd_r;

F19E11 =  regularity Er_0

F19E12 =  regularity Er_1

F19E13 =  regularity evenExtModule(coker F.dd_(r-1))

F19E14 =  ff = f*random(source f, source f);

F19E15 =  matrixFactorization(ff, coker F.dd_(r+1));

F20E0 =  setRandomSeed 0

F20E1 =  kk = ZZ/101

F20E2 =  S = kk[a,b,u,v]

F20E3 =  ff = matrix"au,bv"

F20E4 =  R = S/ideal ff

F20E5 =  M0 = R^1/ideal"a,b"

F20E6 =  M = highSyzygy M0

F20E7 =  MF = matrixFactorization(ff,M);

F20E8 =  netList BRanks MF

F20E9 =  netList bMaps MF

F20E10 =  betti res(M, LengthLimit => 7)

F20E11 =  infiniteBettiNumbers (MF,7)

F20E12 =  betti res pushForward(map(R,S),M)

F20E13 =  finiteBettiNumbers MF

F21E0 =  kk=ZZ/101

F21E1 =  S = kk[a,b,c,d]

F21E2 =  M = truncate(3,S^1)

F21E3 =  betti matrix S2(0,M)

F21E4 =  betti matrix S2(1,M)

F21E5 =  M = S^1/intersect(ideal"a,b,c", ideal"b,c,d",ideal"c,d,a",ideal"d,a,b")

F21E6 =  prune source S2(0,M)

F21E7 =  prune target S2(0,M)

F21E8 =  S = ZZ/101[x_0..x_2];

F21E9 =  ff = apply(3, i->x_i^2);

F21E10 =  R = S/ideal ff;

F21E11 =  M = cokernel matrix {{x_0, x_1*x_2}};

F21E12 =  b = 5;

F21E13 =  Mb = prune syzygyModule(-b,M);

F21E14 =  E = prune evenExtModule Mb;

F21E15 =  S2map = S2(0,E);

F21E16 =  SE = prune target S2map;

F21E17 =  extra = prune coker S2map;

F21E18 =  KE = prune ker S2map;

F21E19 =  betti res(Mb, LengthLimit => 10)

F21E20 =  apply (5, i-> hilbertFunction(i, KE))

F21E21 =  apply (5, i-> hilbertFunction(i, E))

F21E22 =  apply (5, i-> hilbertFunction(i, SE))

F21E23 =  apply (5, i-> hilbertFunction(i, extra))

F22E0 =  expo(3,5)

F22E1 =  expo(3, {3,2,1})

F23E0 =  E = ZZ/101[a,b,c, SkewCommutative=>true]

F23E1 =  M = coker map(E^2, E^{-1}, matrix"ab;bc")

F23E2 =  presentation M

F23E3 =  TateResolution(M,-2,7)

F24E0 =  kk= ZZ/101

F24E1 =  E = kk[e,f,g, SkewCommutative => true]

F24E2 =  M = E^1++module ideal vars E++E^{-1}

F24E3 =  freeExteriorSummand M

F25E0 =  setRandomSeed 0

F25E1 =  kk = ZZ/101

F25E2 =  S = kk[a,b,u,v]

F25E3 =  ff = matrix"au,bv"

F25E4 =  R = S/ideal ff

F25E5 =  M0 = R^1/ideal"a,b"

F25E6 =  F = res(M0, LengthLimit =>3)

F25E7 =  M = coker F.dd_3;

F25E8 =  MF = matrixFactorization(ff,M);

F25E9 =  betti res pushForward(map(R,S),M)

F25E10 =  finiteBettiNumbers MF

F25E11 =  infiniteBettiNumbers(MF,5)

F25E12 =  betti res (M, LengthLimit => 5)

F26E0 =  kk=ZZ/101;

F26E1 =  S = kk[a,b,c];

F26E2 =  E = S^1/ideal"ab"++S^1/ideal vars S;

F26E3 =  f1 =matrix"a";

F26E4 =  f2 =matrix"a+b,c";

F26E5 =  f3 = matrix"a+b";

F26E6 =  f4 = matrix"a+b, a2+b";

F26E7 =  isQuasiRegular(f1,E)

F26E8 =  isQuasiRegular(f2,E)

F26E9 =  isQuasiRegular(f3,E)

F26E10 =  isQuasiRegular(f4,E)

F27E0 =  kk= ZZ/101

F27E1 =  S = kk[x,y,z]

F27E2 =  setRandomSeed 0

F27E3 =  t = random(S^{2:-1,2:-2}, S^{3:-1,4:-2})

F27E4 =  ss = splittings(syz t, t)

F27E5 =  ss/betti

F28E0 =  kk = ZZ/101;

F28E1 =  S = kk[a,b,c];

F28E2 =  ff = matrix{{a^4, b^4,c^4}};

F28E3 =  R = S/ideal ff;

F28E4 =  Ops = kk[x_1,x_2,x_3];

F28E5 =  MM = Ops^1/(x_1*ideal(x_2^2,x_3));

F28E6 =  N = moduleAsExt(MM,R);

F28E7 =  betti res( N, LengthLimit => 10)

F28E8 =  hfModuleAsExt(12,MM,3)

F29E0 =  setRandomSeed 0

F29E1 =  twoMonomials(2,3)

F30E0 =  setRandomSeed 0

F30E1 =  c = 2;

F30E2 =  S = ZZ/101[x_1..x_c, a_(1,1)..a_(c,c)];

F30E3 =  X = matrix{{x_1..x_c}};

F30E4 =  ff = X*map(source X, , genericMatrix(S,a_(1,1),c,c));

F30E5 =  R = S/ideal ff;

F30E6 =  mbound = mfBound coker (R**X)

F30E7 =  F = res(coker (R**X) , LengthLimit =>mbound+1);

F30E8 =  M = coker F.dd_(mbound+1);

F30E9 =  MF = matrixFactorization(ff,M)

F30E10 =  netList BRanks MF

F30E11 =  netList ARanks MF

F30E12 =  netList bMaps MF

F30E13 =  netList dMaps MF

F30E14 =  netList psiMaps MF

F30E15 =  netList hMaps MF

F30E16 =  betti res M

F30E17 =  infiniteBettiNumbers(MF,7)

F30E18 =  betti res pushForward(map(R,S),M)

F30E19 =  finiteBettiNumbers MF

F30E20 =  G = makeFiniteResolution (ff,MF)

F30E21 =  G' = res(pushForward(map(R,S),M))

F31E0 =  x = symbol x

F31E1 =  S = ZZ/101[x_0..x_4]

F31E2 =  F = res coker vars S

F31E3 =  ff = matrix{{x_0^2,x_1^3}}

F31E4 =  R = S/(ideal ff)

F31E5 =  len = 10

F31E6 =  time G = EisenbudShamash(ff,F,len)

F31E7 =  apply(length G -1, i->prune HH_(i+1) G)

F31E8 =  betti F

F31E9 =  G5 = (G_5).cache.components

F31E10 =  expo(numcols ff, 1)

F31E11 =  G51 = (G5_1).cache.components

F31E12 =  S = ZZ/101[a..f]

F31E13 =  R = S/ideal"a3,b3"

F31E14 =  M = coker vars R

F31E15 =  F = res M

F31E16 =  betti F

F31E17 =  ff = matrix"c3"

F31E18 =  R1 = R/ideal ff

F31E19 =  FF = time Shamash(R1,F,4)

F31E20 =  GG = time EisenbudShamash(ff,F,4)

F31E21 =  GG = time EisenbudShamash(R1,F[2],4)

F32E0 =  c = 2

F32E1 =  S = ZZ/32003[x_0..x_(c-1),a_(0,0)..a_(c-1,c-1)];

F32E2 =  A = genericMatrix(S,a_(0,0),c,c);

F32E3 =  f = matrix{{x_0..x_(c-1)}}*map(S^{c:-1},S^{c:-2},A)

F32E4 =  R = S/ideal f;

F32E5 =  kR = R^1/ideal(x_0..x_(c-1))

F32E6 =  MF = matrixFactorization(f,highSyzygy kR)

F32E7 =  netList BRanks MF

F32E8 =  netList dMaps MF

F32E9 =  netList bMaps MF

F32E10 =  netList psiMaps MF

F33E0 =  kk=ZZ/101

F33E1 =  S = kk[a,b,c,d]

F33E2 =  F = res ideal vars S

F33E3 =  f = matrix{{a,b,c}}

F33E4 =  homot = makeHomotopies(f,F,2)

F33E5 =  L = sort select(keys homot, k->(homot#k!=0 and sum(k_0)>1))

F33E6 =  kk= ZZ/32003;

F33E7 =  S = kk[a,b,c,d];

F33E8 =  M = S^1/(ideal"a2,b2,c2,d2");

F33E9 =  F = res M

F33E10 =  setRandomSeed 0

F33E11 =  f = random(S^1,S^{2:-5});

F33E12 =  homot = makeHomotopies(f,F,5)

F33E13 =  L = sort select(keys homot, k->(homot#k!=0 and sum(k_0)>1))

F33E14 =  #L

F33E15 =  netList L

F33E16 =  homot#(L_0)

F33E17 =  k1 = S^1/(ideal vars S);

F33E18 =  select(keys homot,k->(k1**homot#k)!=0)

F34E0 =  kk = ZZ/101

F34E1 =  S = kk[a,b,c]

F34E2 =  f = matrix"a4,b4,c4"

F34E3 =  R = S/ideal f

F34E4 =  p = map(R,S)

F34E5 =  M = coker map(R^2, R^{3:-1}, {{a,b,c},{b,c,a}})

F34E6 =  betti (FF =res( M, LengthLimit =>6))

F34E7 =  MS = prune pushForward(p, coker FF.dd_6);

F34E8 =  T = exteriorTorModule(f,MS);

F34E9 =  betti T

F34E10 =  betti res (PT = prune T)

F34E11 =  ann PT

F34E12 =  PT0 = image (inducedMap(PT,cover PT)* ((cover PT)_{0..12}));

F34E13 =  PT1 = image (inducedMap(PT,cover PT)* ((cover PT)_{13..30}));

F34E14 =  betti res prune PT0

F34E15 =  betti res prune PT1

F34E16 =  betti res prune PT

F35E0 =  setRandomSeed 0

F35E1 =  kk = ZZ/101

F35E2 =  S = kk[a,b,u,v]

F35E3 =  ff = matrix"au,bv"

F35E4 =  R = S/ideal ff

F35E5 =  M0 = R^1/ideal"a,b"

F35E6 =  F = res(M0, LengthLimit =>3)

F35E7 =  M = coker F.dd_3;

F35E8 =  MF = matrixFactorization(ff,M);

F35E9 =  betti res pushForward(map(R,S),M)

F35E10 =  finiteBettiNumbers MF

F35E11 =  infiniteBettiNumbers(MF,5)

F35E12 =  betti res (M, LengthLimit => 5)

F36E0 =  R1=ZZ/101[a,b,c]/ideal(a^2,b^2,c^5)

F36E1 =  R2=ZZ/101[a,b,c]/ideal(a^3,b^3)

F36E2 =  extIsOnePolynomial coker random(R1^{0,1},R1^{3:-1})

F36E3 =  extIsOnePolynomial coker random(R2^{0,1},R2^{3:-1})

F37E0 =  n = 3

F37E1 =  c = 2

F37E2 =  kk = ZZ/101

F37E3 =  R = kk[x_0..x_(n-1)]

F37E4 =  I = ideal(x_0^2, x_2^3)

F37E5 =  ff = gens I

F37E6 =  Rbar = R/I

F37E7 =  bar = map(Rbar, R)

F37E8 =  Mbar = prune coker random(Rbar^1, Rbar^{-2})

F37E9 =  (d0,d1) = EisenbudShamashTotal(Mbar,Grading =>1)

F37E10 =  d0*d1

F37E11 =  d1*d0

F37E12 =  S = ring d0

F37E13 =  phi = map(S,R)

F37E14 =  IS = phi I

F37E15 =  Sbar = S/IS

F37E16 =  SMbar = Sbar**Mbar

F37E17 =  prune HH_1 chainComplex{dual (Sbar**d0), dual(Sbar**d1)} == 0

F37E18 =  Mbar' = Sbar^1/(Sbar_0, Sbar_1)**SMbar

F37E19 =  ideal presentation prune HH_1 chainComplex{dual (Sbar**d1), dual(Sbar**d0)} == ideal presentation Mbar'

F38E0 =  S = ZZ/101[x,y,z]

F38E1 =  R = S/ideal"x3,y3"

F38E2 =  M = R^1/ideal(x,y,z)

F38E3 =  F = res M

F38E4 =  ff = matrix{{z^3}}

F38E5 =  R1 = R/ideal ff

F38E6 =  betti F

F38E7 =  FF = Shamash(ff,F,4)

F38E8 =  GG = Shamash(R1,F,4)

F38E9 =  betti FF

F38E10 =  betti GG

F38E11 =  ring GG

F38E12 =  apply(length GG, i->prune HH_i FF)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F2E0", "F2E1", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F3E10", "F3E11", "F3E12", "F3E13", "F3E14", "F3E15", "F3E16", "F3E17", "F3E18", "F3E19", "F3E20", "F3E21", "F3E22", "F3E23", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F4E7", "F4E8", "F4E9", "F4E10", "F4E11", "F4E12", "F4E13", "F4E14", "F4E15", "F4E16", "F4E17", "F4E18", "F4E19", "F4E20", "F4E21", "F4E22", "F4E23", "F4E24", "F4E25", "F4E26", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F6E9", "F6E10", "F6E11", "F6E12", "F6E13", "F6E14", "F6E15", "F6E16", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F7E6", "F7E7", "F7E8", "F7E9", "F7E10", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F9E8", "F9E9", "F9E10", "F9E11", "F9E12", "F9E13", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F10E5", "F10E6", "F10E7", "F10E8", "F10E9", "F10E10", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F11E5", "F11E6", "F11E7", "F11E8", "F11E9", "F11E10", "F11E11", "F11E12", "F11E13", "F11E14", "F11E15", "F11E16", "F11E17", "F11E18", "F11E19", "F11E20", "F11E21", "F11E22", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F12E6", "F12E7", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F13E6", "F13E7", "F13E8", "F13E9", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F14E7", "F14E8", "F14E9", "F14E10", "F14E11", "F14E12", "F14E13", "F14E14", "F14E15", "F14E16", "F14E17", "F14E18", "F14E19", "F14E20", "F14E21", "F14E22", "F14E23", "F14E24", "F14E25", "F14E26", "F14E27", "F14E28", "F14E29", "F14E30", "F14E31", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F15E6", "F15E7", "F15E8", "F15E9", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F16E5", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F17E7", "F17E8", "F17E9", "F18E0", "F18E1", "F18E2", "F18E3", "F18E4", "F18E5", "F18E6", "F18E7", "F18E8", "F19E0", "F19E1", "F19E2", "F19E3", "F19E4", "F19E5", "F19E6", "F19E7", "F19E8", "F19E9", "F19E10", "F19E11", "F19E12", "F19E13", "F19E14", "F19E15", "F20E0", "F20E1", "F20E2", "F20E3", "F20E4", "F20E5", "F20E6", "F20E7", "F20E8", "F20E9", "F20E10", "F20E11", "F20E12", "F20E13", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F21E5", "F21E6", "F21E7", "F21E8", "F21E9", "F21E10", "F21E11", "F21E12", "F21E13", "F21E14", "F21E15", "F21E16", "F21E17", "F21E18", "F21E19", "F21E20", "F21E21", "F21E22", "F21E23", "F22E0", "F22E1", "F23E0", "F23E1", "F23E2", "F23E3", "F24E0", "F24E1", "F24E2", "F24E3", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F25E5", "F25E6", "F25E7", "F25E8", "F25E9", "F25E10", "F25E11", "F25E12", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F26E6", "F26E7", "F26E8", "F26E9", "F26E10", "F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F27E5", "F28E0", "F28E1", "F28E2", "F28E3", "F28E4", "F28E5", "F28E6", "F28E7", "F28E8", "F29E0", "F29E1", "F30E0", "F30E1", "F30E2", "F30E3", "F30E4", "F30E5", "F30E6", "F30E7", "F30E8", "F30E9", "F30E10", "F30E11", "F30E12", "F30E13", "F30E14", "F30E15", "F30E16", "F30E17", "F30E18", "F30E19", "F30E20", "F30E21", "F31E0", "F31E1", "F31E2", "F31E3", "F31E4", "F31E5", "F31E6", "F31E7", "F31E8", "F31E9", "F31E10", "F31E11", "F31E12", "F31E13", "F31E14", "F31E15", "F31E16", "F31E17", "F31E18", "F31E19", "F31E20", "F31E21", "F32E0", "F32E1", "F32E2", "F32E3", "F32E4", "F32E5", "F32E6", "F32E7", "F32E8", "F32E9", "F32E10", "F33E0", "F33E1", "F33E2", "F33E3", "F33E4", "F33E5", "F33E6", "F33E7", "F33E8", "F33E9", "F33E10", "F33E11", "F33E12", "F33E13", "F33E14", "F33E15", "F33E16", "F33E17", "F33E18", "F34E0", "F34E1", "F34E2", "F34E3", "F34E4", "F34E5", "F34E6", "F34E7", "F34E8", "F34E9", "F34E10", "F34E11", "F34E12", "F34E13", "F34E14", "F34E15", "F34E16", "F35E0", "F35E1", "F35E2", "F35E3", "F35E4", "F35E5", "F35E6", "F35E7", "F35E8", "F35E9", "F35E10", "F35E11", "F35E12", "F36E0", "F36E1", "F36E2", "F36E3", "F37E0", "F37E1", "F37E2", "F37E3", "F37E4", "F37E5", "F37E6", "F37E7", "F37E8", "F37E9", "F37E10", "F37E11", "F37E12", "F37E13", "F37E14", "F37E15", "F37E16", "F37E17", "F37E18", "F37E19", "F38E0", "F38E1", "F38E2", "F38E3", "F38E4", "F38E5", "F38E6", "F38E7", "F38E8", "F38E9", "F38E10", "F38E11", "F38E12"}
