needsPackage "RelativeCanonicalResolution"

F0E0 =  (g,k,n) = (8,5,1000)

F0E1 =  e = balancedPartition(k-1,g-k+1)

F0E2 =  Ican = canCurveWithFixedScroll(g,k,n);

F0E3 =  betti res(Ican,DegreeLimit=>1)

F0E4 =  Jcan = curveOnScroll(Ican,g,k);

F0E5 =  betti(resX = resCurveOnScroll(Jcan,g,2))

F0E6 =  betti(resC = iteratedCone(resX,e))

F1E0 =  k = 5;

F1E1 =  rks = apply(k-1, i -> rkSyzModules(i,k))

F2E0 =  (g,k,n) = (8,5,1000)

F2E1 =  e = balancedPartition(k-1,g-k+1)

F2E2 =  Ican = canCurveWithFixedScroll(g,k,n);

F2E3 =  Jcan = curveOnScroll(Ican,g,k);

F2E4 =  betti(resX = resCurveOnScroll(Jcan,g,2))

F2E5 =  betti(liftMatrixToEN(resX.dd_1,e))

F2E6 =  betti(liftMatrixToEN(resX.dd_2,e))

F2E7 =  betti(liftMatrixToEN(resX.dd_3,e))

F3E0 =  (g,k,n) = (8,5,1000);

F3E1 =  Ican = canCurveWithFixedScroll(g,k,n);

F3E2 =  genus Ican, degree Ican, dim Ican

F3E3 =  betti res(Ican, DegreeLimit => 1)

F3E4 =  Phi = matrix{{t_0,t_2,t_4,t_6},{t_1,t_3,t_5,t_7}}

F3E5 =  Iscroll = minors(2,Phi);

F3E6 =  Ican + Iscroll == Ican

F4E0 =  (d,n) = (4,7);

F4E1 =  e = balancedPartition(d,n)

F5E0 =  (g,k,n) = (8,5,1000);

F5E1 =  Ican = canCurveWithFixedScroll(g,k,n);

F5E2 =  Jcan = curveOnScroll(Ican,g,k);

F5E3 =  resX = resCurveOnScroll(Jcan,g,2);

F5E4 =  betti resX

F6E0 =  (g,k,n) = (8,5,1000);

F6E1 =  Ican = canCurveWithFixedScroll(g,k,n);

F6E2 =  Jcan = curveOnScroll(Ican,g,k);

F6E3 =  betti Jcan

F7E0 =  R = ZZ/12347[x_0..x_7]

F7E1 =  Phi = matrix{{x_0..x_3},{x_4..x_7}}

F7E2 =  betti(eagonNorthcottType(Phi,0))

F7E3 =  betti(eagonNorthcottType(Phi,1))

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F1E0", "F1E1", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F4E0", "F4E1", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F6E0", "F6E1", "F6E2", "F6E3", "F7E0", "F7E1", "F7E2", "F7E3"}
