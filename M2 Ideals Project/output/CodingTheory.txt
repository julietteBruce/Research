needsPackage "CodingTheory"

F0E0 =  C = linearCode(GF(8,Variable => b), {{1,0,b,0,0},{0,b,b+1,1,0},{1,1,1,b,0}})

F0E1 =  C.BaseField

F1E0 =  C = linearCode(GF(8,Variable => b), {{1,1,b,0,0},{0,b,b,1,0},{1,1,1,b,0}});

F1E1 =  C.GeneratorMatrix

F2E0 =  F=GF(4,Variable=>a);

F2E1 =  C=linearCode(matrix{{1,a,0},{0,1,a}})

F2E2 =  genericCode(C)

F3E0 =  M=matrix{{1,4},{2,5},{10,6}};

F3E1 =  T=toricCode(GF 4,M);

F3E2 =  T.VanishingIdeal

F3E3 =  T.ExponentsMatrix

F3E4 =  T.LinearCode

F3E5 =  length T.LinearCode

F3E6 =  dim T.LinearCode

F4E0 =  chooseStrat(hammingCode(2,3))

F4E1 =  F = GF(16);

F4E2 =  chooseStrat(linearCode random(F^5, F^10))

F5E0 =  C = hammingCode(2,3);

F5E1 =  msg = matrix {{1,0,1,0}};

F5E2 =  v = msg*(C.GeneratorMatrix);

F5E3 =  err = matrix take(random entries basis source v, 1);

F5E4 =  received = (transpose (v+err));

F5E5 =  syndromeDecode(C, received, 3);

F5E6 =  C.cache#"syndromeLUT"

F6E0 =  C = linearCode(GF(4,Variable => a), {{1,0,a,0,0},{0,a,a+1,1,0},{1,1,1,a,0}})

F6E1 =  C.AmbientModule

F7E0 =  v=toList(1,0,2,0);

F7E1 =  M =cyclicMatrix(v)

F7E2 =  F=GF(4,Variable=>a);

F7E3 =  v={0,1,a};

F7E4 =  M=cyclicMatrix(F,v)

F8E0 =  F = GF(5);

F8E1 =  L = apply(toList(1..2),j-> apply(toList(1..4),i-> random(F)));

F8E2 =  L

F8E3 =  C2=quasiCyclicCode(L)

F8E4 =  F = GF(5);

F8E5 =  L = apply(toList(1..2),j-> apply(toList(1..4),i-> random(F)));

F8E6 =  L

F8E7 =  C2=quasiCyclicCode(F,L)

F9E0 =  M=matrix{{1,4},{2,5},{10,6}};

F9E1 =  T=toricCode(GF 4,M);

F9E2 =  T.ExponentsMatrix

F10E0 =  K=ZZ/3;

F10E1 =  R=K[t1,t2,t3,t4,t5,t6];

F10E2 =  I=ideal(t1*t6-t3*t4,t2*t6-t3*t5);

F10E3 =  genMinDisIdeal(1,1,I)

F11E0 =  C = linearCode(GF(8,Variable => a), {{1,1,a,0,0},{0,a,a,1,0},{1,1,1,a,0}});

F11E1 =  C.Generators

F12E0 =  R=GF(2);

F12E1 =  H := matrix(R, {{1,1,0,0,0,0,0},{0,1,1,0,0,0,0},{0,1,1,1,1,0,0},{0,0,0,1,1,0,0},{0,0,0,0,1,1,0},{0,0,0,0,1,0,1}});

F12E2 =  v := vector transpose matrix(R, {{1,0,0,1,0,1,1}});

F12E3 =  bitflipDecode(H,v,100)

F13E0 =  F=GF(4);

F13E1 =  R=F[x,y,z];

F13E2 =  P={{0,0,0},{1,0,0},{0,1,0},{0,0,1},{1,1,1},{a,a,a}};

F13E3 =  S={x+y+z,a+y*z^2,z^2,x+y+z+z^2};

F13E4 =  C=evaluationCode(F,P,S)

F13E5 =  F=GF(4);

F13E6 =  R=F[x,y,z];

F13E7 =  P={{0,0,0},{1,0,0},{0,1,0},{0,0,1},{1,1,1},{a,a,a}};

F13E8 =  M=matrix{{0,0,1},{1,1,1}};

F13E9 =  C=evaluationCode(F,P,M)

F14E0 =  K=QQ;

F14E1 =  R=K[t1,t2,t3];

F14E2 =  I=ideal(t1^3,t2*t3);

F14E3 =  vasconcelosDegree(1,1,I)

F15E0 =  H := matrix(GF(2), {{1,1,0,0,0,0,0},{0,1,1,0,0,0,0}, {0,1,1,1,1,0,0},{0,0,0,1,1,0,0},{0,0,0,0,1,1,0},{0,0,0,0,1,0,1}});

F15E1 =  tannerGraph(H)

F16E0 =  F = GF(2,3);

F16E1 =  n=7;

F16E2 =  C=repetitionCode(F,n);

F16E3 =  C.ParityCheckMatrix

F17E0 =  C=cartesianCode(ZZ/11,{{1,2,3},{2,6,8}},3)

F17E1 =  F=GF(4);

F17E2 =  R=F[x,y];

F17E3 =  C=cartesianCode(F,{{0,1,a},{0,1,a}},{1+x+y,x*y})

F17E4 =  C.LinearCode

F17E5 =  F=GF(4);

F17E6 =  R=F[x,y];

F17E7 =  C=cartesianCode(F,{{0,1,a},{0,1,a}},matrix{{1,2},{2,3}})

F18E0 =  F = GF(2,3);

F18E1 =  n=7;

F18E2 =  C=universeCode(F,n)

F18E3 =  C.ParityCheckMatrix

F19E0 =  F = GF(3,4)

F19E1 =  codeLen = 7

F19E2 =  L = apply(toList(1..codeDim),j-> apply(toList(1..codeLen),i-> random(F)))

F19E3 =  C1 = linearCode(F,L)

F19E4 =  C2 = linearCode(matrix L)

F19E5 =  C1 == C2

F20E0 =  C=zeroCode(GF(4),7)

F20E1 =  C.GeneratorMatrix

F21E0 =  D = digraph({x,y,z,u,v}, matrix {{0,1,0,1,0},{0,0,1,0,0},{0,0,0,1,1},{0,0,0,0,0},{0,0,0,0,0}});

F21E1 =  shortestPath (D,x,{z,v})

F22E0 =  C=reedSolomonCode(ZZ/31,{1,2,3},3);

F22E1 =  peek C

F23E0 =  F = GF(4,Variable => a);

F23E1 =  L = {{1,0,a,0,0},{0,a,a+1,1,0},{1,1,1,a,0}};

F23E2 =  M = matrix L;

F23E3 =  C = linearCode(F,L,ParityCheck => true);

F23E4 =  C.GeneratorMatrix;

F23E5 =  C.ParityCheckMatrix

F24E0 =  A={{1,3,9},{2,6,5},{4,12,10}}

F24E1 =  R=(ZZ/13)[x]

F24E2 =  g=x^3

F24E3 =  locallyRecoverableCode({13,9,4,2},A,g)

F25E0 =  C = hammingCode(2, 3)

F25E1 =  ring(C)

F26E0 =  F = GF(4);

F26E1 =  n = 7;

F26E2 =  k = 3;

F26E3 =  L = apply(toList(1..k),j-> apply(toList(1..n),i-> random(F)));

F26E4 =  m=matrix(L)

F26E5 =  reducedMatrix(m)

F27E0 =  C = linearCode(GF(8,Variable => b), {{1,1,b,0,0},{0,b,b,1,0},{1,1,1,b,0}});

F27E1 =  C.ParityCheckMatrix

F27E2 =  C.ParityCheckRows

F28E0 =  C=linearCode(GF(4),{{1,1,1,1}});

F28E1 =  informationRate C

F28E2 =  H=hammingCode(2,3);

F28E3 =  informationRate H

F28E4 =  RM=reedMullerCode(2,3,1);

F28E5 =  informationRate(RM.LinearCode)

F29E0 =  F = GF(3);

F29E1 =  enumerateVectors(F, {1,0,1,0,1})

F30E0 =  F=GF(4, Variable=>a);

F30E1 =  C=linearCode(matrix{{1,a,0},{0,1,a}});

F30E2 =  alphabet(C)

F31E0 =  C = linearCode(GF(4),{{1,1,1,1}});

F31E1 =  length C

F31E2 =  H = hammingCode(2,3);

F31E3 =  length H

F31E4 =  RM = reedMullerCode(2,3,1);

F31E5 =  length RM.LinearCode

F32E0 =  K=QQ;

F32E1 =  R=K[t1,t2,t3];

F32E2 =  I=ideal(t1^3,t2*t3);

F32E3 =  footPrint(2,3,I)

F33E0 =  F = GF(4);

F33E1 =  P = {{0, 0}, {a, a}, {a+1, a}, {1, a}, {a, a+1}, {a+1, a+1}, {1, a+1}, {0, 1}};

F33E2 =  C = orderCode(F,P,{2,3},7);

F33E3 =  peek C

F33E4 =  F = GF(4);

F33E5 =  R = F[x,y];

F33E6 =  I = ideal(x^3+y^2+y)

F33E7 =  P = {{0, 0}, {a, a}, {a+1, a}, {1, a}};

F33E8 =  C = orderCode(I,P,{2,3},7);

F33E9 =  peek C

F33E10 =  F = GF(4);

F33E11 =  R = F[x,y];

F33E12 =  I = ideal(x^3+y^2+y);

F33E13 =  C = orderCode(I,{2,3},7);

F33E14 =  peek C

F34E0 =  R=ZZ/(13)[x];

F34E1 =  getLRCencodingPolynomial(4,2,{1,0,1,1},x^3)

F35E0 =  randNoRepeats(10,4)

F35E1 =  randNoRepeats(0,1)

F35E2 =  randNoRepeats(25,5)

F36E0 =  L = {{0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 1, 1, 0,1, 0, 0}, {1, 1, 0, 0, 0, 1, 0, 0, 1, 0}, {1, 0, 0, 1, 0, 0, 0, 1, 1, 1}}

F36E1 =  C = linearCode(GF(2),L)

F36E2 =  S=toString C

F37E0 =  randLDPC(15,5,3.0,0)

F38E0 =  K=ZZ/3;

F38E1 =  R=K[t1,t2,t3,t4,t5,t6];

F38E2 =  I=ideal(t1*t6-t3*t4,t2*t6-t3*t5);

F38E3 =  hyp(1,1,I)

F39E0 =  C=hammingCode(2,3);

F39E1 =  minimumWeight C

F39E2 =  minimumWeight(C, Strat=>"BruteForce")

F40E0 =  F = GF(2);

F40E1 =  codeLen = 10;

F40E2 =  L = {{0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 1, 1, 0, 1, 0,0}, {1, 1, 0, 0, 0, 1, 0, 0, 1, 0}, {1, 0, 0, 1, 0, 0, 0, 1, 1,1}};

F40E3 =  C = linearCode(F,codeLen,L);

F40E4 =  shorten(C, {3,6,8,9});

F40E5 =  F = GF(2);

F40E6 =  codeLen = 10;

F40E7 =  L = {{0, 1, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 0, 1, 0, 1, 1, 0, 1, 0,0}, {1, 1, 0, 0, 0, 1, 0, 0, 1, 0}, {1, 0, 0, 1, 0, 0, 0, 1, 1,1}};

F40E8 =  C = linearCode(F,codeLen,L);

F40E9 =  shorten(C, 3)

F41E0 =  H = hammingCode(2,3);

F41E1 =  vectorSpace H

F41E2 =  RM = reedMullerCode(2,4,1);

F41E3 =  vectorSpace(RM.LinearCode)

F42E0 =  F=GF(4);

F42E1 =  R=F[x,y];

F42E2 =  P={{0,0},{1,0},{0,1},{a,a}};

F42E3 =  S={x+y,x^2+y^2, a+x*y^2};

F42E4 =  C=evaluationCode(F,P,S);

F42E5 =  C.VanishingIdeal

F43E0 =  C1 = hammingCode(2,3);

F43E1 =  C1.ParityCheckMatrix

F44E0 =  C=reedMullerCode(2,3,4);

F44E1 =  C.Sets;

F44E2 =  C.VanishingIdeal;

F44E3 =  C.PolynomialSet;

F44E4 =  C.LinearCode;

F44E5 =  length C.LinearCode

F45E0 =  F = GF 2;

F45E1 =  H = matrix apply({{1,1,1,0}},l->apply(l,entry->sub(entry,F)))

F45E2 =  G = parityCheckToGenerator H

F45E3 =  H*(transpose G)

F45E4 =  F = GF(8,Variable => a);

F45E5 =  H = matrix{{1,0,0,0,1,1,0,0},{0,1,0,0,0,1,1,0},{0,0,1,0,1,0,1,a^2+1}}

F45E6 =  G = parityCheckToGenerator H

F45E7 =  H*(transpose G)

F46E0 =  K=ZZ/3;

F46E1 =  R=K[t3,t2,t1,MonomialOrder=>Lex];

F46E2 =  I=ideal(t1*t2^2-t1^2*t2,t1*t3^3-t1^3*t3,t2*t3^3-t2^3*t3);

F46E3 =  vNumber(I)

F47E0 =  G = graph({1,2,3,4}, {{1,2},{2,3},{3,4},{4,3}});

F47E1 =  B=incidenceMatrix G;

F47E2 =  S=ZZ/2[t_(0)..t_(#vertexSet G-1)];

F47E3 =  Y=evCodeGraph(coefficientRing S,B,flatten entries basis(1,S))

F48E0 =  F=GF(4);

F48E1 =  R=F[x,y];

F48E2 =  C=cartesianCode(F,{{0,1,a},{0,1,a}},{1+x+y,x*y})

F48E3 =  C.Sets

F49E0 =  F = GF(2, 4)

F49E1 =  C = randomCode(F,5,3)

F49E2 =  QR = ZZ/3

F49E3 =  C = randomCode(QR,5,3)

F50E0 =  C=linearCode(GF(8,Variable => b), {{1,1,b,0,0},{0,b,b,1,0},{1,1,1,b,0}});

F50E1 =  C.ParityCheckMatrix

F51E0 =  F=GF(4,Variable=>a);

F51E1 =  C=linearCode(matrix{{1,a,0},{0,1,a}});

F51E2 =  D=dualCode(C)

F52E0 =  weight({1,0,1,0,1})

F52E1 =  weight({0,123,48,0,256})

F53E0 =  C = linearCode(GF(8,Variable => b), {{1,1,b,0,0},{0,b,b,1,0},{1,1,1,b,0}});

F53E1 =  C.Code

F54E0 =  F=GF(4);

F54E1 =  R=F[x,y];

F54E2 =  P={{0,0},{1,0},{0,1},{a,a}};

F54E3 =  S={x+y,x^2+y^2, a+x*y^2};

F54E4 =  C=evaluationCode(F,P,S);

F54E5 =  C.VanishingIdeal

F54E6 =  C.PolynomialSet

F54E7 =  C.LinearCode

F54E8 =  length C.LinearCode

F54E9 =  dim C.LinearCode

F55E0 =  F=GF(4,Variable=>a);

F55E1 =  C=linearCode(matrix{{1,a,0},{0,1,a}});

F55E2 =  field C

F56E0 =  F = GF 4;

F56E1 =  L = apply({{1,0,1,0},{0,1,1,1}},codeword ->apply(codeword,entry->sub(entry,F)));

F56E2 =  M = matrix L

F56E3 =  C = linearCode(M)

F56E4 =  C.GeneratorMatrix

F56E5 =  C.ParityCheckMatrix

F56E6 =  F = GF(4,Variable => a);

F56E7 =  L = {{1,0,a,0,0},{0,a,a+1,1,0},{1,1,1,a,0}};

F56E8 =  M = matrix L;

F56E9 =  C = linearCode(F,L,ParityCheck => true)

F56E10 =  C.GeneratorMatrix

F56E11 =  C.ParityCheckMatrix

F56E12 =  F = GF 2

F56E13 =  M = image G;

F56E14 =  C = linearCode(M)

F56E15 =  C.AmbientModule

F56E16 =  C.BaseField

F56E17 =  C.GeneratorMatrix

F56E18 =  C.ParityCheckMatrix

F56E19 =  F = GF(4,Variable => a)

F56E20 =  C = linearCode(M,L)

F56E21 =  C.AmbientModule

F56E22 =  C.BaseField

F56E23 =  C.Generators

F56E24 =  C.GeneratorMatrix

F56E25 =  C.ParityCheckMatrix

F56E26 =  C.Code

F56E27 =  F = GF(8,Variable =>a)

F56E28 =  C = linearCode(M,L,ParityCheck => true)

F56E29 =  G = C.GeneratorMatrix

F56E30 =  H = C.ParityCheckMatrix

F56E31 =  F = GF 4

F56E32 =  C = linearCode(F,L)

F56E33 =  C.GeneratorMatrix

F56E34 =  C.ParityCheckMatrix

F56E35 =  F = GF(9,Variable => a)

F56E36 =  C = linearCode(F,L,ParityCheck => true)

F56E37 =  C.GeneratorMatrix

F56E38 =  C.ParityCheckMatrix

F56E39 =  F = GF 4

F56E40 =  C = linearCode(F,n,L)

F56E41 =  C.GeneratorMatrix

F56E42 =  C.ParityCheckMatrix

F56E43 =  F = GF(9,Variable => a)

F56E44 =  C = linearCode(F,n,L,ParityCheck => true)

F56E45 =  C.GeneratorMatrix

F56E46 =  C.ParityCheckMatrix

F56E47 =  p = 2

F56E48 =  C=linearCode(p,r,n,L)

F56E49 =  p = 3

F56E50 =  ambient GF(p,r)

F56E51 =  L = {{1,0,a,0,0},{0,a,a+1,1,0},{1,1,1,a+1,0}};

F56E52 =  C=linearCode(p,r,n,L)

F57E0 =  F=GF(5);

F57E1 =  R=F[x];

F57E2 =  g=x-1;

F57E3 =  C=cyclicCode(F,g,8)

F57E4 =  F=GF(5);

F57E5 =  R=F[x];

F57E6 =  C=cyclicCode(F,0,5)

F57E7 =  C=cyclicCode(F,2,5)

F58E0 =  F = GF 2;

F58E1 =  L = {{0,1,1,0},{1,0,1,0},{0,0,0,1}};

F58E2 =  G = matrix apply(L, codeword->apply(codeword, en -> sub(en,F)))

F58E3 =  H = generatorToParityCheck G

F58E4 =  K = GF(8,Variable => a);

F58E5 =  G = matrix {{1,0,0,a,0,1,1,a},{0,0,0,1,1,1,1,0},{1,1,0,0,0,1,0,0},{1,0,1,0,0,1,1,0}}

F58E6 =  H = generatorToParityCheck G

F59E0 =  C = linearCode(GF(2),{{1,1,0,0},{0,0,1,1}});

F59E1 =  dim C

F59E2 =  H = hammingCode(2,3)

F59E3 =  dim H

F60E0 =  F1=GF(2)

F60E1 =  G1={{1,1,0,0,0,0},{0,0,1,1,0,0},{0,0,0,0,1,1}}

F60E2 =  C1=linearCode(F1,G1)

F60E3 =  C1.Code

F60E4 =  F2=GF(3)

F60E5 =  G2={{1,0,0,0,0,1,1,1},{0,1,0,0,1,0,1,1},{0,0,1,0,1,1,0,1},{0,0,0,1,1,1,1,0}}

F60E6 =  C2=linearCode(F2,G2)

F60E7 =  AM=C2.AmbientModule

F60E8 =  rank(AM)==length(C2)

F60E9 =  dim(C2)==rank(C2.GeneratorMatrix)

F60E10 =  c=matrix{G2_0}

F60E11 =  h=transpose matrix({(entries(C2.ParityCheckMatrix))_0})

F60E12 =  c*h

F61E0 =  F=GF(4,Variable=>a);

F61E1 =  R=F[x,y];

F61E2 =  P={{0,0},{1,0},{0,1},{a,a}};

F61E3 =  S={x+y,x^2+y^2,a+x*y^2};

F61E4 =  C=evaluationCode(F,P,S);

F61E5 =  C.PolynomialSet

F62E0 =  D = zeroSumCode(GF 3,5)

F62E1 =  E = zeroSumCode(GF 8,5)

F63E0 =  C = linearCode(GF(4),{{1,1,1,1}});

F63E1 =  size C

F63E2 =  H = hammingCode(2,3);

F63E3 =  size H

F63E4 =  F = GF(4,Variable=>a);

F63E5 =  L = {{1,a,a+1},{a+1,1,a},{a,a+1,1},{1,0,1}};

F63E6 =  C = linearCode(F,L);

F63E7 =  size C

F63E8 =  RM = reedMullerCode(2,3,1);

F63E9 =  size RM.LinearCode

F64E0 =  F=GF(4,Variable=>a);

F64E1 =  C=linearCode(matrix{{1,a,0},{0,1,a}});

F64E2 =  ambientSpace C

F65E0 =  C=hammingCode(2,3);

F65E1 =  minimumWeight(C, Strat=>"BruteForce")

F66E0 =  F=GF(4,Variable=>a);

F66E1 =  C=linearCode(matrix{{1,a,0},{0,1,a}});

F66E2 =  codewords(C)

F67E0 =  F=GF(4,Variable=>a);

F67E1 =  R=linearCode(F,{{1,1,1}});

F67E2 =  messages R

F67E3 =  messages hammingCode(2,3)

F67E4 =  RM=reedMullerCode(2,2,1);

F67E5 =  messages(RM.LinearCode)

exampleIDS = {"F0E0", "F0E1", "F1E0", "F1E1", "F2E0", "F2E1", "F2E2", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F4E0", "F4E1", "F4E2", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F6E0", "F6E1", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F9E0", "F9E1", "F9E2", "F10E0", "F10E1", "F10E2", "F10E3", "F11E0", "F11E1", "F12E0", "F12E1", "F12E2", "F12E3", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F13E6", "F13E7", "F13E8", "F13E9", "F14E0", "F14E1", "F14E2", "F14E3", "F15E0", "F15E1", "F16E0", "F16E1", "F16E2", "F16E3", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F17E7", "F18E0", "F18E1", "F18E2", "F18E3", "F19E0", "F19E1", "F19E2", "F19E3", "F19E4", "F19E5", "F20E0", "F20E1", "F21E0", "F21E1", "F22E0", "F22E1", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4", "F23E5", "F24E0", "F24E1", "F24E2", "F24E3", "F25E0", "F25E1", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F27E0", "F27E1", "F27E2", "F28E0", "F28E1", "F28E2", "F28E3", "F28E4", "F28E5", "F29E0", "F29E1", "F30E0", "F30E1", "F30E2", "F31E0", "F31E1", "F31E2", "F31E3", "F31E4", "F31E5", "F32E0", "F32E1", "F32E2", "F32E3", "F33E0", "F33E1", "F33E2", "F33E3", "F33E4", "F33E5", "F33E6", "F33E7", "F33E8", "F33E9", "F33E10", "F33E11", "F33E12", "F33E13", "F33E14", "F34E0", "F34E1", "F35E0", "F35E1", "F35E2", "F36E0", "F36E1", "F36E2", "F37E0", "F38E0", "F38E1", "F38E2", "F38E3", "F39E0", "F39E1", "F39E2", "F40E0", "F40E1", "F40E2", "F40E3", "F40E4", "F40E5", "F40E6", "F40E7", "F40E8", "F40E9", "F41E0", "F41E1", "F41E2", "F41E3", "F42E0", "F42E1", "F42E2", "F42E3", "F42E4", "F42E5", "F43E0", "F43E1", "F44E0", "F44E1", "F44E2", "F44E3", "F44E4", "F44E5", "F45E0", "F45E1", "F45E2", "F45E3", "F45E4", "F45E5", "F45E6", "F45E7", "F46E0", "F46E1", "F46E2", "F46E3", "F47E0", "F47E1", "F47E2", "F47E3", "F48E0", "F48E1", "F48E2", "F48E3", "F49E0", "F49E1", "F49E2", "F49E3", "F50E0", "F50E1", "F51E0", "F51E1", "F51E2", "F52E0", "F52E1", "F53E0", "F53E1", "F54E0", "F54E1", "F54E2", "F54E3", "F54E4", "F54E5", "F54E6", "F54E7", "F54E8", "F54E9", "F55E0", "F55E1", "F55E2", "F56E0", "F56E1", "F56E2", "F56E3", "F56E4", "F56E5", "F56E6", "F56E7", "F56E8", "F56E9", "F56E10", "F56E11", "F56E12", "F56E13", "F56E14", "F56E15", "F56E16", "F56E17", "F56E18", "F56E19", "F56E20", "F56E21", "F56E22", "F56E23", "F56E24", "F56E25", "F56E26", "F56E27", "F56E28", "F56E29", "F56E30", "F56E31", "F56E32", "F56E33", "F56E34", "F56E35", "F56E36", "F56E37", "F56E38", "F56E39", "F56E40", "F56E41", "F56E42", "F56E43", "F56E44", "F56E45", "F56E46", "F56E47", "F56E48", "F56E49", "F56E50", "F56E51", "F56E52", "F57E0", "F57E1", "F57E2", "F57E3", "F57E4", "F57E5", "F57E6", "F57E7", "F58E0", "F58E1", "F58E2", "F58E3", "F58E4", "F58E5", "F58E6", "F59E0", "F59E1", "F59E2", "F59E3", "F60E0", "F60E1", "F60E2", "F60E3", "F60E4", "F60E5", "F60E6", "F60E7", "F60E8", "F60E9", "F60E10", "F60E11", "F60E12", "F61E0", "F61E1", "F61E2", "F61E3", "F61E4", "F61E5", "F62E0", "F62E1", "F63E0", "F63E1", "F63E2", "F63E3", "F63E4", "F63E5", "F63E6", "F63E7", "F63E8", "F63E9", "F64E0", "F64E1", "F64E2", "F65E0", "F65E1", "F66E0", "F66E1", "F66E2", "F67E0", "F67E1", "F67E2", "F67E3", "F67E4", "F67E5"}
