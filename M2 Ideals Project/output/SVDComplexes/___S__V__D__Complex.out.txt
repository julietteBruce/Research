needsPackage "SVDComplexes"

F7E0 =  needsPackage "RandomComplexes"

F7E1 =  h={1,3,5,2,1}

F7E2 =  r={5,11,3,2}

F7E3 =  elapsedTime C=randomChainComplex(h,r,Height=>4)

F7E4 =  C.dd^2

F7E5 =  CR=(C**RR_53)[1]

F7E6 =  elapsedTime (h,U)=SVDComplex CR;

F7E7 =  h

F7E8 =  Sigma =source U

F7E9 =  Sigma.dd_0

F7E10 =  errors=apply(toList(min CR+1..max CR),ell->CR.dd_ell-U_(ell-1)*Sigma.dd_ell*transpose U_ell);

F7E11 =  maximalEntry chainComplex errors

F7E12 =  elapsedTime (hL,U)=SVDComplex(CR,Strategy=>Laplacian);

F7E13 =  hL === h

F7E14 =  SigmaL =source U;

F7E15 =  for i from min CR+1 to max CR list maximalEntry(SigmaL.dd_i -Sigma.dd_i)

F7E16 =  errors=apply(toList(min C+1..max C),ell->CR.dd_ell-U_(ell-1)*SigmaL.dd_ell*transpose U_ell);

F7E17 =  maximalEntry chainComplex errors

exampleIDS = {"F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F7E6", "F7E7", "F7E8", "F7E9", "F7E10", "F7E11", "F7E12", "F7E13", "F7E14", "F7E15", "F7E16", "F7E17"}
