needsPackage "SRdeformations"

F0E0 =  R=QQ[x_0..x_4];

F0E1 =  C=simplex R;

F0E2 =  F=C.fc_2_0

F0E3 =  simplexDim F

F1E0 =  R=QQ[x_0..x_4]

F1E1 =  I=ideal(x_0*x_1,x_2*x_3*x_4)

F1E2 =  C=idealToComplex I

F1E3 =  PT1C=PT1 C

F1E4 =  tropDefC=tropDef(C,PT1C)

F1E5 =  tropDefC.grading

F1E6 =  B=dualize tropDefC

F1E7 =  B.grading

F1E8 =  fvector C

F1E9 =  fvector B

F2E0 =  R=QQ[x_0..x_5];

F2E1 =  C=boundaryCyclicPolytope(3,R)

F2E2 =  isEquidimensional(C)

F2E3 =  R=QQ[x_0..x_2];

F2E4 =  I=intersect(ideal(x_0),ideal(x_1,x_2))

F2E5 =  C=idealToComplex I

F2E6 =  isEquidimensional(C)

F3E0 =  R=QQ[x_0..x_4]

F3E1 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F3E2 =  C=idealToComplex I;

F3E3 =  net C

F4E0 =  R=QQ[x_0..x_5]

F4E1 =  C=boundaryCyclicPolytope(3,R)

F4E2 =  C.simplexRing

F4E3 =  C.grading

F4E4 =  C.fc_2

F4E5 =  C.facets

F4E6 =  dualize C

F4E7 =  complement C

F4E8 =  R=QQ[x_0..x_5]

F4E9 =  C=simplex R

F4E10 =  C.isPolytope

F4E11 =  C.polytopalFacets

F5E0 =  R=QQ[x_0..x_4];

F5E1 =  addCokerGrading(R);

F5E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F5E3 =  mg=mingens I;

F5E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F5E5 =  denominatorMonomial f

F6E0 =  R=QQ[x_0..x_4]

F6E1 =  C=simplex R

F6E2 =  bC=boundaryOfPolytope C

F6E3 =  F=bC.fc_2_0

F6E4 =  complement F

F7E0 =  R=QQ[x_0..x_4];

F7E1 =  addCokerGrading(R);

F7E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F7E3 =  mg=mingens I;

F7E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F7E5 =  target f

F8E0 =  R=QQ[x_0..x_5]

F8E1 =  C=boundaryCyclicPolytope(3,R)

F8E2 =  dim C

F8E3 =  edim C

F9E0 =  A=matrix {{1, 0}, {0, 1}, {-1, -1}}

F9E1 =  b=vector {2,0,0}

F9E2 =  globalSections(A,b)

F9E3 =  A=matrix {{1, 0}, {0, 1}, {-1, -1},{1,1}}

F9E4 =  b=vector {2,0,0,0}

F9E5 =  globalSections(A,b)

F9E6 =  globalSections(A,b,{1})

F10E0 =  R=QQ[x_0..x_4]

F10E1 =  C=boundaryOfPolytope simplex(R)

F10E2 =  F=C.fc_0_0

F10E3 =  link(F,C)

F10E4 =  closedStar(F,C)

F10E5 =  F=C.fc_1_0

F10E6 =  link(F,C)

F10E7 =  closedStar(F,C)

F10E8 =  R=QQ[x_0..x_4]

F10E9 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F10E10 =  C=idealToComplex I

F10E11 =  F=C.fc_0_0

F10E12 =  link(F,C)

F10E13 =  closedStar(F,C)

F10E14 =  F=C.fc_1_0

F10E15 =  link(F,C)

F10E16 =  closedStar(F,C)

F11E0 =  R=QQ[x_0..x_5]

F11E1 =  C=boundaryCyclicPolytope(3,R)

F11E2 =  grading R

F11E3 =  dC=dualize C

F11E4 =  fdC=fc dC

F11E5 =  Rdual=simplexRing dC

F11E6 =  grading Rdual

F11E7 =  dC1=coComplex(Rdual,fdC)

F11E8 =  dC==dC1

F12E0 =  R=QQ[x_0..x_4];

F12E1 =  addCokerGrading(R);

F12E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F12E3 =  mg=mingens I;

F12E4 =  f=firstOrderDeformation(mg, vector {-1,1,0,0,0})

F12E5 =  relationsCoefficients f

F13E0 =  R=QQ[x_0..x_4]

F13E1 =  addCokerGrading R

F13E2 =  C=simplex R

F13E3 =  bC=boundaryOfPolytope C

F13E4 =  F=bC.fc_2_0

F13E5 =  dim(face vert F,R)

F14E0 =  R=QQ[x_0..x_4];

F14E1 =  addCokerGrading(R);

F14E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F14E3 =  mg=mingens I;

F14E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F14E5 =  simplexRing f

F15E0 =  R=QQ[x_0..x_5]

F15E1 =  C=fullCyclicPolytope(3,R)

F15E2 =  facets C

F15E3 =  polytopalFacets(C)

F16E0 =  R=QQ[x_0..x_4]

F16E1 =  addCokerGrading(R)

F16E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F16E3 =  C=idealToComplex(I)

F16E4 =  Cl=newEmptyComplex(R)

F16E5 =  addFaceDataToComplex(Cl,fc C)

F16E6 =  Cl==C

F17E0 =  R=QQ[x_0..x_4];

F17E1 =  C=simplex R;

F17E2 =  G=C.fc_3_0

F17E3 =  F=C.fc_2_0

F17E4 =  H=C.fc_3_3

F17E5 =  isSubface(F,G)

F17E6 =  isSubface(F,H)

F18E0 =  R=QQ[x_0..x_4];

F18E1 =  C=simplex R

F18E2 =  F=C.fc_2_0

F18E3 =  indices F

F19E0 =  R=QQ[x_0..x_4];

F19E1 =  addCokerGrading(R);

F19E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F19E3 =  mg=mingens I;

F19E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F19E5 =  grading f

F20E0 =  R=QQ[x_0..x_4];

F20E1 =  face {x_0,x_1} == face {x_1,x_0}

F20E2 =  addCokerGrading R;

F20E3 =  C=simplex R;

F20E4 =  bC=boundaryOfPolytope C;

F20E5 =  F=bC.fc_2_0

F20E6 =  dF=dualize F

F20E7 =  F== dualize dF

F21E0 =  R=QQ[x_0..x_5]

F21E1 =  C=boundaryCyclicPolytope(3,R)

F21E2 =  fC=fc C

F21E3 =  C1=complex(R,fC)

F21E4 =  C==C1

F22E0 =  R=QQ[x_0..x_5]

F22E1 =  C=fullCyclicPolytope(3,R)

F22E2 =  facets C

F22E3 =  dC=boundaryOfPolytope(C);

F22E4 =  facets dC

F23E0 =  R=QQ[x_0..x_4]

F23E1 =  addCokerGrading R

F23E2 =  C=simplex R

F23E3 =  bC=boundaryOfPolytope C

F23E4 =  F=bC.fc_2_0

F23E5 =  dim F

F24E0 =  R=QQ[x_0..x_5]

F24E1 =  C=boundaryCyclicPolytope(3,R)

F24E2 =  fC=facets C

F24E3 =  C1=complexFromFacets(R,fC)

F24E4 =  C1==C

F24E5 =  fc C1;

F24E6 =  C1

F25E0 =  R=QQ[x_0..x_4];

F25E1 =  C=simplex R

F25E2 =  F=C.fc_2_0

F25E3 =  ofComplex F

F26E0 =  R=QQ[x_0..x_4];

F26E1 =  addCokerGrading(R)

F26E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F26E3 =  mg=mingens I;

F26E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F26E5 =  f.gens

F26E6 =  f.bigTorusDegree

F26E7 =  simplexRing f

F26E8 =  target f

F26E9 =  source f

F26E10 =  numerator f

F26E11 =  denominator f

F26E12 =  bigTorusDegree f

F26E13 =  numeratorMonomial f

F26E14 =  degree f

F26E15 =  grading f

F26E16 =  isHomogeneous f

F26E17 =  relationsCoefficients f

F26E18 =  parameters f

F26E19 =  dim f

F26E20 =  isNonzero f

F26E21 =  isTrivial f

F27E0 =  R=QQ[x_0..x_4]

F27E1 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F27E2 =  C=idealToComplex I

F27E3 =  F=C.fc_1_0

F27E4 =  F==face(vert F,C,1,0)

F28E0 =  R=QQ[x_0..x_4]

F28E1 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F28E2 =  C=idealToComplex I;

F28E3 =  grading C

F29E0 =  R=QQ[x_0..x_5]

F29E1 =  C=boundaryCyclicPolytope(3,R)

F29E2 =  F=C.fc_0_0

F29E3 =  lkF=link(F,C)

F29E4 =  variables lkF

F29E5 =  vert lkF

F30E0 =  R=QQ[x_0..x_4]

F30E1 =  addCokerGrading(R)

F30E2 =  C0=simplex(R)

F30E3 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F30E4 =  C=idealToComplex(I)

F30E5 =  embeddingComplex C

F30E6 =  idealToComplex(I,C0)

F30E7 =  complexToIdeal(C)

F30E8 =  cC=idealToCoComplex(I,C0)

F30E9 =  cC==complement C

F30E10 =  I==coComplexToIdeal(cC)

F30E11 =  dualize cC

F31E0 =  R=QQ[x_0..x_4];

F31E1 =  addCokerGrading(R);

F31E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F31E3 =  mg=mingens I;

F31E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F31E5 =  S=QQ[t]

F31E6 =  totalSpace(f,S)

F31E7 =  f1=firstOrderDeformation(mg, vector {0,-1,-1,0,2})

F31E8 =  S=QQ[t1,t2]

F31E9 =  totalSpace({f,f1},S)

F32E0 =  R=QQ[x_0..x_4]

F32E1 =  addCokerGrading(R)

F32E2 =  C0=simplex(R)

F32E3 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F32E4 =  C=idealToComplex(I)

F32E5 =  embeddingComplex C

F32E6 =  idealToComplex(I,C0)

F32E7 =  complexToIdeal(C)

F32E8 =  cC=idealToCoComplex(I,C0)

F32E9 =  cC==complement C

F32E10 =  I==coComplexToIdeal(cC)

F32E11 =  dualize cC

F33E0 =  R=QQ[x_0..x_4]

F33E1 =  C=simplex(R)

F33E2 =  verticesDualPolytope C

F34E0 =  R=QQ[x_0..x_4];

F34E1 =  addCokerGrading(R)

F34E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F34E3 =  mg=mingens I;

F34E4 =  f1=firstOrderDeformation(mg, vector {-1,1,0,0,0})

F34E5 =  f2=firstOrderDeformation(mg, vector {0,2,0,-1,-1})

F34E6 =  f2==f2

F34E7 =  f2==f1

F35E0 =  R=QQ[x_0..x_4];

F35E1 =  addCokerGrading(R);

F35E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F35E3 =  mg=mingens I;

F35E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F35E5 =  denominator f

F36E0 =  R=QQ[x_0..x_4]

F36E1 =  addCokerGrading R

F36E2 =  C=simplex R

F36E3 =  dim C

F36E4 =  bC=boundaryOfPolytope C

F36E5 =  dim bC

F36E6 =  dbC=dualize bC

F36E7 =  dim dbC

F37E0 =  R=QQ[x_0..x_4]

F37E1 =  simplex(R,computeFaces=>false)

F38E0 =  R=QQ[x_0..x_4];

F38E1 =  addCokerGrading(R);

F38E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F38E3 =  mg=mingens I;

F38E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F38E5 =  isHomogeneous f

F39E0 =  R=QQ[x_0..x_4]

F39E1 =  addCokerGrading R

F39E2 =  C=simplex R

F39E3 =  bC=boundaryOfPolytope C

F39E4 =  F=bC.fc_2_0

F39E5 =  dim(face vert F,C)

F40E0 =  R=QQ[x_0..x_4]

F40E1 =  addCokerGrading(R)

F40E2 =  C0=simplex(R)

F40E3 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F40E4 =  C=idealToComplex(I)

F40E5 =  embeddingComplex C

F40E6 =  idealToComplex(I,C0)

F40E7 =  complexToIdeal(C)

F40E8 =  cC=idealToCoComplex(I,C0)

F40E9 =  cC==complement C

F40E10 =  I==coComplexToIdeal(cC)

F40E11 =  dualize cC

F41E0 =  R=QQ[x_0..x_4];

F41E1 =  addCokerGrading(R);

F41E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F41E3 =  mg=mingens I;

F41E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F41E5 =  fhom=toHom f

F41E6 =  source fhom

F41E7 =  target fhom

F42E0 =  R=QQ[x_0..x_4]

F42E1 =  I=ideal(x_0*x_1*x_2,x_3*x_4)

F42E2 =  C1=idealToComplex I

F42E3 =  F=C1.fc_0_0

F42E4 =  deformationsFace(F,C1)

F42E5 =  F=C1.fc_0_1

F42E6 =  deformationsFace(F,C1)

F42E7 =  F=C1.fc_1_0

F42E8 =  deformationsFace(F,C1)

F42E9 =  F=C1.fc_2_0

F42E10 =  deformationsFace(F,C1)

F42E11 =  R=QQ[x_0..x_4]

F42E12 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F42E13 =  C1=idealToComplex I

F42E14 =  F=C1.fc_0_1

F42E15 =  deformationsFace(F,C1)

F42E16 =  F=C1.fc_1_1

F42E17 =  deformationsFace(F,C1)

F43E0 =  R=QQ[x_0..x_4]

F43E1 =  addCokerGrading(R)

F43E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F43E3 =  mg=mingens I;

F43E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F43E5 =  source f

F44E0 =  A= matrix {{-1, -1, -1}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}}

F44E1 =  c1=cokerElement(vector {1,1,0,0},A)

F44E2 =  c2=cokerElement(vector {1,-1,0,0},A)

F44E3 =  c2==(0_(class c2))

F44E4 =  iszero c2

F44E5 =  iszero c1

F45E0 =  R=QQ[x_0..x_4];

F45E1 =  C=simplex R;

F45E2 =  F=C.fc_2_0

F45E3 =  simplexRing F

F45E4 =  R.grading

F46E0 =  R=QQ[x_0..x_4]

F46E1 =  addCokerGrading R

F46E2 =  C=simplex R

F46E3 =  bC=boundaryOfPolytope C

F46E4 =  cbC=complement bC

F46E5 =  complement cbC == bC

F47E0 =  raysPPn(2)

F48E0 =  R=QQ[x_0..x_4];

F48E1 =  addCokerGrading(R);

F48E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F48E3 =  mg=mingens I;

F48E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F48E5 =  degree f

F49E0 =  R=QQ[x_0..x_4];

F49E1 =  addCokerGrading(R);

F49E2 =  grading R

F50E0 =  R=QQ[x_0..x_4];

F50E1 =  C=simplex R

F50E2 =  F=C.fc_2_0

F50E3 =  vert F

F50E4 =  faceToMonomial F

F51E0 =  A=matrix {{1, 0}, {0, 1}, {-1, -1}}

F51E1 =  b=vector {-2,2,0}

F51E2 =  v=preImage(A,b)

F51E3 =  A*v

F52E0 =  R=QQ[x_0..x_4]

F52E1 =  addCokerGrading(R)

F52E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F52E3 =  mg=mingens I;

F52E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F53E0 =  R=QQ[x_0..x_4];

F53E1 =  addCokerGrading(R);

F53E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F53E3 =  mg=mingens I;

F53E4 =  f=firstOrderDeformation(mg, vector {-1,1,0,0,0})

F53E5 =  relationsCoefficients f

F53E6 =  parameters f

F54E0 =  R=QQ[x_0..x_4]

F54E1 =  C=boundaryOfPolytope simplex(R)

F54E2 =  F=C.fc_0_0

F54E3 =  link(F,C)

F54E4 =  closedStar(F,C)

F54E5 =  F=C.fc_1_0

F54E6 =  link(F,C)

F54E7 =  closedStar(F,C)

F54E8 =  R=QQ[x_0..x_4]

F54E9 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F54E10 =  C=idealToComplex I

F54E11 =  F=C.fc_0_0

F54E12 =  link(F,C)

F54E13 =  closedStar(F,C)

F54E14 =  F=C.fc_1_0

F54E15 =  link(F,C)

F54E16 =  closedStar(F,C)

F55E0 =  joinVectors {vector {1,2},vector {3,4},vector {5,6}}

F56E0 =  R=QQ[x_0..x_3]

F56E1 =  I=ideal(x_0*x_1,x_2*x_3)

F56E2 =  C=idealToComplex I

F56E3 =  PT1C=PT1 C

F57E0 =  R=QQ[x_0..x_4]

F57E1 =  m=vector {1,-2,1,0,0}

F57E2 =  laurent(m,R)

F57E3 =  R=QQ[x_0..x_4]

F57E4 =  addCokerGrading(R);

F57E5 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F57E6 =  mg=mingens I;

F57E7 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F57E8 =  laurent f

F58E0 =  R=QQ[x_0..x_4];

F58E1 =  addCokerGrading(R)

F58E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F58E3 =  mg=mingens I;

F58E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F58E5 =  degree f

F58E6 =  dim f

F58E7 =  f1=firstOrderDeformation(mg,vector {-1,1,0,0,0})

F58E8 =  isTrivial f1

F58E9 =  f2=firstOrderDeformation(mg,vector {0,-1,-1,2,0})

F58E10 =  isNonzero f2

F59E0 =  R=QQ[x_0..x_4]

F59E1 =  addCokerGrading(R)

F59E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F59E3 =  C=idealToComplex(I)

F59E4 =  Cl=newEmptyComplex(R)

F59E5 =  addFacetDataToComplex(Cl,facets C)

F59E6 =  Cl==C

F60E0 =  R=QQ[x_0..x_4];

F60E1 =  addCokerGrading(R);

F60E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F60E3 =  mg=mingens I;

F60E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F60E5 =  numeratorMonomial f

F61E0 =  R=QQ[x_0..x_4];

F61E1 =  C=simplex R;

F61E2 =  bC=boundaryOfPolytope C

F61E3 =  dbC=dualize bC

F61E4 =  bC==dualize dbC

F62E0 =  R=QQ[x_0..x_4]

F62E1 =  addCokerGrading R

F62E2 =  C=simplex R

F62E3 =  F=C.fc_1_0

F62E4 =  F.vert

F62E5 =  coordinates F

F62E6 =  (F.ofComplex)#0==C

F62E7 =  bC=boundaryOfPolytope C

F62E8 =  F==bC.fc_1_0

F63E0 =  R=QQ[x_0..x_4]

F63E1 =  addCokerGrading R

F63E2 =  C=simplex R

F63E3 =  bC=boundaryOfPolytope C

F63E4 =  F=bC.fc_2_0

F63E5 =  coordinates F

F64E0 =  R=QQ[x_0..x_4];

F64E1 =  addCokerGrading R;

F64E2 =  C=simplex R;

F64E3 =  vert C

F64E4 =  F=C.fc_2_0

F64E5 =  vert F

F65E0 =  R=QQ[x_0..x_4];

F65E1 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0);

F65E2 =  possibleDenominators(I)

F65E3 =  possibleDenominators(I,{x_0,x_1,x_2});

F66E0 =  R=QQ[x_0..x_5]

F66E1 =  C=boundaryCyclicPolytope(3,R)

F66E2 =  isSimp C

F66E3 =  R=QQ[x_0..x_5]

F66E4 =  C1=fullCyclicPolytope(3,R)

F66E5 =  isSimp C1

F67E0 =  A= matrix {{-1, -1, -1}, {1, 0, 0}, {0, 1, 0}, {0, 0, 1}}

F67E1 =  c1=cokerElement(vector {1,1,0,0},A)

F67E2 =  c2=cokerElement(vector {1,-1,0,0},A)

F67E3 =  c2==(0_(class c2))

F67E4 =  iszero c2

F68E0 =  R=QQ[x_0..x_4]

F68E1 =  addCokerGrading(R)

F68E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F68E3 =  mg=mingens I;

F68E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F68E5 =  bigTorusDegree f

F69E0 =  R=QQ[x_0..x_4]

F69E1 =  C=simplex(R)

F69E2 =  grading C

F69E3 =  dC=C.dualComplex

F69E4 =  grading dC

F69E5 =  fc(dC);

F69E6 =  dC

F70E0 =  R=QQ[x_0..x_5];

F70E1 =  C=fullCyclicPolytope(3,R);

F70E2 =  fvector C

F70E3 =  eulerCharacteristic C

F70E4 =  dC=boundaryOfPolytope(C);

F70E5 =  fvector dC

F70E6 =  eulerCharacteristic dC

F71E0 =  R=QQ[x_0..x_4];

F71E1 =  addCokerGrading(R)

F71E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F71E3 =  mg=mingens I;

F71E4 =  f=firstOrderDeformation(mg, vector {-1,1,0,0,0})

F72E0 =  R=QQ[x_0..x_4]

F72E1 =  addCokerGrading(R)

F72E2 =  C0=simplex(R)

F72E3 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F72E4 =  C=idealToComplex(I)

F72E5 =  embeddingComplex C

F72E6 =  idealToComplex(I,C0)

F72E7 =  complexToIdeal(C)

F72E8 =  cC=idealToCoComplex(I,C0)

F72E9 =  cC==complement C

F72E10 =  I==coComplexToIdeal(cC)

F72E11 =  dualize cC

F73E0 =  R=QQ[x_0..x_4];

F73E1 =  addCokerGrading(R)

F73E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F73E3 =  C=idealToComplex I

F73E4 =  T=trivialDeformations C

F73E5 =  tally apply(T,isTrivial)

F74E0 =  R=QQ[x_0..x_5]

F74E1 =  C=fullCyclicPolytope(3,R)

F75E0 =  R=QQ[x_0..x_4];

F75E1 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0);

F75E2 =  C=idealToComplex I

F75E3 =  minimalNonFaces C

F76E0 =  R=QQ[x_0..x_5];

F76E1 =  C=fullCyclicPolytope(3,R)

F76E2 =  isPolytope C

F77E0 =  R=QQ[x_0..x_4];

F77E1 =  addCokerGrading(R);

F77E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F77E3 =  mg=mingens I;

F77E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F77E5 =  numerator f

F78E0 =  R=QQ[x_0..x_4]

F78E1 =  C=simplex(R)

F78E2 =  grading C

F78E3 =  dA=dualGrading C

F78E4 =  dA===grading dualize C

F78E5 =  dA===C.dualComplex.simplexRing.grading

F78E6 =  pf=polytopalFacets C

F78E7 =  coordinates pf#0

F78E8 =  (dualGrading C)^{0}

F79E0 =  R=QQ[x_0..x_4];

F79E1 =  addCokerGrading(R);

F79E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F79E3 =  mg=mingens I;

F79E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F79E5 =  isNonzero f

F79E6 =  f1=firstOrderDeformation(mg, vector {-1,-1,2,0,0})

F79E7 =  isNonzero f1

F80E0 =  R=QQ[x_0..x_4];

F80E1 =  C=simplex R;

F80E2 =  simplexRing C

F80E3 =  R.grading

F81E0 =  R=QQ[x_0..x_4]

F81E1 =  addCokerGrading R

F81E2 =  C=simplex R

F81E3 =  bC=boundaryOfPolytope C

F81E4 =  F=bC.fc_2_0

F81E5 =  coordinates F

F81E6 =  dualize F

F81E7 =  coordinates dualize F

F81E8 =  dbC=dualize bC

F81E9 =  complement F

F81E10 =  coordinates complement F

F81E11 =  complement bC

F81E12 =  dualize complement bC

F81E13 =  bC

F81E14 =  coordinates dualize complement F

F81E15 =  coordinates F

F82E0 =  R=QQ[x_0..x_4];

F82E1 =  addCokerGrading(R);

F82E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F82E3 =  mg=mingens I;

F82E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F82E5 =  dim f

F83E0 =  R=QQ[x_0..x_5]

F83E1 =  C=boundaryCyclicPolytope(3,R)

F83E2 =  C.simplexRing

F83E3 =  C.grading

F83E4 =  C.fc_2

F83E5 =  C.facets

F83E6 =  dC=dualize C

F83E7 =  cC=complement C

F83E8 =  dualize cC

F84E0 =  R=QQ[x_0..x_5]

F84E1 =  C=boundaryCyclicPolytope(3,R)

F84E2 =  fc C

F84E3 =  fc(C,1)

F85E0 =  R=QQ[x_0..x_4]

F85E1 =  C=simplex(R)

F85E2 =  isPolytope C

F85E3 =  boundaryOfPolytope C

F86E0 =  R=QQ[x_0..x_4]

F86E1 =  m=vector {1,2,1,0,0}

F86E2 =  vectorToMonomial(m,R)

F87E0 =  R=QQ[x_0..x_4]

F87E1 =  addCokerGrading(R)

F87E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F87E3 =  C=idealToComplex(I)

F87E4 =  Cl=newEmptyComplex(R)

F87E5 =  addFacetDataToComplex(Cl,facets C)

F87E6 =  Cl==C

F88E0 =  R=QQ[x_0..x_3]

F88E1 =  I=ideal(x_0*x_1,x_2*x_3)

F88E2 =  C=idealToComplex I

F88E3 =  PT1C=PT1 C

F88E4 =  tropDefC=tropDef(C,PT1C)

F88E5 =  tropDefC.grading

F89E0 =  L= {{0,1,1,0,0},{0,1,0,1,0},{0,1,0,0,0},{1,0,0,0,1},{1,0,-1,-1,-1},{1,0,0,0,0}};

F89E1 =  L=apply(L,vector)

F89E2 =  C=hull L

F89E3 =  C.grading

F89E4 =  dC=dualize C

F89E5 =  dC.grading

F90E0 =  R=QQ[x_0..x_4]

F90E1 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F90E2 =  C1=idealToComplex I

F90E3 =  deform C1

F91E0 =  R=QQ[x_0..x_5];

F91E1 =  C=fullCyclicPolytope(3,R);

F91E2 =  fvector C

F91E3 =  eulerCharacteristic C

F91E4 =  dC=boundaryOfPolytope(C);

F91E5 =  fvector dC

F91E6 =  eulerCharacteristic dC

F92E0 =  R=QQ[x_0..x_4];

F92E1 =  C=simplex R;

F92E2 =  F=C.fc_2_0

F93E0 =  R=QQ[x_0..x_4]

F93E1 =  addCokerGrading(R)

F93E2 =  C0=simplex(R)

F93E3 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F93E4 =  C=idealToComplex(I)

F93E5 =  embeddingComplex C

F93E6 =  idealToComplex(I,C0)

F93E7 =  complexToIdeal(C)

F93E8 =  cC=idealToCoComplex(I,C0)

F93E9 =  cC==complement C

F93E10 =  I==coComplexToIdeal(cC)

F93E11 =  dualize cC

F94E0 =  R=QQ[x_0..x_4];

F94E1 =  addCokerGrading(R);

F94E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F94E3 =  mg=mingens I;

F94E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F94E5 =  gensSource f

F95E0 =  R=QQ[x_0..x_4];

F95E1 =  addCokerGrading(R);

F95E2 =  I=ideal(x_0*x_1,x_1*x_2,x_2*x_3,x_3*x_4,x_4*x_0)

F95E3 =  mg=mingens I;

F95E4 =  f=firstOrderDeformation(mg, vector {-1,-1,0,2,0})

F95E5 =  isTrivial f

F95E6 =  f1=firstOrderDeformation(mg, vector {-1,1,0,0,0})

F95E7 =  isTrivial f1

F96E0 =  R=QQ[x_0..x_4];

F96E1 =  addCokerGrading(R);

F96E2 =  R.grading

F96E3 =  R=QQ[x_0..x_4];

F96E4 =  addCokerGrading(R,{1,1,2,2,3});

F96E5 =  R.grading

F97E0 =  R=QQ[x_0..x_5]

F97E1 =  boundaryCyclicPolytope(3,R)

F98E0 =  L={vector {1,0,0},vector {-1,0,0},vector {0,1,0},vector {0,-1,0},vector {0,0,1},vector {0,0,-1}}

F98E1 =  P=convHull(L)

F98E2 =  dP=boundaryOfPolytope P

F99E0 =  R=QQ[x_0..x_4];

F99E1 =  C=simplex R

F99E2 =  F=C.fc_2_0

F99E3 =  G=C.fc_2_1

F99E4 =  intersectFaces(F,G)

F99E5 =  H=C.fc_2_2

F99E6 =  intersectFaces({F,G,H})

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F3E0", "F3E1", "F3E2", "F3E3", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F4E7", "F4E8", "F4E9", "F4E10", "F4E11", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F8E0", "F8E1", "F8E2", "F8E3", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F10E5", "F10E6", "F10E7", "F10E8", "F10E9", "F10E10", "F10E11", "F10E12", "F10E13", "F10E14", "F10E15", "F10E16", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F11E5", "F11E6", "F11E7", "F11E8", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F15E0", "F15E1", "F15E2", "F15E3", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F16E5", "F16E6", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F18E0", "F18E1", "F18E2", "F18E3", "F19E0", "F19E1", "F19E2", "F19E3", "F19E4", "F19E5", "F20E0", "F20E1", "F20E2", "F20E3", "F20E4", "F20E5", "F20E6", "F20E7", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4", "F23E5", "F24E0", "F24E1", "F24E2", "F24E3", "F24E4", "F24E5", "F24E6", "F25E0", "F25E1", "F25E2", "F25E3", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F26E6", "F26E7", "F26E8", "F26E9", "F26E10", "F26E11", "F26E12", "F26E13", "F26E14", "F26E15", "F26E16", "F26E17", "F26E18", "F26E19", "F26E20", "F26E21", "F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F28E0", "F28E1", "F28E2", "F28E3", "F29E0", "F29E1", "F29E2", "F29E3", "F29E4", "F29E5", "F30E0", "F30E1", "F30E2", "F30E3", "F30E4", "F30E5", "F30E6", "F30E7", "F30E8", "F30E9", "F30E10", "F30E11", "F31E0", "F31E1", "F31E2", "F31E3", "F31E4", "F31E5", "F31E6", "F31E7", "F31E8", "F31E9", "F32E0", "F32E1", "F32E2", "F32E3", "F32E4", "F32E5", "F32E6", "F32E7", "F32E8", "F32E9", "F32E10", "F32E11", "F33E0", "F33E1", "F33E2", "F34E0", "F34E1", "F34E2", "F34E3", "F34E4", "F34E5", "F34E6", "F34E7", "F35E0", "F35E1", "F35E2", "F35E3", "F35E4", "F35E5", "F36E0", "F36E1", "F36E2", "F36E3", "F36E4", "F36E5", "F36E6", "F36E7", "F37E0", "F37E1", "F38E0", "F38E1", "F38E2", "F38E3", "F38E4", "F38E5", "F39E0", "F39E1", "F39E2", "F39E3", "F39E4", "F39E5", "F40E0", "F40E1", "F40E2", "F40E3", "F40E4", "F40E5", "F40E6", "F40E7", "F40E8", "F40E9", "F40E10", "F40E11", "F41E0", "F41E1", "F41E2", "F41E3", "F41E4", "F41E5", "F41E6", "F41E7", "F42E0", "F42E1", "F42E2", "F42E3", "F42E4", "F42E5", "F42E6", "F42E7", "F42E8", "F42E9", "F42E10", "F42E11", "F42E12", "F42E13", "F42E14", "F42E15", "F42E16", "F42E17", "F43E0", "F43E1", "F43E2", "F43E3", "F43E4", "F43E5", "F44E0", "F44E1", "F44E2", "F44E3", "F44E4", "F44E5", "F45E0", "F45E1", "F45E2", "F45E3", "F45E4", "F46E0", "F46E1", "F46E2", "F46E3", "F46E4", "F46E5", "F47E0", "F48E0", "F48E1", "F48E2", "F48E3", "F48E4", "F48E5", "F49E0", "F49E1", "F49E2", "F50E0", "F50E1", "F50E2", "F50E3", "F50E4", "F51E0", "F51E1", "F51E2", "F51E3", "F52E0", "F52E1", "F52E2", "F52E3", "F52E4", "F53E0", "F53E1", "F53E2", "F53E3", "F53E4", "F53E5", "F53E6", "F54E0", "F54E1", "F54E2", "F54E3", "F54E4", "F54E5", "F54E6", "F54E7", "F54E8", "F54E9", "F54E10", "F54E11", "F54E12", "F54E13", "F54E14", "F54E15", "F54E16", "F55E0", "F56E0", "F56E1", "F56E2", "F56E3", "F57E0", "F57E1", "F57E2", "F57E3", "F57E4", "F57E5", "F57E6", "F57E7", "F57E8", "F58E0", "F58E1", "F58E2", "F58E3", "F58E4", "F58E5", "F58E6", "F58E7", "F58E8", "F58E9", "F58E10", "F59E0", "F59E1", "F59E2", "F59E3", "F59E4", "F59E5", "F59E6", "F60E0", "F60E1", "F60E2", "F60E3", "F60E4", "F60E5", "F61E0", "F61E1", "F61E2", "F61E3", "F61E4", "F62E0", "F62E1", "F62E2", "F62E3", "F62E4", "F62E5", "F62E6", "F62E7", "F62E8", "F63E0", "F63E1", "F63E2", "F63E3", "F63E4", "F63E5", "F64E0", "F64E1", "F64E2", "F64E3", "F64E4", "F64E5", "F65E0", "F65E1", "F65E2", "F65E3", "F66E0", "F66E1", "F66E2", "F66E3", "F66E4", "F66E5", "F67E0", "F67E1", "F67E2", "F67E3", "F67E4", "F68E0", "F68E1", "F68E2", "F68E3", "F68E4", "F68E5", "F69E0", "F69E1", "F69E2", "F69E3", "F69E4", "F69E5", "F69E6", "F70E0", "F70E1", "F70E2", "F70E3", "F70E4", "F70E5", "F70E6", "F71E0", "F71E1", "F71E2", "F71E3", "F71E4", "F72E0", "F72E1", "F72E2", "F72E3", "F72E4", "F72E5", "F72E6", "F72E7", "F72E8", "F72E9", "F72E10", "F72E11", "F73E0", "F73E1", "F73E2", "F73E3", "F73E4", "F73E5", "F74E0", "F74E1", "F75E0", "F75E1", "F75E2", "F75E3", "F76E0", "F76E1", "F76E2", "F77E0", "F77E1", "F77E2", "F77E3", "F77E4", "F77E5", "F78E0", "F78E1", "F78E2", "F78E3", "F78E4", "F78E5", "F78E6", "F78E7", "F78E8", "F79E0", "F79E1", "F79E2", "F79E3", "F79E4", "F79E5", "F79E6", "F79E7", "F80E0", "F80E1", "F80E2", "F80E3", "F81E0", "F81E1", "F81E2", "F81E3", "F81E4", "F81E5", "F81E6", "F81E7", "F81E8", "F81E9", "F81E10", "F81E11", "F81E12", "F81E13", "F81E14", "F81E15", "F82E0", "F82E1", "F82E2", "F82E3", "F82E4", "F82E5", "F83E0", "F83E1", "F83E2", "F83E3", "F83E4", "F83E5", "F83E6", "F83E7", "F83E8", "F84E0", "F84E1", "F84E2", "F84E3", "F85E0", "F85E1", "F85E2", "F85E3", "F86E0", "F86E1", "F86E2", "F87E0", "F87E1", "F87E2", "F87E3", "F87E4", "F87E5", "F87E6", "F88E0", "F88E1", "F88E2", "F88E3", "F88E4", "F88E5", "F89E0", "F89E1", "F89E2", "F89E3", "F89E4", "F89E5", "F90E0", "F90E1", "F90E2", "F90E3", "F91E0", "F91E1", "F91E2", "F91E3", "F91E4", "F91E5", "F91E6", "F92E0", "F92E1", "F92E2", "F93E0", "F93E1", "F93E2", "F93E3", "F93E4", "F93E5", "F93E6", "F93E7", "F93E8", "F93E9", "F93E10", "F93E11", "F94E0", "F94E1", "F94E2", "F94E3", "F94E4", "F94E5", "F95E0", "F95E1", "F95E2", "F95E3", "F95E4", "F95E5", "F95E6", "F95E7", "F96E0", "F96E1", "F96E2", "F96E3", "F96E4", "F96E5", "F97E0", "F97E1", "F98E0", "F98E1", "F98E2", "F99E0", "F99E1", "F99E2", "F99E3", "F99E4", "F99E5", "F99E6"}
