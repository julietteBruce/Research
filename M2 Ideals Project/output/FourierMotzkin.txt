needsPackage "package_directory/FourierMotzkin/example-output"

F0E0 =  cyclicPolytope = (d,n) -> map(ZZ^d, ZZ^n, (i,j) -> j^(i+1));

F0E1 =  vertices = cyclicPolytope(4,8)

F0E2 =  homogenizePolytope = V -> (

          R := ring V;

          n := numgens source V;

          map(R^1, R^n, {toList(n:1)}) || V);

F0E3 =  polyCone = homogenizePolytope vertices

F0E4 =  H = fourierMotzkin polyCone

F0E5 =  halfspaces = H#0

F0E6 =  numgens source halfspaces

F0E7 =  inequalityVector = transpose submatrix(halfspaces,{0},)

F0E8 =  inequalityMatrix = transpose submatrix(halfspaces,{1..4},)

F0E9 =  ones = map(ZZ^1,ZZ^8,{toList(8:1)})

F0E10 =  M = (inequalityMatrix * vertices) + (ones ** inequalityVector)

F0E11 =  incidence = matrix table(20,8, (i,j) -> if M_(i,j) == 0 then 1 else 0)

F1E0 =  permutahedron = d -> transpose matrix permutations toList(1..d+1);

F1E1 =  vertices = permutahedron 3

F1E2 =  homogenizePolytope = V -> (

          R := ring V;

          n := numgens source V;

          map(R^1, R^n, {toList(n:1)}) || V);

F1E3 =  H = fourierMotzkin homogenizePolytope vertices

F1E4 =  transpose H#1

F1E5 =  halfspaces = H#0;

F1E6 =  numgens source halfspaces

F1E7 =  inequalityMatrix = transpose submatrix(halfspaces,{1..4},)

F1E8 =  M = inequalityMatrix * vertices

F1E9 =  incidence = matrix table(14,24, (i,j) -> if M_(i,j) == 0 then 1 else 0)

F1E10 =  vertexDegree = map(ZZ^1,ZZ^14,{toList(14:1)}) * incidence

F1E11 =  facets = transpose(incidence * transpose map(ZZ^1,ZZ^24,{toList(24:1)}))

F2E0 =  findHeft := vectorConfig -> (

          A := transpose matrix vectorConfig;

          B := (fourierMotzkin A)#0;

          r := rank source B;

          heft := first entries (matrix{toList(r:-1)} * transpose B);

          g := gcd heft;

          if g > 1 then heft = apply(heft, h -> h //g);

          heft);

F2E1 =  vectorConfig = {{1,0},{-2,1},{1,0},{0,1}}

F2E2 =  hft = findHeft vectorConfig

F2E3 =  S = QQ[x_1,x_2,y_1,y_2, Heft => hft, Degrees => vectorConfig];

F2E4 =  irrelevantIdeal = intersect(ideal(x_1,x_2), ideal(y_1,y_2))

F2E5 =  res (S^1/irrelevantIdeal)

F2E6 =  vectorConfig = {{1,0,0,0},{0,1,0,0},{0,-1,1,0},{0,1,-1,1},

     	  {1,0,-1,1},{-1,0,0,1}}

F2E7 =  hft = findHeft vectorConfig

F2E8 =  R = QQ[x_1..x_6, Heft => hft, Degrees => vectorConfig];

F2E9 =  irrelevantIdeal = ideal(x_3*x_4*x_5*x_6,x_1*x_4*x_5*x_6,x_1*x_2*x_5*x_6,

           x_1*x_2*x_3*x_6,x_2*x_3*x_4*x_5,x_1*x_2*x_3*x_4)

F2E10 =  res (R^1/irrelevantIdeal)

F3E0 =  rays = transpose matrix(QQ, {{1,1,6},{1,2,4},{1,2,5},

     	       {1,2,6},{1,3,4},{1,3,5},{1,3,6},{1,4,4},{1,4,5},

     	       {1,4,6},{1,5,4},{1,5,5},{1,5,6},{1,5,7},{1,6,3},

     	       {1,6,4},{1,6,5},{1,6,6},{1,6,7},{1,7,4},{1,7,5},

     	       {1,7,6},{1,7,8},{1,8,4},{1,8,5},{1,8,6}})

F3E1 =  halfspaces = fourierMotzkin rays

F3E2 =  numgens source halfspaces#0

F3E3 =  extremalRays = fourierMotzkin halfspaces

F3E4 =  numgens source extremalRays#0

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F0E7", "F0E8", "F0E9", "F0E10", "F0E11", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F1E10", "F1E11", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F2E10", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4"}
