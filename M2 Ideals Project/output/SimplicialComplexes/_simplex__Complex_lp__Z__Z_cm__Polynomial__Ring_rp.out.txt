needsPackage "SimplicialComplexes"

F9E0 =  S = ZZ[a..e];

F9E1 =  irrelevant = simplexComplex (-1, S)

F9E2 =  monomialIdeal irrelevant

F9E3 =  dim irrelevant

F9E4 =  fVector irrelevant

F9E5 =  assert(facets irrelevant === {1_S})

F9E6 =  assert(dim irrelevant === -1 and fVector irrelevant === {1})

F9E7 =  Δ0 = simplexComplex (0, S)

F9E8 =  monomialIdeal Δ0

F9E9 =  dim Δ0

F9E10 =  fVector Δ0

F9E11 =  assert(facets Δ0 === {a} and dim Δ0 === 0)

F9E12 =  assert(fVector Δ0 == {1,1})

F9E13 =  Δ1 = simplexComplex (1, S)

F9E14 =  monomialIdeal Δ1

F9E15 =  dim Δ1

F9E16 =  fVector Δ1

F9E17 =  assert(facets Δ1 === {a*b} and dim Δ1 === 1)

F9E18 =  assert(fVector Δ1 === {1,2,1})

F9E19 =  Δ2 = simplexComplex (2, S)

F9E20 =  monomialIdeal Δ2

F9E21 =  dim Δ2

F9E22 =  fVector Δ2

F9E23 =  assert(facets Δ2 === {a*b*c} and dim Δ2 === 2)

F9E24 =  assert(fVector Δ2 === {1,3,3,1})

F9E25 =  Δ3 = simplexComplex (3, S)

F9E26 =  monomialIdeal Δ3

F9E27 =  dim Δ3

F9E28 =  fVector Δ3

F9E29 =  assert(facets Δ3 === {a*b*c*d} and dim Δ3 === 3)

F9E30 =  assert(fVector Δ3 === toList apply(-1..3, i -> binomial(3+1,i+1)))

F9E31 =  Δ4 = simplexComplex (4, S)

F9E32 =  monomialIdeal Δ4

F9E33 =  dim Δ4

F9E34 =  fVector Δ4

F9E35 =  assert(facets Δ4 === {a*b*c*d*e} and dim Δ4 === 4)

F9E36 =  assert(fVector Δ4 === toList apply(-1..4, i -> binomial(4+1,i+1)))

exampleIDS = {"F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F9E8", "F9E9", "F9E10", "F9E11", "F9E12", "F9E13", "F9E14", "F9E15", "F9E16", "F9E17", "F9E18", "F9E19", "F9E20", "F9E21", "F9E22", "F9E23", "F9E24", "F9E25", "F9E26", "F9E27", "F9E28", "F9E29", "F9E30", "F9E31", "F9E32", "F9E33", "F9E34", "F9E35", "F9E36"}
