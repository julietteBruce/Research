needsPackage "Macaulay2Doc"

F638E0 =  R = ZZ/32003[a,b,c,d]

F638E1 =  X = ideal(a^3+b^3+c^3+d^3)

F638E2 =  KK = coefficientRing R 

F638E3 =  S = KK [s,t,p_0..p_3,q_0..q_3]

F638E4 =  F = map(S,R,

            s*matrix{{p_0..p_3}} +

            t*matrix{{q_0..q_3}}

            )

F638E5 =  FX = F X

F638E6 =  cFX = last coefficients(gens FX, Variables => {s,t})

F638E7 =  S1 = KK[p_0..p_3,q_0..q_3]

F638E8 =  cFX = substitute(cFX, S1)

F638E9 =  S1bar = S1/ideal cFX

F638E10 =  GR = coefficientRing R[x_0..x_5]

F638E11 =  M = substitute(

          exteriorPower(2, matrix{{p_0..p_3},{q_0..q_3}}),

          S1bar)

F638E12 =  gr = map (S1bar, GR, M)

F638E13 =  fano = trim ker gr

F638E14 =  codim fano

F638E15 =  degree fano

F638E16 =  betti fano

F638E17 =  needsPackage "Text"

F638E18 =  document {

           Key => Fano2, 

              TT "Fano2(k,X,GR) or  Fano2(k,X)", " -- computes 

              the ideal of a Fano scheme in the Grassmannian.",

              PARA{},

              "Given an ideal X representing a projective variety 

              in P^r, a positive integer k<r, and optionally a 

              ring GR with (exactly) r+1 choose k+1 variables, 

              representing the ambient space of the Grassmannian of 

              k-planes in P^r, this routine returns the ideal in

              GR of the Fano scheme that parametrizes the k-planes 

              lying on X. If the optional third argument is not 

              present, the routine fabricates its own local ring, 

              and returns an ideal over it."

              };

F638E19 =  document {

          Key => Grassmannian2,

          TT "Grassmannian2(k,r,R) or 

              Grassmannian2(k,r)",

             "-- Given natural numbers k <= r,

              and optionally a ring R with at least binomial(r+1,k+1)

              variables, the routine defines the ideal of the 

              Grassmannian of projective k-planes in P^r, using 

              the first binomial(r+1,k+1) variables of R. 

              If R is not given, the routine makes and uses

              ZZ/31991[vars(0..binomial(r+1,k+1)-1]."

              };

F638E20 =  Fano2 = method()

F638E21 =  Fano2(ZZ,Ideal,Ring) := (k,X,GR) -> (

        -- Get info about the base ring of X:

        -- The coefficient ring (to make new rings of

        -- the same characteristic, for example)

        -- and the number of variables

        KK:=coefficientRing ring X;

        r := (numgens ring X) - 1;

        -- Next make private variables for our 

        -- intermediate rings, to avoid interfering

        -- with something outside:

        t:=symbol t;

        p:=symbol p;

        -- And rings

        S1 := KK[t_0..t_k];

        S2 := KK[p_0..p_(k*r+k+r)];

        S := tensor(S1,S2);

        -- Over S we have a generic point of a generic

        -- line, represented by a row vector, which

        -- we use to define a map from the base ring

        -- of X

        F := map(S,ring X,

                genericMatrix(S,S_0,1,k+1)*

                genericMatrix(S,S_(k+1),k+1,r+1)

                );

        -- We now apply F to the ideal of X

        FX := F X;

        -- and the condition we want becomes the condition

        -- that FX vanishes identically in the t_i.

        -- The following line produces the matrix of

        -- coefficients of the monomials in the 

        -- variables labelled 0..k:

        cFX := last coefficients (gens FX, Variables => toList apply(0..k, i -> S_i));

        -- We can get rid of the variables t_i

        -- to ease the computation:

        cFX = substitute(cFX, S2);

        -- The ring we want is the quotient

        S2bar := S2/ideal cFX;

        -- Now we want to move to the Grassmannian,

        -- represented by the ring GR

        -- We define a map sending the variables of GR

        -- to the minors of the generic matrix in the

        -- p_i regarded as elements of S1bar

        gr := map(S2bar,GR,

                  exteriorPower(k+1, 

                  genericMatrix(S2bar,S2bar_0,k+1,r+1)

                  )

                 );

        -- and the defining ideal of the Fano variety is

        ker gr

      )

F638E22 =  Fano2(ZZ, Ideal) := (k,X) -> (

        KK:=coefficientRing ring X;

        r := (numgens ring X) - 1;

        -- We can specify a private ring with binomial(r+1,k+1)

        -- variables as follows

        GR := KK[Variables => binomial(r+1,k+1)];

        -- the work is done by

        Fano2(k,X,GR)

      )

F638E23 =  Grassmannian2 = method()

F638E24 =  Grassmannian2(ZZ,ZZ,Ring) := (k,r,R) ->( 

              KK := coefficientRing R;

              RPr := KK[Variables => r+1];

              Pr := ideal(0_RPr);

              Fano2(k,Pr)

           )

F638E25 =  Grassmannian2(ZZ,ZZ) := (r,k) -> (

              R := ZZ/31991[

                     vars(0..(binomial(r+1,k+1)-1))

                          ];

              Grassmannian2(k,r,R)

                           )

F638E26 =  KK = ZZ/31991

F638E27 =  R = KK[a,b,c,d]

F638E28 =  X = ideal(a*b-c*d)

F638E29 =  I = Fano2(1,X)

                                                  2                     

F638E30 =  dim I

F638E31 =  degree I

F638E32 =  KK = ZZ/31991

F638E33 =  P5 = KK[a..f]

F638E34 =  MVero = genericSymmetricMatrix(P5,a,3)

F638E35 =  Vero = minors(2,MVero)

                2                                                  2         

F638E36 =  catalecticant = (R,v,m,n) -> 

              map(R^m,n,(i,j)-> R_(i+j+v))

F638E37 =  catalecticant(P5,1,2,4)

F638E38 =  M13 = catalecticant(P5,0,2,1) |

                 catalecticant(P5,2,2,3)

F638E39 =  S13 = minors(2,M13)

                                          2                                 

F638E40 =  M22 = catalecticant(P5,0,2,2) | catalecticant(P5,3,2,2)

F638E41 =  S22 = minors(2, M22)

                2                                                           

F638E42 =  Verores = res coker gens Vero

        1       6       8       3

F638E43 =  S22res = res coker gens S22

        1       6       8       3

F638E44 =  S13res = res coker gens S13

        1       6       8       3

F638E45 =  betti Verores

             0 1 2 3

F638E46 =  betti S22res

             0 1 2 3

F638E47 =  betti S13res

             0 1 2 3

F638E48 =  FVero = Fano2(1, Vero)

              2                                                              

F638E49 =  betti gens FVero

             0   1

F638E50 =  FS13 = Fano2(1, S13)

              2                                                              

F638E51 =  hilbertPolynomial coker gens FS13

F638E52 =  FS22 = Fano2(1, S22)

              2                                                              

F638E53 =  hilbertPolynomial coker gens FS22

exampleIDS = {"F638E0", "F638E1", "F638E2", "F638E3", "F638E4", "F638E5", "F638E6", "F638E7", "F638E8", "F638E9", "F638E10", "F638E11", "F638E12", "F638E13", "F638E14", "F638E15", "F638E16", "F638E17", "F638E18", "F638E19", "F638E20", "F638E21", "F638E22", "F638E23", "F638E24", "F638E25", "F638E26", "F638E27", "F638E28", "F638E29", "F638E30", "F638E31", "F638E32", "F638E33", "F638E34", "F638E35", "F638E36", "F638E37", "F638E38", "F638E39", "F638E40", "F638E41", "F638E42", "F638E43", "F638E44", "F638E45", "F638E46", "F638E47", "F638E48", "F638E49", "F638E50", "F638E51", "F638E52", "F638E53"}
