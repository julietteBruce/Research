needsPackage "Macaulay2Doc"

F246E0 =  f = method()

F246E1 =  f ZZ := x -> -x;

F246E2 =  f(ZZ,String) := (n,s) -> concatenate(n:s);

F246E3 =  f(String,ZZ,String) := (s,n,t) -> concatenate(s," : ",toString n," : ",t);

F246E4 =  f 44

F246E5 =  f(5,"abcd ")

F246E6 =  f("foo",88,"bar")

F246E7 =  p = method(Binary => true, TypicalValue => List)

F246E8 =  p(ZZ,ZZ) := p(List,ZZ) := (i,j) -> {i,j}

F246E9 =  p(1,2)

F246E10 =  p(1,2,3,4,5,6)

F246E11 =  g = method(Dispatch => Thing);

F246E12 =  g ZZ := i -> -i;

F246E13 =  g Sequence := S -> reverse S;

F246E14 =  g 44

F246E15 =  g(3,4,5,6)

F246E16 =  h = method(Dispatch => {Type})

F246E17 =  h(QQ,ZZ) := (QQ,n) -> n/1;

F246E18 =  h(RR,ZZ) := (RR,n) -> n + 0.;

F246E19 =  h(ZZ,ZZ) := (ZZ,n) -> n;

F246E20 =  h(ZZ,14)

F246E21 =  h(QQ,14)

F246E22 =  h(RR,14)

F246E23 =  r = method(Options => {Slope => 1, Intercept => 1})

F246E24 =  r RR := o -> x -> o.Slope * x + o.Intercept

F246E25 =  r(5.)

F246E26 =  r(5.,Slope=>100)

F246E27 =  options r

F246E28 =  methodOptions r

F246E29 =  s = method(Options => true)

F246E30 =  s ZZ := { Slope => 17 } >> o -> x -> o.Slope * x

F246E31 =  s RR := { Intercept => 11 } >> o -> x -> x + o.Intercept

F246E32 =  s 100

F246E33 =  s 1000.

F246E34 =  options s

F246E35 =  options(s,ZZ)

F246E36 =  options(s,RR)

F246E37 =  installMethod(s,{ Slope => 1234 } >> o -> () -> o.Slope)

F246E38 =  s()

F246E39 =  s(Slope => 4)

exampleIDS = {"F246E0", "F246E1", "F246E2", "F246E3", "F246E4", "F246E5", "F246E6", "F246E7", "F246E8", "F246E9", "F246E10", "F246E11", "F246E12", "F246E13", "F246E14", "F246E15", "F246E16", "F246E17", "F246E18", "F246E19", "F246E20", "F246E21", "F246E22", "F246E23", "F246E24", "F246E25", "F246E26", "F246E27", "F246E28", "F246E29", "F246E30", "F246E31", "F246E32", "F246E33", "F246E34", "F246E35", "F246E36", "F246E37", "F246E38", "F246E39"}
