needsPackage "Macaulay2Doc"

F681E0 =  L = {a,b,c,d,e}

F681E1 =  S = (a,b,c,d,e)

F681E2 =  ()

F681E3 =  (1,2)

F681E4 =  (1)

F681E5 =  toSequence {1}

F681E6 =  10000*{3,4,5} + {1,2,3}

F681E7 =  v = [1,2,3]

F681E8 =  ZZ[a,b,c]

F681E9 =  v = <|1,2,3|>

F681E10 =  v#1

F681E11 =  Container = new Type of BasicList

F681E12 =  t = new Container from {a,b}

F681E13 =  Container ++ Container := join;

F681E14 =  t ++ t

F681E15 =  A = new MutableList from {a,b,c}

F681E16 =  peek A

F681E17 =  A#2 = 1234;

F681E18 =  A

F681E19 =  peek A

F681E20 =  r = Bag {100!}; r

F681E21 =  q = Bag {1/100!}; q

F681E22 =  unbag q

F681E23 =  showStructure(List,Sequence,Array,Container,MutableList,Bag,BasicList)

F681E24 =  L = {926, 621, 429, 67, 594, 904, 264, 18, 35, 961};

F681E25 =  #L

F681E26 =  length L

F681E27 =  L#0

F681E28 =  L#2

F681E29 =  L#-1

F681E30 =  L_1

F681E31 =  L_{3,6}

F681E32 =  first L

F681E33 =  last L

F681E34 =  A = {3,4,,5}

F681E35 =  peek A

F681E36 =  A#2

F681E37 =  1 .. 5, x_1 .. x_5, a .. e

F681E38 =  12:a

F681E39 =  1:a

F681E40 =  A = {3 .. 6, 9, 3:12}

F681E41 =  A = splice {3..6, 9, 3:12}

F681E42 =  QQ[a..c,x_1..x_4]

F681E43 =  L_{1..3,-3..-1}

F681E44 =  A = {{a,b,c},{d,{e,f}}}

F681E45 =  #A

F681E46 =  #(first A)

F681E47 =  flatten A

F681E48 =  splice (a, (b, c), (d, (e, f, (g, h))) )

F681E49 =  deepSplice (a, (b, c), (d, (e, f, (g, h))) )

F681E50 =  T = {{a,1},{b,2},{c,3}}

F681E51 =  isTable T

F681E52 =  MatrixExpression T

F681E53 =  table({1,2,3},{7,8},(i,j) -> 1000*i+j)

F681E54 =  pack(1..15, 4)

F681E55 =  mingle({{1,2,3,4}, {10,20,30,40}, {100,200,300,400}, {a, b}})

F681E56 =  append(L, -10)

F681E57 =  L

F681E58 =  L = append(L, -10); L

F681E59 =  L = prepend(-20, L)

F681E60 =  L = insert(5, -30, L)

F681E61 =  L = switch(1, 2, L)

F681E62 =  L = delete(-10, L)

F681E63 =  L = drop(L, {1,1})

F681E64 =  L = drop(L, 2)

F681E65 =  L = drop(L, -2)

F681E66 =  L = take(L, 6)

F681E67 =  L = take(L, {1,4})

F681E68 =  L = between(-5, L)

F681E69 =  L

F681E70 =  reverse L

F681E71 =  sort L

F681E72 =  rsort L

F681E73 =  unique L

F681E74 =  join(a..f, 1..6)

F681E75 =  x_1..x_3 | y_1..y_4

F681E76 =  scan({a,b,c}, print)

F681E77 =  scan({3,5,7,11,44,55,77}, i -> if even i then break i)

F681E78 =  apply({1,2,3,4}, i -> i^2)

F681E79 =  {1,2,3,4} / (i -> i^2)

F681E80 =  (i -> i^2) \ {1,2,3,4}

F681E81 =  {1,2,3,4} / (i -> i^2) / (j -> 1000*j)

F681E82 =  (j -> 1000*j) \ (i -> i^2) \ {1,2,3,4}

F681E83 =  (j -> 1000*j) @@ (i -> i^2) \ {1,2,3,4}

F681E84 =  apply({1,2,3}, {7,8,9}, (i,j) -> 1000*i+j)

F681E85 =  applyTable( {{1,2,3},{4,5}}, i -> i^2)

F681E86 =  fold((i,j) -> i*10+j, {7,3,5,4,2})

F681E87 =  accumulate((i,j) -> i*10+j, {7,3,5,4,2})

F681E88 =  select({12, 3, -10, 42, 7, 6, 53}, even)

F681E89 =  select({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

F681E90 =  select(2, {12, 3, -10, 42, 7, 6, 53}, even)

F681E91 =  positions({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

F681E92 =  position({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

F681E93 =  position({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40, Reverse => true)

F681E94 =  number({12, 3, -10, 42, 7, 6, 53}, i -> i<0 or i>40)

F681E95 =  R = QQ[x,y,z, MonomialOrder => Lex];

F681E96 =  max {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

F681E97 =  maxPosition {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

F681E98 =  min {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

F681E99 =  minPosition {x^2*y*z, x*y^3*z^2, x^3, y^3, z}

F681E100 =  any({3, 6, 7, 8}, even)

F681E101 =  all({3, 6, 7, 8}, even)

exampleIDS = {"F681E0", "F681E1", "F681E2", "F681E3", "F681E4", "F681E5", "F681E6", "F681E7", "F681E8", "F681E9", "F681E10", "F681E11", "F681E12", "F681E13", "F681E14", "F681E15", "F681E16", "F681E17", "F681E18", "F681E19", "F681E20", "F681E21", "F681E22", "F681E23", "F681E24", "F681E25", "F681E26", "F681E27", "F681E28", "F681E29", "F681E30", "F681E31", "F681E32", "F681E33", "F681E34", "F681E35", "F681E36", "F681E37", "F681E38", "F681E39", "F681E40", "F681E41", "F681E42", "F681E43", "F681E44", "F681E45", "F681E46", "F681E47", "F681E48", "F681E49", "F681E50", "F681E51", "F681E52", "F681E53", "F681E54", "F681E55", "F681E56", "F681E57", "F681E58", "F681E59", "F681E60", "F681E61", "F681E62", "F681E63", "F681E64", "F681E65", "F681E66", "F681E67", "F681E68", "F681E69", "F681E70", "F681E71", "F681E72", "F681E73", "F681E74", "F681E75", "F681E76", "F681E77", "F681E78", "F681E79", "F681E80", "F681E81", "F681E82", "F681E83", "F681E84", "F681E85", "F681E86", "F681E87", "F681E88", "F681E89", "F681E90", "F681E91", "F681E92", "F681E93", "F681E94", "F681E95", "F681E96", "F681E97", "F681E98", "F681E99", "F681E100", "F681E101"}
