needsPackage "OldPolyhedra"

F0E0 =  M = matrix {{1,1,-1,-1},{1,-1,1,-1}}

F0E1 =  P = convexHull M

F0E2 =  r = matrix {{1},{2}}

F0E3 =  P =convexHull(M,r)

F0E4 =  N = matrix {{-2,-2,0},{0,-2,-2}}

F0E5 =  Q = convexHull(M|N)

F0E6 =  Q1 = convexHull(M|N,r)

F0E7 =  P1 = convexHull {P,N}

F0E8 =  P1 == Q1

F0E9 =  P1 = convexHull(P,Q)

F0E10 =  P1 == Q1

F1E0 =  P = cyclicPolytope(3,5)

F1E1 =  interiorPoint P

F2E0 =  P = crossPolytope(3,3/2)

F2E1 =  vertices P

F3E0 =  P = intersection(matrix{{1,-1},{0,-1},{-1,-1},{0,1}}, matrix{{0},{-1},{0},{1}})

F3E1 =  vertices P

F3E2 =  PC = skeleton(2,polyhedralComplex hypercube 3)

F3E3 =  vertices PC

F4E0 =  F1 = normalFan hypercube 1

F4E1 =  F2 = normalFan hypercube 2

F4E2 =  F = F1 * F2

F4E3 =  F == normalFan hypercube 3

F5E0 =  C = posHull matrix {{1,2,3},{2,3,1},{3,1,2},{1,0,1}};

F5E1 =  net C

F6E0 =  convexHull(matrix {{0,0,-1,-1},{2,-2,1,-1},{0,0,0,0}},matrix {{1},{0},{0}})

F6E1 =  V = matrix {{1,1,-1,-1},{1,-1,1,-1}}

F6E2 =  convexHull V

F6E3 =  R = matrix {{1},{1}}

F6E4 =  convexHull(V,R)

F6E5 =  HS = transpose V

F6E6 =  v = R || R

F6E7 =  P = intersection(HS,v)

F6E8 =  vertices P

F6E9 =  HS = HS | matrix {{0},{0},{0},{0}}

F6E10 =  HP = matrix {{0,0,1}}

F6E11 =  w = matrix {{1}}

F6E12 =  P = intersection(HS,v,HP,w)

F6E13 =  vertices P

F7E0 =  P = cyclicPolytope(3,5)

F7E1 =  vertices P

F8E0 =  P1 = convexHull matrix {{1,0,0},{1,1,0}};

F8E1 =  P2 = convexHull matrix {{1,0,0},{0,-1,0}};

F8E2 =  P3 = convexHull matrix {{-1,0,0},{0,1,0}};

F8E3 =  P4 = convexHull matrix {{1,1,0},{0,1,0}};

F8E4 =  P5 = convexHull matrix {{1,2,0},{2,1,0}};

F8E5 =  L = {P1,P2,P3,P4,P5};

F8E6 =  Lpairs = incompPolyhedra L

F8E7 =  Lpairs == {(P1,P4),(P1,P5)}

F9E0 =  P =convexHull matrix {{1},{-1}}

F9E1 =  C = posHull matrix {{1,2},{2,1}}

F9E2 =  Q = P * C

F9E3 =  (vertices Q,rays Q)

F10E0 =  F = normalFan cyclicPolytope(3,5);

F10E1 =  net F

F11E0 =  P = convexHull matrix{{2,1,-1,-2,-1,1},{0,1,1,0,-1,-1}}

F11E1 =  (C,L,M) = minkSummandCone P

F11E2 =  rays C

F11E3 =  apply(values L,vertices)

F11E4 =  M

F12E0 =  P = hypercube 2

F12E1 =  triangulate P

F13E0 =  C = posHull matrix {{1},{2},{0}}

F13E1 =  P = hypercube 3

F13E2 =  Q = C + P

F13E3 =  (vertices Q,rays Q)

F14E0 =  P = convexHull matrix {{1,-1,0,0},{0,0,1,-1}}

F14E1 =  dim P

F15E0 =  C = posHull matrix {{1,0,0},{0,1,0},{0,0,1}}

F15E1 =  v = posHull matrix {{-1},{-1},{-1}}

F15E2 =  F = fan {C,v}

F15E3 =  isPure F

F15E4 =  C1 = posHull{(faces(1,C))#0,v}

F15E5 =  F = addCone(C1,F)

F15E6 =  isPure F

F16E0 =  P = convexHull matrix {{-2,0,2,4},{-8,-2,2,8}}

F16E1 =  A = matrix {{-5,2},{3,-1}}

F16E2 =  v = matrix {{5},{-3}}

F16E3 =  Q = affineImage(A,P,v)

F16E4 =  vertices Q

F17E0 =  P = hypercube 3

F17E1 =  p = matrix {{1},{0},{0}}

F17E2 =  smallestFace(p,P)

F18E0 =  P = cyclicPolytope(3,5)

F18E1 =  L = faces(2,P)

F18E2 =  apply(L,vertices)

F19E0 =  P = convexHull matrix {{3,0,0,0,1},{0,3,0,0,1},{0,0,3,0,1}}

F19E1 =  isSimplicial P

F19E2 =  P = hypercube 2

F19E3 =  isSimplicial P

F19E4 =  C = posHull matrix {{1,0,0,1},{0,1,0,1},{0,0,1,1}}

F19E5 =  isSimplicial C

F19E6 =  C = posHull matrix {{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}}

F19E7 =  isSimplicial C

F19E8 =  F = normalFan hypercube 3

F19E9 =  isSimplicial F

F19E10 =  PC = skeleton(2,polyhedralComplex crossPolytope 3)

F19E11 =  isSimplicial PC

F20E0 =  P = crossPolytope 3

F20E1 =  w =  matrix {{1,2,2,2,2,2,1}}

F20E2 =  L = cellDecompose(P,w)

F20E3 =  apply(L,vertices)

F21E0 =  normalFan crossPolytope 3

F21E1 =  C1 = posHull matrix {{2,2},{1,-1}};

F21E2 =  C2 = posHull matrix {{2,-2},{1,1}};

F21E3 =  C3 = posHull matrix {{-2,-2},{1,-1}};

F21E4 =  C4 = posHull matrix {{-2,2},{-1,-1}};

F21E5 =  F = fan {C1,C2,C3,C4}

F22E0 =  P = cyclicPolytope(3,5)

F22E1 =  p = matrix{{2},{4},{8}}

F22E2 =  q = matrix{{2},{6},{20}}

F22E3 =  inInterior(p,P)

F22E4 =  inInterior(q,P)

F23E0 =  P = crossPolytope 2

F23E1 =  Q = hypercube 2

F23E2 =  mixedVolume {P,Q}

F24E0 =  C1 = posHull matrix {{1,0},{0,1}};

F24E1 =  C2 = posHull matrix {{1,-1},{0,-2}};

F24E2 =  C3 = posHull matrix {{0,-2},{1,-1}};

F24E3 =  C4 = posHull matrix {{-1,-2},{-2,-1}};

F24E4 =  F = fan{C1,C2,C3,C4}

F24E5 =  isPolytopal F

F25E0 =  polyhedralComplex crossPolytope 3

F25E1 =  P1 = convexHull matrix {{2,2,0},{1,-1,0}};

F25E2 =  P2 = convexHull matrix {{2,-2,0},{1,1,0}};

F25E3 =  P3 = convexHull matrix {{-2,-2,0},{1,-1,0}};

F25E4 =  P4 = convexHull matrix {{-2,2,0},{-1,-1,0}};

F25E5 =  F = polyhedralComplex {P1,P2,P3,P4}

F26E0 =  P = cyclicPolytope(3,5)

F26E1 =  vertexEdgeMatrix P

F27E0 =  P = hypercube 2

F27E1 =  C = posHull matrix {{1},{2}}

F27E2 =  Q = P + C

F27E3 =  (vertices Q,rays Q)

F28E0 =  P = emptyPolyhedron 3

F29E0 =  P = hypercube 3

F29E1 =  Q = convexHull matrix{{1,1,1},{1,1,-1},{1,-1,1}}

F29E2 =  isFace(Q,P)

F29E3 =  v = matrix{{1},{-1},{-1}};

F29E4 =  Q = convexHull{Q,v}

F29E5 =  isFace(Q,P)

F30E0 =  C = posHull matrix {{2,1,-1,-3},{1,1,1,1},{0,1,-1,0}}

F30E1 =  M = matrix {{1,0,0},{0,1,0}}

F30E2 =  F = imageFan(M,C)

F30E3 =  rays F

F31E0 =  P = crossPolytope 3

F31E1 =  k = 3

F31E2 =  Q = k * P

F31E3 =  vertices Q

F32E0 =  C = posHull  matrix {{1,-1,0},{1,1,0},{1,1,1}}

F32E1 =  F = fan C

F32E2 =  F1 = smoothSubfan F

F32E3 =  apply(maxCones F1, rays)

F33E0 =  C1 = posHull matrix {{1,0},{0,1}};

F33E1 =  C2 = posHull matrix {{1,-1},{0,-1}};

F33E2 =  C3 = posHull matrix {{1,-1},{2,-1}};

F33E3 =  commonFace(C1,C2)

F33E4 =  commonFace(C2,C3)

F33E5 =  commonFace(C3,C1)

F34E0 =  C = posHull matrix {{1,2,3},{3,1,2},{2,3,1}}

F34E1 =  isSmooth C

F34E2 =  F = hirzebruch 3

F34E3 =  isSmooth F

F35E0 =  P = cyclicPolytope(3,4)

F35E1 =  C = posHull P

F35E2 =  interiorVector C

F36E0 =  C = posHull matrix {{1,2,3},{3,1,2},{2,3,1}}

F36E1 =  A = matrix  {{-5,7,1},{1,-5,7},{7,1,-5}}

F36E2 =  C1 = affinePreimage(A,C)

F36E3 =  rays C1

F37E0 =  F = normalFan hypercube 3

F37E1 =  L = cones(2,F)

F37E2 =  apply(L,rays)

F38E0 =  P = convexHull matrix {{-2,0,2,4},{-8,-2,2,8}}

F38E1 =  A = matrix {{-5,2},{3,-1}}

F38E2 =  v = matrix {{5},{-3}}

F38E3 =  Q = affinePreimage(A,P,v)

F38E4 =  vertices Q

F39E0 =  F = fan {posHull matrix {{1,0},{0,1}},posHull matrix {{0,-1},{1,1}},posHull matrix {{-1,-1},{0,1}},posHull matrix {{-1,1},{0,-1}},posHull matrix {{1,1},{0,-1}}}

F39E1 =  P = polytope F

F40E0 =  M = matrix {{1,2,3},{2,3,1},{3,1,2}}

F40E1 =  C = intersection M

F40E2 =  M = M || matrix {{-1,-1,-1}}

F40E3 =  v = matrix {{1},{2},{3},{4}}

F40E4 =  P = intersection(M,v)

F40E5 =  N = matrix {{1,2,0}}

F40E6 =  w = matrix {{2}}

F40E7 =  Q = intersection (M,v,N,w)

F40E8 =  HC = intersection(matrix {{1,0,0},{-1,0,0},{0,1,0},{0,-1,0},{0,0,1},{0,0,-1}},matrix {{1},{1},{1},{1},{1},{1}})

F40E9 =  C1 = intersection(C,HC)

F40E10 =  Q1 = intersection(P,HC)

F41E0 =  R = QQ[a,b,c]

F41E1 =  I = ideal (a-b,a-c,b-c)

F41E2 =  statePolytope I

F42E0 =  P = crossPolytope(3,2)

F42E1 =  interiorLatticePoints P

F42E2 =  Q = cyclicPolytope(2,4)

F42E3 =  interiorLatticePoints Q

F43E0 =  P = convexHull matrix {{1,1,1,1,2,2,2,2},{0,0,1,1,0,0,1,1},{0,1,0,1,0,1,0,1}};

F43E1 =  PC = polyhedralComplex P

F43E2 =  P = hypercube 3;

F43E3 =  incompPolyhedra(P,PC)

F43E4 =  P1 = convexHull matrix {{1,1,1,1,-1,-1,-1,-1},{0,0,1,1,0,0,1,1},{0,1,0,1,0,1,0,1}};

F43E5 =  P2 = convexHull matrix {{1,1,1,1,-1,-1,-1,-1},{0,1,1,-1,0,1,1,-1},{0,0,-1,-1,0,0,-1,-1}};

F43E6 =  P3 = convexHull matrix {{1,1,1,1,-1,-1,-1,-1},{0,0,-1,-1,0,0,-1,-1},{0,1,1,-1,0,1,1,-1}};

F43E7 =  P == convexHull {P1,P2,P3}

F43E8 =  PC = addPolyhedron({P1,P2,P3},PC)

F44E0 =  P1 = convexHull matrix {{1,0,0},{0,1,0}}

F44E1 =  P2 = convexHull matrix {{-1,0,0},{0,-1,0}}

F44E2 =  P = P1 + P2

F44E3 =  vertices P

F45E0 =  C = posOrthant 4

F45E1 =  faceLattice(1,C)

F45E2 =  R = rays C

F45E3 =  faceLattice C

F46E0 =  C1 = posHull matrix {{1,0},{0,1},{1,1}}

F46E1 =  C2 = posHull matrix {{1,0,1},{0,1,0},{1,1,0}}

F46E2 =  C1 ? C2

F47E0 =  P = hypercube 3

F47E1 =  f = first faces(1,P)

F47E2 =  fv = polarFace f

F47E3 =  vertices fv

F47E4 =  P = hypercube 3

F47E5 =  polarFace P

F48E0 =  convexHull matrix {{1,1,0,0},{1,0,1,0}}

F48E1 =  posHull matrix {{1,2},{2,1}}

F48E2 =  hirzebruch 3

F49E0 =  P = hypercube 2

F49E1 =  F = faceFan P

F49E2 =  apply(maxCones F, rays)

F50E0 =  P = hypercube 3

F50E1 =  Q = convexHull matrix {{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}}

F50E2 =  C = normalCone(P,Q)

F50E3 =  rays C

F51E0 =  PC = skeleton(1,polyhedralComplex hypercube 2)

F51E1 =  L = maxPolyhedra PC

F51E2 =  apply(L,vertices)

F52E0 =  F = hirzebruch 3

F52E1 =  dim F

F53E0 =  P = convexHull transpose matrix {{0,0,0},{1,0,0},{0,1,0},{1,1,3}}

F53E1 =  sublatticeBasis P

F54E0 =  F = hirzebruch 3

F54E1 =  apply(maxCones F,rays)

F55E0 =  P = hypercube 3

F55E1 =  Q = polar P

F55E2 =  Q == crossPolytope 3

F56E0 =  C = posHull matrix {{1,0,0},{0,1,0},{0,0,1}}

F56E1 =  P = coneToPolyhedron C

F56E2 =  P === C

F57E0 =  V = matrix {{0,2,-2,0},{-1,1,1,1}}

F57E1 =  P = convexHull V

F57E2 =  vertices P

F57E3 =  (HS,v) = halfspaces P

F57E4 =  hyperplanes P

F57E5 =  rays P

F57E6 =  linSpace P

F57E7 =  R = matrix {{1},{0},{0}}

F57E8 =  V1 = V || matrix {{1,1,1,1}}

F57E9 =  P1 = convexHull(V1,R)

F57E10 =  vertices P1

F57E11 =  rays P1

F57E12 =  hyperplanes P1

F57E13 =  HS = transpose (V || matrix {{-1,2,0,1}})

F57E14 =  v = matrix {{1},{1},{1},{1}}

F57E15 =  HP = matrix {{1,1,1}}

F57E16 =  w = matrix {{3}}

F57E17 =  P2 = intersection(HS,v,HP,w)

F57E18 =  vertices P2

F57E19 =  P3 = intersection(HS,v)

F57E20 =  vertices P3

F57E21 =  linSpace P3

F57E22 =  P4 = hypercube(3,2)

F57E23 =  vertices P4

F57E24 =  P5 = crossPolytope(3,3)

F57E25 =  vertices P5

F57E26 =  P6 = stdSimplex 2

F57E27 =  vertices P6

F57E28 =  P7 = convexHull(P4,P5)

F57E29 =  vertices P7

F57E30 =  P8 = intersection(P4,P5)

F57E31 =  vertices P8

F57E32 =  P9 = convexHull {(V1,R),P2,P6}

F57E33 =  vertices P9

F57E34 =  Q = convexHull (-V)

F57E35 =  P10 = P + Q

F57E36 =  vertices P10

F57E37 =  (C,L,M) = minkSummandCone P10

F57E38 =  apply(values L, vertices)

F57E39 =  P11 = P * Q

F57E40 =  vertices P11

F57E41 =  ambDim P11

F57E42 =  fVector P11

F57E43 =  L = faces(1,P11)

F57E44 =  apply(L,vertices)

F57E45 =  L = latticePoints P11

F57E46 =  #L

F57E47 =  C = tailCone P1

F57E48 =  rays C

F57E49 =  P12 = polar P11

F57E50 =  vertices P12

F58E0 =  PC = polyhedralComplex crossPolytope 3

F58E1 =  dim PC

F59E0 =  P = crossPolytope 3

F59E1 =  volume P

F60E0 =  P = crossPolytope 3

F60E1 =  w = matrix {{1},{-1},{0}}

F60E2 =  F = maxFace(w,P)

F60E3 =  vertices F

F61E0 =  P = convexHull matrix{{1,0,0},{0,1,0}}

F61E1 =  F = normalFan P

F61E2 =  apply(maxCones F,rays)

F62E0 =  P1 = convexHull matrix {{0,1,-1},{0,-1,-1}}

F62E1 =  P2 = convexHull matrix {{0,1,-1},{0,1,1}}

F62E2 =  Q = minkowskiSum(P1,P2)

F62E3 =  vertices Q

F63E0 =  P = convexHull transpose matrix {{0,0,0},{1,0,0},{0,1,0},{1,1,3}}

F63E1 =  toSublattice P

F64E0 =  R = matrix {{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}}

F64E1 =  F = ccRefinement R

F64E2 =  rays F

F65E0 =  P = hypercube 2

F65E1 =  Q = bipyramid P

F65E2 =  vertices Q

F66E0 =  C1 = posHull matrix {{1,0},{0,1}};

F66E1 =  C2 = posHull matrix {{1,-1},{0,-2}};

F66E2 =  C3 = posHull matrix {{0,-2},{1,-1}};

F66E3 =  F = fan {C1,C2,C3}

F66E4 =  isComplete F

F66E5 =  C4 = posHull matrix {{-1,-2},{-2,-1}};

F66E6 =  F = addCone(C4,F)

F66E7 =  isComplete F

F67E0 =  C1 = posHull matrix {{1,2,3},{2,3,1},{3,1,2}}

F67E1 =  C2 = posHull matrix {{1},{0},{0}}

F67E2 =  C = C1 + C2

F67E3 =  rays C

F68E0 =  P = intersection(matrix{{1,1,1},{0,1,0},{-1,-1,-1},{-1,-1,-1},{0,-1,0},{1,-1,1}},matrix{{2},{1},{2},{2},{1},{2}})

F68E1 =  isCompact P

F69E0 =  C = posHull matrix {{1,2},{2,1}}

F69E1 =  Cv = dualCone C

F69E2 =  rays Cv

F70E0 =  P = cyclicPolytope(3,5)

F70E1 =  vertexFacetMatrix P

F71E0 =  F = normalFan hypercube 2

F71E1 =  r = matrix {{1},{1}}

F71E2 =  F1 = stellarSubdivision(F,r)

F72E0 =  P = hypercube 3

F72E1 =  w = matrix {{1},{2},{0}}

F72E2 =  F = minFace(w,P)

F72E3 =  vertices F

F73E0 =  posHull matrix {{0,0,-1,-1,1},{2,-2,1,-1,0},{1,1,1,1,0}}

F73E1 =  R = matrix{{1,2,3,1},{2,3,1,1},{3,1,2,1}}

F73E2 =  C = posHull R

F73E3 =  rays C

F73E4 =  LS = matrix{{1},{1},{-2}}

F73E5 =  C = posHull(R,LS)

F73E6 =  rays C

F73E7 =  HS = transpose R

F73E8 =  C = intersection HS

F73E9 =  rays C

F73E10 =  HP = transpose LS

F73E11 =  C = intersection(HS,HP)

F73E12 =  rays C

F74E0 =  P = convexHull matrix {{1,-1,0},{0,-1,0}}

F74E1 =  PC = polyhedralComplex P

F74E2 =  P1 = convexHull matrix {{1,0,0},{0,1,0}};

F74E3 =  P2 = convexHull matrix {{0,-1,0},{1,-1,0}};

F74E4 =  PC = polyhedralComplex {PC,P1,P2}

F75E0 =  P = hypercube 3

F75E1 =  vertices P

F76E0 =  P = stdSimplex 3

F76E1 =  Q = affineHull P

F76E2 =  linSpace Q

F77E0 =  P = convexHull(matrix{{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}},matrix {{0},{0},{-1}})

F77E1 =  faceLattice(1,P)

F77E2 =  V = vertices P

F77E3 =  R = rays P

F77E4 =  faceLattice P

F78E0 =  C1 = posHull matrix{{1,0},{1,1}};

F78E1 =  C2 = posHull matrix{{1,0},{0,-1}};

F78E2 =  C3 = posHull matrix{{-1,0},{0,1}};

F78E3 =  C4 = posHull matrix{{1,1},{0,1}};

F78E4 =  C5 = posHull matrix {{1,2},{2,1}};

F78E5 =  L = {C1,C2,C3,C4,C5};

F78E6 =  Lpairs = incompCones L

F78E7 =  Lpairs == {(C1,C4),(C1,C5)}

F79E0 =  P = convexHull matrix {{0,1,0,0,1,0,1,2,0,0},{0,0,1,0,1,0,2,2,0,-1},{0,0,0,1,2,0,1,2,0,-1},{0,0,0,0,-1,1,0,-1,0,1},{0,0,0,0,0,0,-1,-1,1,1}}

F79E1 =  isVeryAmple P

F80E0 =  P1 = convexHull matrix {{1,-1,0,0},{0,0,1,-1}}

F80E1 =  P2 = convexHull matrix {{1},{-1}}

F80E2 =  P = P1 * P2

F80E3 =  vertices P

F81E0 =  C = posHull matrix {{1,-1},{0,-1}}

F81E1 =  F = fan C

F81E2 =  C1 = posHull matrix {{1,0},{0,1}};

F81E3 =  C2 = posHull matrix {{0,-1},{1,-1}};

F81E4 =  F = fan {C,C1,C2}

F82E0 =  PC = polyhedralComplex faces(2,hypercube 3)

F82E1 =  net PC

F83E0 =  P = hypercube 2

F83E1 =  Q = pyramid P

F83E2 =  vertices Q

F84E0 =  C1 = posHull matrix {{1,0},{0,1}};

F84E1 =  C2 = posHull matrix {{1,-1},{0,-1}};

F84E2 =  C3 = posHull matrix {{1,-1},{2,-1}};

F84E3 =  areCompatible(C1,C2)

F84E4 =  areCompatible(C2,C3)

F84E5 =  areCompatible(C3,C1)

F85E0 =  P = convexHull(matrix {{1,-1,2,-2},{1,1,2,2}}, matrix {{0},{1}})

F85E1 =  rays P

F85E2 =  C = posHull P

F85E3 =  rays C

F85E4 =  F = normalFan P

F85E5 =  rays F

F86E0 =  C = intersection(matrix{{1,1,-1},{-1,-1,-1}})

F86E1 =  isPointed C

F86E2 =  C = intersection{C,(matrix{{1,-1,-1}},0)}

F86E3 =  isPointed C

F87E0 =  C1 = posHull matrix {{1,2},{2,1}}

F87E1 =  C2 = posHull matrix {{1}}

F87E2 =  C = C1 * C2

F87E3 =  rays C

F88E0 =  P = convexHull transpose matrix {{0,0,0},{1,0,0},{0,1,0},{1,1,3}}

F88E1 =  ehrhart P

F89E0 =  P = hypercube 1

F89E1 =  Q = hypercube 2

F89E2 =  directProduct(P,Q) == hypercube 3

F90E0 =  P = stdSimplex 2

F90E1 =  hyperplanes P

F90E2 =  C = posHull matrix {{1,2,4},{2,3,5},{3,4,6}}

F90E3 =  hyperplanes C

F91E0 =  R = matrix {{1,1,2,2},{2,3,1,3},{3,2,3,1}};

F91E1 =  V = matrix {{1,-1},{0,0},{0,0}};

F91E2 =  C = posHull R

F91E3 =  halfspaces C

F91E4 =  P = convexHull(V,R)

F91E5 =  halfspaces P

F92E0 =  P = intersection(matrix{{1,0},{0,1},{-1,-1}},matrix{{-1},{1},{-1}})

F92E1 =  isEmpty P

F93E0 =  F = normalFan crossPolytope 3

F93E1 =  L = maxCones F

F93E2 =  apply(L,rays)

F94E0 =  P = crossPolytope 3

F94E1 =  p = matrix {{1},{2},{3}}

F94E2 =  q = proximum(p,P)

F95E0 =  P = convexHull matrix {{1,0,-1},{0,1,-1}}

F95E1 =  isReflexive P

F96E0 =  P = crossPolytope 3

F96E1 =  latticePoints P

F96E2 =  Q = cyclicPolytope(2,4)

F96E3 =  latticePoints Q

F97E0 =  F1 = normalFan hypercube 1

F97E1 =  F2 = normalFan hypercube 2

F97E2 =  F = directProduct(F1,F2)

F97E3 =  F == normalFan hypercube 3

F98E0 =  C = posOrthant 4

F98E1 =  dualFaceLattice(2,C)

F98E2 =  R = halfspaces C

F98E3 =  dualFaceLattice C

F99E0 =  C = posHull matrix {{1,2},{2,1}}

F99E1 =  hilbertBasis C

F100E0 =  P = convexHull matrix{{1,0,0,0},{0,1,0,0},{0,0,1,0}}

F100E1 =  F = normalFan P

F100E2 =  F1 = skeleton(2,F)

F100E3 =  apply(maxCones F1,rays)

F100E4 =  PC = polyhedralComplex hypercube 3

F100E5 =  PC1 = skeleton(2,PC)

F100E6 =  apply(maxPolyhedra PC1,vertices)

F101E0 =  M = matrix {{1,1,1},{0,1,0},{-1,1,-1},{-1,-1,-1},{0,-1,0},{1,-1,1}};

F101E1 =  v = matrix {{2},{1},{2},{2},{1},{2}};

F101E2 =  P = intersection(M,v)

F101E3 =  linSpace P

F101E4 =  C = dualCone intersection M

F101E5 =  linSpace C

F102E0 =  P = hypercube 3

F102E1 =  Q = convexHull matrix {{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}}

F102E2 =  v = objectiveVector(P,Q)

F102E3 =  Q == maxFace(v,P)

F103E0 =  C = posOrthant 3

F103E1 =  rays C

F104E0 =  P = convexHull(matrix{{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}},matrix {{0},{0},{-1}})

F104E1 =  dualFaceLattice(2,P)

F104E2 =  V = halfspaces P

F104E3 =  faceLattice P

F105E0 =  PC = polyhedralComplex hypercube 3

F105E1 =  L = polyhedra(2,PC)

F105E2 =  apply(L,vertices)

F106E0 =  C = posHull matrix {{1,2},{2,1}}

F106E1 =  P =convexHull matrix {{1},{-1}}

F106E2 =  Q = C * P

F106E3 =  (vertices Q,rays Q)

F107E0 =  R = matrix {{1,2},{2,1},{0,0}}

F107E1 =  C = posHull R

F107E2 =  LS = matrix {{0},{0},{1}}

F107E3 =  C1 = posHull (R,LS)

F107E4 =  r = matrix {{0},{1},{2}}

F107E5 =  C2 = posHull {C,r}

F107E6 =  r = posHull r

F107E7 =  C3 = posHull(C,r)

F107E8 =  C3 == C2

F108E0 =  C = posHull matrix {{2,3},{3,2}}

F108E1 =  dim C

F109E0 =  P = convexHull matrix{{1,0},{0,1}}

F109E1 =  ambDim P

F110E0 =  R = matrix {{1,1,2},{2,1,1}}

F110E1 =  C = posHull R

F110E2 =  ambDim C

F110E3 =  rays C

F110E4 =  HS = halfspaces C

F110E5 =  R1 = R || matrix {{0,0,0}}

F110E6 =  LS = matrix {{1},{1},{1}}

F110E7 =  C1 = posHull(R1,LS)

F110E8 =  rays C1

F110E9 =  HS = transpose R1

F110E10 =  HP = matrix {{1,1,1}}

F110E11 =  C2 = intersection(HS,HP)

F110E12 =  rays C2

F110E13 =  C3 = intersection HS

F110E14 =  rays C3

F110E15 =  linSpace C3

F110E16 =  C4 = posOrthant 3

F110E17 =  rays C4

F110E18 =  C5 = intersection(C1,C2)

F110E19 =  rays C5

F110E20 =  C6 = posHull(C1,C2)

F110E21 =  rays C6

F110E22 =  linSpace C6

F110E23 =  R2 = matrix {{2,-1},{-1,2},{-1,-1}}

F110E24 =  C7 = posHull {R2,C3,C4}

F110E25 =  rays C7

F110E26 =  linSpace C7

F110E27 =  C6 == C1 + C2

F110E28 =  P = crossPolytope 3

F110E29 =  P1 = C6 + P

F110E30 =  (vertices P1,rays P1)

F110E31 =  C8 = C * C1

F110E32 =  rays C8

F110E33 =  linSpace C8

F110E34 =  ambDim C8

F110E35 =  fVector C8

F110E36 =  L = faces(1,C8)

F110E37 =  apply(L,rays)

F110E38 =  isSmooth C8

F110E39 =  L = hilbertBasis C8

F110E40 =  #L

F110E41 =  C9 = dualCone C8

F110E42 =  rays C9

F111E0 =  P = crossPolytope 2

F111E1 =  Q = secondaryPolytope P

F111E2 =  vertices Q

F112E0 =  C = posHull matrix {{1,0,0},{0,1,1},{0,0,1}};

F112E1 =  F = fan C

F112E2 =  C = posHull matrix {{-1,0,0},{0,1,0},{0,0,1}};

F112E3 =  incompCones(C,F)

F112E4 =  C1 = intersection {C, (matrix {{0,1,-1}}, matrix {{0}})};

F112E5 =  C2 = intersection {C, (matrix {{0,-1,1}}, matrix {{0}})};

F112E6 =  F = addCone({C1,C2},F)

F113E0 =  P = intersection(matrix{{-1,0},{1,0},{0,-1},{-1,-1},{1,-1}},matrix{{2},{2},{-1},{0},{0}}) 

F113E1 =  C = tailCone P

F113E2 =  rays C

F114E0 =  C = posHull matrix {{1,2,3},{3,1,2},{2,3,1}}

F114E1 =  A = matrix  {{-5,7,1},{1,-5,7},{7,1,-5}}

F114E2 =  C1 = affineImage(A,C)

F114E3 =  rays C1

F115E0 =  P = cyclicPolytope(3,5)

F115E1 =  fVector P

F116E0 =  R = QQ[a,b,c]

F116E1 =  f = (a-b)*(a-c)*(b-c)

F116E2 =  P = newtonPolytope f

F117E0 =  C = posHull matrix {{1,0,0},{0,1,0},{0,0,1}}

F117E1 =  F = fan C

F117E2 =  maxCones F

F117E3 =  C1 = posHull matrix {{1,0,0},{1,1,0},{0,0,-1}}

F117E4 =  commonFace(C,C1)

F117E5 =  (b,C2) = areCompatible(C,C1)

F117E6 =  rays C2

F117E7 =  C1 = posHull matrix {{1,0,0},{0,1,0},{0,0,-1}}

F117E8 =  F = addCone(C1,F)

F117E9 =  C2 = posHull matrix {{-1,0,0},{0,1,0},{0,0,1}};

F117E10 =  C3 = posHull matrix {{-1,0,0},{0,1,0},{0,0,-1}};

F117E11 =  C4 = posHull matrix {{-1,0,0},{0,-1,0},{0,0,1}};

F117E12 =  C5 = posHull matrix {{-1,0,0},{0,-1,0},{0,0,-1}};

F117E13 =  F1 = fan {C2,C3,C4,C5}

F117E14 =  C6 = posHull matrix {{1,0,0},{0,-1,0},{0,0,1}};

F117E15 =  C7 = posHull matrix {{1,0,0},{0,-1,0},{0,0,-1}};

F117E16 =  F1 = addCone( {C6,C7}, F1)

F117E17 =  F1 = addCone(F,F1)

F117E18 =  P = hypercube 4

F117E19 =  F2 = normalFan P

F117E20 =  F3 = fan {posHull matrix {{1}},posHull matrix {{-1}}}

F117E21 =  F1 = F3 * F1

F117E22 =  ambDim F1

F117E23 =  F1 == F2

F118E0 =  P = intersection(matrix{{2,0},{0,-3},{-3,0},{0,2}},matrix{{1},{1},{1},{1}})

F118E1 =  isLatticePolytope P

F118E2 =  P = intersection(matrix{{2,0},{0,-3},{-3,0},{0,2}},matrix{{4},{6},{3},{6}})

F118E3 =  isLatticePolytope P

F119E0 =  P = cyclicPolytope(4,6);

F119E1 =  net P

F120E0 =  P = stdSimplex 2

F120E1 =  vertices P

F121E0 =  P = hypercube 3

F121E1 =  Q = crossPolytope 3

F121E2 =  contains(Q,P)

F121E3 =  contains(P,Q)

F121E4 =  C = posHull matrix {{1,0,0},{0,1,0},{0,0,1}};

F121E5 =  contains(C,P)

F121E6 =  P = affineImage(P,matrix{{1},{1},{1}})

F121E7 =  contains(C,P)

F122E0 =  C1 = posHull matrix {{1,1,-1,-1},{1,-1,1,-1},{1,1,1,1}};

F122E1 =  C2 = posHull matrix {{1,1,1},{0,1,-1},{-1,1,1}};

F122E2 =  C3 = posHull matrix {{-1,-1,-1},{0,1,-1},{-1,1,1}};

F122E3 =  C4 = posHull matrix {{1,-1},{0,0},{-1,-1}};

F122E4 =  F = fan {C1,C2,C3,C4}

F122E5 =  isComplete F

F122E6 =  isPure F

F122E7 =  C5 = posHull matrix {{1,-1,1,-1},{-1,-1,0,0},{1,1,-1,-1}};

F122E8 =  C6 = posHull matrix {{1,-1,1,-1},{1,1,0,0},{1,1,-1,-1}};

F122E9 =  F = addCone({C5,C6},F)

F122E10 =  isComplete F

F122E11 =  isPolytopal F

F123E0 =  P = convexHull transpose matrix {{0,0,0},{1,0,0},{0,1,0},{1,1,3}}

F123E1 =  isNormal P

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F0E7", "F0E8", "F0E9", "F0E10", "F1E0", "F1E1", "F2E0", "F2E1", "F3E0", "F3E1", "F3E2", "F3E3", "F4E0", "F4E1", "F4E2", "F4E3", "F5E0", "F5E1", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F6E9", "F6E10", "F6E11", "F6E12", "F6E13", "F7E0", "F7E1", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F9E0", "F9E1", "F9E2", "F9E3", "F10E0", "F10E1", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F12E0", "F12E1", "F13E0", "F13E1", "F13E2", "F13E3", "F14E0", "F14E1", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F15E6", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F17E0", "F17E1", "F17E2", "F18E0", "F18E1", "F18E2", "F19E0", "F19E1", "F19E2", "F19E3", "F19E4", "F19E5", "F19E6", "F19E7", "F19E8", "F19E9", "F19E10", "F19E11", "F20E0", "F20E1", "F20E2", "F20E3", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F21E5", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F23E0", "F23E1", "F23E2", "F24E0", "F24E1", "F24E2", "F24E3", "F24E4", "F24E5", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F25E5", "F26E0", "F26E1", "F27E0", "F27E1", "F27E2", "F27E3", "F28E0", "F29E0", "F29E1", "F29E2", "F29E3", "F29E4", "F29E5", "F30E0", "F30E1", "F30E2", "F30E3", "F31E0", "F31E1", "F31E2", "F31E3", "F32E0", "F32E1", "F32E2", "F32E3", "F33E0", "F33E1", "F33E2", "F33E3", "F33E4", "F33E5", "F34E0", "F34E1", "F34E2", "F34E3", "F35E0", "F35E1", "F35E2", "F36E0", "F36E1", "F36E2", "F36E3", "F37E0", "F37E1", "F37E2", "F38E0", "F38E1", "F38E2", "F38E3", "F38E4", "F39E0", "F39E1", "F40E0", "F40E1", "F40E2", "F40E3", "F40E4", "F40E5", "F40E6", "F40E7", "F40E8", "F40E9", "F40E10", "F41E0", "F41E1", "F41E2", "F42E0", "F42E1", "F42E2", "F42E3", "F43E0", "F43E1", "F43E2", "F43E3", "F43E4", "F43E5", "F43E6", "F43E7", "F43E8", "F44E0", "F44E1", "F44E2", "F44E3", "F45E0", "F45E1", "F45E2", "F45E3", "F46E0", "F46E1", "F46E2", "F47E0", "F47E1", "F47E2", "F47E3", "F47E4", "F47E5", "F48E0", "F48E1", "F48E2", "F49E0", "F49E1", "F49E2", "F50E0", "F50E1", "F50E2", "F50E3", "F51E0", "F51E1", "F51E2", "F52E0", "F52E1", "F53E0", "F53E1", "F54E0", "F54E1", "F55E0", "F55E1", "F55E2", "F56E0", "F56E1", "F56E2", "F57E0", "F57E1", "F57E2", "F57E3", "F57E4", "F57E5", "F57E6", "F57E7", "F57E8", "F57E9", "F57E10", "F57E11", "F57E12", "F57E13", "F57E14", "F57E15", "F57E16", "F57E17", "F57E18", "F57E19", "F57E20", "F57E21", "F57E22", "F57E23", "F57E24", "F57E25", "F57E26", "F57E27", "F57E28", "F57E29", "F57E30", "F57E31", "F57E32", "F57E33", "F57E34", "F57E35", "F57E36", "F57E37", "F57E38", "F57E39", "F57E40", "F57E41", "F57E42", "F57E43", "F57E44", "F57E45", "F57E46", "F57E47", "F57E48", "F57E49", "F57E50", "F58E0", "F58E1", "F59E0", "F59E1", "F60E0", "F60E1", "F60E2", "F60E3", "F61E0", "F61E1", "F61E2", "F62E0", "F62E1", "F62E2", "F62E3", "F63E0", "F63E1", "F64E0", "F64E1", "F64E2", "F65E0", "F65E1", "F65E2", "F66E0", "F66E1", "F66E2", "F66E3", "F66E4", "F66E5", "F66E6", "F66E7", "F67E0", "F67E1", "F67E2", "F67E3", "F68E0", "F68E1", "F69E0", "F69E1", "F69E2", "F70E0", "F70E1", "F71E0", "F71E1", "F71E2", "F72E0", "F72E1", "F72E2", "F72E3", "F73E0", "F73E1", "F73E2", "F73E3", "F73E4", "F73E5", "F73E6", "F73E7", "F73E8", "F73E9", "F73E10", "F73E11", "F73E12", "F74E0", "F74E1", "F74E2", "F74E3", "F74E4", "F75E0", "F75E1", "F76E0", "F76E1", "F76E2", "F77E0", "F77E1", "F77E2", "F77E3", "F77E4", "F78E0", "F78E1", "F78E2", "F78E3", "F78E4", "F78E5", "F78E6", "F78E7", "F79E0", "F79E1", "F80E0", "F80E1", "F80E2", "F80E3", "F81E0", "F81E1", "F81E2", "F81E3", "F81E4", "F82E0", "F82E1", "F83E0", "F83E1", "F83E2", "F84E0", "F84E1", "F84E2", "F84E3", "F84E4", "F84E5", "F85E0", "F85E1", "F85E2", "F85E3", "F85E4", "F85E5", "F86E0", "F86E1", "F86E2", "F86E3", "F87E0", "F87E1", "F87E2", "F87E3", "F88E0", "F88E1", "F89E0", "F89E1", "F89E2", "F90E0", "F90E1", "F90E2", "F90E3", "F91E0", "F91E1", "F91E2", "F91E3", "F91E4", "F91E5", "F92E0", "F92E1", "F93E0", "F93E1", "F93E2", "F94E0", "F94E1", "F94E2", "F95E0", "F95E1", "F96E0", "F96E1", "F96E2", "F96E3", "F97E0", "F97E1", "F97E2", "F97E3", "F98E0", "F98E1", "F98E2", "F98E3", "F99E0", "F99E1", "F100E0", "F100E1", "F100E2", "F100E3", "F100E4", "F100E5", "F100E6", "F101E0", "F101E1", "F101E2", "F101E3", "F101E4", "F101E5", "F102E0", "F102E1", "F102E2", "F102E3", "F103E0", "F103E1", "F104E0", "F104E1", "F104E2", "F104E3", "F105E0", "F105E1", "F105E2", "F106E0", "F106E1", "F106E2", "F106E3", "F107E0", "F107E1", "F107E2", "F107E3", "F107E4", "F107E5", "F107E6", "F107E7", "F107E8", "F108E0", "F108E1", "F109E0", "F109E1", "F110E0", "F110E1", "F110E2", "F110E3", "F110E4", "F110E5", "F110E6", "F110E7", "F110E8", "F110E9", "F110E10", "F110E11", "F110E12", "F110E13", "F110E14", "F110E15", "F110E16", "F110E17", "F110E18", "F110E19", "F110E20", "F110E21", "F110E22", "F110E23", "F110E24", "F110E25", "F110E26", "F110E27", "F110E28", "F110E29", "F110E30", "F110E31", "F110E32", "F110E33", "F110E34", "F110E35", "F110E36", "F110E37", "F110E38", "F110E39", "F110E40", "F110E41", "F110E42", "F111E0", "F111E1", "F111E2", "F112E0", "F112E1", "F112E2", "F112E3", "F112E4", "F112E5", "F112E6", "F113E0", "F113E1", "F113E2", "F114E0", "F114E1", "F114E2", "F114E3", "F115E0", "F115E1", "F116E0", "F116E1", "F116E2", "F117E0", "F117E1", "F117E2", "F117E3", "F117E4", "F117E5", "F117E6", "F117E7", "F117E8", "F117E9", "F117E10", "F117E11", "F117E12", "F117E13", "F117E14", "F117E15", "F117E16", "F117E17", "F117E18", "F117E19", "F117E20", "F117E21", "F117E22", "F117E23", "F118E0", "F118E1", "F118E2", "F118E3", "F119E0", "F119E1", "F120E0", "F120E1", "F121E0", "F121E1", "F121E2", "F121E3", "F121E4", "F121E5", "F121E6", "F121E7", "F122E0", "F122E1", "F122E2", "F122E3", "F122E4", "F122E5", "F122E6", "F122E7", "F122E8", "F122E9", "F122E10", "F122E11", "F123E0", "F123E1"}
