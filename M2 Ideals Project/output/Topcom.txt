needsPackage "Topcom"

F0E0 =  A = matrix {

         {0, -1, 2, 3, 4, -5, 6},

         {0, 1, -4, 9, 16, 25, 36},

         {0, 1, 8, -27, 64, 125, -216}}

F0E1 =  om = chirotopeString A

F0E2 =  om == naiveChirotopeString A

F0E3 =  orientedCircuits om

F0E4 =  orientedCocircuits om

F1E0 =  A = transpose matrix {{0,3},{0,1},{-1,-1},{1,-1},{-4,-2},{4,-2}}

F1E1 =  topcomNumTriangulations A == 16

F1E2 =  topcomNumTriangulations A == # topcomAllTriangulations A

F1E3 =  topcomNumTriangulations(A, RegularOnly => false)

F1E4 =  assert(topcomNumTriangulations(A, RegularOnly => false) == 18)

F1E5 =  assert(topcomNumTriangulations(A, RegularOnly => false) == # topcomAllTriangulations(A, RegularOnly => false))

F2E0 =  A = transpose matrix {

         {-1, -1, -1, 0}, {-1, -1, 0, -1}, {-1, -1, 0, 0}, {-1, 0, -1, -1},

         {-1, 0, -1, 2}, {-1, 0, 0, -1}, {0, -1, 1, -1}, {1, 1, -1, 2},

         {1, 1, 1, -1}, {-1, 0, -1, 0}, {-1, 0, -1, 1}, {0, 0, -1, 1}, {0,0,0,0}}

F2E1 =  tri1 = topcomRegularFineTriangulation A

F2E2 =  topcomFlips(A, tri1)

F3E0 =  A = transpose matrix {{0,3},{0,1},{-1,-1},{1,-1},{-4,-2},{4,-2}}

F3E1 =  Ts = topcomAllTriangulations A;

F3E2 =  #Ts == 16

F3E3 =  netList Ts

F3E4 =  tri = Ts#0

F3E5 =  topcomIsTriangulation(A, tri)

F3E6 =  topcomIsRegularTriangulation(A, tri)

F3E7 =  topcomRegularTriangulationWeights(A, tri)

F3E8 =  tally for tri in Ts list sort unique flatten tri

F3E9 =  options topcomAllTriangulations

F3E10 =  Ts = topcomAllTriangulations(A, Fine => true);

F3E11 =  #Ts == 6

F3E12 =  T1s = topcomAllTriangulations(A, RegularOnly => true)

F3E13 =  T2s = topcomAllTriangulations(A, RegularOnly => false)

F3E14 =  #T1s

F3E15 =  #T2s

F3E16 =  T3s = topcomAllTriangulations(A, RegularOnly => false, ConnectedToRegular => false)

F3E17 =  #T3s

F3E18 =  netList Ts

F3E19 =  for tri in Ts list topcomIsTriangulation(A, tri)

F3E20 =  for tri in Ts list topcomIsRegularTriangulation(A, tri)

F3E21 =  for tri in Ts list topcomRegularTriangulationWeights(A, tri)

F4E0 =  A = matrix {

         {0, -1, 2, 3, 4, -5, 6},

         {0, 1, -4, 9, 16, 25, 36},

         {0, 1, 8, -27, 64, 125, -216}}

F4E1 =  Ts = topcomAllTriangulations A;

F4E2 =  #Ts == 25

F4E3 =  netList Ts

F4E4 =  Ts/(tri -> topcomIsRegularTriangulation(A, tri))

F4E5 =  weights = topcomRegularTriangulationWeights(A, Ts#0)

F4E6 =  needsPackage "Polyhedra"

F4E7 =  Ts#0

F4E8 =  tri0 = regularSubdivision(A, matrix{weights})

F4E9 =  tri0 = tri0//sort/sort

F4E10 =  assert(tri0 == Ts#0)

F5E0 =  A = matrix {{0, 1, 2, 3, 4, 5, 6}, {0, 1, 4, 9, 16, 25, 36}, {0, 1, 8, 27, 64, 125, 216}}

F5E1 =  tri = topcomRegularFineTriangulation A

F5E2 =  assert topcomIsTriangulation(A, tri)

F5E3 =  assert topcomIsRegularTriangulation(A, tri)

F5E4 =  topcomRegularTriangulationWeights(A, tri)

F6E0 =  A = matrix {

         {0, -1, 2, 3, 4, -5, 6},

         {0, 1, -4, 9, 16, 25, 36},

         {0, 1, 8, -27, 64, 125, -216}}

F6E1 =  om = naiveChirotopeString A

F6E2 =  netList orientedCircuits om

F6E3 =  Ahomog = A || matrix{{7:1}}

F6E4 =  Ahomog_{0,3,2,5,6}

F6E5 =  syz oo

F7E0 =  sq = transpose matrix {{-1,-1},{-1,1},{1,-1},{1,1},{0,0},{1,0},{-1,0},{0,1},{0,-1}}

F7E1 =  tri = topcomRegularFineTriangulation sq

F7E2 =  topcomIsTriangulation(sq, tri)

F7E3 =  topcomIsRegularTriangulation(sq, tri)

F7E4 =  topcomRegularTriangulationWeights(sq, tri)

F7E5 =  topcomNumTriangulations sq

F7E6 =  topcomNumTriangulations(sq, Fine => true)

F7E7 =  Ts = topcomAllTriangulations(sq, Fine => true);

F7E8 =  netList Ts

F7E9 =  A1 = transpose matrix{{1,1,0},{1,0,1},{0,1,1}}

F7E10 =  topcomRegularFineTriangulation(A1, Homogenize => false)

F7E11 =  topcomRegularFineTriangulation(A1, Homogenize => true)

F7E12 =  sqh = transpose matrix {{-1,-1,1},{-1,1,1},{1,-1,1},{1,1,1},{0,0,1},{1,0,1},{-1,0,1},{0,1,1},{0,-1,1}}

F7E13 =  tri = topcomRegularFineTriangulation sqh -- none found!

F7E14 =  tri = topcomRegularFineTriangulation(sqh, Homogenize => false)

F7E15 =  topcomNumTriangulations(sqh, Homogenize => false)

F7E16 =  # topcomAllTriangulations(sqh, Homogenize => false)

F7E17 =  topcomIsTriangulation(sq, tri)

F7E18 =  topcomIsRegularTriangulation(sq, tri)

F7E19 =  topcomRegularTriangulationWeights(sq, tri)

F7E20 =  topcomNumTriangulations sq

F7E21 =  topcomNumTriangulations(sq, Fine => true)

F7E22 =  Ts = topcomAllTriangulations(sq, Fine => true);

F7E23 =  netList Ts

F8E0 =  A = matrix {

         {0, -1, 2, 3, 4, -5, 6},

         {0, 1, -4, 9, 16, 25, 36},

         {0, 1, 8, -27, 64, 125, -216}}

F8E1 =  om = naiveChirotopeString A

F8E2 =  om == chirotopeString A

F9E0 =  A = transpose matrix {{0,3},{0,1},{-1,-1},{1,-1},{-4,-2},{4,-2}}

F9E1 =  tri = {{0,1,2}, {1,3,5}, {2,3,4}, {0,1,5},

         {0,2,4}, {3,4,5}, {1,2,3}}

F9E2 =  topcomIsRegularTriangulation(A,tri)

F9E3 =  assert not topcomIsRegularTriangulation(A,tri)

F9E4 =  assert topcomIsTriangulation(A, tri)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F2E0", "F2E1", "F2E2", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F3E10", "F3E11", "F3E12", "F3E13", "F3E14", "F3E15", "F3E16", "F3E17", "F3E18", "F3E19", "F3E20", "F3E21", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F4E7", "F4E8", "F4E9", "F4E10", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F7E6", "F7E7", "F7E8", "F7E9", "F7E10", "F7E11", "F7E12", "F7E13", "F7E14", "F7E15", "F7E16", "F7E17", "F7E18", "F7E19", "F7E20", "F7E21", "F7E22", "F7E23", "F8E0", "F8E1", "F8E2", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4"}
