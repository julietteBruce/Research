needsPackage "SparseResultants"

F0E0 =  R = denseResultant(2,2,1);

F0E1 =  M = exponents R

F0E2 =  assert(R === sparseResultant M)

F1E0 =  M = genericMultidimensionalMatrix {4,3,2}

F1E1 =  reverseShape M

F1E2 =  assert(M === reverseShape reverseShape M)

F2E0 =  time Res = sparseResultant(matrix{{0,1,1,2},{0,0,1,1}},matrix{{0,1,2,2},{1,0,1,2}},matrix{{0,0,1,1},{0,1,0,1}})

F2E1 =  QQ[c_(1,1)..c_(3,4)][x,y];

F2E2 =  (f,g,h) = (c_(1,1)+c_(1,2)*x*y+c_(1,3)*x^2*y+c_(1,4)*x, c_(2,1)*y+c_(2,2)*x^2*y^2+c_(2,3)*x^2*y+c_(2,4)*x, c_(3,1)+c_(3,2)*y+c_(3,3)*x*y+c_(3,4)*x)

F2E3 =  time Res(f,g,h)

F2E4 =  assert(Res(f,g,h) == sparseResultant(f,g,h))

F2E5 =  time Res = sparseResultant(matrix{{0,0,1,1},{0,1,0,1}},CoefficientRing=>ZZ/3331);

F2E6 =  ZZ/3331[a_0..a_3,b_0..b_3,c_0..c_3][x,y];

F2E7 =  (f,g,h) = (a_0 + a_1*x + a_2*y + a_3*x*y, b_0 + b_1*x + b_2*y + b_3*x*y, c_0 + c_1*x + c_2*y + c_3*x*y)

F2E8 =  time Res(f,g,h)

F2E9 =  assert(Res(f,g,h) == sparseResultant(f,g,h))

F2E10 =  (f,g,h) = genericLaurentPolynomials(1,2,2)

F2E11 =  time (MixedRes,UnmixedRes) = (sparseResultant(f,g,h),sparseResultant(f,g,h,Unmixed=>true));

F2E12 =  quotientRemainder(UnmixedRes,MixedRes)

F2E13 =  assert((denseResultant(2,2,2))(f,g,h) == UnmixedRes and (denseResultant(1,2,2))(f,g,h) == MixedRes)

F3E0 =  M = randomMultidimensionalMatrix(2,4,3,2,MaximalRank=>2)

F3E1 =  rank M

F3E2 =  M' = randomMultidimensionalMatrix(2,4,2,1,3,CoefficientRing=>ZZ/65521,MaximalRank=>4)

F3E3 =  rank M'

F4E0 =  R = denseResultant(2,3);

F4E1 =  f = genericLaurentPolynomials(2,3)

F4E2 =  R(f)

F5E0 =  QQ[x,y,z];

F5E1 =  f = (x^2 - 7 + x*y*z^11 + y, -3*y^7*z + x^3*y + 5*x^2);

F5E2 =  exponentsMatrix(f_0)

F5E3 =  exponentsMatrix(f_0,f_1)

F5E4 =  exponentsMatrix(f_0,f_1,Unmixed=>true)

F6E0 =  (d,n) := (2,3);

F6E1 =  time Disc = denseDiscriminant(d,n)

F6E2 =  f = first genericLaurentPolynomials prepend(d,n:0)

F6E3 =  assert(Disc(f) == denseDiscriminant(f))

F7E0 =  M = multidimensionalMatrix {{{1, 7}, {3, 6}, {1, 6}}, {{3, 5}, {4, 4}, {8, 0}}}

F7E1 =  N = multidimensionalMatrix {{{1, 7}, {6, 5}, {5, 5}}, {{4, 3}, {3, 8}, {4, 1}}}

F7E2 =  M - N

F7E3 =  -M

F8E0 =  M = randomMultidimensionalMatrix(2,2,2,2)

F8E1 =  time det M

F8E2 =  M = randomMultidimensionalMatrix(2,2,2,2,5)

F8E3 =  time det M

F9E0 =  genericSkewMultidimensionalMatrix(3,4)

F9E1 =  genericSkewMultidimensionalMatrix(3,4,CoefficientRing=>ZZ/101)

F9E2 =  genericSkewMultidimensionalMatrix(3,4,CoefficientRing=>ZZ/101,Variable=>"b")

F10E0 =  f = genericMultihomogeneousPolynomial((2,3,2),(1,1,1))

F10E1 =  time sparseDiscriminant f

F10E2 =  A = exponentsMatrix f

F10E3 =  Disc = sparseDiscriminant A

F10E4 =  assert(Disc f == sparseDiscriminant f)

F11E0 =  D = denseDiscriminant(2,2,CoefficientRing=>ZZ/331);

F11E1 =  char D

F11E2 =  char denseDiscriminant(2,2)

F12E0 =  genericMultihomogeneousPolynomial((2,2,3),(1,1,1))

F12E1 =  genericMultihomogeneousPolynomial((2,3),(3,1))

F12E2 =  genericMultihomogeneousPolynomial((2,2),(1,1),CoefficientRing=>ZZ/33331)

F13E0 =  D = denseDiscriminant(2,2);

F13E1 =  QQ[a..f][x,y]; F = a*x^2+b*x*y+c*y^2+d*x+e*y+f

F13E2 =  D(F)

F14E0 =  M = randomMultidimensionalMatrix {3,3}

F14E1 =  entries M

F14E2 =  M = randomMultidimensionalMatrix {2,2,3}

F14E3 =  entries M

F15E0 =  M = randomMultidimensionalMatrix(2,4,3,2)

F15E1 =  s = {0,2};

F15E2 =  Ms = flattening(s,M)

F15E3 =  s' = {1,3};

F15E4 =  Ms' = flattening(s',M)

F15E5 =  assert(Ms == transpose Ms')

F15E6 =  flattening(1,M)

F15E7 =  assert(oo == flattening({1},M))

F16E0 =  M = multidimensionalMatrix {{{3, 8}, {3, 6}}, {{5, 1}, {4, 2}}}

F16E1 =  ring M

F16E2 =  M = multidimensionalMatrix {{{7, 2/3}, {1/7, 3}}, {{5/8, 8/9}, {1/3, 5}}}

F16E3 =  ring M

F17E0 =  M = multidimensionalMatrix {{7, 6}, {9, 3}, {1, 7}}

F17E1 =  N = multidimensionalMatrix {{7, 6}, {9, 4}, {1, 7}}

F17E2 =  N' = multidimensionalMatrix {{7, 6}, {9, 3}, {1, 7}}

F17E3 =  M == N

F17E4 =  M == N'

F17E5 =  M - N' == 0

F18E0 =  M = genericMultidimensionalMatrix {4,1,3,2}

F18E1 =  sortShape M

F18E2 =  assert(sortShape M === permute(M,{1,3,2,0}))

F19E0 =  genericSymmetricMultidimensionalMatrix(3,2)

F19E1 =  genericSymmetricMultidimensionalMatrix(3,2,CoefficientRing=>ZZ/101)

F19E2 =  genericSymmetricMultidimensionalMatrix(3,2,CoefficientRing=>ZZ/101,Variable=>"b")

F20E0 =  randomMultidimensionalMatrix(2,4,3)

F20E1 =  randomMultidimensionalMatrix((2,2,3),CoefficientRing=>ZZ/101)

F21E0 =  (f0,f1,f2) = genericLaurentPolynomials(1,2,2)

F21E1 =  time denseResultant(f0,f1,f2); -- using Poisson formula

F21E2 =  time denseResultant(f0,f1,f2,Algorithm=>"Macaulay"); -- using Macaulay formula

F21E3 =  time (denseResultant(1,2,2)) (f0,f1,f2); -- using sparseResultant

F21E4 =  assert(o2 == o3 and o3 == o4)

F22E0 =  M = multidimensionalMatrix {{{0, 8, 3}, {7, 3, 2}, {2, 7, 0}, {4, 8, 4}}, {{0, 8, 1}, {3, 1, 0}, {4, 7, 4}, {0, 6, 9}}}

F22E1 =  shape M

F23E0 =  M = multidimensionalMatrix {{{0, 8, 3}, {7, 3, 2}, {2, 7, 0}, {4, 8, 4}}, {{0, 8, 1}, {3, 1, 0}, {4, 7, 4}, {0, 6, 9}}}

F23E1 =  dim M

F24E0 =  M = multidimensionalMatrix {{{1, 7}, {3, 6}, {1, 6}}, {{3, 5}, {4, 4}, {8, 0}}}

F24E1 =  2 * M

F24E2 =  (3/2) * M

F25E0 =  M = multidimensionalMatrix {{{1, 7}, {3, 6}, {1, 6}}, {{3, 5}, {4, 4}, {8, 0}}}

F25E1 =  N = multidimensionalMatrix {{{1, 7}, {6, 5}, {5, 5}}, {{4, 3}, {3, 8}, {4, 1}}}

F25E2 =  M + N

F26E0 =  M = genericMultidimensionalMatrix {2,3,2}

F26E1 =  M_(1,2,0)

F27E0 =  R = ZZ[x_1..x_3,y_1..y_4,z_1..z_2,Degrees=>{3:{1,0,0},4:{0,1,0},2:{0,0,1}}];

F27E1 =  F = random({1,1,1},R)

F27E2 =  M = multidimensionalMatrix F

F27E3 =  F' = M!

F27E4 =  assert(M === multidimensionalMatrix F')

F27E5 =  assert(sub(F',vars ring F) === F)

F28E0 =  M = genericMultidimensionalMatrix {4,3,2}

F28E1 =  permute(M,{1,0,2})

F28E2 =  permute(M,{2,0,1})

F29E0 =  D = denseDiscriminant(2,2);

F29E1 =  M = exponents D

F29E2 =  assert(D === sparseDiscriminant M)

F30E0 =  R = denseResultant(2,2,1,CoefficientRing=>ZZ/331);

F30E1 =  char R

F30E2 =  char denseResultant(2,2,1)

F31E0 =  multidimensionalMatrix {{0, 5}, {9, 3}, {7, 2}}

F31E1 =  multidimensionalMatrix {{{1, 0}, {4, 3}}, {{3, 1}, {5, 9}}}

F31E2 =  multidimensionalMatrix {{{7/3, 8, 0}, {6, 8, 3}}, {{3, 8, 2}, {9, 2, 4}}, {{0, 2, 9}, {1, 9, 5}}, {{2, 8, 4}, {9, 7, 7}}}

F32E0 =  M = randomMultidimensionalMatrix {4,3}

F32E1 =  N = randomMultidimensionalMatrix {3,2}

F32E2 =  M * N

F32E3 =  N' = randomMultidimensionalMatrix {3,2,4}

F32E4 =  M * N'

F33E0 =  genericMultidimensionalMatrix(2,4,3)

F33E1 =  genericMultidimensionalMatrix((2,2,3),CoefficientRing=>ZZ/101)

F33E2 =  genericMultidimensionalMatrix((2,1,3),CoefficientRing=>ZZ/101,Variable=>"b")

F34E0 =  n = {2,3,2}

F34E1 =  time degreeDeterminant n

F34E2 =  M = genericMultidimensionalMatrix n;

F34E3 =  time degree determinant M

F35E0 =  M = randomMultidimensionalMatrix {4,2,3}

F35E1 =  S = sylvesterMatrix M

F35E2 =  det M

F35E3 =  det S

F35E4 =  assert(oo == ooo or oo == -ooo)

F36E0 =  M = (matrix{{2,3,4,5},{0,2,1,0}},matrix{{1,-1,0,2,3},{-2,0,-7,-1,0}},matrix{{-1,0,6},{-2,1,3}})

F36E1 =  genericLaurentPolynomials M

F36E2 =  genericLaurentPolynomials (2,3,1)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F1E0", "F1E1", "F1E2", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F2E10", "F2E11", "F2E12", "F2E13", "F3E0", "F3E1", "F3E2", "F3E3", "F4E0", "F4E1", "F4E2", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F6E0", "F6E1", "F6E2", "F6E3", "F7E0", "F7E1", "F7E2", "F7E3", "F8E0", "F8E1", "F8E2", "F8E3", "F9E0", "F9E1", "F9E2", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F11E0", "F11E1", "F11E2", "F12E0", "F12E1", "F12E2", "F13E0", "F13E1", "F13E2", "F14E0", "F14E1", "F14E2", "F14E3", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F15E6", "F15E7", "F16E0", "F16E1", "F16E2", "F16E3", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F18E0", "F18E1", "F18E2", "F19E0", "F19E1", "F19E2", "F20E0", "F20E1", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F22E0", "F22E1", "F23E0", "F23E1", "F24E0", "F24E1", "F24E2", "F25E0", "F25E1", "F25E2", "F26E0", "F26E1", "F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F27E5", "F28E0", "F28E1", "F28E2", "F29E0", "F29E1", "F29E2", "F30E0", "F30E1", "F30E2", "F31E0", "F31E1", "F31E2", "F32E0", "F32E1", "F32E2", "F32E3", "F32E4", "F33E0", "F33E1", "F33E2", "F34E0", "F34E1", "F34E2", "F34E3", "F35E0", "F35E1", "F35E2", "F35E3", "F35E4", "F36E0", "F36E1", "F36E2"}
