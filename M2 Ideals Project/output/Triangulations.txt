needsPackage "Triangulations"

F0E0 =  A = transpose matrix {{0,3},{0,1},{-1,-1},{1,-1},{-4,-2},{4,-2}}

F0E1 =  Ts = allTriangulations A

F0E2 =  #Ts == 16

F0E3 =  netList Ts

F0E4 =  tri = Ts#0

F0E5 =  isWellDefined tri

F0E6 =  isRegularTriangulation tri

F0E7 =  Ts/isRegularTriangulation

F0E8 =  regularTriangulationWeights tri

F0E9 =  tally for tri in Ts list sort unique flatten max tri

F0E10 =  options allTriangulations

F0E11 =  Ts = allTriangulations(A, Fine => true);

F0E12 =  #Ts == 6

F0E13 =  T1s = allTriangulations(A, RegularOnly => true)

F0E14 =  T2s = allTriangulations(A, RegularOnly => false)

F0E15 =  #T1s

F0E16 =  #T2s

F0E17 =  T3s = allTriangulations(A, RegularOnly => false, ConnectedToRegular => false)

F0E18 =  #T3s

F0E19 =  netList Ts

F0E20 =  for tri in Ts list isWellDefined tri

F0E21 =  for tri in Ts list isRegularTriangulation tri

F0E22 =  for tri in Ts list regularTriangulationWeights tri

F1E0 =  A = vertices hypercube 3

F1E1 =  T = topcomRegularFineTriangulation A

F1E2 =  tri = regularFineTriangulation A

F1E3 =  Ts1 = generateTriangulations A -- list of Triangulation's.

F1E4 =  Ts2 = generateTriangulations(A, T) -- list of list of subsets

F1E5 =  Ts3 = generateTriangulations triangulation(A, T) -- list of Triangulations

F1E6 =  Ts4 = generateTriangulations tri -- list of Triangulations

F1E7 =  all(Ts4, isFine)

F1E8 =  all(Ts4, isStar)

F1E9 =  all(Ts4, isRegularTriangulation)

F1E10 =  Ts4/isStar//tally

F1E11 =  Ts4/gkzVector

F1E12 =  volume convexHull A -- 8

F1E13 =  stars1 = select(Ts4, t -> (gkzVector t)#-1 == 8)

F1E14 =  stars2 = select(Ts4, isStar)

F1E15 =  stars1 == stars2

F2E0 =  LP = {{-1, 0, -1, 1}, {-1, 0, 1, 0}, {-1, 0, 2, -1}, {-1, 1, -1, 0}, {1, 0, -1, 0}, {1, 0, 1, 0}, {2, -1, -1, 0}, {0, 0, 1, 0}, {1, 0, 0, 0}, {0,0,0,0}}

F2E1 =  A = transpose matrix LP

F2E2 =  elapsedTime Ts = allTriangulations(A, Fine => true);

F2E3 =  select(Ts, T -> isStar T)

F2E4 =  #oo == 1

F2E5 =  #Ts == 51

F2E6 =  T = regularFineTriangulation A

F2E7 =  elapsedTime Ts2 = generateTriangulations T;

F2E8 =  #Ts2 == #Ts

F3E0 =  A = transpose matrix {{0,3},{0,1},{-1,-1},{1,-1},{-4,-2},{4,-2}}

F3E1 =  tri = {{0,1,2}, {1,3,5}, {2,3,4}, {0,1,5},

         {0,2,4}, {3,4,5}, {1,2,3}}

F3E2 =  T = triangulation(A, tri)

F3E3 =  isWellDefined T

F3E4 =  isRegularTriangulation T

F4E0 =  P = hypercube 3

F4E1 =  A = vertices P

F4E2 =  T = topcomRegularFineTriangulation A

F4E3 =  tri = triangulation(A, T)

F4E4 =  matrix tri

F4E5 =  vectors tri

F4E6 =  max tri

F4E7 =  isWellDefined tri

F4E8 =  netList affineCircuits tri

F4E9 =  isFine tri

F4E10 =  isStar tri

F4E11 =  isRegularTriangulation tri

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F0E6", "F0E7", "F0E8", "F0E9", "F0E10", "F0E11", "F0E12", "F0E13", "F0E14", "F0E15", "F0E16", "F0E17", "F0E18", "F0E19", "F0E20", "F0E21", "F0E22", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F1E10", "F1E11", "F1E12", "F1E13", "F1E14", "F1E15", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F4E7", "F4E8", "F4E9", "F4E10", "F4E11"}
