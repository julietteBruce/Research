needsPackage "SchurRings"

F12E0 =  S = schurRing(QQ,s,4)

F12E1 =  R = schurRing(r,infinity)

F12E2 =  numgens S

F12E3 =  numgens R

F12E4 =  Q = schurRing(q,4,GroupActing => "Sn")

F12E5 =  V = s_1

F12E6 =  dim V

F12E7 =  V * V

F12E8 =  V^3

F12E9 =  W = s_{3}

F12E10 =  dim W

F12E11 =  U = s_{1,1,1}

F12E12 =  dim U

F12E13 =  W = symmetricPower(3,V)

F12E14 =  U = exteriorPower(3,V)

F12E15 =  exteriorPower(2,W)

F12E16 =  symmetricPower(2,U)

F12E17 =  plethysm(W+U,W+U)

F12E18 =  s_2 @ s_3

F12E19 =  (W+U) @ (W+U)

F12E20 =  W' = toS(W,Q)

F12E21 =  U' = toS(U,Q)

F12E22 =  W' * U'

F12E23 =  cfW = classFunction(W')

F12E24 =  cfU = classFunction(U')

F12E25 =  cfWU = cfW * cfU

F12E26 =  symmetricFunction(cfWU,Q)

F12E27 =  exteriorPower(2,W')

F12E28 =  symmetricPower(2,U')

F12E29 =  toE U

F12E30 =  toH U

F12E31 =  toP W

F12E32 =  A = symmetricRing S

F12E33 =  schurRing A === S

F12E34 =  T = schurRing(S,t,3)

F12E35 =  V' = t_1

F12E36 =  schurLevel T

F12E37 =  schurLevel S

F12E38 =  schurLevel QQ

F12E39 =  symmetricPower(3,V*V')

F12E40 =  exteriorPower(3,V*V')

F12E41 =  n = 4

F12E42 =  M = {1_S}

F12E43 =  schurResolution(V,M,DegreeLimit => n)

F12E44 =  rep = q_n + q_(n-1,1)

F12E45 =  M = {q_n}

F12E46 =  sR = schurResolution(rep,M,DegreeLimit => n)

F12E47 =  eP2rep = exteriorPower(2,rep)

F12E48 =  eP2rep == last sR#2#0

exampleIDS = {"F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F12E6", "F12E7", "F12E8", "F12E9", "F12E10", "F12E11", "F12E12", "F12E13", "F12E14", "F12E15", "F12E16", "F12E17", "F12E18", "F12E19", "F12E20", "F12E21", "F12E22", "F12E23", "F12E24", "F12E25", "F12E26", "F12E27", "F12E28", "F12E29", "F12E30", "F12E31", "F12E32", "F12E33", "F12E34", "F12E35", "F12E36", "F12E37", "F12E38", "F12E39", "F12E40", "F12E41", "F12E42", "F12E43", "F12E44", "F12E45", "F12E46", "F12E47", "F12E48"}
