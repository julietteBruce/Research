needsPackage "ConformalBlocks"

F0E0 =  D=symmetricDivisorM0nbar(6,{1/2,1/3})

F0E1 =  E=symmetricDivisorM0nbar(6,2*B_2+3*B_3)

F0E2 =  D+E

F1E0 =  sl_3=simpleLieAlgebra("A",2);

F1E1 =  V=conformalBlockVectorBundle(sl_3,2,{{1,0},{1,0},{0,1},{0,1}},0)

F1E2 =  conformalBlockRank(V)

F2E0 =  kappaDivisorM0nbar(14)

F3E0 =  D=symmetricDivisorM0nbar(6,2*B_2+B_3)

F3E1 =  symmetricCurveDotDivisorM0nbar({3,1,1,1},D)

F3E2 =  E=symmetricDivisorM0nbar(6,B_2+3*B_3)

F3E3 =  symmetricCurveDotDivisorM0nbar({3,1,1,1},E)

F4E0 =  sl_4 =simpleLieAlgebra("A",3);

F4E1 =  V=conformalBlockVectorBundle(sl_4,1,{{1,0,0},{1,0,0},{0,1,0},{0,1,0},{0,0,1},{0,0,1}},0);

F4E2 =  D=symmetrizedConformalBlockDivisor(V)

F5E0 =  D=symmetricDivisorM0nbar(8,3*B_2+2*B_3+4*B_4)

F5E1 =  isExtremalSymmetricFDivisor(D)

F5E2 =  D=kappaDivisorM0nbar(8)

F5E3 =  isExtremalSymmetricFDivisor(D)

F6E0 =  D=symmetricDivisorM0nbar(6,{2,3})

F6E1 =  E=-D

F7E0 =  sl_2=simpleLieAlgebra("A",1);

F7E1 =  V=conformalBlockVectorBundle(sl_2,1,{{1},{1},{1},{1},{1},{1}},0);

F7E2 =  FCurveDotConformalBlockDivisor({{1,2,3},{4},{5},{6}},V)

F7E3 =  FCurveDotConformalBlockDivisor({{1,2},{3,4},{5},{6}},V)

F7E4 =  sl_3=simpleLieAlgebra("A",2);

F7E5 =  W=conformalBlockVectorBundle(sl_3,1,{{0,1},{1,0},{1,0},{1,0},{1,0}},0);

F7E6 =  FCurveDotConformalBlockDivisor({{4,5},{1},{2},{3}},W)

F8E0 =  basisOfSymmetricCurves(8)

F9E0 =  sl_3=simpleLieAlgebra("A",2);

F9E1 =  V=conformalBlockVectorBundle(sl_3,2,{{1,0},{1,0},{1,0},{0,1},{0,1},{0,1}},0)

F10E0 =  D=symmetricDivisorM0nbar(8,3*B_2+2*B_3+4*B_4)

F10E1 =  killsCurves(D)

F11E0 =  psiDivisorM0nbar(14)

F12E0 =  M=FdotBjIntMat(12)

F12E1 =  N=M^-1

F12E2 =  v=N*(matrix{{1},{0},{0},{0},{0}})

F12E3 =  D=symmetricDivisorM0nbar(12,flatten entries v)

F12E4 =  symmetricCurveDotDivisorM0nbar({1,1,1,9},D)

F12E5 =  apply(5, i-> symmetricCurveDotDivisorM0nbar({1,1,i+1,12-i-3},D))

F13E0 =  D=symmetricDivisorM0nbar(6,288*B_2+144*B_3)

F13E1 =  scale(D)

F14E0 =  D=symmetricDivisorM0nbar(6,{2,1})

F14E1 =  E=scale symmetricDivisorM0nbar(6,288*B_2+144*B_3)

F14E2 =  D==E

F15E0 =  sl_3 = simpleLieAlgebra("A",2);

F15E1 =  V=conformalBlockVectorBundle(sl_3,1,{{1,0},{1,0},{0,1},{0,1}},0);

F15E2 =  conformalBlockDegreeM04bar(V)

F15E3 =  conformalBlockRank(V)

F16E0 =  D=symmetricDivisorM0nbar(6,{2,3})

F16E1 =  6*D

F17E0 =  D=symmetricDivisorM0nbar(8,3*B_2+2*B_3+4*B_4)

F17E1 =  isSymmetricFDivisor(D)

F17E2 =  D=symmetricDivisorM0nbar(8,B_2)

F17E3 =  isSymmetricFDivisor(D)

F18E0 =  symmetricFCurves(8)

F19E0 =  D=symmetricDivisorM0nbar(6,{2,3})

F19E1 =  E=symmetricDivisorM0nbar(6,2*B_2+3*B_3)

F19E2 =  D==E

F20E0 =  D=symmetricDivisorM0nbar(6,2*B_2+3*B_3)

F20E1 =  coefficientList(D)

F21E0 =  canonicalDivisorM0nbar(14)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F1E0", "F1E1", "F1E2", "F2E0", "F3E0", "F3E1", "F3E2", "F3E3", "F4E0", "F4E1", "F4E2", "F5E0", "F5E1", "F5E2", "F5E3", "F6E0", "F6E1", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F7E6", "F8E0", "F9E0", "F9E1", "F10E0", "F10E1", "F11E0", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F13E0", "F13E1", "F14E0", "F14E1", "F14E2", "F15E0", "F15E1", "F15E2", "F15E3", "F16E0", "F16E1", "F17E0", "F17E1", "F17E2", "F17E3", "F18E0", "F19E0", "F19E1", "F19E2", "F20E0", "F20E1", "F21E0"}
