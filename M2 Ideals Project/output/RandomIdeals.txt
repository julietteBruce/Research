needsPackage "RandomIdeals"

F0E0 =  S = QQ[x_0,x_1,x_2,x_3,x_4]

F0E1 =  P =  {{1, 2, 4}, {0, 1, 4}, {0, 2, 4}, {0, 3, 4}};

F0E2 =  idealFromShelling(S,P)

F1E0 =  R = ZZ/101[x_0..x_4];

F1E1 =  I = randomShellableIdeal(R,2,6)

F2E0 =  kk=ZZ/101

F2E1 =  S=kk[a..e]

F2E2 =  squareFree(3, S)

F3E0 =  setRandomSeed(currentTime())

F3E1 =  S=ZZ/2[vars(0..3)]

F3E2 =  J = monomialIdeal"ab,ad, bcd"

F3E3 =  randomSquareFreeStep J

F3E4 =  setRandomSeed(1)

F3E5 =  rsfs = randomSquareFreeStep

F3E6 =  J = monomialIdeal 0_S

F3E7 =  time T=tally for t from 1 to 5000 list first (J=rsfs(J,AlexanderProbability => .01));

F3E8 =  #T

F3E9 =  T

F3E10 =  J

F4E0 =  kk=ZZ/101

F4E1 =  S=kk[vars(0..5)]

F4E2 =  L=for n from 1 to 100 list res randomSquareFreeMonomialIdeal(10:3,S);

F4E3 =  tally apply(L, F -> length F)

F4E4 =  tally apply(L, F -> regularity F - ((max flatten degrees F_2) - 2))

F4E5 =  L=for n from 1 to 500 list res randomSquareFreeMonomialIdeal(10:3,S);

F4E6 =  scan(L, F -> if 1<(regularity F - (max flatten degrees F_2) + 2) then print F.dd_1)

F5E0 =  setRandomSeed(currentTime())

F5E1 =  kk=ZZ/101

F5E2 =  S=kk[a,b,c]

F5E3 =  randomMonomial(3,S)

F6E0 =  randomBinomialEdgeIdeal(7, 4)

F7E0 =  kk=ZZ/101

F7E1 =  S=kk[a..c]

F7E2 =  L={3,3,4,6}

F7E3 =  I = ideal(a^3,b^3, c^3)

F7E4 =  J=randomElementsFromIdeal(L,I)

F8E0 =  P={{1,2,3}}

F8E1 =  P=randomAddition(6,2,P)

F8E2 =  P=randomAddition(6,1,P)

F9E0 =  R = ZZ/101[x_0..x_3];

F9E1 =  L = randomShellableIdealChain(R,1)

F10E0 =  kk=ZZ/101

F10E1 =  S=kk[a..e]

F10E2 =  L={3,3,4,6}

F10E3 =  B = matrix{{a^3,b^4,d^5,a*b*c,e}}

F10E4 =  I=randomSparseIdeal(B,3,2)

F11E0 =  kk=ZZ/101

F11E1 =  S=kk[a..e]

F11E2 =  squareFree(3, S)

F12E0 =  setRandomSeed(currentTime())

F12E1 =  kk=ZZ/101;

F12E2 =  S=kk[vars(0..5)];

F12E3 =  time tally for n from 1 to 500 list regularity randomMonomialIdeal(10:3,S)

F13E0 =  kk=ZZ/101

F13E1 =  S=kk[a..e]

F13E2 =  L={3,3,4,6}

F13E3 =  I=randomPureBinomialIdeal(L,S)

F14E0 =  kk=ZZ/101

F14E1 =  S=kk[a..e]

F14E2 =  L={3,3,4,6}

F14E3 =  m = matrix{{a^3,b^4+c^4,d^5}}

F14E4 =  I=randomIdeal(L,m)

F15E0 =  setRandomSeed(currentTime())

F15E1 =  kk=ZZ/101

F15E2 =  S=kk[a..e]

F15E3 =  L={3,5,7}

F15E4 =  randomSquareFreeMonomialIdeal(L, S)

F15E5 =  randomSquareFreeMonomialIdeal(5:2, S)

F16E0 =  P = {{1, 2, 3}, {1, 2, 5}};

F16E1 =  isShelling(P)

F16E2 =  Q = {{1,2,3},{3,4,5},{2,3,4}};

F16E3 =  isShelling(Q)

F17E0 =  P = randomShelling(6,3,10)

F17E1 =  Q = randomShelling(6,3)

F18E0 =  randomToricEdgeIdeal(4,5)

F18E1 =  randomBinomialEdgeIdeal(4,5)

F19E0 =  P =  {{1, 2, 4}, {0, 1, 4}, {0, 2, 4}, {0, 3, 4}};

F19E1 =  idealChainFromShelling(P)

F20E0 =  kk=ZZ/101

F20E1 =  S=kk[a..e]

F20E2 =  L={3,3,4,6}

F20E3 =  I=randomBinomialIdeal(L,S)

F21E0 =  randomEdgeIdeal(7, 4)

F22E0 =  kk=ZZ/101

F22E1 =  S=kk[a..e]

F22E2 =  regSeq((2,3,4),S)

F23E0 =  kk=ZZ/101

F23E1 =  S=kk[a..e]

F23E2 =  L={3,5,7}

F23E3 =  randomMonomialIdeal(L, S)

F23E4 =  randomMonomialIdeal(5:2, S)

exampleIDS = {"F0E0", "F0E1", "F0E2", "F1E0", "F1E1", "F2E0", "F2E1", "F2E2", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F3E10", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F5E0", "F5E1", "F5E2", "F5E3", "F6E0", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F8E0", "F8E1", "F8E2", "F9E0", "F9E1", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F11E0", "F11E1", "F11E2", "F12E0", "F12E1", "F12E2", "F12E3", "F13E0", "F13E1", "F13E2", "F13E3", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F16E0", "F16E1", "F16E2", "F16E3", "F17E0", "F17E1", "F18E0", "F18E1", "F19E0", "F19E1", "F20E0", "F20E1", "F20E2", "F20E3", "F21E0", "F22E0", "F22E1", "F22E2", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4"}
