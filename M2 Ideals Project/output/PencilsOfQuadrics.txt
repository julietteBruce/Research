needsPackage "PencilsOfQuadrics"

F0E0 =  kk = ZZ/101

F0E1 =  g = 1

F0E2 =  (S, qq,  R,  u, M1, M2, Mu1, Mu2)=randomNicePencil(kk,g);

F0E3 =  M = cliffordModule(M1,M2, R)

F0E4 =  M.oddCenter

F1E0 =  kk=ZZ/101;

F1E1 =  g=1;

F1E2 =  rNP=randNicePencil(kk,g);

F1E3 =  cM=cliffordModule(rNP.matFact1,rNP.matFact2,rNP.baseRing);

F1E4 =  f=cM.hyperellipticBranchEquation

F1E5 =  L=randomLineBundle(f)

F1E6 =  degOnE L

F1E7 =  m=L.yAction

F1E8 =  (m)^2_(0,0)+(-1)^g*f==0

F1E9 =  L0=randomLineBundle(0,f)

F1E10 =  degOnE L0

F1E11 =  orderInPic L0

F2E0 =  n = 4

F2E1 =  c = 2

F2E2 =  kk = ZZ/101

F2E3 =  U = kk[x_0..x_(n-1)]

F2E4 =  qq = matrix{{x_0^2+x_1^2,x_0*x_1}}

F2E5 =  qq = random(U^1, U^{2:-2})

F2E6 =  Ubar = U/ideal qq

F2E7 =  M = coker vars Ubar

F2E8 =  M = coker random(Ubar^2, Ubar^{-1,-2,-2})

F2E9 =  C = ciModuleToCliffordModule M

F2E10 =  keys C

F2E11 =  C.evenOperators

F2E12 =  C.symmetricM

F2E13 =  C.evenCenter

F3E0 =  kk=ZZ/101

F3E1 =  n=2

F3E2 =  R=kk[a_0..a_(binomial(n+2,2))]

F3E3 =  S=kk[x_0..x_(n-1),a_0..a_(binomial(n+2,2))]

F3E4 =  M=genericSymmetricMatrix(S,a_0,n)

F3E5 =  X=(vars S)_{0..n-1}

F3E6 =  Y=X*M

F3E7 =  (M1,M2)=matrixFactorizationK(X,Y)

F3E8 =  M12=M1*M2

F4E0 =  n = 4

F4E1 =  c = 2

F4E2 =  kk = ZZ/101

F4E3 =  U = kk[x_0..x_(n-1)]

F4E4 =  qq = matrix{{x_0^2+x_1^2,x_0*x_1}}

F4E5 =  qq = random(U^1, U^{2:-2})

F4E6 =  Ubar = U/ideal qq

F4E7 =  M = coker vars Ubar

F4E8 =  betti (fM=res M)

F4E9 =  betti res coker transpose fM.dd_3

F4E10 =  (e1,e0) = ciModuleToMatrixFactorization M;

F4E11 =  source e0 == target e1

F4E12 =  0 == e0*e1 - diagonalMatrix(ring e0, apply(numcols e0, i->(e0*e1)_0_0))

F4E13 =  degrees source e1-degrees target e0

F5E0 =  kk=ZZ/101;

F5E1 =  g=1;

F5E2 =  L=randNicePencil(kk,g)

F5E3 =  keys L

F5E4 =  L.qqRing

F5E5 =  L.quadraticForm

F5E6 =  L.baseRing

F5E7 =  (L.matFact1 * L.matFact2) - (L.quadraticForm)**id_(source L.matFact1)

F5E8 =  (L.matFact2 * L.matFact1) - (L.quadraticForm)**id_(source L.matFact1)

F5E9 =  L.isotropicSpace

F5E10 =  (L.matFactu1 * L.matFactu2) - (L.quadraticForm)**id_(source L.matFactu1)

F5E11 =  (L.matFactu2 * L.matFactu1) - (L.quadraticForm)**id_(source L.matFactu1)

F6E0 =  kk=ZZ/101;

F6E1 =  g=1;

F6E2 =  rNP=randNicePencil(kk,g);

F6E3 =  qq=rNP.quadraticForm;

F6E4 =  S=rNP.qqRing;

F6E5 =  P=kk[drop(gens S,-2)]

F6E6 =  qs=sub(diff(matrix{{S_(2*g+2), S_(2*g+3)}}, qq), P)

F6E7 =  CI=P/ideal qs

F6E8 =  cM=cliffordModule(rNP.matFact1,rNP.matFact2,rNP.baseRing)

F6E9 =  betti (F=cliffordModuleToCIResolution(cM,S,CI))

F6E10 =  cMu=cliffordModule(rNP.matFactu1,rNP.matFactu2,rNP.baseRing)

F6E11 =  f=cMu.hyperellipticBranchEquation

F6E12 =  L=randomLineBundle(0,f);

F6E13 =  betti (FL=cliffordModuleToCIResolution(tensorProduct(cM,L),S,CI))

F6E14 =  betti (FuL=cliffordModuleToCIResolution(tensorProduct(cMu,L),S,CI))

F7E0 =  kk=ZZ/101;

F7E1 =  g=1;

F7E2 =  rNP=randNicePencil(kk,g);

F7E3 =  u=rNP.isotropicSpace

F8E0 =  kk=ZZ/101;

F8E1 =  g=1;

F8E2 =  rNP=randNicePencil(kk,g);

F8E3 =  S=rNP.qqRing;

F8E4 =  qq=rNP.quadraticForm;

F8E5 =  Mu1=rNP.matFactu1;

F8E6 =  Mu2=rNP.matFactu2;

F8E7 =  Mu1*Mu2 - qq*id_(S^(2^(g+1)))

F8E8 =  Mu1*Mu2 - Mu2*Mu1

F9E0 =  kk=ZZ/101;

F9E1 =  g=2;

F9E2 =  (S,qq,R,u, M1,M2, Mu1,Mu2) = randomNicePencil(kk,g);

F9E3 =  M=cliffordModule (Mu1, Mu2, R);

F9E4 =  f=M.hyperellipticBranchEquation

F9E5 =  L=randomLineBundle(0,f);

F9E6 =  uL=translateIsotropicSubspace(M,L,S)

F9E7 =  assert (betti uL == betti u)

F10E0 =  kk=ZZ/101;

F10E1 =  g=1;

F10E2 =  rNP=randNicePencil(kk,g);

F10E3 =  S=rNP.qqRing;

F10E4 =  qq=rNP.quadraticForm;

F10E5 =  Mu1=rNP.matFactu1;

F10E6 =  Mu2=rNP.matFactu2;

F10E7 =  Mu1*Mu2 - qq*id_(S^(2^(g+1)))

F10E8 =  Mu1*Mu2 - Mu2*Mu1

F11E0 =  kk = ZZ/101

F11E1 =  g = 1

F11E2 =  (S, qq,  R,  u, M1, M2, Mu1, Mu2)=randomNicePencil(kk,g);

F11E3 =  M = cliffordModule(M1,M2, R)

F11E4 =  M.evenOperators

F11E5 =  symMatrix(M.evenOperators,M.oddOperators)

F12E0 =  kk=ZZ/101;

F12E1 =  g=1;

F12E2 =  rNP=randNicePencil(kk,g);

F12E3 =  cM=cliffordModule(rNP.matFact1,rNP.matFact2,rNP.baseRing);

F12E4 =  f=cM.hyperellipticBranchEquation

F12E5 =  L1=randomLineBundle(0,f)

F12E6 =  L2=randomLineBundle(2,f)

F12E7 =  V=randomExtension(L1,L2)

F12E8 =  V.yAction

F12E9 =  degOnE V

F12E10 =  V1=randomExtension(L2,V)

F12E11 =  V1.yAction

F12E12 =  degOnE V1

F13E0 =  kk=ZZ/101;

F13E1 =  g=1;

F13E2 =  rNP=randNicePencil(kk,g);

F13E3 =  f=(cliffordModule(rNP.matFact1,rNP.matFact2,rNP.baseRing)).hyperellipticBranchEquation

F13E4 =  L=randomLineBundle(0,f);

F13E5 =  orderInPic L

F14E0 =  kk=ZZ/101

F14E1 =  g=1

F14E2 =  (S, qq, R,  u, M1, M2, Mu1, Mu2)=randomNicePencil(kk,g);

F14E3 =  gens S

F14E4 =  q1 = diff(S_(2*g+2),qq)

F14E5 =  ideal u -- an isotropic space for q1 and q2

F14E6 =  betti Mu1, betti Mu2

F14E7 =  Mu1*Mu2- qq*id_(target Mu1) == 0

F15E0 =  kk = ZZ/101;

F15E1 =  R = kk[s,t];

F15E2 =  f = (s+2*t)*(s+t)*(s-t)*(s-2*t);

F15E3 =  L0 = randomLineBundle(0,f)

F15E4 =  M = L0.yAction

F15E5 =  M^2 - f*id_(source M)

F16E0 =  kk=ZZ/101;

F16E1 =  g=1;

F16E2 =  rNP=randNicePencil(kk,g);

F16E3 =  f=(cliffordModule(rNP.matFact1,rNP.matFact2,rNP.baseRing)).hyperellipticBranchEquation;

F16E4 =  L0=randomLineBundle(0,f)

F16E5 =  degOnE L0

F16E6 =  L1=randomLineBundle(1,f)

F16E7 =  degOnE L1

F16E8 =  Lm1=randomLineBundle(-1,f)

F16E9 =  degOnE Lm1

F17E0 =  kk=ZZ/101

F17E1 =  g=1

F17E2 =  (S, qq,  R,  u, M1, M2, Mu1, Mu2)=randomNicePencil(kk,g) ;

F17E3 =  (uOdd,uEv)=cliffordOperators(Mu1,Mu2,R);

F17E4 =  symMatrix(uOdd,uEv)

F17E5 =  f=det symMatrix(uOdd,uEv);

F17E6 =  M = cliffordModule(uOdd, uEv);

F17E7 =  L = randomLineBundle(0,f);

F17E8 =  L.yAction

F17E9 =  L2 = tensorProduct(L,L)

F17E10 =  L2.yAction

F17E11 =  M' = tensorProduct(M,L)

F17E12 =  M.evenCenter

F17E13 =  M'.evenCenter

F18E0 =  kk=ZZ/101

F18E1 =  n=2*d

F18E2 =  R=kk[a_0..a_(binomial(n+2,2)-1)]

F18E3 =  S=kk[x_0..x_(n-1),a_0..a_(binomial(n+2,2)-1)]

F18E4 =  M=genericSymmetricMatrix(S,a_0,n)

F18E5 =  X=(vars S)_{0..n-1}

F18E6 =  Y=X*M

F18E7 =  (M1,M2)=matrixFactorizationK(X,Y);

F18E8 =  (eOdd,eEv)=cliffordOperators(M1,M2,R);

F18E9 =  sM = symMatrix(eOdd,eEv)

F18E10 =  f = det sM

F18E11 =  f == (cliffordModule(eOdd,eEv)).hyperellipticBranchEquation

F18E12 =  (c0,c1)=centers(eOdd,eEv)

F18E13 =  assert(c0^2-(-1)^d*f*id_(source c0)==0)

F18E14 =  assert(c1^2-(-1)^d*f*id_(source c1)==0)

F19E0 =  kk=ZZ/101;

F19E1 =  g=2;

F19E2 =  (S,qq,R,u, M1,M2, Mu1,Mu2) = randomNicePencil(kk,g);

F19E3 =  M=cliffordModule (Mu1, Mu2, R);

F19E4 =  ru=randomIsotropicSubspace(M,S)

F19E5 =  assert (betti ru == betti u)

F20E0 =  kk=ZZ/101;

F20E1 =  g=1;

F20E2 =  rNP=randNicePencil(kk,g);

F20E3 =  S=rNP.qqRing

F21E0 =  kk = ZZ/101

F21E1 =  g = 1

F21E2 =  (S, qq,  R,  u, M1, M2, Mu1, Mu2)=randomNicePencil(kk,g);

F21E3 =  M = cliffordModule(M1,M2, R)

F21E4 =  M.evenOperators

F22E0 =  kk=ZZ/101;

F22E1 =  g=1;

F22E2 =  rNP=randNicePencil(kk,g);

F22E3 =  qq=rNP.quadraticForm;

F22E4 =  S=rNP.qqRing;

F22E5 =  cM=cliffordModule(rNP.matFact1,rNP.matFact2,rNP.baseRing)

F22E6 =  (M1,M2)=cliffordModuleToMatrixFactorization(cM,S);

F22E7 =  r=rank source M1

F22E8 =  M1*M2 - qq*id_(S^r) == 0

F22E9 =  M1 == rNP.matFact1

F22E10 =  M2 == rNP.matFact2

F22E11 =  cMu=cliffordModule(rNP.matFactu1,rNP.matFactu2,rNP.baseRing)

F22E12 =  (Mu1,Mu2)=cliffordModuleToMatrixFactorization(cMu,S);

F22E13 =  ru=rank source Mu1

F22E14 =  Mu1*Mu2 - qq*id_(S^ru) == 0

F22E15 =  Mu1 == rNP.matFactu1

F22E16 =  Mu2 == rNP.matFactu2

F23E0 =  kk = ZZ/101

F23E1 =  g = 1

F23E2 =  (S, qq,  R,  u, M1, M2, Mu1, Mu2)=randomNicePencil(kk,g);

F23E3 =  M = cliffordModule(M1,M2, R)

F23E4 =  M.oddOperators

F24E0 =  kk=ZZ/101;

F24E1 =  g=1;

F24E2 =  rNP=randNicePencil(kk,g);

F24E3 =  M=cliffordModule(rNP.matFact1,rNP.matFact2,rNP.baseRing)

F24E4 =  f=M.hyperellipticBranchEquation

F24E5 =  sM=M.symmetricM

F24E6 =  f == det sM

F25E0 =  kk=ZZ/101;

F25E1 =  g=1;

F25E2 =  rNP=randNicePencil(kk,g);

F25E3 =  R=rNP.baseRing

F26E0 =  kk = ZZ/101

F26E1 =  g = 1

F26E2 =  (S, qq,  R,  u, M1, M2, Mu1, Mu2)=randomNicePencil(kk,g);

F26E3 =  M = cliffordModule(M1,M2, R)

F26E4 =  M.symmetricM

F26E5 =  symMatrix(M.evenOperators,M.oddOperators)

F27E0 =  kk = ZZ/101

F27E1 =  g = 1

F27E2 =  (S, qq,  R,  u, M1, M2, Mu1, Mu2)=randomNicePencil(kk,g);

F27E3 =  M = cliffordModule(M1,M2, R)

F27E4 =  M.evenCenter

F28E0 =  kk = ZZ/101

F28E1 =  g = 1

F28E2 =  (S, qq,  R,  u, M1, M2, Mu1, Mu2)=randomNicePencil(kk,g);

F28E3 =  M = cliffordModule(M1,M2, R)

F28E4 =  Mu = cliffordModule(Mu1,Mu2, R)

F28E5 =  Mu.symmetricM

F28E6 =  M.symmetricM

F29E0 =  kk=ZZ/101

F29E1 =  R = kk[s,t]

F29E2 =  f =(s+2*t)*(s+t)*(s-t)*(s-2*t)

F29E3 =  L0 = randomLineBundle(0,f)

F29E4 =  (L0.yAction)^2

F29E5 =  degOnE L0

F29E6 =  orderInPic L0

F29E7 =  L1 = randomLineBundle(-1,f)

F29E8 =  degOnE L1

F29E9 =  L1.yAction

F29E10 =  F = randomExtension(L1,L0)

F29E11 =  F.yAction

F29E12 =  degOnE tensorProduct(L1,F)

F30E0 =  kk=ZZ/101;

F30E1 =  g=2;

F30E2 =  rNP=randNicePencil(kk,g);

F30E3 =  S=rNP.qqRing;

F30E4 =  R=rNP.baseRing;

F30E5 =  qq=rNP.quadraticForm;

F30E6 =  qs=apply(2,i->diff(S_(2*g+2+i),qq))

F30E7 =  Mu1=rNP.matFactu1;

F30E8 =  Mu2=rNP.matFactu2;

F30E9 =  M=cliffordModule(Mu1,Mu2,R)

F30E10 =  elapsedTime Ulr = searchUlrich(M,S);

F30E11 =  betti res Ulr

F30E12 =  ann Ulr == ideal qs

F31E0 =  kk=ZZ/101;

F31E1 =  g=1;

F31E2 =  rNP=randNicePencil(kk,g);

F31E3 =  S=rNP.qqRing;

F31E4 =  qq=rNP.quadraticForm

F31E5 =  q1=diff(S_(2*g+2), qq)

F31E6 =  q2=diff(S_(2*g+3), qq)

F31E7 =  qq==S_(2*g+2)*q1+S_(2*g+3)*q2

F32E0 =  kk=ZZ/101;

F32E1 =  g=1;

F32E2 =  rNP=randNicePencil(kk,g);

F32E3 =  S=rNP.qqRing;

F32E4 =  qq=rNP.quadraticForm;

F32E5 =  M1=rNP.matFact1;

F32E6 =  M2=rNP.matFact2;

F32E7 =  M1*M2 - qq*id_(S^(2^(2*g+1)))

F32E8 =  M1*M2 - M2*M1

F33E0 =  kk=ZZ/101

F33E1 =  n=2*d

F33E2 =  R=kk[a_0..a_(binomial(n+2,2))]

F33E3 =  S=kk[x_0..x_(n-1),a_0..a_(binomial(n+2,2))]

F33E4 =  M=genericSymmetricMatrix(S,a_0,n)

F33E5 =  X=(vars S)_{0..n-1}

F33E6 =  Y=X*M

F33E7 =  qq = X*transpose Y

F33E8 =  (M1,M2)=matrixFactorizationK(X,Y);

F33E9 =  (eOdd,eEv)=cliffordOperators(M1,M2,R);

F33E10 =  (eOdd_0*eEv_0+eOdd_0*eEv_0)_(0,0) == 2*R_0

F33E11 =  (eOdd_0*eEv_1+eOdd_1*eEv_0)_(0,0) == 2*R_1

F34E0 =  kk=ZZ/101;

F34E1 =  g=1;

F34E2 =  rNP=randNicePencil(kk,g);

F34E3 =  S=rNP.qqRing;

F34E4 =  qq=rNP.quadraticForm;

F34E5 =  M1=rNP.matFact1;

F34E6 =  M2=rNP.matFact2;

F34E7 =  M1*M2 - qq*id_(S^(2^(2*g+1)))

F34E8 =  M1*M2 - M2*M1

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F1E7", "F1E8", "F1E9", "F1E10", "F1E11", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F2E8", "F2E9", "F2E10", "F2E11", "F2E12", "F2E13", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F4E6", "F4E7", "F4E8", "F4E9", "F4E10", "F4E11", "F4E12", "F4E13", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F5E6", "F5E7", "F5E8", "F5E9", "F5E10", "F5E11", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F6E6", "F6E7", "F6E8", "F6E9", "F6E10", "F6E11", "F6E12", "F6E13", "F6E14", "F7E0", "F7E1", "F7E2", "F7E3", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F8E8", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F10E5", "F10E6", "F10E7", "F10E8", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F11E5", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F12E6", "F12E7", "F12E8", "F12E9", "F12E10", "F12E11", "F12E12", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F14E7", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F16E5", "F16E6", "F16E7", "F16E8", "F16E9", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F17E7", "F17E8", "F17E9", "F17E10", "F17E11", "F17E12", "F17E13", "F18E0", "F18E1", "F18E2", "F18E3", "F18E4", "F18E5", "F18E6", "F18E7", "F18E8", "F18E9", "F18E10", "F18E11", "F18E12", "F18E13", "F18E14", "F19E0", "F19E1", "F19E2", "F19E3", "F19E4", "F19E5", "F20E0", "F20E1", "F20E2", "F20E3", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F22E5", "F22E6", "F22E7", "F22E8", "F22E9", "F22E10", "F22E11", "F22E12", "F22E13", "F22E14", "F22E15", "F22E16", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4", "F24E0", "F24E1", "F24E2", "F24E3", "F24E4", "F24E5", "F24E6", "F25E0", "F25E1", "F25E2", "F25E3", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F28E0", "F28E1", "F28E2", "F28E3", "F28E4", "F28E5", "F28E6", "F29E0", "F29E1", "F29E2", "F29E3", "F29E4", "F29E5", "F29E6", "F29E7", "F29E8", "F29E9", "F29E10", "F29E11", "F29E12", "F30E0", "F30E1", "F30E2", "F30E3", "F30E4", "F30E5", "F30E6", "F30E7", "F30E8", "F30E9", "F30E10", "F30E11", "F30E12", "F31E0", "F31E1", "F31E2", "F31E3", "F31E4", "F31E5", "F31E6", "F31E7", "F32E0", "F32E1", "F32E2", "F32E3", "F32E4", "F32E5", "F32E6", "F32E7", "F32E8", "F33E0", "F33E1", "F33E2", "F33E3", "F33E4", "F33E5", "F33E6", "F33E7", "F33E8", "F33E9", "F33E10", "F33E11", "F34E0", "F34E1", "F34E2", "F34E3", "F34E4", "F34E5", "F34E6", "F34E7", "F34E8"}
