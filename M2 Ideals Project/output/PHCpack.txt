needsPackage "PHCpack"

F0E0 =  R = CC[x,y];

F0E1 =  f = { x^3*y^5 + y^2 + x^2*y, x*y + x^2 - 1};

F0E2 =  (m,q,qsols) = mixedVolume(f,StartSystem=>true);

F0E3 =  fsols = trackPaths(f,q,qsols)

F1E0 =  R = CC[x,y,z];

F1E1 =  L = { z*(x+y), z*(x-y) };

F1E2 =  WitSets = cascade(L)

F1E3 =  W=first WitSets#2

F1E4 =  W#Equations

F1E5 =  W#Points

F1E6 =  W#Slice

F2E0 =  R = CC[x,y,z]

F2E1 =  (w,ns) = topWitnessSet(f,1);

F2E2 =  w

F2E3 =  L = factorWitnessSet(w)

F3E0 =  R = CC[x,y];

F3E1 =  f = { x^3*y^5 + y^2 + x^2*y, x*y + x^2 - 1};

F3E2 =  I=ideal f;

F3E3 =  dim I

F3E4 =  degree I

F3E5 =  m = mixedVolume(f) -- counts the number of complex roots in the torus (without zero components)

F3E6 =  (mv,sv) = mixedVolume(f,StableMixedVolume=>true)

F3E7 =  (mv,q,qsols) = mixedVolume(f,StartSystem=>true);

F3E8 =  q --let's take a look at the start system:

F3E9 =  qsols --and its solutions:

F4E0 =  R = CC[x,y];

F4E1 =  f = { x^3*y^5 + y^2 + x^2*y, x*y + x^2 - 1};

F4E2 =  (m,q,qsols) = mixedVolume(f,StartSystem=>true);

F4E3 =  fsols = trackPaths(f,q,qsols,tDegree => 1)

F5E0 =  R = CC[x,y];

F5E1 =  f = { x^3*y^5 + y^2 + x^2*y, x*y + x^2 - 1};

F5E2 =  (m,q,qsols) = mixedVolume(f,StartSystem=>true);

F5E3 =  fsols = trackPaths(f,q,qsols,gamma => exp(ii*pi/3))

F6E0 =  R = CC[x,y];

F6E1 =  f = { x^3*y^5 + y^2 + x^2*y, x*y + x^2 - 1};

F6E2 =  fSols = solveSystem(f, randomSeed=>3);

F6E3 =  fSols/print

F6E4 =  isCoordinateZero(fSols_0,1,1.0e-10)

F7E0 =  QQ[x,y,z];

F7E1 =  sys = {y-x^2, z-x^3, (x+y+z-1)/x};

F7E2 =  describe ring ideal sys

F7E3 =  convertedSys = toLaurentPolynomial(sys,w);

F7E4 =  printWidth = 300;

F7E5 =  toString convertedSys

F7E6 =  ring ideal convertedSys

F7E7 =  describe oo

F7E8 =  P = QQ[x,y,z];

F7E9 =  f = (x*y + z^2*y) / y

F7E10 =  liftable(f,P)

F7E11 =  lift(f,P)

F8E0 =  R=CC[x11,x22,x21,x12,x23,x13,x14,x24];

F8E1 =  system={x11*x22-x21*x12,x12*x23-x22*x13,x13*x24-x23*x14};

F8E2 =  V=numericalIrreducibleDecomposition(system)

F8E3 =  WitSets=V#5; --witness sets are accessed by dimension

F8E4 =  w=first WitSets;

F8E5 =  w.cache.IsIrreducible

F8E6 =  R=QQ[x11,x22,x21,x12,x23,x13,x14,x24];

F8E7 =  system={x11*x22-x21*x12,x12*x23-x22*x13,x13*x24-x23*x14};

F8E8 =  PD=primaryDecomposition(ideal(system))

F8E9 =  for i from 0 to 2 do print ("dim =" | dim PD_i | "  " | "degree=" | degree PD_i)

F9E0 =  R = CC[x,y,z]

F9E1 =  system = {y-x^2,z-x^3,x+y+z-1}

F9E2 =  solns = solveSystem(system)

F9E3 =  numSolns = #solns

F9E4 =  solns/print

F9E5 =  oneSoln = solns_0

F9E6 =  peek oneSoln

F10E0 =  R = CC[x,y,z];

F11E0 =  R = CC[x,y];

F11E1 =  f = { x^3*y^5 + y^2 + x^2*y, x*y + x^2 - 1};

F11E2 =  fSols = solveSystem(f, randomSeed=>3);

F11E3 =  fSols/print

F11E4 =  nonZeroSols = nonZeroFilter(fSols,1,1.0e-10);

F11E5 =  nonZeroSols / print

F11E6 =  f = {x^2+y^2,y*x+x};

F11E7 =  fSols = solveSystem(f);

F11E8 =  fSols/print

F11E9 =  zeroSols = zeroFilter(fSols,0,1.0e-10);

F11E10 =  zeroSols/print

F12E0 =  R = CC[x,y,z];

F12E1 =  f = { x^2 - y, x^3 - z };

F12E2 =  (w,ns) = topWitnessSet(f,1)

F12E3 =  dim(w)

F12E4 =  degree(w)

F12E5 =  toString equations(w)

F12E6 =  toString slice(w)

F12E7 =  toString points(w)

F12E8 =  R = CC[x,y,z]; f = { (x^2-y)*(x-2), (x^3 - z)*(y-2), (x*y - z)*(z-2) }

F12E9 =  (w,ns) = topWitnessSet(f,1);

F12E10 =  dim(w)

F12E11 =  degree(w)

F12E12 =  #ns

F13E0 =  R = CC[x,y,z]

F13E1 =  S = {x+y+z-1, x^2+y^2, x+y-z-3}

F13E2 =  L = solveSystem(S)

F13E3 =  oneSoln = L_0

F13E4 =  peek oneSoln

F13E5 =  system = {y-x^2, z-x^3, x+y+z-1, x+y+ x^3 -1}

F13E6 =  #system > numcols vars R --overdetermined system

F13E7 =  solns = solveSystem(system);

F13E8 =  numSolns = #solns

F14E0 =  R = CC[x,y,z];

F15E0 =  R=CC[a,b,c,d];

F15E1 =  M=matrix for i to 2 list for j to 3 list random(1,R)+random(0,R);

F15E2 =  I=minors(3,M);

F15E3 =  f=flatten entries gens I;

F15E4 =  (w,ns) = topWitnessSet(f,2);

F15E5 =  slcmat = matrix applyTable (entries w.Slice, x->1_CC*realPart x);

F15E6 =  Rtwo = ring w.Equations;

F15E7 =  X = transpose matrix {gens Rtwo | {1_CC}};

F15E8 =  slcRR = flatten entries (promote(slcmat,Rtwo) * X);

F15E9 =  fsols = intersectSlice(w,slcRR)

F16E0 =  R = CC[x,y]

F16E1 =  r0 = ourRoots#0#Coordinates#1

F16E2 =  newRoots = refineSolutions(S,ourRoots,64)

F16E3 =  newRoots#0 -- recall that solutions are of type Point

F16E4 =  r1 = newRoots#0#Coordinates#1

F17E0 =  R = CC[x11,x22,x21,x12,x23,x13];

F17E1 =  system = {x11*x22-x21*x12,x12*x23-x22*x13};

F17E2 =  V = numericalIrreducibleDecomposition (system);

F17E3 =  W = first V#4;

F17E4 =  isWitnessSetMember(W, point{{0,0,0,0,0,0}})

F18E0 =  R = CC[x11,x22,x21,x12,x23,x13];

F18E1 =  system = {x11*x22-x21*x12,x12*x23-x22*x13};

F18E2 =  V = numericalIrreducibleDecomposition (system);

F18E3 =  W = first V#4;

F18E4 =  isWitnessSetMember(W, point{{0,0,0,0,0,0}})

F19E0 =  v = versionNumber(null)

F19E1 =  print v_0

F19E2 =  print v_1

F20E0 =  R = CC[x,y];

F20E1 =  f = { x^3*y^5 + y^2 + x^2*y, x*y + x^2 - 1};

F20E2 =  fSols = solveSystem(f, randomSeed=>3);

F20E3 =  fSols/print

F20E4 =  zeroSols = zeroFilter(fSols,1,1.0e-10);

F20E5 =  zeroSols / print

F20E6 =  f = {x^2+y^2,y*x+x};

F20E7 =  fSols = solveSystem(f);

F20E8 =  fSols/print

F20E9 =  zeroSols = zeroFilter(fSols,0,1.0e-10);

F20E10 =  zeroSols/print

F21E0 =  R = QQ[x,y,z];

F21E1 =  system = {y-x^2, z-x^3, (x+y+z-1)/x};

F21E2 =  sols = solveRationalSystem(system)

F21E3 =  peek first sols

F22E0 =  R = CC[x,y,z];

F22E1 =  f = { x^2 - y, x^3 - z };

F22E2 =  fe1 = constructEmbedding(f,1);

F22E3 =  toString fe1

F22E4 =  R = CC[x,y,z];

F22E5 =  f = { x^2-y, x^3-z, x*y-z, x*z-y^2 };

F22E6 =  fe1 = constructEmbedding(f,1);

F22E7 =  toString fe1

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F1E0", "F1E1", "F1E2", "F1E3", "F1E4", "F1E5", "F1E6", "F2E0", "F2E1", "F2E2", "F2E3", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F4E0", "F4E1", "F4E2", "F4E3", "F5E0", "F5E1", "F5E2", "F5E3", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F7E5", "F7E6", "F7E7", "F7E8", "F7E9", "F7E10", "F7E11", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F8E8", "F8E9", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F10E0", "F11E0", "F11E1", "F11E2", "F11E3", "F11E4", "F11E5", "F11E6", "F11E7", "F11E8", "F11E9", "F11E10", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F12E6", "F12E7", "F12E8", "F12E9", "F12E10", "F12E11", "F12E12", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F13E6", "F13E7", "F13E8", "F14E0", "F15E0", "F15E1", "F15E2", "F15E3", "F15E4", "F15E5", "F15E6", "F15E7", "F15E8", "F15E9", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F18E0", "F18E1", "F18E2", "F18E3", "F18E4", "F19E0", "F19E1", "F19E2", "F20E0", "F20E1", "F20E2", "F20E3", "F20E4", "F20E5", "F20E6", "F20E7", "F20E8", "F20E9", "F20E10", "F21E0", "F21E1", "F21E2", "F21E3", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F22E5", "F22E6", "F22E7"}
