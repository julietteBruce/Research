needsPackage "SpectralSequences"

F0E0 =  R = QQ[x];

F0E1 =  M = R^1/(x^2);

F0E2 =  S = R/(x^4);

F0E3 =  C = res M

F0E4 =  f = map(S,R,{1});

F0E5 =  tensor(f,C)

F1E0 =  A = QQ[x,y];

F1E1 =  C = koszul vars A;

F1E2 =  K = filteredComplex C

F1E3 =  inducedMap(K,1)

F2E0 =  B = QQ[a..d];

F2E1 =  J = ideal vars B;

F2E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F2E3 =  K = filteredComplex(J,C,4);

F2E4 =  E = spectralSequence K;

F2E5 =  E^0

F2E6 =  E^1

F2E7 =  E^infinity

F3E0 =  A = QQ[x,y,z,w];

F3E1 =  F2D = simplicialComplex {x*y*z, w*z};

F3E2 =  F1D = simplicialComplex {x*y, w};

F3E3 =  F0D = simplicialComplex {x,w};

F3E4 =  K = filteredComplex{F2D, F1D, F0D}

F3E5 =  E = prune spectralSequence K;

F3E6 =  E^0

F3E7 =  E^0 .dd

F3E8 =  E^1

F3E9 =  E^1 .dd

F3E10 =  E^2

F3E11 =  E^2 .dd

F3E12 =  E^infinity

F3E13 =  k = filteredComplex({F2D, F1D, F0D}, ReducedHomology => false)

F3E14 =  e = prune spectralSequence k;

F3E15 =  e^0

F3E16 =  e^0 .dd

F3E17 =  e^1 .dd

F3E18 =  e^2

F3E19 =  e^2 .dd

F3E20 =  e^infinity

F4E0 =  B = QQ[a..d];

F4E1 =  J = ideal vars B;

F4E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F4E3 =  K = filteredComplex(J,C,4);

F4E4 =  E = prune spectralSequence K;

F4E5 =  E^infinity

F5E0 =  B = QQ[a..d];

F5E1 =  J = ideal vars B;

F5E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F5E3 =  K = filteredComplex(J,C,4);

F5E4 =  E = prune spectralSequence K;

F5E5 =  hilbertPolynomial(E^3)

F6E0 =  B = QQ[a..d];

F6E1 =  J = ideal vars B;

F6E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F6E3 =  K = filteredComplex(J,C,4);

F6E4 =  E = prune spectralSequence K;

F6E5 =  pruningMaps E^2

F7E0 =  A = QQ[x,y];

F7E1 =  B = koszul vars A;

F7E2 =  C = koszul vars A;

F7E3 =  F' = (filteredComplex B) ** C

F7E4 =  F'' = B ** (filteredComplex C)

F8E0 =  A = QQ[a,b,c,d];

F8E1 =  D = simplicialComplex {a*d*c, a*b, a*c, b*c};

F8E2 =  F2D = D;

F8E3 =  F1D = simplicialComplex {a*c, d};

F8E4 =  F0D = simplicialComplex {a,d};

F8E5 =  K = filteredComplex({F2D, F1D, F0D},ReducedHomology => false);

F8E6 =  C = K_infinity;

F8E7 =  prune HH C

F8E8 =  E = spectralSequence(K);

F8E9 =  e = prune E;

F8E10 =  E^2

F8E11 =  e^2

F8E12 =  edgeComplex E

F8E13 =  prune edgeComplex E

F8E14 =  prune HH edgeComplex E

F9E0 =  S = ZZ[a00,a10,a20,a01,a11,a21,a02,a12,a22];

F9E1 =  Delta = simplicialComplex {a00*a10*a02, a02*a12*a10, a01*a02*a12, a01*a12*a11, a00*a01*a11, a00*a11*a10, a10*a12*a20, a12*a20*a22, a11*a12*a22, a11*a22*a21, a10*a11*a21, a10*a21*a20, a20*a22*a00, a22*a00*a01, a21*a22*a01, a21*a02*a01, a20*a21*a02, a20*a02*a00}

F9E2 =  C = truncate(chainComplex Delta,1)

F9E3 =  prune HH C

F9E4 =  F1Delta = Delta

F9E5 =  F0Delta = simplicialComplex {a00*a01,a01*a02,a00*a02,a10*a11,a10*a12,a11*a12,a21*a20,a20*a22,a21*a22}

F9E6 =  K = filteredComplex({F1Delta, F0Delta}, ReducedHomology => false)

F9E7 =  E = prune spectralSequence K

F9E8 =  E^0

F9E9 =  E^0 .dd

F9E10 =  E^1

F9E11 =  E^1 .dd

F9E12 =  E^2

F10E0 =  A = ZZ [s,t,u,v,w] ;

F10E1 =  K = filteredComplex(reverse {simplicialComplex {s}, simplicialComplex {s,t}, simplicialComplex {s,t,u}, simplicialComplex {s*t, u}, simplicialComplex {s*t, u, v}, simplicialComplex {s*t, u, v, w}, simplicialComplex {s*t, s*w ,u, v}, simplicialComplex {s*t, s*w ,t * w, u, v}, simplicialComplex {s*t, s*w ,t * w, u * v}, simplicialComplex {s*t, s*w ,t * w, u * v, s * v}, simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u}, simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w}, simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u}, simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u, t*u*w}, simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u, t*u*w, s*u*w}, simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u, t*u*w, s*u*w,s*t*u}, simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u, t*u*w, s*u*w,s*t*u, s*u*v}, simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u, t*u*w, s*u*w,s*t*u, s*u*v, s*t*w}}, ReducedHomology => false);

F10E2 =  E = prune spectralSequence K

F10E3 =  e = spectralSequence K

F10E4 =  apply(keys support E^11, i -> homologyIsomorphism(E, i#0, i#1, 11))

F10E5 =  apply(keys support e^11, i -> homologyIsomorphism(e, i#0, i#1, 11))

F11E0 =  needsPackage "SpectralSequences"

F11E1 =  A = QQ[x,y]

F11E2 =  C = koszul vars A

F11E3 =  K = filteredComplex C

F12E0 =  B = QQ[a..d];

F12E1 =  J = ideal vars B;

F12E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F12E3 =  K = filteredComplex(J,C,4);

F12E4 =  E = prune spectralSequence K;

F12E5 =  pruningMaps E^2

F13E0 =  A = QQ[a,b,c,d];

F13E1 =  D = simplicialComplex {a*d*c, a*b, a*c, b*c};

F13E2 =  F2D = D;

F13E3 =  F1D = simplicialComplex {a*c, d};

F13E4 =  F0D = simplicialComplex {a,d};

F13E5 =  K = filteredComplex({F2D, F1D, F0D},ReducedHomology => false);

F13E6 =  C = K_infinity;

F13E7 =  prune HH C

F13E8 =  E = spectralSequence(K);

F13E9 =  e = prune E;

F13E10 =  E^2

F13E11 =  e^2

F13E12 =  edgeComplex E

F13E13 =  prune edgeComplex E

F13E14 =  prune HH edgeComplex E

F14E0 =  A = ZZ [s,t,u,v,w] ;

F14E1 =  D0 = simplicialComplex {s} ;

F14E2 =  D1 = simplicialComplex {s,t} ;

F14E3 =  D2 = simplicialComplex {s,t,u} ;

F14E4 =  D3 = simplicialComplex {s*t, u} ;

F14E5 =  D4 = simplicialComplex {s*t, u, v} ;

F14E6 =  D5 = simplicialComplex {s*t, u, v, w} ;

F14E7 =  D6 = simplicialComplex {s*t, s*w ,u, v} ;

F14E8 =  D7 = simplicialComplex {s*t, s*w ,t * w, u, v} ;

F14E9 =  D8 = simplicialComplex {s*t, s*w ,t * w, u * v} ;

F14E10 =  D9 = simplicialComplex {s*t, s*w ,t * w, u * v, s * v} ;

F14E11 =  D10 = simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u} ;

F14E12 =  D11 = simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w} ;

F14E13 =  D12 = simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u} ;

F14E14 =  D13 = simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u, t*u*w} ;

F14E15 =  D14 = simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u, t*u*w, s*u*w} ;

F14E16 =  D15 = simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u, t*u*w, s*u*w,s*t*u} ;

F14E17 =  D16 = simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u, t*u*w, s*u*w,s*t*u, s*u*v} ;

F14E18 =  D17 = simplicialComplex {s*t, s*w ,t * w, u * v, s * v, s*u, u * w, t* u, t*u*w, s*u*w,s*t*u, s*u*v, s*t*w} ;

F14E19 =  L = reverse {D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17} ;

F14E20 =  K = filteredComplex (L, ReducedHomology => false) ;

F14E21 =  E = prune spectralSequence K ;

F14E22 =  E^0

F14E23 =  E^1 .dd

F14E24 =  E^8

F14E25 =  E^8 .dd

F14E26 =  E^9

F14E27 =  E^9 .dd

F14E28 =  E^infinity

F14E29 =  prune HH K_infinity

F15E0 =  A = QQ[x,y];

F15E1 =  C = koszul vars A

F15E2 =  K = filteredComplex C;

F15E3 =  E = spectralSequence K

F16E0 =  R = QQ[x,y,z,w] ;

F16E1 =  c2 = matrix(R,{{1},{0}}) ;

F16E2 =  c1 = matrix(R,{{0,1}}) ;

F16E3 =  C = chainComplex({c1,c2})

F16E4 =  D_2 = image matrix(R,{{1}});

F16E5 =  D_1 = image matrix(R,{{1,0},{0,0}});

F16E6 =  D_0 = image matrix(R,{{1}});

F16E7 =  D = chainComplex({inducedMap(D_0,D_1,C.dd_1),inducedMap(D_1,D_2,C.dd_2)})

F16E8 =  E_2 = image matrix(R,{{0}});

F16E9 =  E_1 = image matrix(R,{{1,0},{0,0}});

F16E10 =  E_0 = image matrix(R,{{1}});

F16E11 =  E = chainComplex({inducedMap(E_0,E_1,C.dd_1),inducedMap(E_1,E_2,C.dd_2)})

F16E12 =  d = chainComplexMap(C,D,apply(spots C, i-> inducedMap(C_i,D_i,id_C _i)))

F16E13 =  e = chainComplexMap(C,E,apply(spots C, i->inducedMap(C_i,E_i, id_C _i)))

F16E14 =  isChainComplexMap d

F16E15 =  isChainComplexMap e

F16E16 =  K = filteredComplex({d,e})

F16E17 =  L = filteredComplex({d,e},Shift =>1)

F16E18 =  M = filteredComplex({d,e},Shift =>-1)

F17E0 =  B = QQ[a..d]

F17E1 =  J = ideal vars B

F17E2 =  C = complete res monomialCurveIdeal(B,{1,3,4})

F17E3 =  K = filteredComplex(J,C,4)

F17E4 =  e = prune spectralSequence K

F17E5 =  e^2

F17E6 =  assert(all(keys support e^0, j -> isIsomorphism homologyIsomorphism(e,j#0,j#1,0)))

F17E7 =  assert(all(keys support e^1, j -> isIsomorphism homologyIsomorphism(e,j#0,j#1,1)))

F17E8 =  assert(all(keys support e^2, j -> isIsomorphism homologyIsomorphism(e,j#0,j#1,2)))

F17E9 =  assert(all(keys support e^3, j -> isIsomorphism homologyIsomorphism(e,j#0,j#1,3)))

F17E10 =  assert(all(keys support e^4, j -> isIsomorphism homologyIsomorphism(e,j#0,j#1,4)))

F18E0 =  B = QQ[a..d]

F18E1 =  J = ideal vars B

F18E2 =  C = complete res monomialCurveIdeal(B,{1,3,4})

F18E3 =  K = filteredComplex(J,C,4)

F18E4 =  E = prune spectralSequence K

F18E5 =  E^4

F18E6 =  E^4 .dd

F19E0 =  A = QQ[x,y];

F19E1 =  C = koszul vars A

F19E2 =  K = filteredComplex C;

F19E3 =  chainComplex K

F19E4 =  K_infinity

F20E0 =  A = QQ[x,y];

F20E1 =  C = koszul vars A;

F20E2 =  K = filteredComplex C

F20E3 =  K_0

F20E4 =  K_1

F20E5 =  K_2

F20E6 =  K^(-1)

F20E7 =  K^(-2)

F20E8 =  K_infinity

F20E9 =  K_(-infinity)

F20E10 =  K^(-infinity)

F20E11 =  K^infinity

F21E0 =  A = QQ[x,y];

F21E1 =  C = koszul vars A

F21E2 =  K = filteredComplex C;

F21E3 =  E = spectralSequence K

F21E4 =  chainComplex E

F22E0 =  A = QQ[x,y]

F22E1 =  C = koszul vars A;

F22E2 =  K = filteredComplex C;

F22E3 =  E = spectralSequence K

F22E4 =  E_0

F22E5 =  E_0 ^{-1,0}

F22E6 =  E^0 _{1,0}

F23E0 =  R = QQ[x];

F23E1 =  S = R/ideal"x2";

F23E2 =  N = S^1/ideal"x";

F23E3 =  M = R^1/R_0;

F23E4 =  C = res M;

F23E5 =  C' = C ** S;

F23E6 =  D = res(N,LengthLimit => 10);

F23E7 =  E0 = C' ** (filteredComplex D);

F23E8 =  E = prune spectralSequence E0;

F23E9 =  R = QQ[x];

F23E10 =  S = R/ideal"x2";

F23E11 =  N = S^1/ideal"x";

F23E12 =  M = R^1/R_0;

F23E13 =  C = res M;

F23E14 =  C' = C ** S;

F23E15 =  D = res(N,LengthLimit => 10);

F23E16 =  E0 = C' ** (filteredComplex D);

F23E17 =  E = prune spectralSequence E0;

F23E18 =  netPage(E_2,{-5,0},{7,1})

F24E0 =  R = QQ[x,y,z,w, Degrees => {{1,0},{1,0},{0,1},{0,1}}];

F24E1 =  B = ideal(x*z, x*w, y*z, y*w);

F24E2 =  p_0 = x^2*z;

F24E3 =  p_1 = y^2*w;

F24E4 =  p_2 = y^2*z+x^2*w;

F24E5 =  I = ideal(p_0,p_1,p_2);

F24E6 =  B = B_*/(x -> x^2)//ideal;

F24E7 =  G = complete res image gens B;

F24E8 =  F = koszul gens I;

F24E9 =  K = Hom(G, filteredComplex(F));

F24E10 =  E = prune spectralSequence K;

F24E11 =  E^1

F24E12 =  E^2

F24E13 =  E^2_{3,-1}

F24E14 =  basis({0,0}, E^2_{3, -1} ** R^{{2, 3}})

F24E15 =  E^2 .dd_{3, -1}

F24E16 =  basis({0,0}, image E^2 .dd_{3,-1} ** R^{{2,3}})

F24E17 =  basis({0,0}, E^2_{1,0} ** R^{{2,3}})

F24E18 =  basis({0,0}, E^2 _{3, -1} ** R^{{6,1}})

F24E19 =  isIsomorphism(E^2 .dd_{3, -1})

F25E0 =  S = ZZ[v1,v2,v3,v4,v5,v6,v15,v12,v36,v34,v46,v25];

F25E1 =  twoSphere = simplicialComplex {v3*v4*v5, v5*v4*v15, v15*v34*v4, v15*v34*v1, v34*v1*v6, v34*v46*v6, v36*v46*v6, v3*v4*v46, v4*v46*v34, v3*v46*v36, v1*v6*v2, v6*v2*v36, v2*v36*v12,v36*v12*v3, v12*v3*v5, v12*v5*v25, v25*v5*v15, v2*v12*v25, v1*v2*v25, v1*v25*v15};

F25E2 =  C = truncate(chainComplex twoSphere,1)

F25E3 =  prune HH C

F25E4 =  R = ZZ[a,b,c,d,e,f];

F25E5 =  realProjectivePlane = simplicialComplex {a*b*c, b*c*d, c*d*e, a*e*d, e*b*a, e*f*b, d*f*b, a*f*d, c*f*e,a*f*c};

F25E6 =  B = truncate(chainComplex realProjectivePlane,1)

F25E7 =  prune HH B

F25E8 =  F0twoSphere = simplicialComplex {v1,v3,v5,v6, v4,v2, v36,v15, v34,v12, v46,v25}

F25E9 =  F1twoSphere = simplicialComplex {v3*v4, v1*v2,v3*v5, v1*v6,v4*v5, v2*v6, v5*v15, v6*v36, v4*v34, v2*v12, v15*v34, v36*v12, v1*v15, v3*v36, v46*v34, v25*v12, v6*v34, v5*v12, v6*v46, v5*v25, v36*v46, v15*v25, v3*v46, v1*v25, v4*v15, v2*v36, v1*v34, v3*v12, v4*v46, v25*v2}

F25E10 =  F2twoSphere = twoSphere

F25E11 =  K = filteredComplex({F2twoSphere, F1twoSphere, F0twoSphere}, ReducedHomology => false)

F25E12 =  E = prune spectralSequence K

F25E13 =  E^0

F25E14 =  E^1

F25E15 =  E^0 .dd

F25E16 =  E^1 .dd

F25E17 =  E^2

F25E18 =  E^2 .dd

F26E0 =  A = QQ[x,y];

F26E1 =  C = koszul vars A

F26E2 =  support C

F26E3 =  D = truncate(C,1)

F26E4 =  spots D

F26E5 =  support D

F27E0 =  R = QQ[x,y,z,w];

F27E1 =  a = simplicialComplex {x*y*z, x*y, y*z, w*z}

F27E2 =  b = simplicialComplex {x*y, w}

F27E3 =  c = simplicialComplex {x,w}

F27E4 =  K = filteredComplex{a,b,c}

F27E5 =  E = spectralSequence K

F27E6 =  E^0

F27E7 =  F0 = minimalPresentation(E^0)

F27E8 =  E^0 .dd

F27E9 =  F0.dd

F27E10 =  E^1

F27E11 =  F1 = minimalPresentation(E^1)

F27E12 =  E^1 .dd

F27E13 =  F1.dd

F27E14 =  E^2

F27E15 =  F2 = minimalPresentation(E^2)

F27E16 =  E^2 .dd

F27E17 =  F2.dd

F27E18 =  E^infinity

F27E19 =  (prune E) ^infinity

F27E20 =  J = filteredComplex({a,b,c}, ReducedHomology => false)

F27E21 =  D = spectralSequence J

F27E22 =  D^0

F27E23 =  G0 = minimalPresentation(D^0)

F27E24 =  G0.dd

F27E25 =  D^1

F27E26 =  G1 = minimalPresentation(D^1)

F27E27 =  G1.dd

F27E28 =  D^2

F27E29 =  G2 = minimalPresentation(D^2)

F27E30 =  G2.dd

F27E31 =  D^infinity

F28E0 =  B = QQ[a..d];

F28E1 =  J = ideal vars B;

F28E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F28E3 =  K = filteredComplex(J,C,4);

F28E4 =  E = spectralSequence K;

F28E5 =  E_0

F28E6 =  E_1

F28E7 =  E_infinity

F29E0 =  A = QQ[x,y,z,w];

F29E1 =  B = res monomialCurveIdeal(A, {1,2,3});

F29E2 =  C = res monomialCurveIdeal(A, {1,3,4});

F29E3 =  F' = Hom(filteredComplex B, C)

F29E4 =  F'' = Hom(B,filteredComplex C)

F29E5 =  E' = prune spectralSequence F';

F29E6 =  E'' = prune spectralSequence F'' ;

F29E7 =  E' ^0

F29E8 =  E' ^ 0 .dd

F29E9 =  E'' ^0

F29E10 =  E'' ^1

F30E0 =  B = QQ[a..d];

F30E1 =  J = ideal vars B;

F30E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F30E3 =  K = filteredComplex(J,C,4);

F30E4 =  E = prune spectralSequence K;

F30E5 =  E^3

F30E6 =  basis(0,E^3)

F31E0 =  A = QQ[x,y]

F31E1 =  C = koszul vars A;

F31E2 =  K = filteredComplex C;

F31E3 =  E = spectralSequence K

F31E4 =  E^0

F31E5 =  E^0 _{1,0}

F31E6 =  E_0 ^{-1,0}

F32E0 =  S = ZZ/101[a00,a10,a20,a01,a11,a21,a02,a12,a22];

F32E1 =  Delta = simplicialComplex {a00*a02*a10, a02*a12*a10, a01*a02*a12, a01*a11*a12, a00*a01*a11, a00*a10*a11, a12*a10*a20, a12*a20*a22, a11*a12*a22, a11*a22*a21, a10*a11*a21, a10*a21*a20, a20*a22*a00, a22*a00*a02, a21*a22*a02, a21*a02*a01, a20*a21*a01, a20*a01*a00}

F32E2 =  C = truncate(chainComplex Delta,1)

F32E3 =  prune HH C

F32E4 =  F1Delta = Delta;

F32E5 =  F0Delta = simplicialComplex {a00*a01, a01*a02, a00*a02, a10*a11,a11*a12,a10*a12, a21*a20,a21*a22,a20*a22};

F32E6 =  K = filteredComplex({F1Delta, F0Delta}, ReducedHomology => false) ;

F32E7 =  E = prune spectralSequence K

F32E8 =  E^0

F32E9 =  E^0 .dd

F32E10 =  E^1

F32E11 =  E^1 .dd

F32E12 =  E^2

F33E0 =  B = QQ[a..d];

F33E1 =  J = ideal vars B;

F33E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F33E3 =  K = filteredComplex(J,C,4);

F33E4 =  E = prune spectralSequence K;

F33E5 =  e = spectralSequence K;

F33E6 =  e^3

F33E7 =  E^3

F34E0 =  A = QQ[x,y,z,w];

F34E1 =  M = monomialCurveIdeal(A,{1,2,3});

F34E2 =  N = monomialCurveIdeal(A,{1,3,4});

F34E3 =  K = res M

F34E4 =  J = res N

F34E5 =  E = prune spectralSequence((filteredComplex K) ** J)

F34E6 =  F = prune spectralSequence((K ** (filteredComplex J)))

F34E7 =  E^0

F34E8 =  E^0 .dd

F34E9 =  F^0

F34E10 =  E^1

F34E11 =  F^1

F34E12 =  E^2

F34E13 =  F^2

F35E0 =  B = QQ[a..d];

F35E1 =  J = ideal vars B;

F35E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F35E3 =  K = filteredComplex(J,C,4);

F35E4 =  E = spectralSequence K

F35E5 =  E_3 .dd^{1,-2}

F36E0 =  B = QQ[a..d];

F36E1 =  J = ideal vars B;

F36E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F36E3 =  K = filteredComplex(J,C,4);

F36E4 =  E = spectralSequence K

F36E5 =  E^0

F36E6 =  E^0 .dd;

F36E7 =  E^infinity

F37E0 =  R = ZZ/101[a_0..b_1, Degrees=>{2:{1,0},2:{0,1}}]; -- PP^1 x PP^1

F37E1 =  B = intersect(ideal(a_0,a_1),ideal(b_0,b_1)) ; -- irrelevant ideal

F37E2 =  B = B_*/(x -> x^5)//ideal ; -- Sufficentily high Frobenius power

F37E3 =  G = res image gens B ;

F37E4 =  I = ideal random(R^1, R^{{-3,-3}}) ; -- ideal of C

F37E5 =  F = res comodule I

F37E6 =  K = Hom(G , filteredComplex (F ** R^{{1,0}})) ; -- Twist F by a line of ruling and make filtered complex whose ss abuts to HH OO_C(1,0)

F37E7 =  E = prune spectralSequence K ; --the spectral sequence degenerates on the second page

F37E8 =  E^1

F37E9 =  E^2 ; -- output is a mess

F37E10 =  basis({0,0}, E^2_{0,0}) --  == HH^0 OO_C(1,0)

F37E11 =  basis({0,0}, E^2_{1,-2}) --  == HH^1 OO_C(1,0)

F38E0 =  needsPackage "SpectralSequences"

F38E1 =  R = QQ[x,y,z,w]

F38E2 =  d2 = matrix(R,{{1},{0}})

F38E3 =  d1 = matrix(R,{{0,1}})

F38E4 =  C = chainComplex({d1,d2})

F38E5 =  D_2 = image matrix(R,{{1}})

F38E6 =  D_1 = image matrix(R,{{1,0},{0,0}})

F38E7 =  D_0 = image matrix(R,{{1}})

F38E8 =  D = chainComplex({inducedMap(D_0,D_1,C.dd_1),inducedMap(D_1,D_2,C.dd_2)})

F38E9 =  d = chainComplexMap(C,D,apply(spots C, i-> inducedMap(C_i,D_i,id_C _i)))

F38E10 =  isChainComplexMap d

F38E11 =  d == chainComplexMap(C,D,{inducedMap(C_0,D_0,id_(C_0)),inducedMap(C_1,D_1,id_(C_1)),inducedMap(C_2,D_2,id_(C_2))})

F38E12 =  E_2 = image matrix(R,{{0}})

F38E13 =  E_1 = image matrix(R,{{1,0},{0,0}})

F38E14 =  E_0 = image matrix(R,{{1}})

F38E15 =  E = chainComplex({inducedMap(E_0,E_1,C.dd_1),inducedMap(E_1,E_2,C.dd_2)})

F38E16 =  e = chainComplexMap(C,E,apply(spots C, i->inducedMap(C_i,D_i, id_C _i)))

F38E17 =  K = filteredComplex({d,e})

F38E18 =  L = filteredComplex({d,e},Shift => 1)

F38E19 =  M = filteredComplex({d,e},Shift => -1)

F38E20 =  D = simplicialComplex {x*y*z, x*y, y*z, w*z}

F38E21 =  E = simplicialComplex {x*y, w}

F38E22 =  F = simplicialComplex {x,w}

F38E23 =  K = filteredComplex{D,E,F}

F38E24 =  filteredComplex({D,E,F}, ReducedHomology => false)

F39E0 =  B = QQ[a..d];

F39E1 =  J = ideal vars B;

F39E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F39E3 =  K = filteredComplex(J,C,4);

F39E4 =  E = spectralSequence K;

F39E5 =  E^0

F39E6 =  E^1

F39E7 =  E^infinity

F40E0 =  A = QQ[a,b,c,d];

F40E1 =  D = simplicialComplex {a*d*c, a*b, a*c, b*c};

F40E2 =  F2D = D;

F40E3 =  F1D = simplicialComplex {a*c, d};

F40E4 =  F0D = simplicialComplex {a,d};

F40E5 =  K = filteredComplex {F2D, F1D, F0D};

F40E6 =  E = spectralSequence(K) ;

F40E7 =  C = filteredComplex E

F41E0 =  A = QQ[x,y,z,w];

F41E1 =  B = res monomialCurveIdeal(A,{1,2,3});

F41E2 =  C = res monomialCurveIdeal(A,{1,3,4});

F41E3 =  F' = (filteredComplex B) ** C

F41E4 =  F'' = B ** (filteredComplex C)

F41E5 =  E' = prune spectralSequence F';

F41E6 =  E'' = prune spectralSequence F'';

F41E7 =  E' ^0

F41E8 =  E' ^ 1

F41E9 =  E'' ^0

F41E10 =  E'' ^1

F42E0 =  k=QQ;

F42E1 =  R=k[a,b,c];

F42E2 =  S=k[s,t];

F42E3 =  f = map(S,R,{s^2,s*t,t^2});

F42E4 =  N = coker vars S;

F42E5 =  M = coker vars R --;

F42E6 =  F := complete res N;

F42E7 =  pushFwdF := pushFwd(f,F);

F42E8 =  G := complete res M;

F42E9 =  E := spectralSequence(filteredComplex(G) ** pushFwdF);

F42E10 =  EE := spectralSequence(G ** (filteredComplex pushFwdF));

F42E11 =  e = prune E;

F42E12 =  ee = prune EE;

F42E13 =  e^0

F42E14 =  e^1

F42E15 =  e^2

F42E16 =  e^infinity

F42E17 =  ee^0

F43E0 =  B = QQ[a..d];

F43E1 =  C = koszul vars B

F43E2 =  truncate(C,1)

F43E3 =  truncate(C,-1)

F43E4 =  truncate(C,-10)

F43E5 =  truncate(C,10)

F44E0 =  S = ZZ/101[x,y];

F44E1 =  I = ideal(x^2,x*y,y^2);

F44E2 =  R = S/I;

F44E3 =  kR = coker vars R;

F44E4 =  kS = coker vars S;

F44E5 =  CS = res kS;

F44E6 =  CR = res(kR,LengthLimit=>6);

F44E7 =  CS' = CS**R;

F44E8 =  E = prune spectralSequence (CS' ** filteredComplex CR);

F44E9 =  use ZZ[t]

F44E10 =  easyPresentation = (P,n,m) -> (

         transpose matrix apply(n,

             i-> apply(m,

                 j-> (length (P_{i,j}))*t^(

                     if (L = unique flatten degrees P_{i,j})!= {} then first L else 0)

                 )

             ));

F44E11 =  easyPresentation(E_infinity,6,3)

F44E12 =  easyPresentation(E_1,6,3)

F44E13 =  easyPresentation(E_2,6,3)

F44E14 =  easyPresentation(E_3,6,3)

F44E15 =  length image ((E_2).dd_{3,0})

F44E16 =  length image (E_3).dd_{3,0}

F45E0 =  A = QQ[a,b,c,d];

F45E1 =  D = simplicialComplex {a*d*c, a*b, a*c, b*c};

F45E2 =  F2D = D

F45E3 =  F1D = simplicialComplex {a*c, d}

F45E4 =  F0D = simplicialComplex {a,d}

F45E5 =  K= filteredComplex({F2D, F1D, F0D},ReducedHomology => false)

F45E6 =  E = prune spectralSequence(K)

F45E7 =  E^0

F45E8 =  E^1

F45E9 =  E^2

F45E10 =  E^3

F45E11 =  E^infinity

F45E12 =  C = K_infinity

F45E13 =  prune HH C

F45E14 =  E^2 .dd

F45E15 =  rank ker E^2 .dd_{2,-1}

F45E16 =  rank image E^2 .dd_{2,-1}

F46E0 =  A = QQ[x,y,z,w];

F46E1 =  B = res monomialCurveIdeal(A, {1,2,3});

F46E2 =  C = res monomialCurveIdeal(A, {1,3,4});

F46E3 =  F' = Hom(filteredComplex B, C)

F46E4 =  F'' = Hom(B,filteredComplex C)

F47E0 =  B = QQ[a_0..a_2,b_0..b_2,c_0..c_2,d_0..d_2];

F47E1 =  l1 = {a_0*b_0*b_1*c_1,a_0*b_0*c_0*c_1,a_0*a_1*b_1*c_1,b_0*b_1*c_1*d_1,b_0*c_0*c_1*d_2,a_0*a_1*c_1*d_2,a_0*c_0*c_1*d_2,b_0*c_1*d_1*d_2};

F47E2 =  l2 = {b_1*c_1*c_2*a_2,b_1*c_1*a_1*a_2,b_1*b_2*c_2*a_2,c_1*c_2*a_2*d_1,c_1*a_1*a_2*d_2,b_1*b_2*a_2*d_2,b_1*a_1*a_2*d_2,c_1*a_2*d_1*d_2};

F47E3 =  l3 = {c_2*a_2*a_0*b_0,c_2*a_2*b_2*b_0,c_2*c_0*a_0*b_0,a_2*a_0*b_0*d_1,a_2*b_2*b_0*d_2,c_2*c_0*b_0*d_2,c_2*b_2*b_0*d_2,a_2*b_0*d_1*d_2};

F47E4 =  l4 = {a_0*b_0*b_1*d_1,a_0*b_1*d_0*d_1,b_1*c_1*c_2*d_1,b_1*c_2*d_0*d_1,a_0*a_2*c_2*d_1,a_0*c_2*d_0*d_1};

F47E5 =  l5 = {a_0*b_1*d_0*d_2,a_0*a_1*b_1*d_2,b_1*c_2*d_0*d_2,b_1*b_2*c_2*d_2,a_0*c_2*d_0*d_2,a_0*c_0*c_2*d_2};

F47E6 =  S3 = simplicialComplex(join(l1,l2,l3,l4,l5));

F47E7 =  f1l1 = {a_0*b_0*b_1,a_0*a_1*b_1,a_0*c_0*c_1,a_0*a_1*c_1,a_0*a_1*d_2,d_1*d_2,b_0*b_1*c_1,b_0*c_0*c_1,b_0*b_1*d_1,b_0*d_1*d_2,c_1*d_1*d_2,c_0*c_1*d_2};

F47E8 =  f1l2 = {b_1*a_1*a_2,b_1*b_2*a_2,c_1*c_2*a_2,c_1*a_1*a_2,a_1*a_2*d_2,a_2*d_1*d_2,b_1*c_1*c_2,b_1*b_2*c_2,b_1*b_2*d_2,d_1*d_2,c_1*d_1*d_2,c_1*c_2*d_1};

F47E9 =  f1l3 = {a_2*a_0*b_0,a_2*b_2*b_0, c_2*a_2*a_0,c_2*c_0*a_0,a_2*a_0*d_1,a_2*d_1*d_2,b_2*b_0*c_2,c_2*c_0*b_0,b_2*b_0*d_2,b_0*d_1*d_2,c_2*c_0*d_2,d_1*d_2};

F47E10 =  f1l4 = {a_0*b_0*b_1,a_0*a_2,a_0*a_2*c_2,c_1*c_2,a_0*d_0*d_1,a_0*a_2*d_1,b_1*c_1*c_2,b_0*b_1,b_0*b_1*d_1,b_1*d_0*d_1,c_1*c_2*d_1,c_2*d_0*d_1}

F47E11 =  f1l5 = {a_0*a_1*b_1,b_1*b_2,a_0*c_0*c_2,a_0*a_1,a_0*d_0*d_2,a_0*a_1*d_2,b_1*b_2*c_2,c_0*c_2,b_1*d_0*d_2,b_1*b_2*d_2,c_2*d_0*d_2,c_0*c_2*d_2};

F47E12 =  F1S3 = simplicialComplex(join(f1l1,f1l2,f1l3,f1l4,f1l5));

F47E13 =  f0l1 = {a_0*a_1,b_0*b_1,c_0*c_1,d_1*d_2};

F47E14 =  f0l2 = {a_1*a_2,b_1*b_2,c_1*c_2,d_1*d_2};

F47E15 =  f0l3 = {a_0*a_2,b_0*b_2,c_0*c_2,d_1*d_2};

F47E16 =  f0l4 = {a_0*a_2,b_0*b_1,c_1*c_2,d_0*d_1};

F47E17 =  f0l5 = {a_0*a_1,b_1*b_2,c_0*c_2,d_0*d_2};

F47E18 =  F0S3 = simplicialComplex(join(f0l1,f0l2,f0l3,f0l4,f0l5));

F47E19 =  K = filteredComplex({S3,F1S3,F0S3}, ReducedHomology => false);

F47E20 =  E = prune spectralSequence K;

F47E21 =  E0 = E^0

F47E22 =  E0.dd

F47E23 =  E1 = E^1

F47E24 =  E1.dd

F47E25 =  E2 = E^2

F47E26 =  E2.dd

F47E27 =  E3 = E^3

F47E28 =  E3.dd

F48E0 =  B = QQ[a..d];

F48E1 =  J = ideal vars B;

F48E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F48E3 =  K = filteredComplex(J,C,4);

F48E4 =  E = spectralSequence K;

F48E5 =  E^3

F48E6 =  prune E^3

F49E0 =  B = QQ[a..d];

F49E1 =  J = ideal vars B;

F49E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F49E3 =  K = filteredComplex(J,C,4);

F49E4 =  E = spectralSequence K

F49E5 =  E^0

F50E0 =  B = QQ[a..d];

F50E1 =  J = ideal vars B;

F50E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F50E3 =  K = filteredComplex(J,C,4);

F50E4 =  E = spectralSequence K

F50E5 =  E^3 .dd_{-1,2}

F51E0 =  A = QQ[a,b,c];

F51E1 =  D = simplicialComplex({a*b*c})

F51E2 =  F3D = D;

F51E3 =  F2D = simplicialComplex({a*b,a*c,b*c})

F51E4 =  F1D = simplicialComplex({a*b,c})

F51E5 =  F0D = simplicialComplex({a,b})

F51E6 =  K = filteredComplex({F3D,F2D,F1D,F0D}, ReducedHomology => false)

F51E7 =  E = prune spectralSequence K

F51E8 =  E^0

F51E9 =  E^0 .dd

F51E10 =  E^0

F51E11 =  E^1

F51E12 =  E^0 .dd_{1,0}

F51E13 =  E^1 .dd

F51E14 =  E^1

F51E15 =  E^0

F51E16 =  E^2

F51E17 =  prune HH K_infinity

F51E18 =  E^infinity

F52E0 =  A = QQ[a,b,c]

F52E1 =  D = simplicialComplex {a*b*c}

F52E2 =  F2D = D

F52E3 =  F1D = simplicialComplex {a*b,a*c,b*c}

F52E4 =  F0D = simplicialComplex {a,b,c}

F52E5 =  K = filteredComplex({F2D,F1D,F0D}, ReducedHomology => false)

F52E6 =  C = K_infinity

F52E7 =  E = prune spectralSequence K

F52E8 =  E^0

F52E9 =  E^0 .dd

F52E10 =  E^1

F52E11 =  E^1 .dd

F52E12 =  E^2

F52E13 =  E^2 .dd

F52E14 =  E^infinity

F52E15 =  prune HH K_infinity

F53E0 =  R = ZZ/101[a_0..b_1, Degrees=>{2:{1,0},2:{0,1}}]; -- PP^1 x PP^1

F53E1 =  M = intersect(ideal(a_0,a_1),ideal(b_0,b_1)) ; -- irrelevant ideal

F53E2 =  M = M_*/(x -> x^5)//ideal ; -- Suitably high Frobenius power of M

F53E3 =  G = res image gens M ;

F53E4 =  I = ideal random(R^1, R^{{-3,-3}}) -- ideal of C

F53E5 =  b = chainComplex gradedModule R^{{1,0}} -- make line bundle a chain complex

F53E6 =  a = chainComplex gradedModule R^{{-2,-3}}

F53E7 =  f = chainComplexMap(b, a,{random(R^1, R^{{-3,-3}})}) ;

F53E8 =  K = filteredComplex ({Hom(G,f)}) ; -- the two step filtered complex we want

F53E9 =  E = prune spectralSequence K ;

F53E10 =  E^1 .dd_{1,-2} -- the connecting map HH^1(C, OO_C(1,0)) --> HH^2(X, OO_X(-2,-3))

F53E11 =  basis({0,0}, image E^1 .dd_{1,-2})  -- image 2-dimensional

F53E12 =  basis({0,0}, ker E^1 .dd_{1,-2}) -- map is injective

F53E13 =  basis({0,0}, target E^1 .dd_{1,-2}) -- target 2-dimensional

F53E14 =  basis({0,0}, source E^1 .dd_{1,-2}) -- source 2 dimensional

F53E15 =  prune connectingMorphism(Hom(G, f), - 2) ;

F53E16 =  prune connectingMorphism(Hom(G, f), - 2) == E^1 .dd_{1, -2}

F54E0 =  B = QQ[a..d];

F54E1 =  J = ideal vars B;

F54E2 =  C = complete res monomialCurveIdeal(B,{1,3,4});

F54E3 =  K = filteredComplex(J,C,4);

F54E4 =  E = prune spectralSequence K;

F54E5 =  pruningMaps E^2

exampleIDS = {"F0E0", "F0E1", "F0E2", "F0E3", "F0E4", "F0E5", "F1E0", "F1E1", "F1E2", "F1E3", "F2E0", "F2E1", "F2E2", "F2E3", "F2E4", "F2E5", "F2E6", "F2E7", "F3E0", "F3E1", "F3E2", "F3E3", "F3E4", "F3E5", "F3E6", "F3E7", "F3E8", "F3E9", "F3E10", "F3E11", "F3E12", "F3E13", "F3E14", "F3E15", "F3E16", "F3E17", "F3E18", "F3E19", "F3E20", "F4E0", "F4E1", "F4E2", "F4E3", "F4E4", "F4E5", "F5E0", "F5E1", "F5E2", "F5E3", "F5E4", "F5E5", "F6E0", "F6E1", "F6E2", "F6E3", "F6E4", "F6E5", "F7E0", "F7E1", "F7E2", "F7E3", "F7E4", "F8E0", "F8E1", "F8E2", "F8E3", "F8E4", "F8E5", "F8E6", "F8E7", "F8E8", "F8E9", "F8E10", "F8E11", "F8E12", "F8E13", "F8E14", "F9E0", "F9E1", "F9E2", "F9E3", "F9E4", "F9E5", "F9E6", "F9E7", "F9E8", "F9E9", "F9E10", "F9E11", "F9E12", "F10E0", "F10E1", "F10E2", "F10E3", "F10E4", "F10E5", "F11E0", "F11E1", "F11E2", "F11E3", "F12E0", "F12E1", "F12E2", "F12E3", "F12E4", "F12E5", "F13E0", "F13E1", "F13E2", "F13E3", "F13E4", "F13E5", "F13E6", "F13E7", "F13E8", "F13E9", "F13E10", "F13E11", "F13E12", "F13E13", "F13E14", "F14E0", "F14E1", "F14E2", "F14E3", "F14E4", "F14E5", "F14E6", "F14E7", "F14E8", "F14E9", "F14E10", "F14E11", "F14E12", "F14E13", "F14E14", "F14E15", "F14E16", "F14E17", "F14E18", "F14E19", "F14E20", "F14E21", "F14E22", "F14E23", "F14E24", "F14E25", "F14E26", "F14E27", "F14E28", "F14E29", "F15E0", "F15E1", "F15E2", "F15E3", "F16E0", "F16E1", "F16E2", "F16E3", "F16E4", "F16E5", "F16E6", "F16E7", "F16E8", "F16E9", "F16E10", "F16E11", "F16E12", "F16E13", "F16E14", "F16E15", "F16E16", "F16E17", "F16E18", "F17E0", "F17E1", "F17E2", "F17E3", "F17E4", "F17E5", "F17E6", "F17E7", "F17E8", "F17E9", "F17E10", "F18E0", "F18E1", "F18E2", "F18E3", "F18E4", "F18E5", "F18E6", "F19E0", "F19E1", "F19E2", "F19E3", "F19E4", "F20E0", "F20E1", "F20E2", "F20E3", "F20E4", "F20E5", "F20E6", "F20E7", "F20E8", "F20E9", "F20E10", "F20E11", "F21E0", "F21E1", "F21E2", "F21E3", "F21E4", "F22E0", "F22E1", "F22E2", "F22E3", "F22E4", "F22E5", "F22E6", "F23E0", "F23E1", "F23E2", "F23E3", "F23E4", "F23E5", "F23E6", "F23E7", "F23E8", "F23E9", "F23E10", "F23E11", "F23E12", "F23E13", "F23E14", "F23E15", "F23E16", "F23E17", "F23E18", "F24E0", "F24E1", "F24E2", "F24E3", "F24E4", "F24E5", "F24E6", "F24E7", "F24E8", "F24E9", "F24E10", "F24E11", "F24E12", "F24E13", "F24E14", "F24E15", "F24E16", "F24E17", "F24E18", "F24E19", "F25E0", "F25E1", "F25E2", "F25E3", "F25E4", "F25E5", "F25E6", "F25E7", "F25E8", "F25E9", "F25E10", "F25E11", "F25E12", "F25E13", "F25E14", "F25E15", "F25E16", "F25E17", "F25E18", "F26E0", "F26E1", "F26E2", "F26E3", "F26E4", "F26E5", "F27E0", "F27E1", "F27E2", "F27E3", "F27E4", "F27E5", "F27E6", "F27E7", "F27E8", "F27E9", "F27E10", "F27E11", "F27E12", "F27E13", "F27E14", "F27E15", "F27E16", "F27E17", "F27E18", "F27E19", "F27E20", "F27E21", "F27E22", "F27E23", "F27E24", "F27E25", "F27E26", "F27E27", "F27E28", "F27E29", "F27E30", "F27E31", "F28E0", "F28E1", "F28E2", "F28E3", "F28E4", "F28E5", "F28E6", "F28E7", "F29E0", "F29E1", "F29E2", "F29E3", "F29E4", "F29E5", "F29E6", "F29E7", "F29E8", "F29E9", "F29E10", "F30E0", "F30E1", "F30E2", "F30E3", "F30E4", "F30E5", "F30E6", "F31E0", "F31E1", "F31E2", "F31E3", "F31E4", "F31E5", "F31E6", "F32E0", "F32E1", "F32E2", "F32E3", "F32E4", "F32E5", "F32E6", "F32E7", "F32E8", "F32E9", "F32E10", "F32E11", "F32E12", "F33E0", "F33E1", "F33E2", "F33E3", "F33E4", "F33E5", "F33E6", "F33E7", "F34E0", "F34E1", "F34E2", "F34E3", "F34E4", "F34E5", "F34E6", "F34E7", "F34E8", "F34E9", "F34E10", "F34E11", "F34E12", "F34E13", "F35E0", "F35E1", "F35E2", "F35E3", "F35E4", "F35E5", "F36E0", "F36E1", "F36E2", "F36E3", "F36E4", "F36E5", "F36E6", "F36E7", "F37E0", "F37E1", "F37E2", "F37E3", "F37E4", "F37E5", "F37E6", "F37E7", "F37E8", "F37E9", "F37E10", "F37E11", "F38E0", "F38E1", "F38E2", "F38E3", "F38E4", "F38E5", "F38E6", "F38E7", "F38E8", "F38E9", "F38E10", "F38E11", "F38E12", "F38E13", "F38E14", "F38E15", "F38E16", "F38E17", "F38E18", "F38E19", "F38E20", "F38E21", "F38E22", "F38E23", "F38E24", "F39E0", "F39E1", "F39E2", "F39E3", "F39E4", "F39E5", "F39E6", "F39E7", "F40E0", "F40E1", "F40E2", "F40E3", "F40E4", "F40E5", "F40E6", "F40E7", "F41E0", "F41E1", "F41E2", "F41E3", "F41E4", "F41E5", "F41E6", "F41E7", "F41E8", "F41E9", "F41E10", "F42E0", "F42E1", "F42E2", "F42E3", "F42E4", "F42E5", "F42E6", "F42E7", "F42E8", "F42E9", "F42E10", "F42E11", "F42E12", "F42E13", "F42E14", "F42E15", "F42E16", "F42E17", "F43E0", "F43E1", "F43E2", "F43E3", "F43E4", "F43E5", "F44E0", "F44E1", "F44E2", "F44E3", "F44E4", "F44E5", "F44E6", "F44E7", "F44E8", "F44E9", "F44E10", "F44E11", "F44E12", "F44E13", "F44E14", "F44E15", "F44E16", "F45E0", "F45E1", "F45E2", "F45E3", "F45E4", "F45E5", "F45E6", "F45E7", "F45E8", "F45E9", "F45E10", "F45E11", "F45E12", "F45E13", "F45E14", "F45E15", "F45E16", "F46E0", "F46E1", "F46E2", "F46E3", "F46E4", "F47E0", "F47E1", "F47E2", "F47E3", "F47E4", "F47E5", "F47E6", "F47E7", "F47E8", "F47E9", "F47E10", "F47E11", "F47E12", "F47E13", "F47E14", "F47E15", "F47E16", "F47E17", "F47E18", "F47E19", "F47E20", "F47E21", "F47E22", "F47E23", "F47E24", "F47E25", "F47E26", "F47E27", "F47E28", "F48E0", "F48E1", "F48E2", "F48E3", "F48E4", "F48E5", "F48E6", "F49E0", "F49E1", "F49E2", "F49E3", "F49E4", "F49E5", "F50E0", "F50E1", "F50E2", "F50E3", "F50E4", "F50E5", "F51E0", "F51E1", "F51E2", "F51E3", "F51E4", "F51E5", "F51E6", "F51E7", "F51E8", "F51E9", "F51E10", "F51E11", "F51E12", "F51E13", "F51E14", "F51E15", "F51E16", "F51E17", "F51E18", "F52E0", "F52E1", "F52E2", "F52E3", "F52E4", "F52E5", "F52E6", "F52E7", "F52E8", "F52E9", "F52E10", "F52E11", "F52E12", "F52E13", "F52E14", "F52E15", "F53E0", "F53E1", "F53E2", "F53E3", "F53E4", "F53E5", "F53E6", "F53E7", "F53E8", "F53E9", "F53E10", "F53E11", "F53E12", "F53E13", "F53E14", "F53E15", "F53E16", "F54E0", "F54E1", "F54E2", "F54E3", "F54E4", "F54E5"}
